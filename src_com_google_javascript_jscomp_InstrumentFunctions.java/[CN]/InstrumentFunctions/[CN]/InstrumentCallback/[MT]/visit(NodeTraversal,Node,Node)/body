{
  if (!n.isFunction()) {
    return;
  }
  int id=functionNames.getFunctionId(n);
  if (id < 0) {
    return;
  }
  String name=functionNames.getFunctionName(n);
  if (!reportFunctionName.isEmpty()) {
    Node body=n.getLastChild();
    Node call=IR.call(IR.name(reportFunctionName),IR.number(id),IR.string(name),IR.name("arguments"));
    call.putBooleanProp(Node.FREE_CALL,true);
    Node expr=IR.exprResult(call);
    expr.useSourceInfoFromForTree(n);
    body.addChildToFront(expr);
    compiler.reportCodeChange();
  }
  if (!reportFunctionExitName.isEmpty()) {
    (new InstrumentReturns(id,name)).process(n);
  }
  if (!definedFunctionName.isEmpty()) {
    Node call=IR.call(IR.name(definedFunctionName),IR.number(id),IR.string(name));
    call.putBooleanProp(Node.FREE_CALL,true);
    call.useSourceInfoFromForTree(n);
    Node expr=NodeUtil.newExpr(call);
    Node addingRoot=null;
    if (NodeUtil.isFunctionDeclaration(n)) {
      JSModule module=t.getModule();
      addingRoot=compiler.getNodeForCodeInsertion(module);
      addingRoot.addChildToFront(expr);
    }
 else {
      Node beforeChild=n;
      for (      Node ancestor : n.getAncestors()) {
        Token type=ancestor.getToken();
        if (type == Token.BLOCK || type == Token.SCRIPT) {
          addingRoot=ancestor;
          break;
        }
        beforeChild=ancestor;
      }
      addingRoot.addChildBefore(expr,beforeChild);
    }
    compiler.reportCodeChange();
  }
}
