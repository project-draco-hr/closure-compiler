{
  if (n.getType() != Token.FUNCTION) {
    return;
  }
  int id=functionNames.getFunctionId(n);
  if (id < 0) {
    return;
  }
  if (!reportFunctionName.isEmpty()) {
    Node body=n.getFirstChild().getNext().getNext();
    Node call=new Node(Token.CALL,Node.newString(Token.NAME,reportFunctionName),Node.newNumber(id));
    Node expr=new Node(Token.EXPR_RESULT,call);
    body.addChildToFront(expr);
    compiler.reportCodeChange();
  }
  if (!reportFunctionExitName.isEmpty()) {
    Node body=n.getFirstChild().getNext().getNext();
    (new InstrumentReturns(id)).process(body);
  }
  if (!definedFunctionName.isEmpty()) {
    Node call=new Node(Token.CALL,Node.newString(Token.NAME,definedFunctionName),Node.newNumber(id));
    Node expr=NodeUtil.newExpr(call);
    Node addingRoot=null;
    if (NodeUtil.isFunctionDeclaration(n)) {
      JSModule module=t.getModule();
      addingRoot=compiler.getNodeForCodeInsertion(module);
      addingRoot.addChildToFront(expr);
    }
 else {
      Node beforeChild=n;
      for (      Node ancestor : n.getAncestors()) {
        int type=ancestor.getType();
        if (type == Token.BLOCK || type == Token.SCRIPT) {
          addingRoot=ancestor;
          break;
        }
        beforeChild=ancestor;
      }
      addingRoot.addChildBefore(expr,beforeChild);
    }
    compiler.reportCodeChange();
  }
}
