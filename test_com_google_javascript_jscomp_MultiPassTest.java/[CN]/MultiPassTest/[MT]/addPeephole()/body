{
  passes.add(new PassFactory("peepholeOptimizations",false){
    @Override protected CompilerPass create(    AbstractCompiler compiler){
      final boolean late=false;
      return new PeepholeOptimizationsPass(compiler,new PeepholeSubstituteAlternateSyntax(late),new PeepholeReplaceKnownMethods(late),new PeepholeRemoveDeadCode(),new PeepholeFoldConstants(late),new PeepholeCollectPropertyAssignments());
    }
  }
);
}
