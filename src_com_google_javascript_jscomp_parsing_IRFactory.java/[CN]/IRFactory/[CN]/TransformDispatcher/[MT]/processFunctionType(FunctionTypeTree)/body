{
  LinkedHashMap<String,TypeDeclarationNode> requiredParams=new LinkedHashMap<>();
  LinkedHashMap<String,TypeDeclarationNode> optionalParams=new LinkedHashMap<>();
  String restName=null;
  TypeDeclarationNode restType=null;
  if (checkParameters(tree.formalParameterList.parameters)) {
    for (    ParseTree param : tree.formalParameterList.parameters) {
      TypeDeclarationNode type=null;
      if (param.type == ParseTreeType.TYPED_PARAMETER) {
        TypedParameterTree typedParam=param.asTypedParameter();
        type=(TypeDeclarationNode)transform(typedParam.typeAnnotation);
        param=typedParam.param;
      }
switch (param.type) {
case IDENTIFIER_EXPRESSION:
        requiredParams.put(param.asIdentifierExpression().identifierToken.value,type);
      break;
case OPTIONAL_PARAMETER:
    maybeWarnTypeSyntax(param,Feature.OPTIONAL_PARAMETER);
  optionalParams.put(param.asOptionalParameter().param.asIdentifierExpression().identifierToken.value,type);
break;
case REST_PARAMETER:
restName=param.asRestParameter().assignmentTarget.asIdentifierExpression().identifierToken.value;
restType=type;
break;
default :
throw new IllegalStateException("Illegal parameter type: " + param.type);
}
}
}
return cloneProps(functionType(transform(tree.returnType),requiredParams,optionalParams,restName,restType));
}
