{
  boolean seenOptional=false;
  boolean good=true;
  for (int i=0; i < params.size(); i++) {
    ParseTree param=params.get(i);
    Node type=null;
    if (param.type == ParseTreeType.TYPED_PARAMETER) {
      TypedParameterTree typedParam=param.asTypedParameter();
      type=transform(typedParam.typeAnnotation);
      param=typedParam.param;
    }
switch (param.type) {
case IDENTIFIER_EXPRESSION:
      if (seenOptional) {
        errorReporter.error("A required parameter cannot follow an optional parameter.",sourceName,lineno(param),charno(param));
        good=false;
      }
    break;
case OPTIONAL_PARAMETER:
  seenOptional=true;
break;
case REST_PARAMETER:
if (i != params.size() - 1) {
errorReporter.error("A rest parameter must be last in a parameter list.",sourceName,lineno(param),charno(param));
good=false;
}
if (type != null && type.getToken() != Token.ARRAY_TYPE) {
errorReporter.error("A rest parameter must be of an array type.",sourceName,lineno(param),charno(param));
good=false;
}
break;
default :
}
}
return good;
}
