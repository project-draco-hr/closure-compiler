{
  boolean isDeclaration=(functionTree.kind == FunctionDeclarationTree.Kind.DECLARATION);
  boolean isMember=(functionTree.kind == FunctionDeclarationTree.Kind.MEMBER);
  boolean isArrow=(functionTree.kind == FunctionDeclarationTree.Kind.ARROW);
  boolean isAsync=functionTree.isAsync;
  boolean isGenerator=functionTree.isGenerator;
  boolean isSignature=(functionTree.functionBody.type == ParseTreeType.EMPTY_STATEMENT);
  if (isGenerator) {
    maybeWarnForFeature(functionTree,Feature.GENERATORS);
  }
  if (isMember) {
    maybeWarnForFeature(functionTree,Feature.MEMBER_DECLARATIONS);
  }
  if (isArrow) {
    maybeWarnForFeature(functionTree,Feature.ARROW_FUNCTIONS);
  }
  if (isAsync) {
    maybeWarnForFeature(functionTree,Feature.ASYNC_FUNCTIONS);
  }
  IdentifierToken name=functionTree.name;
  Node newName;
  if (name != null) {
    newName=processNameWithInlineJSDoc(name);
  }
 else {
    if (isDeclaration || isMember) {
      errorReporter.error("unnamed function statement",sourceName,lineno(functionTree),charno(functionTree));
      newName=createMissingNameNode();
    }
 else {
      newName=newStringNode(Token.NAME,"");
    }
    setSourceInfo(newName,functionTree);
  }
  Node node=newNode(Token.FUNCTION);
  if (isMember) {
    newName.setString("");
  }
  node.addChildToBack(newName);
  maybeProcessGenerics(node.getFirstChild(),functionTree.generics);
  node.addChildToBack(transform(functionTree.formalParameterList));
  maybeProcessType(node,functionTree.returnType);
  Node bodyNode=transform(functionTree.functionBody);
  if (!isArrow && !isSignature && !bodyNode.isBlock()) {
    Preconditions.checkState(config.keepGoing == Config.RunMode.KEEP_GOING);
    bodyNode=IR.block();
  }
  parseDirectives(bodyNode);
  node.addChildToBack(bodyNode);
  node.setIsGeneratorFunction(isGenerator);
  node.setIsArrowFunction(isArrow);
  node.setIsAsyncFunction(isAsync);
  node.putBooleanProp(Node.OPT_ES6_TYPED,functionTree.isOptional);
  Node result;
  if (functionTree.kind == FunctionDeclarationTree.Kind.MEMBER) {
    setSourceInfo(node,functionTree);
    Node member=newStringNode(Token.MEMBER_FUNCTION_DEF,name.value);
    member.addChildToBack(node);
    member.setStaticMember(functionTree.isStatic);
    maybeProcessAccessibilityModifier(member,functionTree.access);
    node.setDeclaredTypeExpression(node.getDeclaredTypeExpression());
    result=member;
  }
 else {
    result=node;
  }
  return result;
}
