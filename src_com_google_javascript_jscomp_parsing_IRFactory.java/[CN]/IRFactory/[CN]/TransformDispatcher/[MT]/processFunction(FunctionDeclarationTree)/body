{
  boolean isDeclaration=(functionTree.kind == FunctionDeclarationTree.Kind.DECLARATION);
  boolean isMember=(functionTree.kind == FunctionDeclarationTree.Kind.MEMBER);
  boolean isArrow=(functionTree.kind == FunctionDeclarationTree.Kind.ARROW);
  boolean isGenerator=functionTree.isGenerator;
  if (!isEs6Mode()) {
    if (isGenerator) {
      maybeWarnEs6Feature(functionTree,"generators");
    }
    if (isMember) {
      maybeWarnEs6Feature(functionTree,"member declarations");
    }
    if (isArrow) {
      maybeWarnEs6Feature(functionTree,"short function syntax");
    }
  }
  IdentifierToken name=functionTree.name;
  Node newName;
  if (name != null) {
    newName=processNameWithInlineJSDoc(name);
  }
 else {
    if (isDeclaration || isMember) {
      errorReporter.error("unnamed function statement",sourceName,lineno(functionTree),charno(functionTree));
      newName=createMissingNameNode();
    }
 else {
      newName=newStringNode(Token.NAME,"");
    }
    setSourceInfo(newName,functionTree);
  }
  Node node=newNode(Token.FUNCTION);
  if (!isMember) {
    node.addChildToBack(newName);
  }
 else {
    Node emptyName=newStringNode(Token.NAME,"");
    setSourceInfo(emptyName,functionTree);
    node.addChildToBack(emptyName);
  }
  node.addChildToBack(transform(functionTree.formalParameterList));
  if (functionTree.returnType != null) {
    recordJsDoc(functionTree.returnType.location,node.getJSDocInfo());
    node.setDeclaredTypeExpression(convertTypeTree(functionTree.returnType));
  }
  Node bodyNode=transform(functionTree.functionBody);
  if (!isArrow && !bodyNode.isBlock()) {
    Preconditions.checkState(config.isIdeMode);
    bodyNode=IR.block();
  }
  parseDirectives(bodyNode);
  node.addChildToBack(bodyNode);
  node.setIsGeneratorFunction(isGenerator);
  node.setIsArrowFunction(isArrow);
  Node result;
  if (functionTree.kind == FunctionDeclarationTree.Kind.MEMBER) {
    setSourceInfo(node,functionTree);
    Node member=newStringNode(Token.MEMBER_FUNCTION_DEF,name.value);
    member.addChildToBack(node);
    member.setStaticMember(functionTree.isStatic);
    result=member;
  }
 else {
    result=node;
  }
  return result;
}
