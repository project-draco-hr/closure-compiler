{
  if (info.hasType()) {
    boolean valid=false;
switch (node.getType()) {
case com.google.javascript.rhino.head.Token.LP:
      valid=node instanceof ParenthesizedExpression;
    break;
case com.google.javascript.rhino.head.Token.VAR:
  valid=true;
break;
case com.google.javascript.rhino.head.Token.FUNCTION:
FunctionNode fnNode=(FunctionNode)node;
valid=fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;
break;
case com.google.javascript.rhino.head.Token.NAME:
AstNode parent=node.getParent();
valid=parent instanceof ObjectProperty || parent instanceof CatchClause || parent instanceof FunctionNode|| (parent instanceof VariableInitializer && node == ((VariableInitializer)parent).getTarget());
break;
case com.google.javascript.rhino.head.Token.GET:
case com.google.javascript.rhino.head.Token.SET:
case com.google.javascript.rhino.head.Token.NUMBER:
case com.google.javascript.rhino.head.Token.STRING:
valid=node.getParent() instanceof ObjectProperty;
break;
case com.google.javascript.rhino.head.Token.ASSIGN:
if (node instanceof Assignment) {
valid=isExprStmt(node.getParent()) && isPropAccess(((Assignment)node).getLeft());
}
break;
case com.google.javascript.rhino.head.Token.GETPROP:
case com.google.javascript.rhino.head.Token.GETELEM:
valid=isExprStmt(node.getParent());
break;
case com.google.javascript.rhino.head.Token.CALL:
valid=info.isDefine();
break;
}
if (!valid) {
errorReporter.warning(MISPLACED_TYPE_ANNOTATION,sourceName,node.getLineno(),"",0);
}
}
}
