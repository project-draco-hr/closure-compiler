{
  expected=expected.trim();
  actual=actual.trim().replace("\r\n","\n");
  if (expected.equals(actual))   return true;
  for (  Map.Entry<String,String> entry : doctestCanonicalizations.entrySet()) {
    expected=expected.replace(entry.getKey(),entry.getValue());
  }
  if (expected.equals(actual))   return true;
  Pattern p=Pattern.compile("@[0-9a-fA-F]+");
  Matcher expectedMatcher=p.matcher(expected);
  Matcher actualMatcher=p.matcher(actual);
  for (; ; ) {
    if (!expectedMatcher.find())     return false;
    if (!actualMatcher.find())     return false;
    if (actualMatcher.start() != expectedMatcher.start())     return false;
    int start=expectedMatcher.start();
    if (!expected.substring(0,start).equals(actual.substring(0,start)))     return false;
    String expectedGroup=expectedMatcher.group();
    String actualGroup=actualMatcher.group();
    String mapping=doctestCanonicalizations.get(expectedGroup);
    if (mapping == null) {
      doctestCanonicalizations.put(expectedGroup,actualGroup);
      expected=expected.replace(expectedGroup,actualGroup);
    }
 else     if (!actualGroup.equals(mapping)) {
      return false;
    }
    if (expected.equals(actual))     return true;
  }
}
