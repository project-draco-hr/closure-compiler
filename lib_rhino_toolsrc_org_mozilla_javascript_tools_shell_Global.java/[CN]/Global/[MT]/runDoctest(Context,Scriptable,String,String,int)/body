{
  doctestCanonicalizations=new HashMap<String,String>();
  String[] lines=session.split("[\n\r]+");
  String prompt0=this.prompts[0].trim();
  String prompt1=this.prompts[1].trim();
  int testCount=0;
  int i=0;
  while (i < lines.length && !lines[i].trim().startsWith(prompt0)) {
    i++;
  }
  while (i < lines.length) {
    String inputString=lines[i].trim().substring(prompt0.length());
    inputString+="\n";
    i++;
    while (i < lines.length && lines[i].trim().startsWith(prompt1)) {
      inputString+=lines[i].trim().substring(prompt1.length());
      inputString+="\n";
      i++;
    }
    String expectedString="";
    while (i < lines.length && !lines[i].trim().startsWith(prompt0)) {
      expectedString+=lines[i] + "\n";
      i++;
    }
    PrintStream savedOut=this.getOut();
    PrintStream savedErr=this.getErr();
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    ByteArrayOutputStream err=new ByteArrayOutputStream();
    this.setOut(new PrintStream(out));
    this.setErr(new PrintStream(err));
    String resultString="";
    ErrorReporter savedErrorReporter=cx.getErrorReporter();
    cx.setErrorReporter(new ToolErrorReporter(false,this.getErr()));
    try {
      testCount++;
      Object result=cx.evaluateString(scope,inputString,"doctest input",1,null);
      if (result != Context.getUndefinedValue() && !(result instanceof Function && inputString.trim().startsWith("function"))) {
        resultString=Context.toString(result);
      }
    }
 catch (    RhinoException e) {
      ToolErrorReporter.reportException(cx.getErrorReporter(),e);
    }
 finally {
      this.setOut(savedOut);
      this.setErr(savedErr);
      cx.setErrorReporter(savedErrorReporter);
      resultString+=err.toString() + out.toString();
    }
    if (!doctestOutputMatches(expectedString,resultString)) {
      String message="doctest failure running:\n" + inputString + "expected: "+ expectedString+ "actual: "+ resultString+ "\n";
      if (sourceName != null)       throw Context.reportRuntimeError(message,sourceName,lineNumber + i - 1,null,0);
 else       throw Context.reportRuntimeError(message);
    }
  }
  return testCount;
}
