{
  JSModuleGraph moduleGraph=compiler.getModuleGraph();
  if (moduleGraph == null) {
    return;
  }
  JSModule module=moduleGraph.getRootModule();
  Node fakeModuleRoot=copyModuleInputs(module);
  SimpleDefinitionFinder defFinder=new SimpleDefinitionFinder(compiler);
  defFinder.process(externs,fakeModuleRoot);
  SimpleFunctionAliasAnalysis initialModuleFunctionAliasAnalysis=new SimpleFunctionAliasAnalysis();
  initialModuleFunctionAliasAnalysis.analyze(defFinder);
  specializationState=new SpecializationState(initialModuleFunctionAliasAnalysis);
  do {
    specializationState.resetHasChanged();
    for (    SpecializationAwareCompilerPass pass : createSpecializingPasses()) {
      pass.enableSpecialization(specializationState);
      pass.process(externs,fakeModuleRoot);
    }
  }
 while (specializationState.hasChanged());
  replaceOriginalModuleInputsWithSpecialized();
  addDummyVarDeclarationsToInitialModule(module);
  addOriginalFunctionVersionsToDependentModules(module);
}
