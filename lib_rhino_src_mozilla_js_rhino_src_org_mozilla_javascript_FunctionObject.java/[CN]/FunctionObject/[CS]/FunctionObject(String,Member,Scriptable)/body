{
  if (methodOrConstructor instanceof Constructor) {
    member=new MemberBox((Constructor<?>)methodOrConstructor);
    isStatic=true;
  }
 else {
    member=new MemberBox((Method)methodOrConstructor);
    isStatic=member.isStatic();
  }
  String methodName=member.getName();
  this.functionName=name;
  Class<?>[] types=member.argTypes;
  int arity=types.length;
  if (arity == 4 && (types[1].isArray() || types[2].isArray())) {
    if (types[1].isArray()) {
      if (!isStatic || types[0] != ScriptRuntime.ContextClass || types[1].getComponentType() != ScriptRuntime.ObjectClass || types[2] != ScriptRuntime.FunctionClass || types[3] != Boolean.TYPE) {
        throw Context.reportRuntimeError1("msg.varargs.ctor",methodName);
      }
      parmsLength=VARARGS_CTOR;
    }
 else {
      if (!isStatic || types[0] != ScriptRuntime.ContextClass || types[1] != ScriptRuntime.ScriptableClass || types[2].getComponentType() != ScriptRuntime.ObjectClass || types[3] != ScriptRuntime.FunctionClass) {
        throw Context.reportRuntimeError1("msg.varargs.fun",methodName);
      }
      parmsLength=VARARGS_METHOD;
    }
  }
 else {
    parmsLength=arity;
    if (arity > 0) {
      typeTags=new byte[arity];
      for (int i=0; i != arity; ++i) {
        int tag=getTypeTag(types[i]);
        if (tag == JAVA_UNSUPPORTED_TYPE) {
          throw Context.reportRuntimeError2("msg.bad.parms",types[i].getName(),methodName);
        }
        typeTags[i]=(byte)tag;
      }
    }
  }
  if (member.isMethod()) {
    Method method=member.method();
    Class<?> returnType=method.getReturnType();
    if (returnType == Void.TYPE) {
      hasVoidReturn=true;
    }
 else {
      returnTypeTag=getTypeTag(returnType);
    }
  }
 else {
    Class<?> ctorType=member.getDeclaringClass();
    if (!ScriptRuntime.ScriptableClass.isAssignableFrom(ctorType)) {
      throw Context.reportRuntimeError1("msg.bad.ctor.return",ctorType.getName());
    }
  }
  ScriptRuntime.setFunctionProtoAndParent(this,scope);
}
