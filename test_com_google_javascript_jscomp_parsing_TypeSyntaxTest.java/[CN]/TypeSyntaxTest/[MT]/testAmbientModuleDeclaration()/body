{
  parse("declare module foo {\n}");
  parse("declare module foo.bar.baz {\n}");
  parse("declare module foo {\n  interface I {\n  }\n}");
  parse("declare module foo {\n  class I {\n    bar();\n  }\n}");
  parse("declare module foo {\n  enum E {\n  }\n}");
  parse("declare module foo {\n  function f();\n}");
  parse("declare module foo {\n  var foo;\n}");
  parse("declare module foo {\n  module bar {\n  }\n}");
  parse("declare module foo {\n  interface I {\n  }\n  class C {\n  }\n}");
  parse("declare module foo {\n  export interface I {\n  }\n}");
  parse("declare module foo {\n  export class I {\n    bar();\n  }\n}");
  parse("declare module foo {\n  export enum E {\n  }\n}");
  parse("declare module foo {\n  export function f();\n}");
  parse("declare module foo {\n  export var foo;\n}");
  parse("declare module foo {\n  export module bar {\n  }\n}");
  parse("declare module foo {\n  export interface I {\n  }\n  export class C {\n  }\n}");
  expectErrors("Parse error. Semi-colon expected");
  parse("declare module foo { class C { bar() {} }}");
  expectErrors("Parse error. Ambient variable declaration may not have initializer");
  parse("declare module foo { var a = 3; }");
  expectErrors("Parse error. Ambient variable declaration may not have initializer");
  parse("declare module foo { export var a = 3; }");
  expectErrors("Parse error. Semi-colon expected");
  parse("declare module foo { function bar() {} }");
  expectErrors("Parse error. '}' expected");
  parse("declare module foo { type Foo = number; }");
  testNotEs6Typed("declare module foo {}","ambient declaration","module declaration");
}
