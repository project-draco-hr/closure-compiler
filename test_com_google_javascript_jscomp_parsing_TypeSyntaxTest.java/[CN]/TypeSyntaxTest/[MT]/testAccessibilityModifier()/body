{
  parse("class Foo {\n  private constructor() {\n  }\n}");
  parse("class Foo {\n  protected static bar: number;\n}");
  parse("class Foo {\n  protected bar() {\n  }\n}");
  parse("class Foo {\n  private get() {\n  }\n}");
  parse("class Foo {\n  private set() {\n  }\n}");
  parse("class Foo {\n  private ['foo']() {\n  }\n}");
  parse("class Foo {\n  private [Symbol.iterator]() {\n  }\n}");
  parse("class Foo {\n  private ['foo'];\n}");
  expectErrors("Parse error. primary expression expected");
  parse("public var x;");
  expectErrors("Parse error. primary expression expected");
  parse("public function foo() {}");
  expectErrors("Parse error. Semi-colon expected");
  parse("class Foo { static private constructor() {}}");
  testNotEs6TypedFullError("class Foo { private constructor() {} }","Parse error. Accessibility modifier is only supported in ES6 typed mode");
  testNotEs6TypedFullError("class Foo { protected bar; }","Parse error. Accessibility modifier is only supported in ES6 typed mode");
  testNotEs6TypedFullError("class Foo { protected bar() {} }","Parse error. Accessibility modifier is only supported in ES6 typed mode");
  testNotEs6TypedFullError("class Foo { private get() {} }","Parse error. Accessibility modifier is only supported in ES6 typed mode");
  testNotEs6TypedFullError("class Foo { private set() {} }","Parse error. Accessibility modifier is only supported in ES6 typed mode");
  testNotEs6TypedFullError("class Foo { private [Symbol.iterator]() {} }","Parse error. Accessibility modifier is only supported in ES6 typed mode");
}
