{
  if (!NodeUtil.isObjectDefinePropertiesDefinition(n)) {
    return;
  }
  Node className=n.getSecondChild();
  if (!className.isName()) {
    return;
  }
  String classNameString=className.getQualifiedName();
  for (  Node p : NodeUtil.getObjectDefinedPropertiesKeys(n)) {
    String name=p.getString();
    Node propertyLiteral=p.getFirstChild();
    Node getKey=null;
    Node setKey=null;
    for (    Node innerKey : propertyLiteral.children()) {
      if (!innerKey.isStringKey()) {
        continue;
      }
switch (innerKey.getString()) {
case "get":
        if (matchesJ2clGetKeySignature(classNameString,innerKey)) {
          getKey=innerKey;
        }
      break;
case "set":
    if (matchesJ2clSetKeySignature(classNameString,innerKey)) {
      setKey=innerKey;
    }
  break;
}
}
if (getKey != null && setKey != null) {
j2clPropertiesByName.put(classNameString + "." + name,new J2clProperty(getKey,setKey));
}
}
}
