{
  initializeNewCompiler(compilerOptions);
  compiler.init(ImmutableList.of(SourceFile.fromCode("[externs]",externs)),ImmutableList.of(SourceFile.fromCode("[testcode]",js)),compilerOptions);
  Node externsRoot=IR.block();
  externsRoot.setIsSyntheticBlock(true);
  externsRoot.addChildToFront(compiler.getInput(new InputId("[externs]")).getAstRoot(compiler));
  Node astRoot=IR.block();
  astRoot.setIsSyntheticBlock(true);
  astRoot.addChildToFront(compiler.getInput(new InputId("[testcode]")).getAstRoot(compiler));
  assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()),0,compiler.getErrorCount());
  assertEquals("parsing warning: " + Joiner.on(", ").join(compiler.getWarnings()),0,compiler.getWarningCount());
  Node block=IR.block(externsRoot,astRoot);
  block.setIsSyntheticBlock(true);
  (new AstValidator(compiler)).validateRoot(block);
  DeclaredGlobalExternsOnWindow rewriteExterns=new DeclaredGlobalExternsOnWindow(compiler);
  List<PassFactory> passes=new ArrayList<>();
  passes.add(makePassFactory("globalExternsOnWindow",rewriteExterns));
  ProcessClosurePrimitives closurePass=new ProcessClosurePrimitives(compiler,null,CheckLevel.ERROR,false);
  passes.add(makePassFactory("ProcessClosurePrimitives",closurePass));
  if (compilerOptions.getLanguageIn() == LanguageMode.ECMASCRIPT6_TYPED) {
    passes.add(makePassFactory("convertEs6TypedToEs6",new Es6TypedToEs6Converter(compiler)));
  }
  if (compilerOptions.getLanguageIn().isEs6OrHigher() && !compilerOptions.getLanguageOut().isEs6OrHigher()) {
    TranspilationPasses.addEs6EarlyPasses(passes);
    TranspilationPasses.addEs6LatePasses(passes);
    TranspilationPasses.addRewritePolyfillPass(passes);
  }
  passes.add(makePassFactory("GlobalTypeInfo",compiler.getSymbolTable()));
  passes.add(makePassFactory("NewTypeInference",new NewTypeInference(compiler)));
  PhaseOptimizer phaseopt=new PhaseOptimizer(compiler,null,null);
  phaseopt.consume(passes);
  phaseopt.process(externsRoot,astRoot);
}
