{
switch (subtree.getType()) {
case Token.ASSIGN:
    return tryFoldAssignment(subtree);
case Token.COMMA:
  return tryFoldComma(subtree);
case Token.SCRIPT:
case Token.BLOCK:
return tryOptimizeBlock(subtree);
case Token.EXPR_RESULT:
subtree=tryFoldExpr(subtree);
return subtree;
case Token.HOOK:
return tryFoldHook(subtree);
case Token.SWITCH:
return tryOptimizeSwitch(subtree);
case Token.IF:
return tryFoldIf(subtree);
case Token.WHILE:
return tryFoldWhile(subtree);
case Token.FOR:
{
Node condition=NodeUtil.getConditionExpression(subtree);
if (condition != null) {
tryFoldForCondition(condition);
}
return tryFoldFor(subtree);
}
case Token.DO:
return tryFoldDo(subtree);
case Token.TRY:
return tryFoldTry(subtree);
default :
return subtree;
}
}
