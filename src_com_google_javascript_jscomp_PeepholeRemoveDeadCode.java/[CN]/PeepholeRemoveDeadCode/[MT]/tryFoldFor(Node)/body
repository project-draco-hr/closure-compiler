{
  Preconditions.checkArgument(n.isFor());
  if (NodeUtil.isForIn(n)) {
    return n;
  }
  Node init=n.getFirstChild();
  Node cond=init.getNext();
  Node increment=cond.getNext();
  if (!init.isEmpty() && !init.isVar()) {
    init=trySimplifyUnusedResult(init,false);
  }
  if (!increment.isEmpty()) {
    increment=trySimplifyUnusedResult(increment,false);
  }
  if (!n.getFirstChild().isEmpty()) {
    return n;
  }
  if (NodeUtil.getImpureBooleanValue(cond) != TernaryValue.FALSE) {
    return n;
  }
  Node parent=n.getParent();
  NodeUtil.redeclareVarsInsideBranch(n);
  if (!mayHaveSideEffects(cond)) {
    NodeUtil.removeChild(parent,n);
  }
 else {
    Node statement=IR.exprResult(cond.detachFromParent()).copyInformationFrom(cond);
    if (parent.isLabel()) {
      Node block=IR.block();
      block.copyInformationFrom(statement);
      block.addChildToFront(statement);
      statement=block;
    }
    parent.replaceChild(n,statement);
  }
  reportCodeChange();
  return null;
}
