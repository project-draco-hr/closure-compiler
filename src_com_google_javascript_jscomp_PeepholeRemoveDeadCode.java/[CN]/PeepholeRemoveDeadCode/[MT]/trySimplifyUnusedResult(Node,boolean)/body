{
  Node result=n;
switch (n.getToken()) {
case HOOK:
    Node trueNode=trySimplifyUnusedResult(n.getSecondChild());
  Node falseNode=trySimplifyUnusedResult(n.getLastChild());
if (trueNode == null && falseNode != null) {
  n.setType(Token.OR);
  Preconditions.checkState(n.getChildCount() == 2,n);
}
 else if (trueNode != null && falseNode == null) {
  n.setType(Token.AND);
  Preconditions.checkState(n.getChildCount() == 2,n);
}
 else if (trueNode == null && falseNode == null) {
  result=trySimplifyUnusedResult(n.getFirstChild());
}
 else {
  result=n;
}
break;
case AND:
case OR:
Node conditionalResultNode=trySimplifyUnusedResult(n.getLastChild());
if (conditionalResultNode == null) {
Preconditions.checkState(n.hasOneChild(),n);
result=trySimplifyUnusedResult(n.getFirstChild());
}
break;
case FUNCTION:
result=null;
break;
case COMMA:
Node left=trySimplifyUnusedResult(n.getFirstChild());
Node right=trySimplifyUnusedResult(n.getLastChild());
if (left == null && right == null) {
result=null;
}
 else if (left == null) {
result=right;
}
 else if (right == null) {
result=left;
}
 else {
result=n;
}
break;
default :
if (!nodeTypeMayHaveSideEffects(n)) {
Node resultList=null;
for (Node next, c=n.getFirstChild(); c != null; c=next) {
next=c.getNext();
c=trySimplifyUnusedResult(c);
if (c != null) {
c.detach();
if (resultList == null) {
resultList=c;
}
 else {
resultList=IR.comma(resultList,c).srcref(c);
}
}
}
result=resultList;
}
}
if (n != result) {
Node parent=n.getParent();
if (result == null) {
if (removeUnused) {
parent.removeChild(n);
}
 else {
result=IR.empty().srcref(n);
parent.replaceChild(n,result);
}
}
 else {
if (result.getParent() != null) {
result.detach();
}
n.getParent().replaceChild(n,result);
}
reportCodeChange();
}
return result;
}
