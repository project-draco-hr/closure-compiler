{
  TypeIRegistry registry=t.getCompiler().getTypeIRegistry();
  JSType methodClassType=registry.getType(r.type);
  Node lhs=isCallInvocation ? n.getFirstChild().getFirstChild() : n.getFirstChild();
  if (methodClassType != null && lhs.getJSType() != null) {
    JSType targetType=lhs.getJSType().restrictByNotNullOrUndefined();
    if (targetType.isUnknownType() || targetType.isNoResolvedType() || targetType.isAllType()|| targetType.isEquivalentTo(registry.getNativeType(JSTypeNative.OBJECT_TYPE))) {
      if (!ConformanceUtil.validateCall(compiler,n.getParent(),r.restrictedCallType,isCallInvocation)) {
        return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES;
      }
    }
 else     if (targetType.isSubtype(methodClassType)) {
      if (!ConformanceUtil.validateCall(compiler,n.getParent(),r.restrictedCallType,isCallInvocation)) {
        return ConformanceResult.VIOLATION;
      }
    }
  }
  return ConformanceResult.CONFORMANCE;
}
