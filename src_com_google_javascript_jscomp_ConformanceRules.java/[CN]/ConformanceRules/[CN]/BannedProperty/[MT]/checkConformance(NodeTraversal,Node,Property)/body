{
  if (isCandidatePropUse(n,prop)) {
    TypeIRegistry registry=t.getCompiler().getTypeIRegistry();
    JSType methodClassType=registry.getType(prop.type);
    Node lhs=n.getFirstChild();
    if (methodClassType != null && lhs.getJSType() != null) {
      JSType targetType=lhs.getJSType().restrictByNotNullOrUndefined();
      if (targetType.isUnknownType() || targetType.isEmptyType() || targetType.isAllType()|| targetType.isEquivalentTo(registry.getNativeType(JSTypeNative.OBJECT_TYPE))) {
        return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES;
      }
 else       if (targetType.isSubtype(methodClassType)) {
        return ConformanceResult.VIOLATION;
      }
 else       if (methodClassType.isSubtype(targetType)) {
        if (matchesPrototype(methodClassType,targetType)) {
          return ConformanceResult.VIOLATION;
        }
 else {
          return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES;
        }
      }
    }
  }
  return ConformanceResult.CONFORMANCE;
}
