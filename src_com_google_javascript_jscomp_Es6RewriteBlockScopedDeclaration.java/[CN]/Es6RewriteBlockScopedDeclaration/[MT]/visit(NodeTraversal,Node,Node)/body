{
  if (!n.hasChildren() || !NodeUtil.isBlockScopedDeclaration(n.getFirstChild())) {
    return;
  }
  Scope scope=t.getScope();
  Node nameNode=n.getFirstChild();
  if (!n.isClass() && !n.isFunction() && !nameNode.hasChildren()&& (parent == null || !NodeUtil.isEnhancedFor(parent))&& !n.isCatch()&& inLoop(n)) {
    Node undefined=IR.name("undefined");
    if (nameNode.getJSDocInfo() != null || n.getJSDocInfo() != null) {
      undefined=IR.cast(undefined);
      JSDocInfoBuilder jsDoc=new JSDocInfoBuilder(false);
      jsDoc.recordType(new JSTypeExpression(new Node(Token.QMARK),n.getSourceFileName()));
      undefined.setJSDocInfo(jsDoc.build());
    }
    undefined.useSourceInfoFromForTree(nameNode);
    nameNode.addChildToFront(undefined);
  }
  String oldName=nameNode.getString();
  if (n.isLet() || n.isConst()) {
    letConsts.add(n);
  }
  Scope hoistScope=scope.getClosestHoistScope();
  boolean doRename=false;
  if (scope != hoistScope) {
    doRename=hoistScope.isDeclared(oldName,true) || undeclaredNames.contains(oldName);
    String newName=doRename ? oldName + "$" + compiler.getUniqueNameIdSupplier().get() : oldName;
    Var oldVar=scope.getVar(oldName);
    scope.undeclare(oldVar);
    hoistScope.declare(newName,nameNode,oldVar.input);
    if (doRename) {
      nameNode.setString(newName);
      Node scopeRoot=scope.getRootNode();
      if (!renameMap.containsKey(scopeRoot)) {
        renameMap.put(scopeRoot,new HashMap<String,String>());
      }
      renameMap.get(scopeRoot).put(oldName,newName);
    }
  }
  if (doRename) {
    compiler.reportCodeChange();
  }
}
