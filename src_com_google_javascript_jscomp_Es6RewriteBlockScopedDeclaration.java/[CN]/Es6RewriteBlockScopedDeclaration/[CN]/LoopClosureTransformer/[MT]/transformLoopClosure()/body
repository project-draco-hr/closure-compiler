{
  if (loopObjectMap.isEmpty()) {
    return;
  }
  for (  Node loopNode : loopObjectMap.keySet()) {
    LoopObject object=loopObjectMap.get(loopNode);
    Node objectLit=IR.objectlit();
    Node objectLitNextIteration=IR.objectlit();
    for (    Var var : object.vars) {
      objectLit.addChildToBack(IR.stringKey(var.name,IR.name("undefined")));
      objectLitNextIteration.addChildToBack(IR.stringKey(var.name,IR.getprop(IR.name(object.name),IR.string(var.name))));
    }
    Node updateLoopObject=IR.assign(IR.name(object.name),objectLitNextIteration);
    loopNode.getParent().addChildBefore(IR.var(IR.name(object.name),objectLit).useSourceInfoIfMissingFromForTree(loopNode),loopNode);
    if (NodeUtil.isVanillaFor(loopNode)) {
      Node initializer=loopNode.getFirstChild();
      loopNode.replaceChild(initializer,IR.empty());
      if (!initializer.isEmpty()) {
        if (!NodeUtil.isNameDeclaration(initializer)) {
          initializer=IR.exprResult(initializer).useSourceInfoFrom(initializer);
        }
        loopNode.getParent().addChildBefore(initializer,loopNode);
      }
      Node increment=loopNode.getChildAtIndex(2);
      if (increment.isEmpty()) {
        loopNode.replaceChild(increment,updateLoopObject.useSourceInfoIfMissingFromForTree(loopNode));
      }
 else {
        Node placeHolder=IR.empty();
        loopNode.replaceChild(increment,placeHolder);
        loopNode.replaceChild(placeHolder,IR.comma(updateLoopObject,increment).useSourceInfoIfMissingFromForTree(loopNode));
      }
    }
 else     if (loopNode.isDo()) {
      loopNode.getFirstChild().addChildToBack(IR.exprResult(updateLoopObject).useSourceInfoIfMissingFromForTree(loopNode));
    }
 else {
      loopNode.getLastChild().addChildToBack(IR.exprResult(updateLoopObject).useSourceInfoIfMissingFromForTree(loopNode));
    }
    for (    Var var : object.vars) {
      for (      Node reference : referenceMap.get(var)) {
        if (NodeUtil.isEnhancedFor(loopNode) && loopNode.getFirstChild() == reference.getParent()) {
          loopNode.getLastChild().addChildToFront(IR.exprResult(IR.assign(IR.getprop(IR.name(object.name),IR.string(var.name)),var.getNameNode().cloneNode())).useSourceInfoIfMissingFromForTree(reference));
        }
 else {
          if (NodeUtil.isNameDeclaration(reference.getParent())) {
            Node declaration=reference.getParent();
            Node grandParent=declaration.getParent();
            while (declaration.getChildCount() > 1) {
              Node name=declaration.getLastChild();
              grandParent.addChildAfter(IR.declaration(name.detachFromParent(),declaration.getType()).useSourceInfoIfMissingFromForTree(declaration),declaration);
            }
            if (reference.hasChildren()) {
              declaration=reference.getParent();
              JSDocInfo existingInfo=declaration.getJSDocInfo();
              if (existingInfo == null) {
                existingInfo=reference.getJSDocInfo();
                reference.setJSDocInfo(null);
              }
              JSDocInfoBuilder builder=JSDocInfoBuilder.maybeCopyFrom(existingInfo);
              if (declaration.isConst()) {
                builder.recordConstancy();
              }
              Node newReference=reference.cloneNode();
              Node assign=IR.assign(newReference,reference.removeFirstChild());
              assign.setJSDocInfo(builder.build());
              Node replacement=IR.exprResult(assign).useSourceInfoIfMissingFromForTree(declaration);
              grandParent.replaceChild(declaration,replacement);
              reference=newReference;
            }
 else {
              grandParent.removeChild(declaration);
            }
            letConsts.remove(declaration);
            compiler.reportCodeChange();
          }
          if (reference.getParent().isCall() && reference.getParent().getFirstChild() == reference) {
            reference.getParent().putBooleanProp(Node.FREE_CALL,false);
          }
          reference.getParent().replaceChild(reference,IR.getprop(IR.name(object.name),IR.string(var.name)).useSourceInfoIfMissingFromForTree(reference));
        }
      }
    }
  }
  for (  Node function : functionLoopObjectsMap.keySet()) {
    Node returnNode=IR.returnNode();
    Collection<LoopObject> objects=functionLoopObjectsMap.get(function);
    Node[] objectNames=new Node[objects.size()];
    Node[] objectNamesForCall=new Node[objects.size()];
    int i=0;
    for (    LoopObject object : objects) {
      objectNames[i]=IR.name(object.name);
      objectNamesForCall[i]=IR.name(object.name);
      i++;
    }
    Node iife=IR.function(IR.name(""),IR.paramList(objectNames),IR.block(returnNode));
    Node call=IR.call(iife,objectNamesForCall);
    call.putBooleanProp(Node.FREE_CALL,true);
    Node replacement;
    if (NodeUtil.isFunctionDeclaration(function)) {
      replacement=IR.var(IR.name(function.getFirstChild().getString()),call).useSourceInfoIfMissingFromForTree(function);
    }
 else {
      replacement=call.useSourceInfoIfMissingFromForTree(function);
    }
    function.getParent().replaceChild(function,replacement);
    returnNode.addChildToFront(function);
  }
}
