{
  if (!NodeUtil.isReferenceName(n)) {
    return;
  }
  String name=n.getString();
  Scope referencedIn=t.getScope();
  Var var=referencedIn.getVar(name);
  if (var == null) {
    return;
  }
  if (!var.isLet() && !var.isConst()) {
    return;
  }
  if (n.getParent().isLet() || n.getParent().isConst()) {
    letConsts.add(n.getParent());
  }
  Scope declaredIn=var.getScope();
  Node loopNode=null;
  for (Scope s=declaredIn; ; s=s.getParent()) {
    Node scopeRoot=s.getRootNode();
    if (NodeUtil.isLoopStructure(s.getRootNode())) {
      loopNode=scopeRoot;
      break;
    }
 else     if (scopeRoot.getParent() != null && NodeUtil.isLoopStructure(scopeRoot.getParent())) {
      loopNode=scopeRoot.getParent();
      break;
    }
 else     if (s.isFunctionBlockScope() || s.isGlobal()) {
      return;
    }
  }
  referenceMap.put(var,n);
  Scope outerMostFunctionScope=null;
  for (Scope s=referencedIn; s != declaredIn && s.getRootNode() != loopNode; s=s.getParent()) {
    if (s.isFunctionScope()) {
      outerMostFunctionScope=s;
    }
  }
  if (outerMostFunctionScope != null) {
    Node function=outerMostFunctionScope.getRootNode();
    if (functionHandledMap.containsEntry(function,name)) {
      return;
    }
    functionHandledMap.put(function,name);
    if (!loopObjectMap.containsKey(loopNode)) {
      loopObjectMap.put(loopNode,new LoopObject(LOOP_OBJECT_NAME + "$" + compiler.getUniqueNameIdSupplier().get()));
    }
    LoopObject object=loopObjectMap.get(loopNode);
    object.vars.add(var);
    functionLoopObjectsMap.put(function,object);
  }
}
