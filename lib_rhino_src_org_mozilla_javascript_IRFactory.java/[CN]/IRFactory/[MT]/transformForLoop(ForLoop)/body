{
  decompiler.addToken(Token.FOR);
  decompiler.addToken(Token.LP);
  loop.setType(Token.LOOP);
  Scope savedScope=currentScope;
  currentScope=loop;
  try {
    Node init=transform(loop.getInitializer());
    decompiler.addToken(Token.SEMI);
    Node test=transform(loop.getCondition());
    decompiler.addToken(Token.SEMI);
    Node incr=transform(loop.getIncrement());
    decompiler.addToken(Token.RP);
    decompiler.addEOL(Token.LC);
    Node body=transform(loop.getBody());
    decompiler.addEOL(Token.RC);
    return createFor(loop,init,test,incr,body);
  }
  finally {
    currentScope=savedScope;
  }
}
