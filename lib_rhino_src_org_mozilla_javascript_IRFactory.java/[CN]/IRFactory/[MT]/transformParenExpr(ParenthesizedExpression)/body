{
  AstNode expr=node.getExpression();
  decompiler.addToken(Token.LP);
  int count=1;
  while (expr instanceof ParenthesizedExpression) {
    decompiler.addToken(Token.LP);
    count++;
    expr=((ParenthesizedExpression)expr).getExpression();
  }
  Node result=transform(expr);
  for (int i=0; i < count; i++) {
    decompiler.addToken(Token.RP);
  }
  result.putProp(Node.PARENTHESIZED_PROP,Boolean.TRUE);
  return result;
}
