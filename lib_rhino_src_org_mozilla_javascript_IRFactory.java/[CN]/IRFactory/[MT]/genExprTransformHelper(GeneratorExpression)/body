{
  decompiler.addToken(Token.LP);
  int lineno=node.getLineno();
  Node expr=transform(node.getResult());
  List<GeneratorExpressionLoop> loops=node.getLoops();
  int numLoops=loops.size();
  Node[] iterators=new Node[numLoops];
  Node[] iteratedObjs=new Node[numLoops];
  for (int i=0; i < numLoops; i++) {
    GeneratorExpressionLoop acl=loops.get(i);
    decompiler.addName(" ");
    decompiler.addToken(Token.FOR);
    decompiler.addToken(Token.LP);
    AstNode iter=acl.getIterator();
    String name=null;
    if (iter.getType() == Token.NAME) {
      name=iter.getString();
      decompiler.addName(name);
    }
 else {
      decompile(iter);
      name=currentScriptOrFn.getNextTempName();
      defineSymbol(Token.LP,name,false);
      expr=createBinary(Token.COMMA,createAssignment(Token.ASSIGN,iter,createName(name)),expr);
    }
    Node init=createName(name);
    defineSymbol(Token.LET,name,false);
    iterators[i]=init;
    decompiler.addToken(Token.IN);
    iteratedObjs[i]=transform(acl.getIteratedObject());
    decompiler.addToken(Token.RP);
  }
  Node yield=new Node(Token.YIELD,expr,node.getLineno());
  Node body=new Node(Token.EXPR_VOID,yield,lineno);
  if (node.getFilter() != null) {
    decompiler.addName(" ");
    decompiler.addToken(Token.IF);
    decompiler.addToken(Token.LP);
    body=createIf(transform(node.getFilter()),body,null,lineno);
    decompiler.addToken(Token.RP);
  }
  int pushed=0;
  try {
    for (int i=numLoops - 1; i >= 0; i--) {
      GeneratorExpressionLoop acl=loops.get(i);
      Scope loop=createLoopNode(null,acl.getLineno());
      pushScope(loop);
      pushed++;
      body=createForIn(Token.LET,loop,iterators[i],iteratedObjs[i],body,acl.isForEach());
    }
  }
  finally {
    for (int i=0; i < pushed; i++) {
      popScope();
    }
  }
  decompiler.addToken(Token.RP);
  return body;
}
