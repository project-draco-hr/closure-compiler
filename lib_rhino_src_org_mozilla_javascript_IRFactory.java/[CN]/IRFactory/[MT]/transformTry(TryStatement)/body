{
  decompiler.addToken(Token.TRY);
  decompiler.addEOL(Token.LC);
  Node tryBlock=transform(node.getTryBlock());
  decompiler.addEOL(Token.RC);
  Node catchBlocks=new Block();
  for (  CatchClause cc : node.getCatchClauses()) {
    decompiler.addToken(Token.CATCH);
    decompiler.addToken(Token.LP);
    String varName=cc.getVarName().getIdentifier();
    decompiler.addName(varName);
    Node catchCond=null;
    AstNode ccc=cc.getCatchCondition();
    if (ccc != null) {
      decompiler.addName(" ");
      decompiler.addToken(Token.IF);
      catchCond=transform(ccc);
    }
 else {
      catchCond=new EmptyExpression();
    }
    decompiler.addToken(Token.RP);
    decompiler.addEOL(Token.LC);
    Node body=transform(cc.getBody());
    decompiler.addEOL(Token.RC);
    catchBlocks.addChildToBack(createCatch(varName,catchCond,body,cc.getLineno()));
  }
  Node finallyBlock=null;
  if (node.getFinallyBlock() != null) {
    decompiler.addToken(Token.FINALLY);
    decompiler.addEOL(Token.LC);
    finallyBlock=transform(node.getFinallyBlock());
    decompiler.addEOL(Token.RC);
  }
  return createTryCatchFinally(tryBlock,catchBlocks,finallyBlock,node.getLineno());
}
