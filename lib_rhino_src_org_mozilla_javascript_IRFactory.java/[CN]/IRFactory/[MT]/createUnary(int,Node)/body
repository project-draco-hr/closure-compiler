{
  int childType=child.getType();
switch (nodeType) {
case Token.DELPROP:
{
      Node n;
      if (childType == Token.NAME) {
        child.setType(Token.BINDNAME);
        Node left=child;
        Node right=Node.newString(child.getString());
        n=new Node(nodeType,left,right);
      }
 else       if (childType == Token.GETPROP || childType == Token.GETELEM) {
        Node left=child.getFirstChild();
        Node right=child.getLastChild();
        child.removeChild(left);
        child.removeChild(right);
        n=new Node(nodeType,left,right);
      }
 else       if (childType == Token.GET_REF) {
        Node ref=child.getFirstChild();
        child.removeChild(ref);
        n=new Node(Token.DEL_REF,ref);
      }
 else {
        n=new Node(nodeType,new Node(Token.TRUE),child);
      }
      return n;
    }
case Token.TYPEOF:
  if (childType == Token.NAME) {
    child.setType(Token.TYPEOFNAME);
    return child;
  }
break;
case Token.BITNOT:
if (childType == Token.NUMBER) {
int value=ScriptRuntime.toInt32(child.getDouble());
child.setDouble(~value);
return child;
}
break;
case Token.NEG:
if (childType == Token.NUMBER) {
child.setDouble(-child.getDouble());
return child;
}
break;
case Token.NOT:
{
int status=isAlwaysDefinedBoolean(child);
if (status != 0) {
int type;
if (status == ALWAYS_TRUE_BOOLEAN) {
type=Token.FALSE;
}
 else {
type=Token.TRUE;
}
if (childType == Token.TRUE || childType == Token.FALSE) {
child.setType(type);
return child;
}
return new Node(type);
}
break;
}
}
return new Node(nodeType,child);
}
