{
  List<VariableInitializer> vars=node.getVariables();
  int size=vars.size(), i=0;
  for (  VariableInitializer var : vars) {
    AstNode target=var.getTarget();
    AstNode init=var.getInitializer();
    Node left=null;
    if (var.isDestructuring()) {
      decompile(target);
      left=target;
    }
 else {
      left=transform(target);
    }
    Node right=null;
    if (init != null) {
      decompiler.addToken(Token.ASSIGN);
      right=transform(init);
    }
    if (var.isDestructuring()) {
      if (right == null) {
        node.addChildToBack(left);
      }
 else {
        Node d=createDestructuringAssignment(node.getType(),left,right);
        node.addChildToBack(d);
      }
    }
 else {
      if (right != null) {
        left.addChildToBack(right);
      }
      node.addChildToBack(left);
    }
    if (i++ < size - 1) {
      decompiler.addToken(Token.COMMA);
    }
  }
  return node;
}
