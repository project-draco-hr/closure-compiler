{
  Node ref=makeReference(left);
  if (ref == null) {
    if (left.getType() == Token.ARRAYLIT || left.getType() == Token.OBJECTLIT) {
      if (assignType != Token.ASSIGN) {
        reportError("msg.bad.destruct.op");
        return right;
      }
      return createDestructuringAssignment(-1,left,right);
    }
    reportError("msg.bad.assign.left");
    return right;
  }
  left=ref;
  int assignOp;
switch (assignType) {
case Token.ASSIGN:
    return simpleAssignment(left,right);
case Token.ASSIGN_BITOR:
  assignOp=Token.BITOR;
break;
case Token.ASSIGN_BITXOR:
assignOp=Token.BITXOR;
break;
case Token.ASSIGN_BITAND:
assignOp=Token.BITAND;
break;
case Token.ASSIGN_LSH:
assignOp=Token.LSH;
break;
case Token.ASSIGN_RSH:
assignOp=Token.RSH;
break;
case Token.ASSIGN_URSH:
assignOp=Token.URSH;
break;
case Token.ASSIGN_ADD:
assignOp=Token.ADD;
break;
case Token.ASSIGN_SUB:
assignOp=Token.SUB;
break;
case Token.ASSIGN_MUL:
assignOp=Token.MUL;
break;
case Token.ASSIGN_DIV:
assignOp=Token.DIV;
break;
case Token.ASSIGN_MOD:
assignOp=Token.MOD;
break;
default :
throw Kit.codeBug();
}
int nodeType=left.getType();
switch (nodeType) {
case Token.NAME:
{
Node op=new Node(assignOp,left,right);
Node lvalueLeft=Node.newString(Token.BINDNAME,left.getString());
return new Node(Token.SETNAME,lvalueLeft,op);
}
case Token.GETPROP:
case Token.GETELEM:
{
Node obj=left.getFirstChild();
Node id=left.getLastChild();
int type=nodeType == Token.GETPROP ? Token.SETPROP_OP : Token.SETELEM_OP;
Node opLeft=new Node(Token.USE_STACK);
Node op=new Node(assignOp,opLeft,right);
return new Node(type,obj,id,op);
}
case Token.GET_REF:
{
ref=left.getFirstChild();
checkMutableReference(ref);
Node opLeft=new Node(Token.USE_STACK);
Node op=new Node(assignOp,opLeft,right);
return new Node(Token.SET_REF_OP,ref,op);
}
}
throw Kit.codeBug();
}
