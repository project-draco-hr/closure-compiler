{
  JSType constructor=getType(NodeUtil.getPrototypeClassName(qName));
  FunctionType classType=null;
  String className=null;
  if (constructor != null && constructor.isConstructor()) {
    classType=constructor.toMaybeFunctionType();
    className=classType.getReferenceName();
  }
 else {
    classType=compiler.getTypeRegistry().getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
    className=NodeUtil.getPrototypeClassName(qName).getQualifiedName();
  }
  recordClassConstructorOrInterface(className,classType,null,null);
  String qNameStr=className + ".prototype." + NodeUtil.getPrototypePropertyName(qName);
  Name prototypeProp=graph.defineNameIfNotExists(qNameStr,isExtern);
  Preconditions.checkNotNull(prototypeProp,"%s should be in the name graph as a node.",qNameStr);
  if (assign != null) {
    prototypeProp.addAssignmentDeclaration(assign);
  }
  prototypeProp.setType(type);
  return prototypeProp;
}
