{
switch (n.getType()) {
case NAME:
case GETPROP:
    if (parent.isGetProp()) {
      return;
    }
 else     if (parent.isFunction()) {
      return;
    }
 else     if (parent.isAssign()) {
      return;
    }
  if (isLocalNameReference(t,n)) {
    return;
  }
if (isPrototypeNameReference(n)) {
  recordPrototypePropUse(n);
}
 else if (isStaticNameReference(n,t.getScope())) {
  recordStaticNameUse(n);
}
 else {
  recordUnknownUse(n);
}
break;
case ASSIGN:
Node lhs=n.getFirstChild();
Node rhs=n.getLastChild();
if (rhs.isFunction()) {
return;
}
if (lhs.isName() || lhs.isGetProp() || rhs.isGetProp()) {
if (NodeUtil.isPrototypeProperty(lhs)) {
Name name=recordPrototypePropDefinition(lhs,getType(rhs),n);
name.setAliased(true);
}
}
maybeAliasNamesOnAssign(lhs,rhs);
break;
case VAR:
Node varName=n.getFirstChild();
Node assignedValue=varName.getFirstChild();
if (assignedValue == null) {
return;
}
maybeAliasNamesOnAssign(varName,assignedValue);
break;
case CALL:
Node param=n.getFirstChild();
while ((param=param.getNext()) != null) {
if (param.isName() || param.isGetProp()) {
safeAlias(param);
}
}
maybeRecordExport(n);
break;
}
}
