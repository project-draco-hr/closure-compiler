{
  String idgenKind="unique";
  if (token == JsDocToken.LC) {
    if (match(JsDocToken.STRING)) {
      String name=stream.getString();
      if (!idGeneratorAnnotationKeywords.contains(name) && !jsdocBuilder.hasParameter(name)) {
        parser.addParserWarning("msg.jsdoc.idgen.unknown",name,stream.getLineno(),stream.getCharno());
      }
      idgenKind=name;
      token=next();
    }
 else {
      parser.addParserWarning("msg.jsdoc.idgen.bad",stream.getLineno(),stream.getCharno());
      return token;
    }
    if (!match(JsDocToken.RC)) {
      parser.addParserWarning("msg.jsdoc.idgen.bad",stream.getLineno(),stream.getCharno());
    }
 else {
      token=next();
    }
  }
switch (idgenKind) {
case "unique":
    if (!jsdocBuilder.recordIdGenerator()) {
      parser.addParserWarning("msg.jsdoc.idgen.duplicate",stream.getLineno(),stream.getCharno());
    }
  break;
case "consistent":
if (!jsdocBuilder.recordConsistentIdGenerator()) {
  parser.addParserWarning("msg.jsdoc.idgen.duplicate",stream.getLineno(),stream.getCharno());
}
break;
case "stable":
if (!jsdocBuilder.recordStableIdGenerator()) {
parser.addParserWarning("msg.jsdoc.idgen.duplicate",stream.getLineno(),stream.getCharno());
}
break;
case "mapped":
if (!jsdocBuilder.recordMappedIdGenerator()) {
parser.addParserWarning("msg.jsdoc.idgen.duplicate",stream.getLineno(),stream.getCharno());
}
break;
}
return token;
}
