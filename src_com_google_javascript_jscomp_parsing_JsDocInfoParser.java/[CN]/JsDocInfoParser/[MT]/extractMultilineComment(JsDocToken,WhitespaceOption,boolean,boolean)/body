{
  StringBuilder builder=new StringBuilder();
  int startLineno=-1;
  int startCharno=-1;
  if (isMarker) {
    stream.update();
    startLineno=stream.getLineno();
    startCharno=stream.getCharno() + 1;
    String line=getRemainingJSDocLine();
    if (option != WhitespaceOption.PRESERVE) {
      line=line.trim();
    }
    builder.append(line);
    state=State.SEARCHING_ANNOTATION;
    token=next();
  }
  boolean ignoreStar=false;
  int lineStartChar=-1;
  do {
switch (token) {
case STAR:
      if (ignoreStar) {
        lineStartChar=stream.getCharno() + 1;
        ignoreStar=false;
      }
 else {
        padLine(builder,lineStartChar,option);
        lineStartChar=-1;
        builder.append('*');
      }
    token=next();
  while (token == JsDocToken.STAR) {
    if (lineStartChar != -1) {
      padLine(builder,lineStartChar,option);
      lineStartChar=-1;
    }
    builder.append('*');
    token=next();
  }
continue;
case EOL:
if (option != WhitespaceOption.SINGLE_LINE) {
builder.append('\n');
}
ignoreStar=true;
lineStartChar=0;
token=next();
continue;
default :
ignoreStar=false;
state=State.SEARCHING_ANNOTATION;
boolean isEOC=token == JsDocToken.EOC;
if (!isEOC) {
padLine(builder,lineStartChar,option);
lineStartChar=-1;
}
if (token == JsDocToken.EOC || token == JsDocToken.EOF || (token == JsDocToken.ANNOTATION && !includeAnnotations)) {
String multilineText=builder.toString();
if (option != WhitespaceOption.PRESERVE) {
multilineText=multilineText.trim();
}
if (isMarker && !multilineText.isEmpty()) {
int endLineno=stream.getLineno();
int endCharno=stream.getCharno();
jsdocBuilder.markText(multilineText,startLineno,startCharno,endLineno,endCharno);
}
return new ExtractionInfo(multilineText,token);
}
builder.append(toString(token));
String line=getRemainingJSDocLine();
if (option != WhitespaceOption.PRESERVE) {
line=trimEnd(line);
}
builder.append(line);
token=next();
}
}
 while (true);
}
