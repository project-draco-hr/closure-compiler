{
  if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {
    return new ExtractionInfo("",token);
  }
  stream.update();
  int startLineno=stream.getLineno();
  int startCharno=stream.getCharno() + 1;
  String line=stream.getRemainingJSDocLine();
  if (option != WhitespaceOption.PRESERVE) {
    line=line.trim();
  }
  StringBuilder builder=new StringBuilder();
  builder.append(line);
  state=State.SEARCHING_ANNOTATION;
  token=next();
  boolean ignoreStar=false;
  do {
switch (token) {
case ANNOTATION:
case EOC:
case EOF:
      String multilineText=builder.toString();
    if (option != WhitespaceOption.PRESERVE) {
      multilineText=multilineText.trim();
    }
  int endLineno=stream.getLineno();
int endCharno=stream.getCharno();
if (multilineText.length() > 0) {
jsdocBuilder.markText(multilineText,startLineno,startCharno,endLineno,endCharno);
}
return new ExtractionInfo(multilineText,token);
case STAR:
if (!ignoreStar) {
if (builder.length() > 0) {
builder.append(' ');
}
builder.append('*');
}
token=next();
continue;
case EOL:
if (option != WhitespaceOption.SINGLE_LINE) {
builder.append("\n");
}
ignoreStar=true;
token=next();
continue;
default :
ignoreStar=false;
state=State.SEARCHING_ANNOTATION;
if (builder.length() > 0) {
builder.append(' ');
}
builder.append(toString(token));
line=stream.getRemainingJSDocLine();
if (option != WhitespaceOption.PRESERVE) {
line=trimEnd(line);
}
builder.append(line);
token=next();
}
}
 while (true);
}
