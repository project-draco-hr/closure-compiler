{
  while (true) {
switch (token) {
case ANNOTATION:
      if (state == State.SEARCHING_ANNOTATION) {
        state=State.SEARCHING_NEWLINE;
        token=parseAnnotation(token,extendedTypes);
      }
 else {
        token=next();
      }
    break;
case EOC:
  boolean success=true;
checkExtendedTypes(extendedTypes);
if (hasParsedFileOverviewDocInfo()) {
fileOverviewJSDocInfo=retrieveAndResetParsedJSDocInfo();
Visibility visibility=fileOverviewJSDocInfo.getVisibility();
switch (visibility) {
case PRIVATE:
case PROTECTED:
  addParserWarning("msg.bad.fileoverview.visibility.annotation",visibility.toString().toLowerCase());
success=false;
break;
default :
break;
}
}
return success;
case EOF:
jsdocBuilder.build();
addParserWarning("msg.unexpected.eof");
checkExtendedTypes(extendedTypes);
return false;
case EOL:
if (state == State.SEARCHING_NEWLINE) {
state=State.SEARCHING_ANNOTATION;
}
token=next();
break;
default :
if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {
token=next();
}
 else {
state=State.SEARCHING_NEWLINE;
token=eatTokensUntilEOL();
}
break;
}
}
}
