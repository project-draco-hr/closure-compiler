{
  Node assignment=propertyCandidate.getFirstChild();
  Node lhs=assignment.getFirstChild(), rhs=lhs.getNext();
  Node obj=lhs.getFirstChild();
  Node property=obj.getNext();
  if (lhs.isGetElem() && (!property.isString() && !property.isNumber())) {
    return false;
  }
  String propertyName;
  if (property.isNumber()) {
    propertyName=NodeUtil.getStringValue(property);
  }
 else {
    propertyName=property.getString();
  }
  Node newProperty=IR.stringKey(propertyName).useSourceInfoIfMissingFrom(property);
  if (lhs.isGetElem()) {
    newProperty.setQuotedString();
  }
  Node newValue=rhs.detach();
  newProperty.addChildToBack(newValue);
  boolean propertyExists=false;
  for (  Node currentProperty : objectLiteral.children()) {
    String currentPropertyName=currentProperty.getString();
    Node currentValue=currentProperty.getFirstChild();
    if (currentPropertyName.equals(propertyName)) {
      propertyExists=true;
      boolean isCurrentValueSideEffect=NodeUtil.canBeSideEffected(currentValue);
      boolean isNewValueSideEffect=NodeUtil.canBeSideEffected(newValue);
      if (!isCurrentValueSideEffect && !isNewValueSideEffect) {
        objectLiteral.removeChild(currentProperty);
        objectLiteral.addChildToBack(newProperty);
        propertyCandidate.detach();
        return true;
      }
      break;
    }
  }
  if (!propertyExists) {
    objectLiteral.addChildToBack(newProperty);
  }
  propertyCandidate.detach();
  return true;
}
