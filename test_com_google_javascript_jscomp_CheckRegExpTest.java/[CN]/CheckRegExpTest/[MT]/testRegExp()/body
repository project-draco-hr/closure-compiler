{
  testReference("RegExp();",false);
  testReference("var x = RegExp();",false);
  testReference("new RegExp();",false);
  testReference("var x = new RegExp();",false);
  testReference("x instanceof RegExp;",false);
  testReference("x === RegExp;",false);
  testReference("x !== RegExp;",false);
  testReference("switch (x) { case RegExp: }",false);
  testReference("x == RegExp;",false);
  testReference("x != RegExp;",false);
  testReference("RegExp.test();",false);
  testReference("var x = RegExp.test();",false);
  testReference("RegExp.exec();",false);
  testReference("RegExp.foobar;",false);
  testReference("RegExp.$1;",true);
  testReference("RegExp.$_;",true);
  testReference("RegExp.$input;",true);
  testReference("RegExp.rightContext;",true);
  testReference("RegExp.multiline;",true);
  testReference("delete RegExp;",true);
  testReference("RegExp;",true);
  testReference("if (RegExp);",true);
  testReference("if (!RegExp);",true);
  testReference("var x = RegExp;",true);
  testReference("f(RegExp);",true);
  testReference("new f(RegExp);",true);
  testReference("var x = RegExp; x.test()",true);
  testReference("var x;",false);
  testReference("function f() {var RegExp; RegExp.test();}",false);
  testReference("var x = {RegExp: {}}; x.RegExp.$1;",false);
}
