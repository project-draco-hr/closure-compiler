{
  Class<?> valueClass=value.getClass();
  if (type == Character.TYPE || type == ScriptRuntime.CharacterClass) {
    if (valueClass == ScriptRuntime.CharacterClass) {
      return value;
    }
    return Character.valueOf((char)toInteger(value,ScriptRuntime.CharacterClass,Character.MIN_VALUE,Character.MAX_VALUE));
  }
  if (type == ScriptRuntime.ObjectClass || type == ScriptRuntime.DoubleClass || type == Double.TYPE) {
    return valueClass == ScriptRuntime.DoubleClass ? value : new Double(toDouble(value));
  }
  if (type == ScriptRuntime.FloatClass || type == Float.TYPE) {
    if (valueClass == ScriptRuntime.FloatClass) {
      return value;
    }
 else {
      double number=toDouble(value);
      if (Double.isInfinite(number) || Double.isNaN(number) || number == 0.0) {
        return new Float((float)number);
      }
 else {
        double absNumber=Math.abs(number);
        if (absNumber < Float.MIN_VALUE) {
          return new Float((number > 0.0) ? +0.0 : -0.0);
        }
 else         if (absNumber > Float.MAX_VALUE) {
          return new Float((number > 0.0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY);
        }
 else {
          return new Float((float)number);
        }
      }
    }
  }
  if (type == ScriptRuntime.IntegerClass || type == Integer.TYPE) {
    if (valueClass == ScriptRuntime.IntegerClass) {
      return value;
    }
 else {
      return Integer.valueOf((int)toInteger(value,ScriptRuntime.IntegerClass,Integer.MIN_VALUE,Integer.MAX_VALUE));
    }
  }
  if (type == ScriptRuntime.LongClass || type == Long.TYPE) {
    if (valueClass == ScriptRuntime.LongClass) {
      return value;
    }
 else {
      final double max=Double.longBitsToDouble(0x43dfffffffffffffL);
      final double min=Double.longBitsToDouble(0xc3e0000000000000L);
      return Long.valueOf(toInteger(value,ScriptRuntime.LongClass,min,max));
    }
  }
  if (type == ScriptRuntime.ShortClass || type == Short.TYPE) {
    if (valueClass == ScriptRuntime.ShortClass) {
      return value;
    }
 else {
      return Short.valueOf((short)toInteger(value,ScriptRuntime.ShortClass,Short.MIN_VALUE,Short.MAX_VALUE));
    }
  }
  if (type == ScriptRuntime.ByteClass || type == Byte.TYPE) {
    if (valueClass == ScriptRuntime.ByteClass) {
      return value;
    }
 else {
      return Byte.valueOf((byte)toInteger(value,ScriptRuntime.ByteClass,Byte.MIN_VALUE,Byte.MAX_VALUE));
    }
  }
  return new Double(toDouble(value));
}
