{
  if (value != null && value.getClass() == type) {
    return value;
  }
switch (getJSTypeCode(value)) {
case JSTYPE_NULL:
    if (type.isPrimitive()) {
      reportConversionError(value,type);
    }
  return null;
case JSTYPE_UNDEFINED:
if (type == ScriptRuntime.StringClass || type == ScriptRuntime.ObjectClass) {
  return "undefined";
}
 else {
  reportConversionError("undefined",type);
}
break;
case JSTYPE_BOOLEAN:
if (type == Boolean.TYPE || type == ScriptRuntime.BooleanClass || type == ScriptRuntime.ObjectClass) {
return value;
}
 else if (type == ScriptRuntime.StringClass) {
return value.toString();
}
 else {
reportConversionError(value,type);
}
break;
case JSTYPE_NUMBER:
if (type == ScriptRuntime.StringClass) {
return ScriptRuntime.toString(value);
}
 else if (type == ScriptRuntime.ObjectClass) {
return coerceToNumber(Double.TYPE,value);
}
 else if ((type.isPrimitive() && type != Boolean.TYPE) || ScriptRuntime.NumberClass.isAssignableFrom(type)) {
return coerceToNumber(type,value);
}
 else {
reportConversionError(value,type);
}
break;
case JSTYPE_STRING:
if (type == ScriptRuntime.StringClass || type.isInstance(value)) {
return value.toString();
}
 else if (type == Character.TYPE || type == ScriptRuntime.CharacterClass) {
if (((CharSequence)value).length() == 1) {
return Character.valueOf(((CharSequence)value).charAt(0));
}
 else {
return coerceToNumber(type,value);
}
}
 else if ((type.isPrimitive() && type != Boolean.TYPE) || ScriptRuntime.NumberClass.isAssignableFrom(type)) {
return coerceToNumber(type,value);
}
 else {
reportConversionError(value,type);
}
break;
case JSTYPE_JAVA_CLASS:
if (value instanceof Wrapper) {
value=((Wrapper)value).unwrap();
}
if (type == ScriptRuntime.ClassClass || type == ScriptRuntime.ObjectClass) {
return value;
}
 else if (type == ScriptRuntime.StringClass) {
return value.toString();
}
 else {
reportConversionError(value,type);
}
break;
case JSTYPE_JAVA_OBJECT:
case JSTYPE_JAVA_ARRAY:
if (value instanceof Wrapper) {
value=((Wrapper)value).unwrap();
}
if (type.isPrimitive()) {
if (type == Boolean.TYPE) {
reportConversionError(value,type);
}
return coerceToNumber(type,value);
}
 else {
if (type == ScriptRuntime.StringClass) {
return value.toString();
}
 else {
if (type.isInstance(value)) {
return value;
}
 else {
reportConversionError(value,type);
}
}
}
break;
case JSTYPE_OBJECT:
if (type == ScriptRuntime.StringClass) {
return ScriptRuntime.toString(value);
}
 else if (type.isPrimitive()) {
if (type == Boolean.TYPE) {
reportConversionError(value,type);
}
return coerceToNumber(type,value);
}
 else if (type.isInstance(value)) {
return value;
}
 else if (type == ScriptRuntime.DateClass && value instanceof NativeDate) {
double time=((NativeDate)value).getJSTimeValue();
return new Date((long)time);
}
 else if (type.isArray() && value instanceof NativeArray) {
NativeArray array=(NativeArray)value;
long length=array.getLength();
Class<?> arrayType=type.getComponentType();
Object Result=Array.newInstance(arrayType,(int)length);
for (int i=0; i < length; ++i) {
try {
Array.set(Result,i,coerceTypeImpl(arrayType,array.get(i,array)));
}
 catch (EvaluatorException ee) {
reportConversionError(value,type);
}
}
return Result;
}
 else if (value instanceof Wrapper) {
value=((Wrapper)value).unwrap();
if (type.isInstance(value)) return value;
reportConversionError(value,type);
}
 else if (type.isInterface() && (value instanceof NativeObject || value instanceof NativeFunction)) {
return createInterfaceAdapter(type,(ScriptableObject)value);
}
 else {
reportConversionError(value,type);
}
break;
}
return value;
}
