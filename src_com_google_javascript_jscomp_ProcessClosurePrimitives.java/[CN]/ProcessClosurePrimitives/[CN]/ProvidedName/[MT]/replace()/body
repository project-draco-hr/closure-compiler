{
  if (firstNode == null) {
    replacementNode=candidateDefinition;
    return;
  }
  if (candidateDefinition != null && explicitNode != null) {
    explicitNode.detachFromParent();
    compiler.reportCodeChange();
    JSDocInfo info;
    if (candidateDefinition.isExprResult()) {
      info=candidateDefinition.getFirstChild().getJSDocInfo();
    }
 else {
      info=candidateDefinition.getJSDocInfo();
    }
    if (info != null) {
      JSTypeExpression expr=info.getType();
      if (expr != null) {
        Node n=expr.getRoot();
        if (n.getType() == Token.BANG) {
          n=n.getFirstChild();
        }
        if (n.getType() == Token.STRING && !n.hasChildren() && n.getString().equals("Object")) {
          compiler.report(JSError.make(candidateDefinition,WEAK_NAMESPACE_TYPE));
        }
      }
    }
    replacementNode=candidateDefinition;
    if (candidateDefinition.isExprResult() && !candidateDefinition.getFirstChild().isQualifiedName()) {
      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
      Node assignNode=candidateDefinition.getFirstChild();
      Node nameNode=assignNode.getFirstChild();
      if (nameNode.isName()) {
        Node valueNode=nameNode.getNext();
        assignNode.removeChild(nameNode);
        assignNode.removeChild(valueNode);
        nameNode.addChildToFront(valueNode);
        Node varNode=IR.var(nameNode);
        varNode.copyInformationFrom(candidateDefinition);
        candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
        varNode.setJSDocInfo(assignNode.getJSDocInfo());
        compiler.reportCodeChange();
        replacementNode=varNode;
      }
    }
  }
 else {
    replacementNode=createDeclarationNode();
    if (firstModule == minimumModule) {
      firstNode.getParent().addChildBefore(replacementNode,firstNode);
    }
 else {
      int indexOfDot=namespace.lastIndexOf('.');
      if (indexOfDot == -1) {
        compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
      }
 else {
        ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
        Preconditions.checkNotNull(parentName);
        Preconditions.checkNotNull(parentName.replacementNode);
        parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
      }
    }
    if (explicitNode != null) {
      explicitNode.detachFromParent();
    }
    compiler.reportCodeChange();
  }
}
