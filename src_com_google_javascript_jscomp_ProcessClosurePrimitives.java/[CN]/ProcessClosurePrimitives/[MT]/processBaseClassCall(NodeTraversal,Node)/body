{
  t.report(n,USE_OF_GOOG_BASE);
  if (baseUsedInClass(n)) {
    reportBadGoogBaseUse(t,n,"goog.base in ES6 class is not allowed. Use super instead.");
    return;
  }
  Node callee=n.getFirstChild();
  Node thisArg=callee.getNext();
  if (thisArg == null || !thisArg.isThis()) {
    reportBadGoogBaseUse(t,n,"First argument must be 'this'.");
    return;
  }
  Node enclosingFnNameNode=getEnclosingDeclNameNode(n);
  if (enclosingFnNameNode == null) {
    reportBadGoogBaseUse(t,n,"Could not find enclosing method.");
    return;
  }
  String enclosingQname=enclosingFnNameNode.getQualifiedName();
  if (!enclosingQname.contains(".prototype.")) {
    Node enclosingParent=enclosingFnNameNode.getParent();
    Node maybeInheritsExpr=(enclosingParent.isAssign() ? enclosingParent.getParent() : enclosingParent).getNext();
    Node baseClassNode=null;
    if (maybeInheritsExpr != null && maybeInheritsExpr.isExprResult() && maybeInheritsExpr.getFirstChild().isCall()) {
      Node callNode=maybeInheritsExpr.getFirstChild();
      if (callNode.getFirstChild().matchesQualifiedName("goog.inherits") && callNode.getLastChild().isQualifiedName()) {
        baseClassNode=callNode.getLastChild();
      }
    }
    if (baseClassNode == null) {
      reportBadGoogBaseUse(t,n,"Could not find goog.inherits for base class");
      return;
    }
    n.replaceChild(callee,NodeUtil.newQName(compiler,SimpleFormat.format("%s.call",baseClassNode.getQualifiedName()),callee,"goog.base"));
    compiler.reportCodeChange();
  }
 else {
    Node methodNameNode=thisArg.getNext();
    if (methodNameNode == null || !methodNameNode.isString()) {
      reportBadGoogBaseUse(t,n,"Second argument must name a method.");
      return;
    }
    String methodName=methodNameNode.getString();
    String ending=".prototype." + methodName;
    if (enclosingQname == null || !enclosingQname.endsWith(ending)) {
      reportBadGoogBaseUse(t,n,"Enclosing method does not match " + methodName);
      return;
    }
    Node className=enclosingFnNameNode.getFirstGrandchild();
    n.replaceChild(callee,NodeUtil.newQName(compiler,SimpleFormat.format("%s.superClass_.%s.call",className.getQualifiedName(),methodName),callee,"goog.base"));
    n.removeChild(methodNameNode);
    compiler.reportCodeChange();
  }
}
