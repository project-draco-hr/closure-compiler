{
  SimpleErrorReporter reporter=new SimpleErrorReporter();
  final JSTypeRegistry typeRegistry=new JSTypeRegistry(reporter);
  StaticScope<JSType> scope=new AbstractStaticScope<JSType>(){
    @Override public StaticSlot<JSType> getSlot(    final String name){
      return new SimpleSlot(name,typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE),false);
    }
  }
;
  ObjectType namedType=(ObjectType)typeRegistry.getType(scope,"Foo",null,0,0);
  FunctionType functionType=typeRegistry.createFunctionType(namedType);
  typeRegistry.setLastGeneration(false);
  typeRegistry.resolveTypesInScope(scope);
  assertTrue(functionType.getReturnType().isUnknownType());
  functionType.resolve(reporter,scope);
  assertTrue(functionType.getReturnType().isUnknownType());
  typeRegistry.declareType("Foo",typeRegistry.createAnonymousObjectType(null));
  typeRegistry.resolveTypesInScope(scope);
  assertTrue(functionType.getReturnType().isUnknownType());
  assertNull("Unexpected errors: " + reporter.errors(),reporter.errors());
  assertNull("Unexpected warnings: " + reporter.warnings(),reporter.warnings());
  typeRegistry.incrementGeneration();
  typeRegistry.setLastGeneration(true);
  typeRegistry.resolveTypesInScope(scope);
  assertFalse(functionType.getReturnType().isUnknownType());
}
