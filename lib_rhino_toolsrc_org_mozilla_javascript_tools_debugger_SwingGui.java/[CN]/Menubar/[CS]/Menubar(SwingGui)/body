{
  super();
  this.debugGui=debugGui;
  String[] fileItems={"Open...","Run...","","Exit"};
  String[] fileCmds={"Open","Load","","Exit"};
  char[] fileShortCuts={'0','N',0,'X'};
  int[] fileAccelerators={KeyEvent.VK_O,KeyEvent.VK_N,0,KeyEvent.VK_Q};
  String[] editItems={"Cut","Copy","Paste","Go to function..."};
  char[] editShortCuts={'T','C','P','F'};
  String[] debugItems={"Break","Go","Step Into","Step Over","Step Out"};
  char[] debugShortCuts={'B','G','I','O','T'};
  String[] plafItems={"Metal","Windows","Motif"};
  char[] plafShortCuts={'M','W','F'};
  int[] debugAccelerators={KeyEvent.VK_PAUSE,KeyEvent.VK_F5,KeyEvent.VK_F11,KeyEvent.VK_F7,KeyEvent.VK_F8,0,0};
  JMenu fileMenu=new JMenu("File");
  fileMenu.setMnemonic('F');
  JMenu editMenu=new JMenu("Edit");
  editMenu.setMnemonic('E');
  JMenu plafMenu=new JMenu("Platform");
  plafMenu.setMnemonic('P');
  JMenu debugMenu=new JMenu("Debug");
  debugMenu.setMnemonic('D');
  windowMenu=new JMenu("Window");
  windowMenu.setMnemonic('W');
  for (int i=0; i < fileItems.length; ++i) {
    if (fileItems[i].length() == 0) {
      fileMenu.addSeparator();
    }
 else {
      JMenuItem item=new JMenuItem(fileItems[i],fileShortCuts[i]);
      item.setActionCommand(fileCmds[i]);
      item.addActionListener(this);
      fileMenu.add(item);
      if (fileAccelerators[i] != 0) {
        KeyStroke k=KeyStroke.getKeyStroke(fileAccelerators[i],Event.CTRL_MASK);
        item.setAccelerator(k);
      }
    }
  }
  for (int i=0; i < editItems.length; ++i) {
    JMenuItem item=new JMenuItem(editItems[i],editShortCuts[i]);
    item.addActionListener(this);
    editMenu.add(item);
  }
  for (int i=0; i < plafItems.length; ++i) {
    JMenuItem item=new JMenuItem(plafItems[i],plafShortCuts[i]);
    item.addActionListener(this);
    plafMenu.add(item);
  }
  for (int i=0; i < debugItems.length; ++i) {
    JMenuItem item=new JMenuItem(debugItems[i],debugShortCuts[i]);
    item.addActionListener(this);
    if (debugAccelerators[i] != 0) {
      KeyStroke k=KeyStroke.getKeyStroke(debugAccelerators[i],0);
      item.setAccelerator(k);
    }
    if (i != 0) {
      interruptOnlyItems.add(item);
    }
 else {
      runOnlyItems.add(item);
    }
    debugMenu.add(item);
  }
  breakOnExceptions=new JCheckBoxMenuItem("Break on Exceptions");
  breakOnExceptions.setMnemonic('X');
  breakOnExceptions.addActionListener(this);
  breakOnExceptions.setSelected(false);
  debugMenu.add(breakOnExceptions);
  breakOnEnter=new JCheckBoxMenuItem("Break on Function Enter");
  breakOnEnter.setMnemonic('E');
  breakOnEnter.addActionListener(this);
  breakOnEnter.setSelected(false);
  debugMenu.add(breakOnEnter);
  breakOnReturn=new JCheckBoxMenuItem("Break on Function Return");
  breakOnReturn.setMnemonic('R');
  breakOnReturn.addActionListener(this);
  breakOnReturn.setSelected(false);
  debugMenu.add(breakOnReturn);
  add(fileMenu);
  add(editMenu);
  add(debugMenu);
  JMenuItem item;
  windowMenu.add(item=new JMenuItem("Cascade",'A'));
  item.addActionListener(this);
  windowMenu.add(item=new JMenuItem("Tile",'T'));
  item.addActionListener(this);
  windowMenu.addSeparator();
  windowMenu.add(item=new JMenuItem("Console",'C'));
  item.addActionListener(this);
  add(windowMenu);
  updateEnabled(false);
}
