{
  ClassLoader loader=cx.getApplicationClassLoader();
  final NativeJavaTopPackage top=new NativeJavaTopPackage(loader);
  top.setPrototype(getObjectPrototype(scope));
  top.setParentScope(scope);
  for (int i=0; i != commonPackages.length; i++) {
    NativeJavaPackage parent=top;
    for (int j=0; j != commonPackages[i].length; j++) {
      parent=parent.forcePackage(commonPackages[i][j],scope);
    }
  }
  IdFunctionObject getClass=new IdFunctionObject(top,FTAG,Id_getClass,"getClass",1,scope);
  String[] topNames=ScriptRuntime.getTopPackageNames();
  NativeJavaPackage[] topPackages=new NativeJavaPackage[topNames.length];
  for (int i=0; i < topNames.length; i++) {
    topPackages[i]=(NativeJavaPackage)top.get(topNames[i],top);
  }
  ScriptableObject global=(ScriptableObject)scope;
  if (sealed) {
    getClass.sealObject();
  }
  getClass.exportAsScopeProperty();
  global.defineProperty("Packages",top,ScriptableObject.DONTENUM);
  for (int i=0; i < topNames.length; i++) {
    global.defineProperty(topNames[i],topPackages[i],ScriptableObject.DONTENUM);
  }
}
