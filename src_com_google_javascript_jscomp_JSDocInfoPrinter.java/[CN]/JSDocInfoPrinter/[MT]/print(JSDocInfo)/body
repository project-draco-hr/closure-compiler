{
  StringBuilder sb=new StringBuilder("/**");
  if (info.isConstructor()) {
    sb.append("@constructor ");
  }
  if (info.isInterface()) {
    sb.append("@interface ");
  }
  if (info.makesDicts()) {
    sb.append("@dict ");
  }
  if (info.makesStructs()) {
    sb.append("@struct ");
  }
  if (info.makesUnrestricted()) {
    sb.append("@unrestricted ");
  }
  if (info.isDefine()) {
    sb.append("@define {");
    appendTypeNode(sb,info.getType().getRoot());
    sb.append("} ");
  }
  if (info.isOverride()) {
    sb.append("@override ");
  }
  if (info.isConstant()) {
    sb.append("@const ");
  }
  if (info.isDeprecated()) {
    sb.append("@deprecated ");
    sb.append(info.getDeprecationReason() + " ");
  }
  if (info.getVisibility() != null && info.getVisibility() != Visibility.INHERITED) {
    sb.append("@" + info.getVisibility().toString().toLowerCase() + " ");
  }
  for (  String suppression : info.getSuppressions()) {
    sb.append("@suppress {" + suppression + "} ");
  }
  ImmutableList<String> names=info.getTemplateTypeNames();
  if (!names.isEmpty()) {
    sb.append("@template ");
    Joiner.on(',').appendTo(sb,names);
    sb.append("\n");
  }
  if (info.getParameterCount() > 0) {
    for (    String name : info.getParameterNames()) {
      sb.append("@param {");
      appendTypeNode(sb,info.getParameterType(name).getRoot());
      sb.append("} " + name + "\n");
    }
  }
  if (info.hasReturnType()) {
    sb.append("@return {");
    appendTypeNode(sb,info.getReturnType().getRoot());
    sb.append("}\n");
  }
  if (info.hasThisType()) {
    sb.append("@this {");
    Node typeNode=info.getThisType().getRoot();
    if (typeNode.getType() == Token.BANG) {
      appendTypeNode(sb,typeNode.getFirstChild());
    }
 else {
      appendTypeNode(sb,typeNode);
    }
    sb.append("}\n");
  }
  if (info.hasBaseType()) {
    sb.append("@extends {");
    Node typeNode=info.getBaseType().getRoot();
    if (typeNode.getType() == Token.BANG) {
      appendTypeNode(sb,typeNode.getFirstChild());
    }
 else {
      appendTypeNode(sb,typeNode);
    }
    sb.append("}\n");
  }
  for (  JSTypeExpression type : info.getImplementedInterfaces()) {
    sb.append("@implements {");
    Node typeNode=type.getRoot();
    if (typeNode.getType() == Token.BANG) {
      appendTypeNode(sb,typeNode.getFirstChild());
    }
 else {
      appendTypeNode(sb,typeNode);
    }
    sb.append("}\n");
  }
  if (info.hasTypedefType()) {
    sb.append("@typedef {");
    appendTypeNode(sb,info.getTypedefType().getRoot());
    sb.append("}\n");
  }
  if (info.hasType()) {
    if (info.isInlineType()) {
      sb.append(" ");
      appendTypeNode(sb,info.getType().getRoot());
      sb.append(" ");
    }
 else {
      sb.append("@type {");
      appendTypeNode(sb,info.getType().getRoot());
      sb.append("}\n");
    }
  }
  if (!info.getThrownTypes().isEmpty()) {
    sb.append("@throws {");
    appendTypeNode(sb,info.getThrownTypes().get(0).getRoot());
    sb.append("}\n");
  }
  if (info.hasEnumParameterType()) {
    sb.append("@enum {");
    appendTypeNode(sb,info.getEnumParameterType().getRoot());
    sb.append("}\n");
  }
  sb.append("*/");
  return sb.toString();
}
