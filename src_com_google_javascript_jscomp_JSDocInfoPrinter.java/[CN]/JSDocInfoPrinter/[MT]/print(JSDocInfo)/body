{
  boolean multiline=false;
  List<String> parts=new ArrayList<>();
  parts.add("/**");
  if (info.isExport()) {
    parts.add("@export");
  }
 else   if (info.getVisibility() != null && info.getVisibility() != Visibility.INHERITED) {
    parts.add("@" + info.getVisibility().toString().toLowerCase());
  }
  if (info.isConstant() && !info.isDefine()) {
    parts.add("@const");
  }
  if (info.makesDicts()) {
    parts.add("@dict");
  }
  if (info.makesStructs()) {
    parts.add("@struct");
  }
  if (info.makesUnrestricted()) {
    parts.add("@unrestricted ");
  }
  if (info.isConstructor()) {
    parts.add("@constructor");
  }
  if (info.isInterface() && !info.usesImplicitMatch()) {
    parts.add("@interface");
  }
  if (info.isInterface() && info.usesImplicitMatch()) {
    parts.add("@record");
  }
  if (info.hasBaseType()) {
    multiline=true;
    Node typeNode=stripBang(info.getBaseType().getRoot());
    parts.add(buildAnnotationWithType("extends",typeNode));
  }
  for (  JSTypeExpression type : info.getExtendedInterfaces()) {
    multiline=true;
    Node typeNode=stripBang(type.getRoot());
    parts.add(buildAnnotationWithType("extends",typeNode));
  }
  for (  JSTypeExpression type : info.getImplementedInterfaces()) {
    multiline=true;
    Node typeNode=stripBang(type.getRoot());
    parts.add(buildAnnotationWithType("implements",typeNode));
  }
  if (info.hasThisType()) {
    multiline=true;
    Node typeNode=stripBang(info.getThisType().getRoot());
    parts.add(buildAnnotationWithType("this",typeNode));
  }
  if (info.getParameterCount() > 0) {
    multiline=true;
    for (    String name : info.getParameterNames()) {
      parts.add("@param " + buildParamType(name,info.getParameterType(name)));
    }
  }
  if (info.hasReturnType()) {
    multiline=true;
    parts.add(buildAnnotationWithType("return",info.getReturnType()));
  }
  if (!info.getThrownTypes().isEmpty()) {
    parts.add(buildAnnotationWithType("throws",info.getThrownTypes().get(0)));
  }
  ImmutableList<String> names=info.getTemplateTypeNames();
  if (!names.isEmpty()) {
    parts.add("@template " + Joiner.on(',').join(names));
    multiline=true;
  }
  if (info.isOverride()) {
    parts.add("@override");
  }
  if (info.hasType() && !info.isDefine()) {
    if (info.isInlineType()) {
      parts.add(typeNode(info.getType().getRoot()));
    }
 else {
      parts.add(buildAnnotationWithType("type",info.getType()));
    }
  }
  if (info.isDefine()) {
    parts.add(buildAnnotationWithType("define",info.getType()));
  }
  if (info.hasTypedefType()) {
    parts.add(buildAnnotationWithType("typedef",info.getTypedefType()));
  }
  if (info.hasEnumParameterType()) {
    parts.add(buildAnnotationWithType("enum",info.getEnumParameterType()));
  }
  Set<String> suppressions=info.getSuppressions();
  if (!suppressions.isEmpty()) {
    String[] arr=suppressions.toArray(new String[0]);
    Arrays.sort(arr,Ordering.<String>natural());
    parts.add("@suppress {" + Joiner.on(',').join(arr) + "}");
    multiline=true;
  }
  if (info.isDeprecated()) {
    parts.add("@deprecated " + info.getDeprecationReason());
    multiline=true;
  }
  parts.add("*/");
  StringBuilder sb=new StringBuilder();
  if (multiline) {
    Joiner.on("\n ").appendTo(sb,parts);
  }
 else {
    Joiner.on(" ").appendTo(sb,parts);
  }
  sb.append((multiline) ? "\n" : " ");
  return sb.toString();
}
