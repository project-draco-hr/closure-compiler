{
  if (useOriginalName && typeNode.getOriginalName() != null) {
    sb.append(typeNode.getOriginalName());
    return;
  }
  if (typeNode.getToken() == Token.BANG) {
    sb.append("!");
    appendTypeNode(sb,typeNode.getFirstChild());
  }
 else   if (typeNode.getToken() == Token.EQUALS) {
    appendTypeNode(sb,typeNode.getFirstChild());
    sb.append("=");
  }
 else   if (typeNode.getToken() == Token.PIPE) {
    sb.append("(");
    Node lastChild=typeNode.getLastChild();
    for (Node child=typeNode.getFirstChild(); child != null; child=child.getNext()) {
      appendTypeNode(sb,child);
      if (child != lastChild) {
        sb.append("|");
      }
    }
    sb.append(")");
  }
 else   if (typeNode.getToken() == Token.ELLIPSIS) {
    sb.append("...");
    if (typeNode.hasChildren() && !typeNode.getFirstChild().isEmpty()) {
      appendTypeNode(sb,typeNode.getFirstChild());
    }
  }
 else   if (typeNode.getToken() == Token.STAR) {
    sb.append("*");
  }
 else   if (typeNode.getToken() == Token.QMARK) {
    sb.append("?");
    if (typeNode.hasChildren()) {
      appendTypeNode(sb,typeNode.getFirstChild());
    }
  }
 else   if (typeNode.isFunction()) {
    appendFunctionNode(sb,typeNode);
  }
 else   if (typeNode.getToken() == Token.LC) {
    sb.append("{");
    Node lb=typeNode.getFirstChild();
    Node lastColon=lb.getLastChild();
    for (Node colon=lb.getFirstChild(); colon != null; colon=colon.getNext()) {
      if (colon.hasChildren()) {
        sb.append(colon.getFirstChild().getString()).append(":");
        appendTypeNode(sb,colon.getLastChild());
      }
 else {
        sb.append(colon.getString());
      }
      if (colon != lastColon) {
        sb.append(",");
      }
    }
    sb.append("}");
  }
 else   if (typeNode.getToken() == Token.VOID) {
    sb.append("void");
  }
 else {
    if (typeNode.hasChildren()) {
      sb.append(typeNode.getString()).append("<");
      Node child=typeNode.getFirstChild();
      Node last=child.getLastChild();
      for (Node type=child.getFirstChild(); type != null; type=type.getNext()) {
        appendTypeNode(sb,type);
        if (type != last) {
          sb.append(",");
        }
      }
      sb.append(">");
    }
 else {
      sb.append(typeNode.getString());
    }
  }
}
