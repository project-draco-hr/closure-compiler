{
  Preconditions.checkArgument(callNode.isCall() || callNode.isNew());
  Node callee=callNode.getFirstChild();
  FunctionTypeBuilder builder=new FunctionTypeBuilder(this.commonTypes);
  TypeEnv tmpEnv=inEnv;
  for (Node arg=callee.getNext(); arg != null; arg=arg.getNext()) {
    EnvTypePair pair=analyzeExprFwd(arg,tmpEnv);
    tmpEnv=pair.env;
    builder.addReqFormal(pair.type);
  }
  JSType looseRetType=requiredType.isUnknown() ? BOTTOM : requiredType;
  JSType looseFunctionType=commonTypes.fromFunctionType(builder.addRetType(looseRetType).addLoose().buildFunction());
  EnvTypePair calleePair=analyzeExprFwd(callee,tmpEnv,commonTypes.topFunction(),looseFunctionType);
  JSType result=calleePair.type.getFunTypeIfSingletonObj().getReturnType();
  return new EnvTypePair(calleePair.env,isImpreciseType(result) ? requiredType : result);
}
