{
  if (isPropertyTestCall(expr)) {
    return analyzePropertyTestCallFwd(expr,inEnv,specializedType);
  }
  Node callee=expr.getFirstChild();
  if (isFunctionBind(callee,inEnv,true)) {
    return analyzeFunctionBindFwd(expr,inEnv);
  }
  AssertionFunctionSpec assertionFunctionSpec=assertionFunctionsMap.get(callee.getQualifiedName());
  if (assertionFunctionSpec != null) {
    return analyzeAssertionCall(expr,inEnv,assertionFunctionSpec);
  }
  EnvTypePair calleePair=analyzeExprFwd(callee,inEnv,commonTypes.topFunction());
  TypeEnv envAfterCallee=calleePair.env;
  calleePair=mayWarnAboutNullableReferenceAndTighten(callee,calleePair.type,null,envAfterCallee);
  JSType calleeType=calleePair.type;
  if (calleeType.isBottom() || !calleeType.isSubtypeOf(commonTypes.topFunction())) {
    warnings.add(JSError.make(expr,NOT_CALLABLE,calleeType.toString()));
  }
  FunctionType funType=calleeType.getFunTypeIfSingletonObj();
  if (funType == null || funType.isTopFunction() || funType.isQmarkFunction()) {
    return analyzeCallNodeArgsFwdWhenError(expr,envAfterCallee);
  }
 else   if (funType.isLoose()) {
    return analyzeLooseCallNodeFwd(expr,envAfterCallee,requiredType);
  }
 else   if (expr.isCall() && funType.isSomeConstructorOrInterface() && (funType.getReturnType().isUnknown() || funType.getReturnType().isUndefined())) {
    warnings.add(JSError.make(expr,CONSTRUCTOR_NOT_CALLABLE,funType.toString()));
    return analyzeCallNodeArgsFwdWhenError(expr,envAfterCallee);
  }
 else   if (expr.isNew() && (!funType.isSomeConstructorOrInterface() || funType.isInterfaceDefinition())) {
    warnings.add(JSError.make(expr,NOT_A_CONSTRUCTOR,funType.toString()));
    return analyzeCallNodeArgsFwdWhenError(expr,envAfterCallee);
  }
  int maxArity=funType.getMaxArity();
  int minArity=funType.getMinArity();
  int numArgs=expr.getChildCount() - 1;
  if (numArgs < minArity || numArgs > maxArity) {
    warnings.add(JSError.make(expr,WRONG_ARGUMENT_COUNT,getReadableCalleeName(callee),Integer.toString(numArgs),Integer.toString(minArity)," and at most " + maxArity));
    return analyzeCallNodeArgsFwdWhenError(expr,envAfterCallee);
  }
  FunctionType origFunType=funType;
  if (funType.isGeneric()) {
    Map<String,JSType> typeMap=calcTypeInstantiationFwd(expr,callee.isGetProp() ? callee.getFirstChild() : null,expr.getSecondChild(),funType,envAfterCallee);
    funType=funType.instantiateGenerics(typeMap);
    println("Instantiated function type: " + funType);
  }
  List<JSType> argTypes=new ArrayList<>();
  TypeEnv tmpEnv=analyzeCallNodeArgumentsFwd(expr,expr.getSecondChild(),funType,argTypes,envAfterCallee);
  if (callee.isName()) {
    String calleeName=callee.getString();
    if (currentScope.isKnownFunction(calleeName) && !currentScope.isExternalFunction(calleeName)) {
      if (currentScope.isLocalFunDef(calleeName)) {
        tmpEnv=collectTypesForFreeVarsFwd(callee,tmpEnv);
      }
 else       if (!origFunType.isGeneric()) {
        JSType expectedRetType=requiredType;
        println("Updating deferred check with ret: ",expectedRetType," and args: ",argTypes);
        DeferredCheck dc;
        if (expr.isCall()) {
          dc=deferredChecks.get(expr);
          if (dc != null) {
            dc.updateReturn(expectedRetType);
          }
 else {
            Preconditions.checkState(!currentScope.hasUndeclaredFormalsOrOuters(),"No deferred check created in backward direction for %s",expr);
          }
        }
 else {
          dc=new DeferredCheck(expr,null,currentScope,currentScope.getScope(calleeName));
          deferredChecks.put(expr,dc);
        }
        if (dc != null) {
          dc.updateArgTypes(argTypes);
        }
      }
    }
  }
  JSType retType=expr.isNew() ? funType.getThisType() : funType.getReturnType();
  if (retType.isSubtypeOf(requiredType)) {
    retType=retType.specialize(specializedType);
  }
  return new EnvTypePair(tmpEnv,retType);
}
