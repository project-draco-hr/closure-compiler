{
switch (expr.getType()) {
case Token.THIS:
case Token.NAME:
{
      EnvTypePair pair=analyzeExprBwd(expr,outEnv,type);
      String name=expr.getQualifiedName();
      JSType declType=currentScope.getDeclaredTypeOf(name);
      if (doSlicing) {
        pair.env=envPutType(pair.env,name,declType != null ? declType : JSType.UNKNOWN);
      }
      return new LValueResult(pair.env,pair.type,declType,pair.type.hasNonScalar() ? name : null);
    }
case Token.NEW:
{
    EnvTypePair pair=analyzeExprBwd(expr,outEnv,type);
    return new LValueResult(pair.env,pair.type,null,null);
  }
case Token.GETPROP:
{
  Node obj=expr.getFirstChild();
  String pname=expr.getLastChild().getString();
  return analyzePropLValBwd(obj,pname,outEnv,type,doSlicing);
}
case Token.GETELEM:
{
if (expr.getLastChild().isString()) {
  Node obj=expr.getFirstChild();
  String pname=expr.getLastChild().getString();
  return analyzePropLValBwd(obj,pname,outEnv,type,doSlicing);
}
return new LValueResult(outEnv,type,null,null);
}
case Token.OBJECTLIT:
{
EnvTypePair etPair=analyzeExprBwd(expr,outEnv,type);
return new LValueResult(etPair.env,etPair.type,null,null);
}
}
throw new RuntimeException("analyzeLValueBwd: unknown lhs expression @ node " + expr);
}
