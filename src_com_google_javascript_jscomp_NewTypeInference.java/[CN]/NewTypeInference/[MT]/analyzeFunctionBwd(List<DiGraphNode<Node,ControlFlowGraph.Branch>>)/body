{
  for (  DiGraphNode<Node,ControlFlowGraph.Branch> dn : workset) {
    Node n=dn.getValue();
    TypeEnv outEnv=Preconditions.checkNotNull(getOutEnv(dn));
    TypeEnv inEnv;
    println("\tBWD Statment: ",n);
    println("\t\toutEnv: ",outEnv);
switch (n.getType()) {
case EXPR_RESULT:
      inEnv=analyzeExprBwd(n.getFirstChild(),outEnv,JSType.UNKNOWN).env;
    break;
case RETURN:
{
    Node retExp=n.getFirstChild();
    if (retExp == null) {
      inEnv=outEnv;
    }
 else {
      JSType declRetType=currentScope.getDeclaredFunctionType().getReturnType();
      declRetType=declRetType == null ? JSType.UNKNOWN : declRetType;
      inEnv=analyzeExprBwd(retExp,outEnv,declRetType).env;
    }
    break;
  }
case VAR:
{
  if (NodeUtil.isTypedefDecl(n)) {
    inEnv=outEnv;
    break;
  }
  inEnv=outEnv;
  for (Node nameNode=n.getFirstChild(); nameNode != null; nameNode=nameNode.getNext()) {
    String varName=nameNode.getString();
    Node rhs=nameNode.getFirstChild();
    JSType declType=currentScope.getDeclaredTypeOf(varName);
    inEnv=envPutType(inEnv,varName,JSType.UNKNOWN);
    if (rhs == null || currentScope.isLocalFunDef(varName)) {
      continue;
    }
    JSType inferredType=envGetType(outEnv,varName);
    JSType requiredType;
    if (declType == null) {
      requiredType=inferredType;
    }
 else {
      requiredType=JSType.meet(declType,inferredType);
      if (requiredType.isBottom()) {
        requiredType=JSType.UNKNOWN;
      }
    }
    inEnv=analyzeExprBwd(rhs,inEnv,requiredType).env;
  }
  break;
}
case BLOCK:
case BREAK:
case CATCH:
case CONTINUE:
case DEFAULT_CASE:
case DEBUGGER:
case EMPTY:
case SCRIPT:
case TRY:
inEnv=outEnv;
break;
case DO:
case FOR:
case IF:
case WHILE:
Node expr=NodeUtil.isForIn(n) ? n.getFirstChild() : NodeUtil.getConditionExpression(n);
inEnv=analyzeExprBwd(expr,outEnv).env;
break;
case THROW:
case CASE:
case SWITCH:
inEnv=analyzeExprBwd(n.getFirstChild(),outEnv).env;
break;
default :
if (NodeUtil.isStatement(n)) {
throw new RuntimeException("Unhandled statement type: " + Token.name(n.getType()));
}
 else {
inEnv=analyzeExprBwd(n,outEnv).env;
break;
}
}
println("\t\tinEnv: ",inEnv);
for (DiGraphEdge<Node,ControlFlowGraph.Branch> de : dn.getInEdges()) {
envs.put(de,inEnv);
}
}
}
