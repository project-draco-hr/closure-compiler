{
  for (  DiGraphNode<Node,ControlFlowGraph.Branch> dn : workset) {
    Node n=dn.getValue();
    if (n.isThrow()) {
      continue;
    }
    TypeEnv outEnv=getOutEnv(n);
    TypeEnv inEnv;
    println("\tBWD Statment: ",n);
    println("\t\toutEnv: ",outEnv);
switch (n.getType()) {
case Token.EXPR_RESULT:
      inEnv=analyzeExprBwd(n.getFirstChild(),outEnv,JSType.UNKNOWN).env;
    break;
case Token.RETURN:
{
    Node retExp=n.getFirstChild();
    if (retExp == null) {
      inEnv=outEnv;
    }
 else {
      JSType declRetType=currentScope.getDeclaredType().getReturnType();
      declRetType=declRetType == null ? JSType.UNKNOWN : declRetType;
      inEnv=analyzeExprBwd(retExp,outEnv,declRetType).env;
    }
    break;
  }
case Token.VAR:
{
  inEnv=null;
  for (Node nameNode=n.getFirstChild(); nameNode != null; nameNode=nameNode.getNext()) {
    String varName=nameNode.getQualifiedName();
    Node rhs=nameNode.getFirstChild();
    JSType declType=currentScope.getDeclaredTypeOf(varName);
    inEnv=envPutType(outEnv,varName,JSType.UNKNOWN);
    if (rhs == null || currentScope.isLocalFunDef(varName)) {
      continue;
    }
    JSType inferredType=envGetType(outEnv,varName);
    JSType requiredType;
    if (declType == null) {
      requiredType=inferredType;
    }
 else {
      requiredType=JSType.meet(declType,inferredType);
      if (requiredType.isBottom()) {
        requiredType=JSType.UNKNOWN;
      }
    }
    inEnv=analyzeExprBwd(rhs,inEnv,requiredType).env;
  }
  break;
}
case Token.BLOCK:
case Token.BREAK:
case Token.CATCH:
case Token.CONTINUE:
case Token.DEFAULT_CASE:
case Token.DEBUGGER:
case Token.EMPTY:
case Token.SCRIPT:
case Token.TRY:
inEnv=outEnv;
break;
case Token.DO:
case Token.FOR:
case Token.IF:
case Token.WHILE:
Node expr=NodeUtil.isForIn(n) ? n.getFirstChild() : NodeUtil.getConditionExpression(n);
inEnv=analyzeExprBwd(expr,outEnv).env;
break;
case Token.CASE:
case Token.SWITCH:
inEnv=analyzeExprBwd(n.getFirstChild(),outEnv).env;
break;
default :
if (NodeUtil.isStatement(n)) {
throw new RuntimeException("Unhandled statement type: " + Token.name(n.getType()));
}
 else {
inEnv=analyzeExprBwd(n,outEnv).env;
break;
}
}
println("\t\tinEnv: ",inEnv);
setInEnv(n,inEnv);
}
}
