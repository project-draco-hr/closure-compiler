{
  if (seen.contains(dn) || dn == this.cfg.getImplicitReturn()) {
    return;
  }
switch (dn.getValue().getType()) {
case DO:
case WHILE:
case FOR:
    List<DiGraphEdge<Node,ControlFlowGraph.Branch>> outEdges=dn.getOutEdges();
  seen.add(dn);
workset.add(dn);
for (DiGraphEdge<Node,ControlFlowGraph.Branch> outEdge : outEdges) {
if (outEdge.getValue() == ControlFlowGraph.Branch.ON_TRUE) {
  buildWorksetHelper(outEdge.getDestination(),workset,seen);
}
}
workset.add(dn);
for (DiGraphEdge<Node,ControlFlowGraph.Branch> outEdge : outEdges) {
if (outEdge.getValue() == ControlFlowGraph.Branch.ON_FALSE) {
buildWorksetHelper(outEdge.getDestination(),workset,seen);
}
}
break;
default :
{
for (DiGraphEdge<Node,ControlFlowGraph.Branch> inEdge : dn.getInEdges()) {
if (!seen.contains(inEdge.getSource()) && !inEdge.getSource().getValue().isDo()) {
return;
}
}
seen.add(dn);
if (this.cfg.getEntry() != dn) {
workset.add(dn);
}
while (true) {
Node n=dn.getValue();
if (n.isTry()) {
maybeAddDeadCode(workset,seen,n.getSecondChild());
}
 else if (n.isBreak() || n.isContinue() || n.isThrow()) {
maybeAddDeadCode(workset,seen,n.getNext());
}
List<DiGraphNode<Node,ControlFlowGraph.Branch>> succs=this.cfg.getDirectedSuccNodes(dn);
if (succs.size() != 1) {
break;
}
DiGraphNode<Node,ControlFlowGraph.Branch> succ=succs.get(0);
if (succ == this.cfg.getImplicitReturn()) {
if (n.getNext() != null) {
maybeAddDeadCode(workset,seen,n.getNext());
}
return;
}
if (this.cfg.getDirectedPredNodes(succ).size() > 1) {
break;
}
workset.add(succ);
seen.add(succ);
dn=succ;
}
for (DiGraphNode<Node,ControlFlowGraph.Branch> succ : this.cfg.getDirectedSuccNodes(dn)) {
buildWorksetHelper(succ,workset,seen);
}
break;
}
}
}
