{
  TypeEnv env=inEnv;
  Node arg=firstArg;
  int i=0;
  while (arg != null) {
    JSType formalType=funType.getFormalType(i);
    Preconditions.checkState(!formalType.isBottom());
    EnvTypePair pair=analyzeExprFwd(arg,env,formalType);
    JSType argTypeForDeferredCheck=pair.type;
    if (funType.isOptionalArg(i) && pair.type.equals(UNDEFINED)) {
      argTypeForDeferredCheck=null;
    }
 else     if (!pair.type.isSubtypeOf(formalType)) {
      String fnName=getReadableCalleeName(call.getFirstChild());
      warnings.add(JSError.make(arg,INVALID_ARGUMENT_TYPE,Integer.toString(i + 1),fnName,errorMsgWithTypeDiff(formalType,pair.type)));
      argTypeForDeferredCheck=null;
    }
    argTypesForDeferredCheck.add(argTypeForDeferredCheck);
    env=pair.env;
    arg=arg.getNext();
    i++;
  }
  return env;
}
