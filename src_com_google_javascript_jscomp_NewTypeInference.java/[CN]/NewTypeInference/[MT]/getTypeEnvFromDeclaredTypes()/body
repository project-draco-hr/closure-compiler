{
  TypeEnv env=new TypeEnv();
  Set<String> varNames=currentScope.getOuterVars();
  Set<String> locals=currentScope.getLocals();
  varNames.addAll(locals);
  varNames.addAll(currentScope.getExterns());
  if (currentScope.isFunction()) {
    if (currentScope.getName() != null) {
      varNames.add(currentScope.getName());
    }
    varNames.addAll(currentScope.getFormals());
    if (currentScope.hasThis()) {
      varNames.add(THIS_ID);
    }
    env=envPutType(env,"arguments",commonTypes.getArgumentsArrayType());
    JSType argsArrayElmType=JSType.UNKNOWN;
    if (currentScope.getDeclaredFunctionType().hasRestFormals()) {
      argsArrayElmType=currentScope.getDeclaredFunctionType().getRestFormalsType();
    }
    env=envPutType(env,ARGSARRAYELM_ID,argsArrayElmType);
  }
  for (  String varName : varNames) {
    if (!locals.contains(varName) || !currentScope.isFunctionNamespace(varName)) {
      JSType declType=currentScope.getDeclaredTypeOf(varName);
      env=envPutType(env,varName,declType == null ? JSType.UNKNOWN : pickInitialType(declType));
    }
  }
  for (  String fnName : currentScope.getLocalFunDefs()) {
    JSType summaryType=getSummaryOfLocalFunDef(fnName);
    FunctionType fnType=summaryType.getFunType();
    if (fnType.isConstructor() || fnType.isInterfaceDefinition()) {
      summaryType=fnType.getConstructorObject();
    }
    env=envPutType(env,fnName,summaryType);
  }
  return env;
}
