{
  if (NodeUtil.getRootOfQualifiedName(qnameNode).isThis()) {
    return null;
  }
switch (qnameNode.getType()) {
case NAME:
{
      JSType result=envGetType(env,qnameNode.getString());
      Preconditions.checkNotNull(result,"Null declared type@%s",qnameNode);
      if (isFwd) {
        maybeSetTypeI(qnameNode,result);
      }
      return result;
    }
case GETPROP:
{
    JSType recvType=markAndGetTypeOfPreanalyzedNode(qnameNode.getFirstChild(),env,isFwd);
    String pname=qnameNode.getLastChild().getString();
    JSType result=null;
    if (recvType.isSubtypeOf(JSType.TOP_OBJECT)) {
      result=recvType.getProp(new QualifiedName(pname));
    }
    if (result == null) {
      warnings.add(JSError.make(qnameNode,UNKNOWN_NAMESPACE_PROPERTY,qnameNode.getQualifiedName()));
      return JSType.UNKNOWN;
    }
    Preconditions.checkNotNull(result,"Null declared type@%s",qnameNode);
    if (isFwd) {
      maybeSetTypeI(qnameNode,result);
    }
    return result;
  }
default :
throw new RuntimeException("markAndGetTypeOfPreanalyzedNode: unexpected node " + compiler.toSource(qnameNode) + " with token "+ qnameNode.getType());
}
}
