{
  for (  DiGraphNode<Node,ControlFlowGraph.Branch> dn : workset) {
    Node n=dn.getValue();
    Preconditions.checkState(n != null,"Implicit return should not be in workset.");
    TypeEnv inEnv=getInEnv(n);
    TypeEnv outEnv=null;
    println("\tFWD Statment: ",n);
    println("\t\tinEnv: ",inEnv);
    boolean conditional=false;
switch (n.getType()) {
case Token.BLOCK:
case Token.BREAK:
case Token.CATCH:
case Token.CONTINUE:
case Token.DEFAULT_CASE:
case Token.EMPTY:
case Token.FUNCTION:
case Token.SCRIPT:
case Token.TRY:
      outEnv=inEnv;
    break;
case Token.EXPR_RESULT:
  println("\tsemi ",Token.name(n.getFirstChild().getType()));
outEnv=analyzeExprFwd(n.getFirstChild(),inEnv,JSType.UNKNOWN).env;
break;
case Token.RETURN:
{
Node retExp=n.getFirstChild();
JSType declRetType=currentScope.getDeclaredType().getReturnType();
declRetType=declRetType == null ? JSType.UNKNOWN : declRetType;
JSType actualRetType;
if (retExp == null) {
actualRetType=JSType.UNDEFINED;
outEnv=envPutType(inEnv,RETVAL_ID,actualRetType);
}
 else {
EnvTypePair retPair=analyzeExprFwd(retExp,inEnv,declRetType);
actualRetType=retPair.type;
outEnv=envPutType(retPair.env,RETVAL_ID,actualRetType);
}
if (!actualRetType.isSubtypeOf(declRetType)) {
warnings.add(JSError.make(n,RETURN_NONDECLARED_TYPE,declRetType.toString(),actualRetType.toString()));
}
break;
}
case Token.DO:
case Token.IF:
case Token.FOR:
case Token.WHILE:
if (NodeUtil.isForIn(n)) {
Node obj=n.getChildAtIndex(1);
EnvTypePair pair=analyzeExprFwd(obj,inEnv,pickReqObjType(n));
JSType objType=pair.type;
if (!objType.isSubtypeOf(JSType.TOP_OBJECT)) {
warnings.add(JSError.make(obj,FORIN_EXPECTS_OBJECT,objType.toString()));
}
 else if (objType.isStruct()) {
warnings.add(JSError.make(obj,TypeCheck.IN_USED_WITH_STRUCT));
}
Node lhs=n.getFirstChild();
LValueResultFwd lval=analyzeLValueFwd(lhs,inEnv,JSType.STRING);
if (lval.declType != null && !lval.declType.isSubtypeOf(JSType.STRING)) {
warnings.add(JSError.make(lhs,FORIN_EXPECTS_STRING_KEY,lval.declType.toString()));
outEnv=lval.env;
}
 else {
outEnv=updateLvalueTypeInEnv(lval.env,lhs,lval.ptr,JSType.STRING);
}
break;
}
conditional=true;
analyzeConditionalStmFwd(n,NodeUtil.getConditionExpression(n),inEnv);
break;
case Token.CASE:
{
conditional=true;
analyzeConditionalStmFwd(n,n,inEnv);
break;
}
case Token.VAR:
outEnv=inEnv;
for (Node nameNode=n.getFirstChild(); nameNode != null; nameNode=nameNode.getNext()) {
outEnv=processVarDeclaration(nameNode,outEnv);
}
break;
case Token.SWITCH:
case Token.THROW:
outEnv=analyzeExprFwd(n.getFirstChild(),inEnv).env;
break;
default :
if (NodeUtil.isStatement(n)) {
throw new RuntimeException("Unhandled statement type: " + Token.name(n.getType()));
}
 else {
outEnv=analyzeExprFwd(n,inEnv,JSType.UNKNOWN).env;
break;
}
}
if (!conditional) {
println("\t\toutEnv: ",outEnv);
setOutEnv(n,outEnv);
}
}
}
