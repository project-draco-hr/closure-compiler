{
switch (typeHint) {
case "array":
case "isArray":
    JSType arrayType=symbolTable.getArrayType();
  if (arrayType.isUnknown()) {
    return JSType.UNKNOWN;
  }
return booleanContext.isTruthy() ? arrayType : beforeType.removeType(arrayType);
case "boolean":
case "isBoolean":
return booleanContext.isTruthy() ? JSType.BOOLEAN : beforeType.removeType(JSType.BOOLEAN);
case "function":
case "isFunction":
return booleanContext.isTruthy() ? JSType.looseTopFunction() : beforeType.removeType(JSType.topFunction());
case "null":
case "isNull":
return booleanContext.isTruthy() ? JSType.NULL : beforeType.removeType(JSType.NULL);
case "number":
case "isNumber":
return booleanContext.isTruthy() ? JSType.NUMBER : beforeType.removeType(JSType.NUMBER);
case "string":
case "isString":
return booleanContext.isTruthy() ? JSType.STRING : beforeType.removeType(JSType.STRING);
case "isDef":
return booleanContext.isTruthy() ? beforeType.removeType(JSType.UNDEFINED) : JSType.UNDEFINED;
case "isDefAndNotNull":
return booleanContext.isTruthy() ? beforeType.removeType(JSType.NULL_OR_UNDEF) : JSType.NULL_OR_UNDEF;
case "isObject":
return booleanContext.isTruthy() ? JSType.TOP_OBJECT : beforeType.removeType(JSType.TOP_OBJECT);
case "object":
return JSType.UNKNOWN;
case "undefined":
return booleanContext.isTruthy() ? JSType.UNDEFINED : beforeType.removeType(JSType.UNDEFINED);
default :
return JSType.UNKNOWN;
}
}
