{
  Preconditions.checkArgument(callNode.isCall() || callNode.isNew());
  Preconditions.checkNotNull(retType);
  Node callee=callNode.getFirstChild();
  TypeEnv tmpEnv=outEnv;
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  for (int i=callNode.getChildCount() - 2; i >= 0; i--) {
    Node arg=callNode.getChildAtIndex(i + 1);
    tmpEnv=analyzeExprBwd(arg,tmpEnv).env;
    builder.addReqFormal(JSType.BOTTOM);
  }
  JSType looseRetType=retType.isUnknown() ? JSType.BOTTOM : retType;
  JSType looseFunctionType=builder.addRetType(looseRetType).addLoose().buildType();
  println("loose function type is ",looseFunctionType);
  EnvTypePair calleePair=analyzeExprBwd(callee,tmpEnv,looseFunctionType);
  return new EnvTypePair(calleePair.env,retType);
}
