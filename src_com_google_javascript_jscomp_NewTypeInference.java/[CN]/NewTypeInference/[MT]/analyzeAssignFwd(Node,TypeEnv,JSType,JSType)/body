{
  if (expr.getBooleanProp(Node.ANALYZED_DURING_GTI)) {
    expr.removeProp(Node.ANALYZED_DURING_GTI);
    return new EnvTypePair(inEnv,requiredType);
  }
  mayWarnAboutConst(expr);
  Node lhs=expr.getFirstChild();
  Node rhs=expr.getLastChild();
  if (lhs.getBooleanProp(Node.ANALYZED_DURING_GTI)) {
    lhs.removeProp(Node.ANALYZED_DURING_GTI);
    JSType declType=markAndGetTypeOfPreanalyzedNode(lhs,inEnv,true);
    if (rhs.matchesQualifiedName(ABSTRACT_METHOD_NAME)) {
      return new EnvTypePair(inEnv,requiredType);
    }
    EnvTypePair rhsPair=analyzeExprFwd(rhs,inEnv,declType);
    if (!rhsPair.type.isSubtypeOf(declType) && !NodeUtil.isPrototypeAssignment(lhs)) {
      warnings.add(JSError.make(expr,MISTYPED_ASSIGN_RHS,errorMsgWithTypeDiff(declType,rhsPair.type)));
    }
    return rhsPair;
  }
  LValueResultFwd lvalue=analyzeLValueFwd(lhs,inEnv,requiredType);
  JSType declType=lvalue.declType;
  EnvTypePair rhsPair=analyzeExprFwd(rhs,lvalue.env,requiredType,specializedType);
  if (declType != null && !rhsPair.type.isSubtypeOf(declType)) {
    warnings.add(JSError.make(expr,MISTYPED_ASSIGN_RHS,errorMsgWithTypeDiff(declType,rhsPair.type)));
  }
 else {
    rhsPair.env=updateLvalueTypeInEnv(rhsPair.env,lhs,lvalue.ptr,rhsPair.type);
  }
  return rhsPair;
}
