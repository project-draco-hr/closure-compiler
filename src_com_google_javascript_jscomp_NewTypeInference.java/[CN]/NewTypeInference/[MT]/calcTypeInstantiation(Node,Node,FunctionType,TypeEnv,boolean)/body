{
  List<String> typeParameters=funType.getTypeParameters();
  Multimap<String,JSType> typeMultimap=LinkedHashMultimap.create();
  Node arg=firstArg;
  int i=0;
  while (arg != null) {
    EnvTypePair pair=isFwd ? analyzeExprFwd(arg,typeEnv) : analyzeExprBwd(arg,typeEnv);
    JSType formalType=funType.getFormalType(i);
    JSType passedArgType=pair.type;
    if (!formalType.unifyWithSubtype(passedArgType,typeParameters,typeMultimap)) {
      JSType formalAfterInstantiation=formalType.substituteGenericsWithUnknown();
      if (!formalType.equals(formalAfterInstantiation) && passedArgType.isSubtypeOf(formalAfterInstantiation)) {
        warnings.add(JSError.make(arg,FAILED_TO_UNIFY,formalType.toString(),passedArgType.toString()));
      }
    }
    arg=arg.getNext();
    typeEnv=pair.env;
    i++;
  }
  ImmutableMap.Builder<String,JSType> builder=ImmutableMap.builder();
  for (  String typeParam : typeParameters) {
    Collection<JSType> types=typeMultimap.get(typeParam);
    if (types.size() > 1) {
      if (isFwd) {
        warnings.add(JSError.make(callNode,NOT_UNIQUE_INSTANTIATION,typeParam,types.toString()));
      }
      builder.put(typeParam,JSType.UNKNOWN);
    }
 else     if (types.size() == 1) {
      JSType t=Iterables.getOnlyElement(types);
      builder.put(typeParam,t.isBottom() ? JSType.UNKNOWN : t);
    }
 else {
      builder.put(typeParam,JSType.UNKNOWN);
    }
  }
  return builder.build();
}
