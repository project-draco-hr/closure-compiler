{
  Preconditions.checkArgument(requiredType != null && !requiredType.isBottom());
  EnvTypePair resultPair=null;
switch (expr.getToken()) {
case EMPTY:
    resultPair=new EnvTypePair(inEnv,UNKNOWN);
  break;
case FUNCTION:
{
  String fnName=symbolTable.getFunInternalName(expr);
  JSType fnType=envGetType(inEnv,fnName);
  Preconditions.checkState(fnType != null,"Could not find type for %s",fnName);
  TypeEnv outEnv=collectTypesForFreeVarsFwd(expr,inEnv);
  resultPair=new EnvTypePair(outEnv,fnType);
  break;
}
case FALSE:
case NULL:
case NUMBER:
case STRING:
case TRUE:
resultPair=new EnvTypePair(inEnv,scalarValueToType(expr.getToken()));
break;
case OBJECTLIT:
resultPair=analyzeObjLitFwd(expr,inEnv,requiredType,specializedType);
break;
case THIS:
{
resultPair=analyzeThisFwd(expr,inEnv,requiredType,specializedType);
break;
}
case NAME:
resultPair=analyzeNameFwd(expr,inEnv,requiredType,specializedType);
break;
case AND:
case OR:
resultPair=analyzeLogicalOpFwd(expr,inEnv,requiredType,specializedType);
break;
case INC:
case DEC:
resultPair=analyzeIncDecFwd(expr,inEnv,requiredType);
break;
case BITNOT:
case NEG:
resultPair=analyzeUnaryNumFwd(expr,inEnv);
break;
case POS:
{
resultPair=analyzeExprFwd(expr.getFirstChild(),inEnv);
resultPair.type=NUMBER;
break;
}
case TYPEOF:
{
resultPair=analyzeExprFwd(expr.getFirstChild(),inEnv);
resultPair.type=STRING;
break;
}
case INSTANCEOF:
resultPair=analyzeInstanceofFwd(expr,inEnv,specializedType);
break;
case ADD:
resultPair=analyzeAddFwd(expr,inEnv,requiredType);
break;
case BITOR:
case BITAND:
case BITXOR:
case DIV:
case LSH:
case MOD:
case MUL:
case RSH:
case SUB:
case URSH:
resultPair=analyzeBinaryNumericOpFwd(expr,inEnv);
break;
case ASSIGN:
resultPair=analyzeAssignFwd(expr,inEnv,requiredType,specializedType);
break;
case ASSIGN_ADD:
resultPair=analyzeAssignAddFwd(expr,inEnv,requiredType);
break;
case ASSIGN_BITOR:
case ASSIGN_BITXOR:
case ASSIGN_BITAND:
case ASSIGN_LSH:
case ASSIGN_RSH:
case ASSIGN_URSH:
case ASSIGN_SUB:
case ASSIGN_MUL:
case ASSIGN_DIV:
case ASSIGN_MOD:
resultPair=analyzeAssignNumericOpFwd(expr,inEnv);
break;
case SHEQ:
case SHNE:
resultPair=analyzeStrictComparisonFwd(expr.getToken(),expr.getFirstChild(),expr.getLastChild(),inEnv,specializedType);
break;
case EQ:
case NE:
resultPair=analyzeNonStrictComparisonFwd(expr,inEnv,specializedType);
break;
case LT:
case GT:
case LE:
case GE:
resultPair=analyzeLtGtFwd(expr,inEnv);
break;
case GETPROP:
Preconditions.checkState(!NodeUtil.isAssignmentOp(expr.getParent()) || !NodeUtil.isLValue(expr));
if (expr.getBooleanProp(Node.ANALYZED_DURING_GTI)) {
expr.removeProp(Node.ANALYZED_DURING_GTI);
resultPair=new EnvTypePair(inEnv,requiredType);
}
 else {
resultPair=analyzePropAccessFwd(expr.getFirstChild(),expr.getLastChild().getString(),inEnv,requiredType,specializedType);
}
break;
case HOOK:
resultPair=analyzeHookFwd(expr,inEnv,requiredType,specializedType);
break;
case CALL:
case NEW:
resultPair=analyzeCallNewFwd(expr,inEnv,requiredType,specializedType);
break;
case COMMA:
resultPair=analyzeExprFwd(expr.getLastChild(),analyzeExprFwd(expr.getFirstChild(),inEnv).env,requiredType,specializedType);
break;
case NOT:
{
resultPair=analyzeExprFwd(expr.getFirstChild(),inEnv,UNKNOWN,specializedType.negate());
resultPair.type=resultPair.type.negate().toBoolean();
break;
}
case GETELEM:
resultPair=analyzeGetElemFwd(expr,inEnv,requiredType,specializedType);
break;
case VOID:
{
resultPair=analyzeExprFwd(expr.getFirstChild(),inEnv);
resultPair.type=UNDEFINED;
break;
}
case IN:
resultPair=analyzeInFwd(expr,inEnv,specializedType);
break;
case DELPROP:
{
resultPair=analyzeExprFwd(expr.getFirstChild(),inEnv);
resultPair.type=BOOLEAN;
break;
}
case REGEXP:
resultPair=new EnvTypePair(inEnv,commonTypes.getRegexpType());
break;
case ARRAYLIT:
resultPair=analyzeArrayLitFwd(expr,inEnv);
break;
case CAST:
resultPair=analyzeCastFwd(expr,inEnv,specializedType);
break;
case CASE:
resultPair=analyzeStrictComparisonFwd(Token.SHEQ,expr.getParent().getFirstChild(),expr.getFirstChild(),inEnv,specializedType);
break;
default :
throw new RuntimeException("Unhandled expression type: " + expr.getToken());
}
mayWarnAboutUnknownType(expr,resultPair.type);
maybeSetTypeI(expr,resultPair.type);
if (this.currentScope.isFunction()) {
println("AnalyzeExprFWD: ",expr," ::reqtype: ",requiredType," ::spectype: ",specializedType," ::resulttype: ",resultPair.type);
}
return resultPair;
}
