{
  QualifiedName propQname=new QualifiedName(pname);
  Node propAccessNode=receiver.getParent();
  EnvTypePair pair;
  JSType reqObjType=pickReqObjType(propAccessNode).withLoose();
  JSType recvReqType, recvSpecType;
  if (specializedType.isTruthy() || specializedType.isFalsy()) {
    recvReqType=JSType.UNKNOWN;
    recvSpecType=reqObjType.withProperty(propQname,requiredType);
  }
 else {
    recvReqType=reqObjType.withProperty(propQname,requiredType);
    recvSpecType=reqObjType.withProperty(propQname,specializedType);
  }
  pair=analyzeExprFwd(receiver,inEnv,recvReqType,recvSpecType);
  pair=mayWarnAboutNullableReferenceAndTighten(receiver,pair.type,pair.env);
  JSType recvType=pair.type;
  if (recvType.isUnknown() || mayWarnAboutNonObject(receiver,pname,recvType,specializedType)) {
    return new EnvTypePair(pair.env,requiredType);
  }
  if (propAccessNode.isGetProp() && mayWarnAboutDictPropAccess(receiver,recvType)) {
    return new EnvTypePair(pair.env,requiredType);
  }
  if (recvType.isTop()) {
    recvType=JSType.TOP_OBJECT;
  }
  QualifiedName getterPname=new QualifiedName(GETTER_PREFIX + pname);
  if (recvType.hasProp(getterPname)) {
    return new EnvTypePair(pair.env,recvType.getProp(getterPname));
  }
  JSType resultType=recvType.getProp(propQname);
  if (!propAccessNode.getParent().isExprResult() && !specializedType.isTruthy() && !specializedType.isFalsy()) {
    if (!recvType.mayHaveProp(propQname)) {
      warnings.add(JSError.make(propAccessNode,TypeCheck.INEXISTENT_PROPERTY,pname,recvType.toString()));
    }
 else     if (!recvType.hasProp(propQname)) {
      warnings.add(JSError.make(propAccessNode,POSSIBLY_INEXISTENT_PROPERTY,pname,recvType.toString()));
    }
 else     if (recvType.hasProp(propQname) && !resultType.isSubtypeOf(requiredType) && tightenTypeAndDontWarn(receiver.isName() ? receiver.getString() : null,recvType.getDeclaredProp(propQname),resultType,requiredType)) {
      resultType=resultType.specialize(requiredType);
      LValueResultFwd lvr=analyzeLValueFwd(propAccessNode,inEnv,resultType);
      TypeEnv updatedEnv=updateLvalueTypeInEnv(lvr.env,propAccessNode,lvr.ptr,resultType);
      return new EnvTypePair(updatedEnv,resultType);
    }
  }
  if (resultType == null) {
    resultType=JSType.UNKNOWN;
  }
  return new EnvTypePair(pair.env,resultType);
}
