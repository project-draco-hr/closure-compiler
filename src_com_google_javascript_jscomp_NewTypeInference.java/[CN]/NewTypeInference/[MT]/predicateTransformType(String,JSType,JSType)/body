{
switch (typeHint) {
case "array":
case "isArray":
{
      JSType arrayType=commonTypes.getArrayInstance();
      if (arrayType.isUnknown()) {
        return UNKNOWN;
      }
      return booleanContext.isTrueOrTruthy() ? arrayType : beforeType.removeType(arrayType);
    }
case "isArrayLike":
  return TOP_OBJECT.withProperty(new QualifiedName("length"),NUMBER);
case "boolean":
case "isBoolean":
return booleanContext.isTrueOrTruthy() ? BOOLEAN : beforeType.removeType(BOOLEAN);
case "function":
case "isFunction":
return booleanContext.isTrueOrTruthy() ? commonTypes.looseTopFunction() : beforeType.removeType(commonTypes.topFunction());
case "null":
case "isNull":
return booleanContext.isTrueOrTruthy() ? NULL : beforeType.removeType(NULL);
case "number":
case "isNumber":
return booleanContext.isTrueOrTruthy() ? NUMBER : beforeType.removeType(NUMBER);
case "string":
case "isString":
return booleanContext.isTrueOrTruthy() ? STRING : beforeType.removeType(STRING);
case "isDef":
return booleanContext.isTrueOrTruthy() ? beforeType.removeType(UNDEFINED) : UNDEFINED;
case "isDefAndNotNull":
return booleanContext.isTrueOrTruthy() ? beforeType.removeType(NULL_OR_UNDEFINED) : NULL_OR_UNDEFINED;
case "isObject":
return booleanContext.isTrueOrTruthy() ? TOP_OBJECT : beforeType.removeType(TOP_OBJECT);
case "object":
return UNKNOWN;
case "undefined":
return booleanContext.isTrueOrTruthy() ? UNDEFINED : beforeType.removeType(UNDEFINED);
default :
return UNKNOWN;
}
}
