{
  DiGraphNode<Node,ControlFlowGraph.Branch> entry=cfg.getEntry();
  DiGraphEdge<Node,ControlFlowGraph.Branch> entryOutEdge=cfg.getOutEdges(entry.getValue()).get(0);
  TypeEnv entryEnv=envs.get(entryOutEdge);
  initEdgeEnvs(new TypeEnv());
  if (currentScope.isFunction()) {
    Set<String> formalsAndOuters=currentScope.getOuterVars();
    if (currentScope.getName() != null) {
      formalsAndOuters.add(currentScope.getName());
    }
    formalsAndOuters.addAll(currentScope.getFormals());
    if (currentScope.hasThis()) {
      formalsAndOuters.add("this");
    }
    for (    String name : formalsAndOuters) {
      JSType declType=currentScope.getDeclaredTypeOf(name);
      JSType initType=declType == null ? envGetType(entryEnv,name) : pickInitialType(declType);
      entryEnv=envPutType(entryEnv,name,initType.withLocation(name));
    }
    entryEnv=envPutType(entryEnv,RETVAL_ID,JSType.UNDEFINED);
  }
  for (  String local : currentScope.getLocals()) {
    entryEnv=envPutType(entryEnv,local,JSType.UNDEFINED);
  }
  for (  String fnName : currentScope.getLocalFunDefs()) {
    JSType summaryType=summaries.get(currentScope.getScope(fnName));
    FunctionType fnType=summaryType.getFunType();
    if (fnType.isConstructor()) {
      summaryType=fnType.createConstructorObject();
    }
 else {
      summaryType=summaryType.withProperty(new QualifiedName("prototype"),JSType.TOP_OBJECT);
    }
    entryEnv=envPutType(entryEnv,fnName,summaryType);
  }
  println("Keeping env: ",entryEnv);
  envs.put(entryOutEdge,entryEnv);
}
