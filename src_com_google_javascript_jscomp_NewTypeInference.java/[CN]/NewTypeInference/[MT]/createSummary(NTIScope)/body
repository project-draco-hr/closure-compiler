{
  Node fnRoot=fn.getRoot();
  Preconditions.checkArgument(!fnRoot.isFromExterns());
  FunctionTypeBuilder builder=new FunctionTypeBuilder(this.commonTypes);
  TypeEnv entryEnv=getEntryTypeEnv();
  TypeEnv exitEnv=getInEnv(this.cfg.getImplicitReturn());
  if (exitEnv == null) {
    exitEnv=envPutType(new TypeEnv(),RETVAL_ID,BOTTOM);
  }
  DeclaredFunctionType declType=fn.getDeclaredFunctionType();
  int reqArity=declType.getRequiredArity();
  int optArity=declType.getOptionalArity();
  if (declType.isGeneric()) {
    builder.addTypeParameters(declType.getTypeParameters());
  }
  List<String> formals=fn.getFormals();
  for (int i=reqArity - 1; i >= 0; i--) {
    JSType formalType=fn.getDeclaredFunctionType().getFormalType(i);
    if (formalType != null) {
      break;
    }
    String formalName=formals.get(i);
    formalType=getTypeAfterFwd(formalName,entryEnv,exitEnv);
    if (formalType.isUnknown() || UNDEFINED.isSubtypeOf(formalType)) {
      reqArity--;
    }
 else {
      break;
    }
  }
  int formalIndex=0;
  for (  String formal : formals) {
    JSType formalType=fn.getDeclaredTypeOf(formal);
    if (formalType == null) {
      formalType=getTypeAfterFwd(formal,entryEnv,exitEnv);
    }
    if (formalIndex < reqArity) {
      builder.addReqFormal(formalType);
    }
 else     if (formalIndex < optArity) {
      builder.addOptFormal(formalType);
    }
    formalIndex++;
  }
  if (declType.hasRestFormals()) {
    builder.addRestFormals(declType.getFormalType(formalIndex));
  }
  for (  String outer : fn.getOuterVars()) {
    println("Free var ",outer," going in summary");
    builder.addOuterVarPrecondition(outer,envGetType(entryEnv,outer));
  }
  builder.addNominalType(declType.getNominalType());
  builder.addReceiverType(declType.getReceiverType());
  builder.addAbstract(declType.isAbstract());
  JSType declRetType=declType.getReturnType();
  JSType actualRetType=Preconditions.checkNotNull(envGetType(exitEnv,RETVAL_ID));
  if (declRetType != null) {
    builder.addRetType(declRetType);
    if (!isAllowedToNotReturn(fn) && !UNDEFINED.isSubtypeOf(declRetType) && hasPathWithNoReturn(this.cfg)) {
      warnings.add(JSError.make(fnRoot,MISSING_RETURN_STATEMENT,declRetType.toString()));
    }
  }
 else   if (declType.getNominalType() == null) {
    builder.addRetType(actualRetType.isBottom() ? TOP : actualRetType);
  }
 else {
    builder.addRetType(UNDEFINED);
  }
  JSType summary=commonTypes.fromFunctionType(builder.buildFunction());
  println("Function summary for ",fn.getReadableName());
  println("\t",summary);
  summary=changeTypeIfFunctionNamespace(fn,summary);
  summaries.put(fn,summary);
  maybeSetTypeI(fnRoot,summary);
  Node fnNameNode=NodeUtil.getNameNode(fnRoot);
  if (fnNameNode != null) {
    maybeSetTypeI(fnNameNode,summary);
  }
}
