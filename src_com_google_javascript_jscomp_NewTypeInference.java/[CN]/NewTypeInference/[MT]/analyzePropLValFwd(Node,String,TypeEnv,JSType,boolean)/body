{
  LValueResult lvalue=analyzeLValueFwd(obj,inEnv,TypeConsts.TOP_OBJECT.withProperty(pname,type),true);
  if (!lvalue.type.isSubtypeOf(TypeConsts.TOP_OBJECT)) {
    warnings.add(JSError.make(obj,PROPERTY_ACCESS_ON_NONOBJECT,pname,lvalue.type.toString()));
    return new LValueResult(lvalue.env,type,null,null);
  }
  if (isRecursiveCall && !lvalue.type.isUnknown() && lvalue.type.isSubtypeOf(TypeConsts.TOP_OBJECT)&& !lvalue.type.mayHaveProp(pname)) {
    warnings.add(JSError.make(obj,TypeCheck.INEXISTENT_PROPERTY,pname,lvalue.type.toString()));
    return new LValueResult(lvalue.env,type,null,null);
  }
  return new LValueResult(lvalue.env,lvalue.type.getProp(pname),lvalue.type.getDeclaredProp(pname),lvalue.ptr == null ? null : lvalue.ptr + "." + pname);
}
