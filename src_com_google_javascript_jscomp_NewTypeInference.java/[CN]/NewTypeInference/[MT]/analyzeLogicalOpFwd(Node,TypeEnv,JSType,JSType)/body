{
  Token exprKind=expr.getToken();
  Node lhs=expr.getFirstChild();
  Node rhs=expr.getLastChild();
  if ((specializedType.isTrueOrTruthy() && exprKind == Token.AND) || (specializedType.isFalseOrFalsy() && exprKind == Token.OR)) {
    EnvTypePair lhsPair=analyzeExprFwd(lhs,inEnv,UNKNOWN,specializedType);
    EnvTypePair rhsPair=analyzeExprFwd(rhs,lhsPair.env,UNKNOWN,specializedType);
    return rhsPair;
  }
 else   if ((specializedType.isFalseOrFalsy() && exprKind == Token.AND) || (specializedType.isTrueOrTruthy() && exprKind == Token.OR)) {
    EnvTypePair shortCircuitPair=analyzeExprFwd(lhs,inEnv,UNKNOWN,specializedType);
    EnvTypePair lhsPair=analyzeExprFwd(lhs,inEnv,UNKNOWN,specializedType.negate());
    EnvTypePair rhsPair=analyzeExprFwd(rhs,lhsPair.env,UNKNOWN,specializedType);
    JSType lhsUnspecializedType=JSType.join(shortCircuitPair.type,lhsPair.type);
    return combineLhsAndRhsForLogicalOps(exprKind,lhsUnspecializedType,shortCircuitPair,rhsPair);
  }
 else {
    JSType stopAfterLhsType=exprKind == Token.AND ? FALSY : TRUTHY;
    EnvTypePair shortCircuitPair=analyzeExprFwd(lhs,inEnv,UNKNOWN,stopAfterLhsType);
    EnvTypePair lhsPair=analyzeExprFwd(lhs,inEnv,UNKNOWN,stopAfterLhsType.negate());
    EnvTypePair rhsPair=analyzeExprFwd(rhs,lhsPair.env,requiredType,specializedType);
    JSType lhsUnspecializedType=JSType.join(shortCircuitPair.type,lhsPair.type);
    return combineLhsAndRhsForLogicalOps(exprKind,lhsUnspecializedType,shortCircuitPair,rhsPair);
  }
}
