{
  String varName=nameNode.getString();
  JSType declType=currentScope.getDeclaredTypeOf(varName);
  if (currentScope.isLocalFunDef(varName)) {
    return inEnv;
  }
  if (NodeUtil.isNamespaceDecl(nameNode) || nameNode.getParent().getBooleanProp(Node.ANALYZED_DURING_GTI)) {
    Preconditions.checkNotNull(declType,"Can't skip var declaration with undeclared type at: %s",nameNode);
    maybeSetTypeI(nameNode,declType);
    return envPutType(inEnv,varName,declType);
  }
  Node rhs=nameNode.getFirstChild();
  TypeEnv outEnv=inEnv;
  JSType rhsType;
  if (rhs == null) {
    rhsType=UNDEFINED;
  }
 else {
    EnvTypePair pair=analyzeExprFwd(rhs,inEnv,declType != null ? declType : UNKNOWN);
    outEnv=pair.env;
    rhsType=pair.type;
  }
  if (declType != null && rhs != null) {
    if (!rhsType.isSubtypeOf(declType)) {
      warnings.add(JSError.make(rhs,MISTYPED_ASSIGN_RHS,errorMsgWithTypeDiff(declType,rhsType)));
      rhsType=declType;
    }
 else {
      rhsType=declType.specialize(rhsType);
    }
  }
  maybeSetTypeI(nameNode,rhsType);
  return envPutType(outEnv,varName,rhsType);
}
