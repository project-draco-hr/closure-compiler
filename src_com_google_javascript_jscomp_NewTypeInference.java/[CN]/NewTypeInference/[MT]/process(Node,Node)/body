{
  try {
    this.symbolTable=(GlobalTypeInfo)compiler.getSymbolTable();
    this.commonTypes=symbolTable.getCommonTypes();
    this.BOOLEAN=this.commonTypes.BOOLEAN;
    this.BOTTOM=this.commonTypes.BOTTOM;
    this.FALSE_TYPE=this.commonTypes.FALSE_TYPE;
    this.FALSY=this.commonTypes.FALSY;
    this.NULL=this.commonTypes.NULL;
    this.NULL_OR_UNDEFINED=this.commonTypes.NULL_OR_UNDEFINED;
    this.NUMBER=this.commonTypes.NUMBER;
    this.NUMBER_OR_STRING=this.commonTypes.NUMBER_OR_STRING;
    this.STRING=this.commonTypes.STRING;
    this.TOP=this.commonTypes.TOP;
    this.TOP_DICT=this.commonTypes.TOP_DICT;
    this.TOP_OBJECT=this.commonTypes.TOP_OBJECT;
    this.TOP_STRUCT=this.commonTypes.TOP_STRUCT;
    this.TRUE_TYPE=this.commonTypes.TRUE_TYPE;
    this.TRUTHY=this.commonTypes.TRUTHY;
    this.UNDEFINED=this.commonTypes.UNDEFINED;
    this.UNKNOWN=this.commonTypes.UNKNOWN;
    for (    NTIScope scope : symbolTable.getScopes()) {
      analyzeFunction(scope);
      envs.clear();
    }
    for (    DeferredCheck check : deferredChecks.values()) {
      check.runCheck(summaries,warnings);
    }
    if (measureMem) {
      System.out.println("Peak mem: " + peakMem + "MB");
    }
  }
 catch (  Exception unexpectedException) {
    String message=unexpectedException.getMessage();
    if (currentScope != null) {
      message+="\nIn scope: " + currentScope;
    }
    this.compiler.throwInternalError(message,unexpectedException);
  }
}
