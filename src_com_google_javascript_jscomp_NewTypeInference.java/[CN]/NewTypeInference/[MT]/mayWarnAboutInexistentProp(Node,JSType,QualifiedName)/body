{
  Preconditions.checkState(propAccessNode.isGetProp() || propAccessNode.isGetElem());
  String pname=propQname.toString();
  if (propAccessNode.isGetElem() || !recvType.isLoose() && recvType.hasProp(propQname)) {
    return false;
  }
  if (recvType.isUnknown() || recvType.isTrueOrTruthy() || recvType.isLoose()|| allowPropertyOnSubtypes && recvType.isInstanceofObject()) {
    if (symbolTable.isPropertyDefined(pname)) {
      return false;
    }
    warnings.add(JSError.make(propAccessNode,INEXISTENT_PROPERTY,pname,"any type in the program"));
    return true;
  }
  if (allowPropertyOnSubtypes && !recvType.isStruct() && (recvType.isInstanceofObject() || recvType.isPropDefinedOnSubtype(propQname))) {
    return false;
  }
  String recvTypeAsString=recvType.toString();
  Node recv=propAccessNode.getFirstChild();
  String errorMsg;
  if (!recv.isQualifiedName()) {
    errorMsg=recvTypeAsString;
  }
 else   if (recvTypeAsString.length() > 100) {
    errorMsg=recv.getQualifiedName();
  }
 else {
    errorMsg=recv.getQualifiedName() + " of type " + recvTypeAsString;
  }
  DiagnosticType warningType=recvType.mayHaveProp(propQname) ? POSSIBLY_INEXISTENT_PROPERTY : INEXISTENT_PROPERTY;
  warnings.add(JSError.make(propAccessNode,warningType,pname,errorMsg));
  return true;
}
