{
  MismatchInfo mismatch=JSType.whyNotSubtypeOf(found,expected);
  if (mismatch == null) {
    return "Expected : " + expected + "\n"+ "Found    : "+ found+ "\n";
  }
  StringBuilder builder=new StringBuilder("Expected : " + expected + "\n"+ "Found    : "+ found+ "\n"+ "More details:\n");
  if (mismatch.isPropMismatch()) {
    builder.append("Incompatible types for property " + mismatch.getPropName() + ".\n"+ "Expected : "+ mismatch.getExpectedType()+ "\n"+ "Found    : "+ mismatch.getFoundType());
  }
 else   if (mismatch.isMissingProp()) {
    builder.append("The found type is missing property " + mismatch.getPropName());
  }
 else   if (mismatch.wantedRequiredFoundOptional()) {
    builder.append("In found type, property " + mismatch.getPropName() + " is optional but should be required.");
  }
 else   if (mismatch.isArgTypeMismatch()) {
    builder.append("The expected and found types are functions which have" + " incompatible types for argument " + (mismatch.getArgIndex() + 1) + ".\n"+ "Expected a supertype of : "+ mismatch.getExpectedType()+ "\n"+ "but found               : "+ mismatch.getFoundType());
  }
 else   if (mismatch.isRetTypeMismatch()) {
    builder.append("The expected and found types are functions which have" + " incompatible return types.\n" + "Expected a subtype of : " + mismatch.getExpectedType() + "\n"+ "but found             : "+ mismatch.getFoundType());
  }
 else   if (mismatch.isUnionTypeMismatch()) {
    builder.append("The found type is a union that includes an unexpected type: " + mismatch.getFoundType());
  }
  return builder.toString();
}
