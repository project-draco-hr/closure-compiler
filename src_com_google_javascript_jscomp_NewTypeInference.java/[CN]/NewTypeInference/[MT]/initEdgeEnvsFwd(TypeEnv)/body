{
  envs.clear();
  Set<String> nonLocals=new LinkedHashSet<>();
  if (currentScope.hasThis()) {
    nonLocals.add(THIS_ID);
  }
  if (currentScope.isFunction()) {
    if (currentScope.getName() != null) {
      nonLocals.add(currentScope.getName());
    }
    nonLocals.addAll(currentScope.getOuterVars());
    nonLocals.addAll(currentScope.getFormals());
    entryEnv=envPutType(entryEnv,RETVAL_ID,UNDEFINED);
  }
 else {
    nonLocals.addAll(currentScope.getExterns());
  }
  for (  String name : nonLocals) {
    JSType declType=currentScope.getDeclaredTypeOf(name);
    JSType initType=declType;
    if (initType == null) {
      initType=envGetType(entryEnv,name);
    }
 else     if (this.areTypeVariablesUnknown) {
      initType=initType.substituteGenericsWithUnknown();
    }
    println("Adding non-local ",name," with decltype: ",declType," and inittype: ",initType);
    entryEnv=envPutType(entryEnv,name,initType);
  }
  for (  String local : currentScope.getLocals()) {
    if (!currentScope.isFunctionNamespace(local)) {
      entryEnv=envPutType(entryEnv,local,UNDEFINED);
    }
  }
  for (  String fnName : currentScope.getLocalFunDefs()) {
    entryEnv=envPutType(entryEnv,fnName,getSummaryOfLocalFunDef(fnName));
  }
  println("Keeping env: ",entryEnv);
  setOutEnv(this.cfg.getEntry(),entryEnv);
}
