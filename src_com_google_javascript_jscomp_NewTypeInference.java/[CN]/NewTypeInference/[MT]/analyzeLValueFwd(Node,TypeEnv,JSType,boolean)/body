{
switch (expr.getType()) {
case Token.THIS:
{
      if (currentScope.hasThis()) {
        return new LValueResultFwd(inEnv,envGetType(inEnv,"this"),currentScope.getDeclaredTypeOf("this"),new QualifiedName("this"));
      }
 else {
        warnings.add(JSError.make(expr,CheckGlobalThis.GLOBAL_THIS));
        return new LValueResultFwd(inEnv,JSType.UNKNOWN,null,null);
      }
    }
case Token.NAME:
{
    String varName=expr.getString();
    JSType varType=analyzeExprFwd(expr,inEnv).type;
    return new LValueResultFwd(inEnv,varType,currentScope.getDeclaredTypeOf(varName),varType.hasNonScalar() ? new QualifiedName(varName) : null);
  }
case Token.GETPROP:
{
  Node obj=expr.getFirstChild();
  QualifiedName pname=new QualifiedName(expr.getLastChild().getString());
  return analyzePropLValFwd(obj,pname,inEnv,type,insideQualifiedName);
}
case Token.GETELEM:
{
Node obj=expr.getFirstChild();
Node prop=expr.getLastChild();
if (prop.isString()) {
  QualifiedName pname=new QualifiedName(prop.getString());
  return analyzePropLValFwd(obj,pname,inEnv,type,insideQualifiedName);
}
LValueResultFwd lvalue=analyzeLValueFwd(obj,inEnv,JSType.UNKNOWN,true);
if (isArrayType(lvalue.type)) {
  return analyzeArrayElmLvalFwd(prop,lvalue);
}
EnvTypePair pair=analyzeExprFwd(expr,inEnv,type);
return new LValueResultFwd(pair.env,pair.type,null,null);
}
case Token.VAR:
{
Preconditions.checkState(NodeUtil.isForIn(expr.getParent()));
Node vdecl=expr.getFirstChild();
String name=vdecl.getString();
Preconditions.checkState(!vdecl.hasChildren());
return new LValueResultFwd(inEnv,JSType.STRING,null,new QualifiedName(name));
}
default :
{
Preconditions.checkState(insideQualifiedName);
EnvTypePair pair=analyzeExprFwd(expr,inEnv,type);
return new LValueResultFwd(pair.env,pair.type,null,null);
}
}
}
