{
switch (expr.getType()) {
case Token.THIS:
case Token.NAME:
{
      String varName=expr.getQualifiedName();
      JSType varType=envGetType(inEnv,varName);
      return new LValueResult(inEnv,varType,currentScope.getDeclaredTypeOf(varName),varType.hasNonScalar() ? varName : null);
    }
case Token.NEW:
{
    EnvTypePair pair=analyzeExprFwd(expr,inEnv,type);
    return new LValueResult(pair.env,pair.type,null,null);
  }
case Token.GETPROP:
{
  Node obj=expr.getFirstChild();
  String pname=expr.getLastChild().getString();
  return analyzePropLValFwd(obj,pname,inEnv,type,isRecursiveCall);
}
case Token.GETELEM:
{
if (expr.getLastChild().isString()) {
  Node obj=expr.getFirstChild();
  String pname=expr.getLastChild().getString();
  return analyzePropLValFwd(obj,pname,inEnv,type,isRecursiveCall);
}
return new LValueResult(inEnv,type,null,null);
}
case Token.OBJECTLIT:
{
EnvTypePair etPair=analyzeExprFwd(expr,inEnv,type);
return new LValueResult(etPair.env,etPair.type,null,null);
}
}
throw new RuntimeException("analyzeLValueFwd: unknown lhs expression @ node " + expr);
}
