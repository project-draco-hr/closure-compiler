{
  Preconditions.checkArgument(parent.isGetProp() || parent.isGetElem());
  Node obj=parent.getFirstChild();
  Node prop=parent.getLastChild();
  QualifiedName pname;
  JSType reqObjType=pickReqObjType(obj).withLoose();
  if (prop.isString()) {
    pname=new QualifiedName(prop.getString());
    reqObjType=reqObjType.withProperty(pname,type);
  }
 else {
    pname=NUMERIC_INDEX;
  }
  LValueResultFwd lvalue=analyzeLValueFwd(obj,inEnv,reqObjType,true);
  if (!prop.isString()) {
    Preconditions.checkState(parent.isGetElem());
    if (isArrayType(lvalue.type)) {
      lvalue.env=analyzeExprFwd(prop,lvalue.env,JSType.NUMBER).env;
    }
 else {
      EnvTypePair pair=analyzeExprFwd(parent,inEnv,type);
      return new LValueResultFwd(pair.env,pair.type,null,null);
    }
  }
  String pnameAsString=pname.getLeftmostName();
  TypeEnv lvalueEnv=lvalue.env;
  JSType lvalueType=lvalue.type;
  if (!lvalueType.isSubtypeOf(JSType.TOP_OBJECT)) {
    warnings.add(JSError.make(obj,PROPERTY_ACCESS_ON_NONOBJECT,pnameAsString,lvalueType.toString()));
    return new LValueResultFwd(lvalueEnv,type,null,null);
  }
  if (parent.isGetProp() && parent.getParent().isAssign() && mayWarnAboutPropCreation(pname,parent,lvalueType)) {
    return new LValueResultFwd(lvalueEnv,type,null,null);
  }
  if (!insideQualifiedName && mayWarnAboutConstProp(parent,lvalueType,pname)) {
    return new LValueResultFwd(lvalueEnv,type,null,null);
  }
  if (!lvalueType.mayHaveProp(pname)) {
    if (insideQualifiedName && lvalueType.isLoose()) {
      lvalueType=lvalueType.withProperty(pname,JSType.TOP_OBJECT.withLoose());
      if (lvalueType.isDict() && parent.isGetProp()) {
        lvalueType=lvalueType.specialize(JSType.TOP_STRUCT);
      }
 else       if (lvalueType.isStruct() && parent.isGetElem()) {
        lvalueType=lvalueType.specialize(JSType.TOP_DICT);
      }
      lvalueEnv=updateLvalueTypeInEnv(lvalueEnv,obj,lvalue.ptr,lvalueType);
    }
 else {
      boolean warnForInexistentProp=insideQualifiedName || parent.getParent().getType() != Token.ASSIGN;
      if (warnForInexistentProp && !lvalueType.isUnknown() && !lvalueType.isDict()) {
        warnings.add(JSError.make(obj,TypeCheck.INEXISTENT_PROPERTY,pnameAsString,lvalueType.toString()));
        return new LValueResultFwd(lvalueEnv,type,null,null);
      }
    }
  }
  if (parent.isGetElem()) {
    mayWarnAboutStructPropAccess(obj,lvalueType);
  }
 else   if (parent.isGetProp()) {
    mayWarnAboutDictPropAccess(obj,lvalueType);
  }
  QualifiedName setterPname=new QualifiedName(SETTER_PREFIX + pnameAsString);
  if (lvalueType.hasProp(setterPname)) {
    FunctionType funType=lvalueType.getProp(setterPname).getFunType();
    Preconditions.checkNotNull(funType);
    JSType formalType=funType.getFormalType(0);
    Preconditions.checkState(!formalType.isBottom());
    return new LValueResultFwd(lvalueEnv,formalType,formalType,null);
  }
  return new LValueResultFwd(lvalueEnv,lvalueType.mayHaveProp(pname) ? lvalueType.getProp(pname) : JSType.UNKNOWN,lvalueType.mayHaveProp(pname) ? lvalueType.getDeclaredProp(pname) : null,lvalue.ptr == null ? null : QualifiedName.join(lvalue.ptr,pname));
}
