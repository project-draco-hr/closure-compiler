{
  TypeEnv entryEnv=getInitTypeEnv();
  TypeEnv exitEnv=getFinalTypeEnv();
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  Multimap<String,String> taints=exitEnv.getTaints();
  DeclaredFunctionType declType=fn.getDeclaredType();
  int reqArity=declType.getRequiredArity();
  int optArity=declType.getOptionalArity();
  if (declType.isGeneric()) {
    builder.addTypeParameters(declType.getTypeParameters());
  }
  List<String> formals=fn.getFormals();
  for (int i=reqArity - 1; i >= 0; i--) {
    JSType formalType=fn.getDeclaredType().getFormalType(i);
    if (formalType != null) {
      break;
    }
    String formalName=formals.get(i);
    formalType=getFormalTypeAfterFwd(formalName,envGetType(entryEnv,formalName),exitEnv,taints);
    if (formalType.isUnknown() || JSType.UNDEFINED.isSubtypeOf(formalType)) {
      reqArity--;
    }
 else {
      break;
    }
  }
  int formalIndex=0;
  for (  String formal : formals) {
    JSType formalType=fn.getDeclaredTypeOf(formal);
    if (formalType == null) {
      formalType=getFormalTypeAfterFwd(formal,envGetType(entryEnv,formal),exitEnv,taints);
      formalType=formalType.withLocation(null);
    }
    if (formalIndex < reqArity) {
      builder.addReqFormal(formalType);
    }
 else     if (formalIndex < optArity) {
      builder.addOptFormal(formalType);
    }
    formalIndex++;
  }
  if (declType.hasRestFormals()) {
    builder.addRestFormals(declType.getFormalType(formalIndex));
  }
  for (  String outer : fn.getOuterVars()) {
    println("Free var ",outer," going in summary");
    JSType outerType=envGetType(entryEnv,outer);
    for (    String taintedVarName : taints.get(outer)) {
      JSType taintType=envGetType(exitEnv,taintedVarName);
      outerType=JSType.meet(taintType,outerType);
    }
    builder.addOuterVarPrecondition(outer,outerType.withLocation(null));
  }
  builder.addNominalType(declType.getNominalType());
  JSType declRetType=declType.getReturnType();
  JSType actualRetType=envGetType(exitEnv,RETVAL_ID);
  if (declRetType == null) {
    builder.addRetType(actualRetType.withLocation(null));
  }
 else {
    builder.addRetType(declRetType);
    if (!isAllowedToNotReturn(fn) && !JSType.UNDEFINED.isSubtypeOf(declRetType) && hasPathWithNoReturn(cfg)) {
      warnings.add(JSError.make(fn.getRoot(),CheckMissingReturn.MISSING_RETURN_STATEMENT,declRetType.toString()));
    }
  }
  JSType summary=builder.buildType();
  println("Function summary for ",fn.getReadableName());
  println("\t",summary);
  summaries.put(fn,summary);
}
