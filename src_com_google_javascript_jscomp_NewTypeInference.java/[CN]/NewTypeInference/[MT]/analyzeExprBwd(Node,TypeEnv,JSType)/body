{
  Preconditions.checkArgument(requiredType != null,"Required type null at: %s",expr);
  Preconditions.checkArgument(!requiredType.isBottom());
switch (expr.getToken()) {
case EMPTY:
    return new EnvTypePair(outEnv,UNKNOWN);
case FUNCTION:
{
    String fnName=symbolTable.getFunInternalName(expr);
    return new EnvTypePair(outEnv,envGetType(outEnv,fnName));
  }
case FALSE:
case NULL:
case NUMBER:
case STRING:
case TRUE:
return new EnvTypePair(outEnv,scalarValueToType(expr.getToken()));
case OBJECTLIT:
return analyzeObjLitBwd(expr,outEnv,requiredType);
case THIS:
{
if (!currentScope.hasThis()) {
return new EnvTypePair(outEnv,UNKNOWN);
}
JSType thisType=currentScope.getDeclaredTypeOf(THIS_ID);
return new EnvTypePair(outEnv,thisType);
}
case NAME:
return analyzeNameBwd(expr,outEnv,requiredType);
case INC:
case DEC:
case BITNOT:
case NEG:
return analyzeExprBwd(expr.getFirstChild(),outEnv,NUMBER);
case POS:
{
EnvTypePair pair=analyzeExprBwd(expr.getFirstChild(),outEnv);
pair.type=NUMBER;
return pair;
}
case TYPEOF:
{
EnvTypePair pair=analyzeExprBwd(expr.getFirstChild(),outEnv);
pair.type=STRING;
return pair;
}
case INSTANCEOF:
{
TypeEnv env=analyzeExprBwd(expr.getLastChild(),outEnv,commonTypes.topFunction()).env;
EnvTypePair pair=analyzeExprBwd(expr.getFirstChild(),env);
pair.type=BOOLEAN;
return pair;
}
case BITOR:
case BITAND:
case BITXOR:
case DIV:
case LSH:
case MOD:
case MUL:
case RSH:
case SUB:
case URSH:
return analyzeBinaryNumericOpBwd(expr,outEnv);
case ADD:
return analyzeAddBwd(expr,outEnv,requiredType);
case OR:
case AND:
return analyzeLogicalOpBwd(expr,outEnv);
case SHEQ:
case SHNE:
case EQ:
case NE:
return analyzeEqNeBwd(expr,outEnv);
case LT:
case GT:
case LE:
case GE:
return analyzeLtGtBwd(expr,outEnv);
case ASSIGN:
return analyzeAssignBwd(expr,outEnv,requiredType);
case ASSIGN_ADD:
return analyzeAssignAddBwd(expr,outEnv,requiredType);
case ASSIGN_BITOR:
case ASSIGN_BITXOR:
case ASSIGN_BITAND:
case ASSIGN_LSH:
case ASSIGN_RSH:
case ASSIGN_URSH:
case ASSIGN_SUB:
case ASSIGN_MUL:
case ASSIGN_DIV:
case ASSIGN_MOD:
return analyzeAssignNumericOpBwd(expr,outEnv);
case GETPROP:
{
Preconditions.checkState(!NodeUtil.isAssignmentOp(expr.getParent()) || !NodeUtil.isLValue(expr));
if (expr.getBooleanProp(Node.ANALYZED_DURING_GTI)) {
return new EnvTypePair(outEnv,requiredType);
}
return analyzePropAccessBwd(expr.getFirstChild(),expr.getLastChild().getString(),outEnv,requiredType);
}
case HOOK:
return analyzeHookBwd(expr,outEnv,requiredType);
case CALL:
case NEW:
return analyzeCallNewBwd(expr,outEnv,requiredType);
case COMMA:
{
EnvTypePair pair=analyzeExprBwd(expr.getLastChild(),outEnv,requiredType);
pair.env=analyzeExprBwd(expr.getFirstChild(),pair.env).env;
return pair;
}
case NOT:
{
EnvTypePair pair=analyzeExprBwd(expr.getFirstChild(),outEnv);
pair.type=pair.type.negate();
return pair;
}
case GETELEM:
return analyzeGetElemBwd(expr,outEnv,requiredType);
case VOID:
{
EnvTypePair pair=analyzeExprBwd(expr.getFirstChild(),outEnv);
pair.type=UNDEFINED;
return pair;
}
case IN:
return analyzeInBwd(expr,outEnv);
case DELPROP:
{
EnvTypePair pair=analyzeExprBwd(expr.getFirstChild(),outEnv);
pair.type=BOOLEAN;
return pair;
}
case VAR:
{
Node vdecl=expr.getFirstChild();
String name=vdecl.getString();
Preconditions.checkState(!vdecl.hasChildren());
return new EnvTypePair(envPutType(outEnv,name,UNKNOWN),UNKNOWN);
}
case REGEXP:
return new EnvTypePair(outEnv,commonTypes.getRegexpType());
case ARRAYLIT:
return analyzeArrayLitBwd(expr,outEnv);
case CAST:
EnvTypePair pair=analyzeExprBwd(expr.getFirstChild(),outEnv);
pair.type=symbolTable.getCastType(expr);
return pair;
default :
throw new RuntimeException("BWD: Unhandled expression type: " + expr.getToken() + " with parent: "+ expr.getParent());
}
}
