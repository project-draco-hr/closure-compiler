{
  FunctionType fnSummary=summaries.get(this.calleeScope).getFunType();
  println("Running deferred check of function: ",calleeScope.getReadableName()," with FunctionSummary of: ",fnSummary," and callsite ret: ",expectedRetType," args: ",argTypes);
  if (this.expectedRetType != null && !fnSummary.getReturnType().isSubtypeOf(this.expectedRetType)) {
    warnings.add(JSError.make(this.callSite,INVALID_INFERRED_RETURN_TYPE,errorMsgWithTypeDiff(this.expectedRetType,fnSummary.getReturnType())));
  }
  int i=0;
  Node argNode=callSite.getSecondChild();
  if (this.argTypes == null) {
    return;
  }
  for (  JSType argType : this.argTypes) {
    JSType formalType=fnSummary.getFormalType(i);
    if (argNode.isName() && callerScope.isKnownFunction(argNode.getString())) {
      argType=summaries.get(callerScope.getScope(argNode.getString()));
    }
    if (argType != null && !argType.isSubtypeOf(formalType)) {
      warnings.add(JSError.make(argNode,INVALID_ARGUMENT_TYPE,Integer.toString(i + 1),calleeScope.getReadableName(),formalType.toString(),argType.toString()));
    }
    i++;
    argNode=argNode.getNext();
  }
}
