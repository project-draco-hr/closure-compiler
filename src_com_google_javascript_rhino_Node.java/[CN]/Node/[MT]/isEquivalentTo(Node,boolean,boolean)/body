{
  if (type != node.getType() || getChildCount() != node.getChildCount() || this.getClass() != node.getClass()) {
    return false;
  }
  if (compareJsType && !JSType.isEquivalent(jsType,node.getJSType())) {
    return false;
  }
  if (type == Token.ARRAYLIT) {
    try {
      int[] indices1=(int[])getProp(Node.SKIP_INDEXES_PROP);
      int[] indices2=(int[])node.getProp(Node.SKIP_INDEXES_PROP);
      if (indices1 == null) {
        if (indices2 != null) {
          return false;
        }
      }
 else       if (indices2 == null) {
        return false;
      }
 else       if (indices1.length != indices2.length) {
        return false;
      }
 else {
        for (int i=0; i < indices1.length; i++) {
          if (indices1[i] != indices2[i]) {
            return false;
          }
        }
      }
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (type == Token.INC || type == Token.DEC) {
    int post1=this.getIntProp(INCRDECR_PROP);
    int post2=node.getIntProp(INCRDECR_PROP);
    if (post1 != post2) {
      return false;
    }
  }
 else   if (type == Token.STRING) {
    int quoted1=this.getIntProp(QUOTED_PROP);
    int quoted2=node.getIntProp(QUOTED_PROP);
    if (quoted1 != quoted2) {
      return false;
    }
  }
 else   if (type == Token.CALL) {
    if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {
      return false;
    }
  }
  if (recurse) {
    Node n, n2;
    for (n=first, n2=node.first; n != null; n=n.next, n2=n2.next) {
      if (!n.isEquivalentTo(n2,compareJsType,true)) {
        return false;
      }
    }
  }
  return true;
}
