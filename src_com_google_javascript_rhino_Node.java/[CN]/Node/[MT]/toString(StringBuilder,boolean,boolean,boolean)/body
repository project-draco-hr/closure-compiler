{
  sb.append(token);
  if (this instanceof StringNode) {
    sb.append(' ');
    sb.append(getString());
  }
 else   if (token == Token.FUNCTION) {
    sb.append(' ');
    if (first == null || first.token != Token.NAME) {
      sb.append("<invalid>");
    }
 else {
      sb.append(first.getString());
    }
  }
 else   if (token == Token.NUMBER) {
    sb.append(' ');
    sb.append(getDouble());
  }
  if (printSource) {
    int lineno=getLineno();
    if (lineno != -1) {
      sb.append(' ');
      sb.append(lineno);
    }
    if (length != 0) {
      sb.append(" [length: ");
      sb.append(length);
      sb.append(']');
    }
  }
  if (printAnnotations) {
    int[] keys=getSortedPropTypes();
    for (int i=0; i < keys.length; i++) {
      int type=keys[i];
      PropListItem x=lookupProperty(type);
      sb.append(" [");
      sb.append(propToString(type));
      sb.append(": ");
      sb.append(x);
      sb.append(']');
    }
  }
  if (printType && typei != null) {
    String typeString=typei.toString();
    if (typeString != null) {
      sb.append(" : ");
      sb.append(typeString);
    }
  }
}
