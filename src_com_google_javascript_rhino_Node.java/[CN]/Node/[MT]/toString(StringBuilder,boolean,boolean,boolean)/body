{
  if (Token.printTrees) {
    sb.append(Token.name(type));
    if (this instanceof StringNode) {
      sb.append(' ');
      sb.append(getString());
    }
 else     if (type == Token.FUNCTION) {
      sb.append(' ');
      if (first == null || first.getType() != Token.NAME) {
        sb.append("<invalid>");
      }
 else {
        sb.append(first.getString());
      }
    }
 else     if (type == Token.NUMBER) {
      sb.append(' ');
      sb.append(getDouble());
    }
    if (printSource) {
      int lineno=getLineno();
      if (lineno != -1) {
        sb.append(' ');
        sb.append(lineno);
      }
    }
    if (printAnnotations) {
      int[] keys=getSortedPropTypes();
      for (int i=0; i < keys.length; i++) {
        int type=keys[i];
        PropListItem x=lookupProperty(type);
        sb.append(" [");
        sb.append(propToString(type));
        sb.append(": ");
        String value;
switch (type) {
case TARGETBLOCK_PROP:
          value="target block property";
        break;
case LOCAL_BLOCK_PROP:
      value="last local block";
    break;
case ISNUMBER_PROP:
switch (x.getIntValue()) {
case BOTH:
    value="both";
  break;
case RIGHT:
value="right";
break;
case LEFT:
value="left";
break;
default :
throw Kit.codeBug();
}
break;
case SPECIALCALL_PROP:
switch (x.getIntValue()) {
case SPECIALCALL_EVAL:
value="eval";
break;
case SPECIALCALL_WITH:
value="with";
break;
default :
throw Kit.codeBug();
}
break;
default :
value=x.toString();
break;
}
sb.append(value);
sb.append(']');
}
}
if (printType) {
if (jsType != null) {
String jsTypeString=jsType.toString();
if (jsTypeString != null) {
sb.append(" : ");
sb.append(jsTypeString);
}
}
}
}
}
