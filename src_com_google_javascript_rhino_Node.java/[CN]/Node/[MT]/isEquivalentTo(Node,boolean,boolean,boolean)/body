{
  if (kind != node.kind || getChildCount() != node.getChildCount() || this.getClass() != node.getClass()) {
    return false;
  }
  if (compareType && !JSType.isEquivalent(getJSType(),node.getJSType())) {
    return false;
  }
  if (jsDoc && !JSDocInfo.areEquivalent(getJSDocInfo(),node.getJSDocInfo())) {
    return false;
  }
  TypeDeclarationNode thisTDN=this.getDeclaredTypeExpression();
  TypeDeclarationNode thatTDN=node.getDeclaredTypeExpression();
  if ((thisTDN != null || thatTDN != null) && (thisTDN == null || thatTDN == null || !thisTDN.isEquivalentTo(thatTDN,compareType,recurse,jsDoc))) {
    return false;
  }
  if (kind == Token.INC || kind == Token.DEC) {
    int post1=this.getIntProp(INCRDECR_PROP);
    int post2=node.getIntProp(INCRDECR_PROP);
    if (post1 != post2) {
      return false;
    }
  }
 else   if (kind == Token.STRING || kind == Token.STRING_KEY) {
    if (kind == Token.STRING_KEY) {
      int quoted1=this.getIntProp(QUOTED_PROP);
      int quoted2=node.getIntProp(QUOTED_PROP);
      if (quoted1 != quoted2) {
        return false;
      }
    }
    int slashV1=this.getIntProp(SLASH_V);
    int slashV2=node.getIntProp(SLASH_V);
    if (slashV1 != slashV2) {
      return false;
    }
  }
 else   if (kind == Token.CALL) {
    if (this.getBooleanProp(FREE_CALL) != node.getBooleanProp(FREE_CALL)) {
      return false;
    }
  }
 else   if (kind == Token.FUNCTION) {
    if (this.isArrowFunction() != node.isArrowFunction()) {
      return false;
    }
  }
  if (recurse) {
    for (Node n=first, n2=node.first; n != null; n=n.next, n2=n2.next) {
      if (!n.isEquivalentTo(n2,compareType,recurse,jsDoc)) {
        return false;
      }
    }
  }
  return true;
}
