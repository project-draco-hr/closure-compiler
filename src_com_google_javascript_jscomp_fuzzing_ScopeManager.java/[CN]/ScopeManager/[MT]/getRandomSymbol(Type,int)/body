{
  int minScopes=1;
  boolean excludeLocals=(flags & EXCLUDE_LOCALS) != 0;
  if (excludeLocals) {
    minScopes++;
  }
  boolean excludeExterns=(flags & EXCLUDE_EXTERNS) != 0;
  if (excludeExterns) {
    minScopes++;
  }
  Preconditions.checkArgument(scopeStack.size() >= minScopes);
  List<Symbol> symbols=new ArrayList<>();
  ArrayList<Scope> scopes=new ArrayList<Scope>(scopeStack);
  int start=excludeLocals ? 1 : 0;
  int end=excludeExterns ? scopes.size() - 1 : scopes.size();
  for (int i=start; i < end; i++) {
    Scope scope=scopes.get(i);
    for (    Symbol s : scope.symbols) {
      if (type == null || s.type == type) {
        symbols.add(s);
      }
    }
  }
  int numCandidates=symbols.size();
  if (numCandidates == 0) {
    return null;
  }
  Symbol sym=symbols.get(random.nextInt(numCandidates));
  if (excludeLocals && searchLocalFor(sym.name) != null) {
    return null;
  }
 else {
    return sym;
  }
}
