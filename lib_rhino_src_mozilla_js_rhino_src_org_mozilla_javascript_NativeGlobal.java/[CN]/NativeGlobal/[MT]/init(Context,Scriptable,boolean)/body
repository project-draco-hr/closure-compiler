{
  NativeGlobal obj=new NativeGlobal();
  for (int id=1; id <= LAST_SCOPE_FUNCTION_ID; ++id) {
    String name;
    int arity=1;
switch (id) {
case Id_decodeURI:
      name="decodeURI";
    break;
case Id_decodeURIComponent:
  name="decodeURIComponent";
break;
case Id_encodeURI:
name="encodeURI";
break;
case Id_encodeURIComponent:
name="encodeURIComponent";
break;
case Id_escape:
name="escape";
break;
case Id_eval:
name="eval";
break;
case Id_isFinite:
name="isFinite";
break;
case Id_isNaN:
name="isNaN";
break;
case Id_isXMLName:
name="isXMLName";
break;
case Id_parseFloat:
name="parseFloat";
break;
case Id_parseInt:
name="parseInt";
arity=2;
break;
case Id_unescape:
name="unescape";
break;
case Id_uneval:
name="uneval";
break;
default :
throw Kit.codeBug();
}
IdFunctionObject f=new IdFunctionObject(obj,FTAG,id,name,arity,scope);
if (sealed) {
f.sealObject();
}
f.exportAsScopeProperty();
}
ScriptableObject.defineProperty(scope,"NaN",ScriptRuntime.NaNobj,READONLY | DONTENUM | PERMANENT);
ScriptableObject.defineProperty(scope,"Infinity",ScriptRuntime.wrapNumber(Double.POSITIVE_INFINITY),READONLY | DONTENUM | PERMANENT);
ScriptableObject.defineProperty(scope,"undefined",Undefined.instance,READONLY | DONTENUM | PERMANENT);
String[] errorMethods={"ConversionError","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError","InternalError","JavaException"};
for (int i=0; i < errorMethods.length; i++) {
String name=errorMethods[i];
ScriptableObject errorProto=(ScriptableObject)ScriptRuntime.newObject(cx,scope,"Error",ScriptRuntime.emptyArgs);
errorProto.put("name",errorProto,name);
errorProto.put("message",errorProto,"");
IdFunctionObject ctor=new IdFunctionObject(obj,FTAG,Id_new_CommonError,name,1,scope);
ctor.markAsConstructor(errorProto);
errorProto.put("constructor",errorProto,ctor);
errorProto.setAttributes("constructor",ScriptableObject.DONTENUM);
if (sealed) {
errorProto.sealObject();
ctor.sealObject();
}
ctor.exportAsScopeProperty();
}
}
