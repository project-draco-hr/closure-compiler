{
  if (f.hasTag(FTAG)) {
    int methodId=f.methodId();
switch (methodId) {
case Id_decodeURI:
case Id_decodeURIComponent:
{
        String str=ScriptRuntime.toString(args,0);
        return decode(str,methodId == Id_decodeURI);
      }
case Id_encodeURI:
case Id_encodeURIComponent:
{
      String str=ScriptRuntime.toString(args,0);
      return encode(str,methodId == Id_encodeURI);
    }
case Id_escape:
  return js_escape(args);
case Id_eval:
return js_eval(cx,scope,args);
case Id_isFinite:
{
boolean result;
if (args.length < 1) {
  result=false;
}
 else {
  double d=ScriptRuntime.toNumber(args[0]);
  result=(d == d && d != Double.POSITIVE_INFINITY && d != Double.NEGATIVE_INFINITY);
}
return ScriptRuntime.wrapBoolean(result);
}
case Id_isNaN:
{
boolean result;
if (args.length < 1) {
result=true;
}
 else {
double d=ScriptRuntime.toNumber(args[0]);
result=(d != d);
}
return ScriptRuntime.wrapBoolean(result);
}
case Id_isXMLName:
{
Object name=(args.length == 0) ? Undefined.instance : args[0];
XMLLib xmlLib=XMLLib.extractFromScope(scope);
return ScriptRuntime.wrapBoolean(xmlLib.isXMLName(cx,name));
}
case Id_parseFloat:
return js_parseFloat(args);
case Id_parseInt:
return js_parseInt(args);
case Id_unescape:
return js_unescape(args);
case Id_uneval:
{
Object value=(args.length != 0) ? args[0] : Undefined.instance;
return ScriptRuntime.uneval(cx,scope,value);
}
case Id_new_CommonError:
return NativeError.make(cx,scope,f,args);
}
}
throw f.unknown();
}
