{
  Preconditions.checkArgument(!envs.isEmpty());
  Iterator<TypeEnv> envsIter=envs.iterator();
  TypeEnv firstEnv=envsIter.next();
  if (!envsIter.hasNext()) {
    return firstEnv;
  }
  PersistentMap<String,JSType> newMap=firstEnv.typeMap;
  while (envsIter.hasNext()) {
    TypeEnv env=envsIter.next();
    for (    Map.Entry<String,JSType> entry : env.typeMap.entrySet()) {
      String name=entry.getKey();
      JSType currentType=newMap.get(name);
      JSType otherType=entry.getValue();
      Preconditions.checkNotNull(currentType,"%s is missing from an env",name);
      if (!currentType.equals(otherType)) {
        newMap=newMap.with(name,JSType.join(currentType,otherType));
      }
    }
  }
  return new TypeEnv(newMap);
}
