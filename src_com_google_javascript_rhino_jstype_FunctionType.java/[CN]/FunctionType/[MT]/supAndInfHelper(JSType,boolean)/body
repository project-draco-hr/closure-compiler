{
  if (isFunctionType() && that.isFunctionType()) {
    if (isEquivalentTo(that)) {
      return this;
    }
    if (isOrdinaryFunction() && that.isOrdinaryFunction() && that instanceof FunctionType) {
      FunctionType other=(FunctionType)that;
      if (call.hasEqualParameters(other.call) && isEquivalent(typeOfThis,other.typeOfThis)) {
        JSType newReturnType=leastSuper ? call.returnType.getLeastSupertype(other.call.returnType) : call.returnType.getGreatestSubtype(other.call.returnType);
        return cloneWithNewReturnType(newReturnType,call.returnTypeInferred || other.call.returnTypeInferred);
      }
    }
    JSType functionInstance=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);
    if (functionInstance.isEquivalentTo(that)) {
      return leastSuper ? that : this;
    }
 else     if (functionInstance.isEquivalentTo(this)) {
      return leastSuper ? this : that;
    }
    return leastSuper ? registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) : registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  }
  return leastSuper ? super.getLeastSupertype(that) : super.getGreatestSubtype(that);
}
