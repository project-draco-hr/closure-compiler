{
  setResolvedTypeInternal(this);
  call=(ArrowType)safeResolve(call,t,scope);
  if (prototypeSlot != null) {
    prototypeSlot.setType(safeResolve(prototypeSlot.getType(),t,scope));
  }
  JSType maybeTypeOfThis=safeResolve(typeOfThis,t,scope);
  if (maybeTypeOfThis != null) {
    if (maybeTypeOfThis.isNullType() || maybeTypeOfThis.isVoidType()) {
      typeOfThis=maybeTypeOfThis;
    }
 else {
      maybeTypeOfThis=ObjectType.cast(maybeTypeOfThis.restrictByNotNullOrUndefined());
      if (maybeTypeOfThis != null) {
        typeOfThis=maybeTypeOfThis;
      }
    }
  }
  boolean changed=false;
  ImmutableList.Builder<ObjectType> resolvedInterfaces=ImmutableList.builder();
  for (  ObjectType iface : implementedInterfaces) {
    ObjectType resolvedIface=(ObjectType)iface.resolve(t,scope);
    resolvedInterfaces.add(resolvedIface);
    changed|=(resolvedIface != iface);
  }
  if (changed) {
    implementedInterfaces=resolvedInterfaces.build();
  }
  if (subTypes != null) {
    for (int i=0; i < subTypes.size(); i++) {
      subTypes.set(i,JSType.toMaybeFunctionType(subTypes.get(i).resolve(t,scope)));
    }
  }
  return super.resolveInternal(t,scope);
}
