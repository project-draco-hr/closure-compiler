{
  if (JSType.isSubtypeHelper(this,that,implicitImplCache)) {
    return true;
  }
  if (that.isFunctionType()) {
    FunctionType other=that.toMaybeFunctionType();
    if (other.isInterface()) {
      return true;
    }
    if (isInterface()) {
      return false;
    }
    return treatThisTypesAsCovariant(other,implicitImplCache) && this.call.isSubtype(other.call,implicitImplCache);
  }
  return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that,implicitImplCache);
}
