{
  Node objectLit=new Node(Token.OBJECTLIT);
  int remainingBudget=budget - 1;
  if (remainingBudget < 0) {
    remainingBudget=0;
  }
  int objectLength=generateLength(remainingBudget / 2);
  if (objectLength == 0) {
    return objectLit;
  }
  remainingBudget-=objectLength;
  ExpressionFuzzer[] fuzzers=new ExpressionFuzzer[objectLength];
  Arrays.fill(fuzzers,new ExpressionFuzzer(context));
  Node[] values=distribute(remainingBudget,fuzzers);
  for (int i=0; i < objectLength; i++) {
    String name;
    if (context.random.nextInt(2) == 0) {
      name=context.snGenerator.getPropertyName();
    }
 else {
      name=String.valueOf(context.snGenerator.getRandomNumber());
    }
    Node key=Node.newString(Token.STRING_KEY,name);
    key.addChildrenToFront(values[i]);
    objectLit.addChildToBack(key);
  }
  return objectLit;
}
