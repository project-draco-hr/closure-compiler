{
  Node parent=n.getParent();
  Var origVar=s.getVar(name);
  Node origParent=origVar.getParentNode();
  if (parent.isLet() || parent.isConst() || parent.isClass()|| (origParent != null && (origParent.isLet() || origParent.isConst() || origParent.isClass()))) {
    compiler.report(JSError.make(n,LET_CONST_CLASS_MULTIPLY_DECLARED_ERROR));
    return;
  }
  if (s.isGlobal()) {
    if (origParent.isCatch() && parent.isCatch()) {
      return;
    }
    boolean allowDupe=hasDuplicateDeclarationSuppression(n,origVar);
    if (isExternNamespace(n)) {
      parent.getParent().removeChild(parent);
      compiler.reportCodeChange();
      return;
    }
    if (!allowDupe) {
      compiler.report(JSError.make(n,VAR_MULTIPLY_DECLARED_ERROR,name,(origVar.input != null ? origVar.input.getName() : "??")));
    }
  }
 else   if (name.equals(ARGUMENTS) && !NodeUtil.isVarDeclaration(n)) {
    compiler.report(JSError.make(n,VAR_ARGUMENTS_SHADOWED_ERROR));
  }
}
