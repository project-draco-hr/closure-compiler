{
  Node enclosingCall=parent;
  Node potentialCallee=node;
  if (!parent.isCall()) {
    enclosingCall=parent.getParent();
    potentialCallee=parent;
  }
  if (!enclosingCall.isCall() || enclosingCall.getFirstChild() != potentialCallee || enclosingCall.getFirstChild().isGetElem()) {
    compiler.report(JSError.make(node,CANNOT_CONVERT_YET,"Only calls to super or to a method of super are supported."));
    return;
  }
  Node clazz=NodeUtil.getEnclosingClass(node);
  if (clazz == null) {
    compiler.report(JSError.make(node,NO_SUPERTYPE));
    return;
  }
  if (NodeUtil.getClassNameNode(clazz) == null) {
    return;
  }
  Node superName=clazz.getSecondChild();
  if (!superName.isQualifiedName()) {
    return;
  }
  Node enclosingMemberDef=NodeUtil.getEnclosingClassMemberFunction(node);
  if (enclosingMemberDef.isStaticMember()) {
    Node callTarget;
    potentialCallee.detachFromParent();
    if (potentialCallee == node) {
      potentialCallee=IR.getprop(superName.cloneTree(),IR.string(enclosingMemberDef.getString()));
      enclosingCall.putBooleanProp(Node.FREE_CALL,false);
    }
 else {
      potentialCallee.replaceChild(node,superName.cloneTree());
    }
    callTarget=IR.getprop(potentialCallee,IR.string("call"));
    enclosingCall.addChildToFront(callTarget);
    enclosingCall.addChildAfter(IR.thisNode(),callTarget);
    enclosingCall.useSourceInfoIfMissingFromForTree(enclosingCall);
    compiler.reportCodeChange();
    return;
  }
  String methodName;
  Node callName=enclosingCall.removeFirstChild();
  if (callName.isSuper()) {
    methodName=enclosingMemberDef.getString();
  }
 else {
    methodName=callName.getLastChild().getString();
  }
  Node baseCall=baseCall(superName.getQualifiedName(),methodName,enclosingCall.removeChildren());
  baseCall.useSourceInfoIfMissingFromForTree(enclosingCall);
  enclosingCall.getParent().replaceChild(enclosingCall,baseCall);
  compiler.reportCodeChange();
}
