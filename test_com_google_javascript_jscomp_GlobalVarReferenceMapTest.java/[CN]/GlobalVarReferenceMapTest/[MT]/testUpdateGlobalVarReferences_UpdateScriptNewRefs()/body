{
  Map<Var,ReferenceCollection> scriptMap=new HashMap<>();
  ReferenceCollection newVar1Refs=new ReferenceCollection();
  Reference newVar1In2Ref=createRefForTest(INPUT2);
  newVar1Refs.references=ImmutableList.of(newVar1In2Ref);
  ReferenceCollection newVar2Refs=new ReferenceCollection();
  Reference newVar2In2Ref=createRefForTest(INPUT2);
  newVar2Refs.references=ImmutableList.of(newVar2In2Ref);
  ReferenceCollection newVar3Refs=new ReferenceCollection();
  Reference newVar3In2Ref=createRefForTest(INPUT2);
  newVar3Refs.references=ImmutableList.of(newVar3In2Ref);
  scriptMap.put(globalScope.getVar(VAR1),newVar1Refs);
  scriptMap.put(globalScope.getVar(VAR2),newVar2Refs);
  scriptMap.put(globalScope.getVar(VAR3),newVar3Refs);
  map.updateGlobalVarReferences(scriptMap,scriptRoot);
  ReferenceCollection refs=map.getReferences(globalScope.getVar(VAR1));
  assertThat(refs.references).hasSize(3);
  assertEquals(var1Refs.references.get(0),refs.references.get(0));
  assertEquals(newVar1In2Ref,refs.references.get(1));
  assertEquals(var1Refs.references.get(2),refs.references.get(2));
  refs=map.getReferences(globalScope.getVar(VAR2));
  assertThat(refs.references).hasSize(3);
  assertEquals(var2Refs.references.get(0),refs.references.get(0));
  assertEquals(newVar2In2Ref,refs.references.get(1));
  assertEquals(var2Refs.references.get(1),refs.references.get(2));
  refs=map.getReferences(globalScope.getVar(VAR3));
  assertThat(refs.references).hasSize(2);
  assertEquals(var3Refs.references.get(0),refs.references.get(0));
  assertEquals(newVar3In2Ref,refs.references.get(1));
}
