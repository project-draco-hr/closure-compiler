{
  Preconditions.checkNotNull(thisType);
  if (thatType.isUnknownType()) {
    return true;
  }
  if (thatType.isAllType()) {
    return true;
  }
  if (thisType.isEquivalentTo(thatType,implicitImplCache.isStructuralTyping())) {
    return true;
  }
  if (thatType.isUnionType()) {
    UnionType union=thatType.toMaybeUnionType();
    for (    JSType element : union.alternatesWithoutStucturalTyping) {
      if (thisType.isSubtype(element,implicitImplCache,subtypingMode)) {
        return true;
      }
    }
    return false;
  }
  if (subtypingMode == SubtypingMode.IGNORE_NULL_UNDEFINED && (thisType.isNullType() || thisType.isVoidType())) {
    return true;
  }
  TemplateTypeMap thisTypeParams=thisType.getTemplateTypeMap();
  TemplateTypeMap thatTypeParams=thatType.getTemplateTypeMap();
  boolean templateMatch=true;
  if (isExemptFromTemplateTypeInvariance(thatType)) {
    TemplateType key=thisType.registry.getObjectElementKey();
    JSType thisElement=thisTypeParams.getResolvedTemplateType(key);
    JSType thatElement=thatTypeParams.getResolvedTemplateType(key);
    templateMatch=thisElement.isSubtype(thatElement,implicitImplCache,subtypingMode) || thatElement.isSubtype(thisElement,implicitImplCache,subtypingMode);
  }
 else {
    templateMatch=thisTypeParams.checkEquivalenceHelper(thatTypeParams,EquivalenceMethod.INVARIANT,subtypingMode);
  }
  if (!templateMatch) {
    return false;
  }
  if (implicitImplCache.isStructuralTyping() && thisType.isObject() && thatType.isStructuralType()) {
    return thisType.toMaybeObjectType().isStructuralSubtype(thatType.toMaybeObjectType(),implicitImplCache,subtypingMode);
  }
  if (thisType.isTemplatizedType()) {
    return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType,implicitImplCache,subtypingMode);
  }
  if (thatType instanceof ProxyObjectType) {
    return thisType.isSubtype(((ProxyObjectType)thatType).getReferencedTypeInternal(),implicitImplCache,subtypingMode);
  }
  return false;
}
