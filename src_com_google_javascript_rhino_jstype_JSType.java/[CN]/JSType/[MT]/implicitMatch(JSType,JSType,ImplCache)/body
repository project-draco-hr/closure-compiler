{
  Preconditions.checkState(!subType.isUnionType());
  Preconditions.checkState(!superType.isUnionType());
  if (!subType.isObject() || !superType.isObject()) {
    return false;
  }
  FunctionType superConstructor=superType.toMaybeObjectType().getConstructor();
  if (superConstructor == null || !superConstructor.isStructuralInterface()) {
    return false;
  }
  return checkObjectImplicitMatch(subType.toMaybeObjectType(),superType.toMaybeObjectType(),implicitImplCache);
}
