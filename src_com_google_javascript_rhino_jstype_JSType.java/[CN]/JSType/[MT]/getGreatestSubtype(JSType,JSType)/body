{
  if (thisType.isEquivalentTo(thatType)) {
    return thisType;
  }
 else   if (thisType.isUnknownType() || thatType.isUnknownType()) {
    return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(JSTypeNative.UNKNOWN_TYPE);
  }
 else   if (thisType.isSubtype(thatType)) {
    return filterNoResolvedType(thisType);
  }
 else   if (thatType.isSubtype(thisType)) {
    return filterNoResolvedType(thatType);
  }
 else   if (thisType.isUnionType()) {
    return ((UnionType)thisType).meet(thatType);
  }
 else   if (thatType.isUnionType()) {
    return ((UnionType)thatType).meet(thisType);
  }
  if (thisType instanceof EnumElementType) {
    JSType inf=((EnumElementType)thisType).meet(thatType);
    if (inf != null) {
      return inf;
    }
  }
 else   if (thatType instanceof EnumElementType) {
    JSType inf=((EnumElementType)thatType).meet(thisType);
    if (inf != null) {
      return inf;
    }
  }
  if (thisType.isObject() && thatType.isObject()) {
    return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  }
  return thisType.getNativeType(JSTypeNative.NO_TYPE);
}
