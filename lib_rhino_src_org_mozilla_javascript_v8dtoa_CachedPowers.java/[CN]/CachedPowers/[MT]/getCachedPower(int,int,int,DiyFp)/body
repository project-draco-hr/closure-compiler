{
  int kQ=DiyFp.kSignificandSize;
  double k=Math.ceil((alpha - e + kQ - 1) * kD_1_LOG2_10);
  int index=(GRISU_CACHE_OFFSET + (int)k - 1) / CACHED_POWERS_SPACING + 1;
  CachedPower cachedPower=CACHED_POWERS[index];
  c_mk.setF(cachedPower.significand);
  c_mk.setE(cachedPower.binaryExponent);
  assert((alpha <= c_mk.e() + e) && (c_mk.e() + e <= gamma));
  return cachedPower.decimalExponent;
}
