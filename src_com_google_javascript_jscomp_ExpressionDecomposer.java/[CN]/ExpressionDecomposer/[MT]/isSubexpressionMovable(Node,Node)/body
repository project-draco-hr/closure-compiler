{
  boolean requiresDecomposition=false;
  boolean seenSideEffects=NodeUtil.mayHaveSideEffects(subExpression,compiler);
  Node child=subExpression;
  for (  Node parent : child.getAncestors()) {
    if (parent == expressionRoot) {
      return requiresDecomposition ? DecompositionType.DECOMPOSABLE : DecompositionType.MOVABLE;
    }
    int parentType=parent.getType();
    if (isConditionalOp(parent)) {
      if (child != parent.getFirstChild()) {
        requiresDecomposition=true;
      }
    }
 else {
      if (isSafeAssign(parent,seenSideEffects)) {
      }
 else {
        for (        Node n : parent.children()) {
          if (n == child) {
            break;
          }
          if (isExpressionTreeUnsafe(n,seenSideEffects)) {
            seenSideEffects=true;
            requiresDecomposition=true;
          }
        }
        Node first=parent.getFirstChild();
        if (requiresDecomposition && parent.isCall() && NodeUtil.isGet(first)) {
          if (maybeExternMethod(first)) {
            return DecompositionType.UNDECOMPOSABLE;
          }
 else {
            return DecompositionType.DECOMPOSABLE;
          }
        }
      }
    }
    child=parent;
  }
  throw new IllegalStateException("Unexpected.");
}
