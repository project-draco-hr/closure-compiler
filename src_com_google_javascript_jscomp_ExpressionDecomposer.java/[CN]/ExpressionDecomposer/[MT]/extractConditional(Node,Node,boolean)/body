{
  Node parent=expr.getParent();
  String tempName=getTempValueName();
  Node first=expr.getFirstChild();
  Node second=first.getNext();
  Node last=expr.getLastChild();
  expr.detachChildren();
  Node cond=null;
  Node trueExpr=IR.block().srcref(expr);
  Node falseExpr=IR.block().srcref(expr);
switch (expr.getType()) {
case Token.HOOK:
    cond=first;
  trueExpr.addChildToFront(NodeUtil.newExpr(buildResultExpression(second,needResult,tempName)));
falseExpr.addChildToFront(NodeUtil.newExpr(buildResultExpression(last,needResult,tempName)));
break;
case Token.AND:
cond=buildResultExpression(first,needResult,tempName);
trueExpr.addChildToFront(NodeUtil.newExpr(buildResultExpression(last,needResult,tempName)));
break;
case Token.OR:
cond=buildResultExpression(first,needResult,tempName);
falseExpr.addChildToFront(NodeUtil.newExpr(buildResultExpression(last,needResult,tempName)));
break;
default :
throw new IllegalStateException("Unexpected.");
}
Node ifNode;
if (falseExpr.hasChildren()) {
ifNode=IR.ifNode(cond,trueExpr,falseExpr);
}
 else {
ifNode=IR.ifNode(cond,trueExpr);
}
ifNode.useSourceInfoIfMissingFrom(expr);
if (needResult) {
Node tempVarNode=NodeUtil.newVarNode(tempName,null).useSourceInfoIfMissingFromForTree(expr);
Node injectionPointParent=injectionPoint.getParent();
injectionPointParent.addChildBefore(tempVarNode,injectionPoint);
injectionPointParent.addChildAfter(ifNode,tempVarNode);
Node replacementValueNode=IR.name(tempName);
parent.replaceChild(expr,replacementValueNode);
}
 else {
Preconditions.checkArgument(parent.isExprResult());
Node grandparent=parent.getParent();
grandparent.replaceChild(parent,ifNode);
}
return ifNode;
}
