{
  Node parent=expr.getParent();
  boolean isLhsOfAssignOp=NodeUtil.isAssignmentOp(parent) && !parent.isAssign() && parent.getFirstChild() == expr;
  Node firstExtractedNode=null;
  if (isLhsOfAssignOp && NodeUtil.isGet(expr)) {
    for (    Node n : expr.children()) {
      if (!n.isString() && !isConstantName(n,knownConstants)) {
        Node extractedNode=extractExpression(n,injectionPoint);
        if (firstExtractedNode == null) {
          firstExtractedNode=extractedNode;
        }
      }
    }
  }
  String tempName=getTempConstantValueName();
  Node replacementValueNode=IR.name(tempName).srcref(expr);
  Node tempNameValue;
  if (isLhsOfAssignOp) {
    Preconditions.checkState(expr.isName() || NodeUtil.isGet(expr));
    Node opNode=new Node(NodeUtil.getOpFromAssignmentOp(parent)).copyInformationFrom(parent);
    Node rightOperand=parent.getLastChild();
    parent.setType(Token.ASSIGN);
    parent.replaceChild(rightOperand,opNode);
    opNode.addChildToFront(replacementValueNode);
    opNode.addChildToBack(rightOperand);
    tempNameValue=expr.cloneTree();
  }
 else {
    parent.replaceChild(expr,replacementValueNode);
    tempNameValue=expr;
  }
  Node tempVarNode=NodeUtil.newVarNode(tempName,tempNameValue);
  Node injectionPointParent=injectionPoint.getParent();
  injectionPointParent.addChildBefore(tempVarNode,injectionPoint);
  if (firstExtractedNode == null) {
    firstExtractedNode=tempVarNode;
  }
  return firstExtractedNode;
}
