{
  if (n == null || n == stopNode) {
    return;
  }
  Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
  decomposeSubExpressions(n.getNext(),stopNode,state);
  if (isExpressionTreeUnsafe(n,state.sideEffects)) {
    state.sideEffects=true;
    state.extractBeforeStatement=extractExpression(n,state.extractBeforeStatement);
  }
}
