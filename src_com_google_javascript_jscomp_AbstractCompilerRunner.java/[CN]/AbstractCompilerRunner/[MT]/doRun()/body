{
  Compiler.setLoggingLevel(Level.parse(FLAG_logging_level.get()));
  List<JSSourceFile> externsList=createExterns();
  JSSourceFile[] externs=new JSSourceFile[externsList.size()];
  externsList.toArray(externs);
  compiler=createCompiler();
  B options=createOptions();
  JSModule[] modules=null;
  Result result;
  setRunOptions(options);
  if (inputCharset == Charsets.UTF_8) {
    options.outputCharset=Charsets.US_ASCII;
  }
 else {
    options.outputCharset=inputCharset;
  }
  if (!options.jsOutputFile.isEmpty()) {
    out=new PrintStream(options.jsOutputFile,inputCharset.name());
  }
  ((PrintStreamErrorManager)compiler.getErrorManager()).setSummaryDetailLevel(FLAG_summary_detail_level.get());
  List<String> jsFiles=FLAG_js.get();
  List<String> moduleSpecs=FLAG_module.get();
  if (!moduleSpecs.isEmpty()) {
    modules=createJsModules(moduleSpecs,jsFiles);
    result=compiler.compile(externs,modules,options);
  }
 else {
    List<JSSourceFile> inputList=createSourceInputs(jsFiles);
    JSSourceFile[] inputs=new JSSourceFile[inputList.size()];
    inputList.toArray(inputs);
    result=compiler.compile(externs,inputs,options);
  }
  return processResults(result,modules,options);
}
