{
  Ref declaration=name.getDeclaration();
  Name parent=name.parent;
  JSModuleGraph moduleGraph=compiler.getModuleGraph();
  for (  Ref ref : name.getRefs()) {
    if (!isDefined && !isTypedef(ref)) {
      reportRefToUndefinedName(name,ref);
    }
 else     if (declaration != null && ref.getModule() != declaration.getModule() && !moduleGraph.dependsOn(ref.getModule(),declaration.getModule())) {
      reportBadModuleReference(name,ref);
    }
 else {
      if (ref.scope.isGlobal()) {
        boolean isPrototypeGet=(ref.type == Ref.Type.PROTOTYPE_GET);
        Name owner=isPrototypeGet ? name : parent;
        boolean singleGlobalParentDecl=owner != null && owner.getDeclaration() != null && owner.localSets == 0;
        if (singleGlobalParentDecl && owner.getDeclaration().preOrderIndex > ref.preOrderIndex) {
          String refName=isPrototypeGet ? name.getFullName() + ".prototype" : name.getFullName();
          compiler.report(JSError.make(ref.source.getName(),ref.node,NAME_DEFINED_LATE_WARNING,refName,owner.getFullName(),owner.getDeclaration().source.getName(),String.valueOf(owner.getDeclaration().node.getLineno())));
        }
      }
    }
  }
}
