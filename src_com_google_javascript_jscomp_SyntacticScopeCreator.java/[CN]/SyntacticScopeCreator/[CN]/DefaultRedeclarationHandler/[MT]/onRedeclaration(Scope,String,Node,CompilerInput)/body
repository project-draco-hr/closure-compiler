{
  Node parent=n.getParent();
  if (scope.isGlobal()) {
    Scope.Var origVar=scope.getVar(name);
    Node origParent=origVar.getParentNode();
    if (origParent.getType() == Token.CATCH && parent.getType() == Token.CATCH) {
      return;
    }
    boolean allowDupe=false;
    JSDocInfo info=n.getJSDocInfo();
    if (info == null) {
      info=parent.getJSDocInfo();
    }
    allowDupe=info != null && info.getSuppressions().contains("duplicate");
    info=origVar.nameNode.getJSDocInfo();
    if (info == null) {
      info=origParent.getJSDocInfo();
    }
    allowDupe|=info != null && info.getSuppressions().contains("duplicate");
    if (!allowDupe) {
      compiler.report(JSError.make(sourceName,n,VAR_MULTIPLY_DECLARED_ERROR,name,(origVar.input != null ? origVar.input.getName() : "??")));
    }
  }
 else   if (name.equals(ARGUMENTS) && !NodeUtil.isVarDeclaration(n)) {
    compiler.report(JSError.make(sourceName,n,VAR_ARGUMENTS_SHADOWED_ERROR));
  }
}
