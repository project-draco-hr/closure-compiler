{
switch (n.getType()) {
case Token.VAR:
    for (Node child=n.getFirstChild(); child != null; ) {
      Node next=child.getNext();
      Preconditions.checkState(child.getType() == Token.NAME);
      String name=child.getString();
      declareVar(name,child,n,parent,null,n);
      child=next;
    }
  return;
case Token.FUNCTION:
if (NodeUtil.isFunctionExpression(n)) {
  return;
}
String fnName=n.getFirstChild().getString();
if (fnName.isEmpty()) {
return;
}
declareVar(fnName,n.getFirstChild(),n,parent,null,n);
return;
case Token.CATCH:
Preconditions.checkState(n.getChildCount() == 3);
Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);
final Node var=n.getFirstChild();
final Node block=var.getNext().getNext();
declareVar(var.getString(),var,n,parent,null,n);
scanVars(block,n);
return;
case Token.SCRIPT:
sourceName=(String)n.getProp(Node.SOURCENAME_PROP);
break;
}
if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {
for (Node child=n.getFirstChild(); child != null; ) {
Node next=child.getNext();
scanVars(child,n);
child=next;
}
}
}
