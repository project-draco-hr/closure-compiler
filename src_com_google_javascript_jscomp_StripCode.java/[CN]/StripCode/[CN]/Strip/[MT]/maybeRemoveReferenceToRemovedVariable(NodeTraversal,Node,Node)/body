{
switch (parent.getToken()) {
case VAR:
    break;
case GETPROP:
case GETELEM:
  if (parent.getFirstChild() == n && isReferenceToRemovedVar(t,n)) {
    replaceHighestNestedCallWithNull(parent,parent.getParent());
  }
break;
case ASSIGN:
case ASSIGN_BITOR:
case ASSIGN_BITXOR:
case ASSIGN_BITAND:
case ASSIGN_LSH:
case ASSIGN_RSH:
case ASSIGN_URSH:
case ASSIGN_ADD:
case ASSIGN_SUB:
case ASSIGN_MUL:
case ASSIGN_DIV:
case ASSIGN_MOD:
if (isReferenceToRemovedVar(t,n)) {
if (parent.getFirstChild() == n) {
  Node grandparent=parent.getParent();
  if (grandparent.isExprResult()) {
    Node greatGrandparent=grandparent.getParent();
    replaceWithEmpty(grandparent,greatGrandparent);
    compiler.reportCodeChange();
  }
 else {
    Node rvalue=n.getNext();
    parent.removeChild(rvalue);
    grandparent.replaceChild(parent,rvalue);
    compiler.reportCodeChange();
  }
}
 else {
  replaceWithNull(n,parent);
  compiler.reportCodeChange();
}
}
break;
default :
if (isReferenceToRemovedVar(t,n)) {
replaceWithNull(n,parent);
compiler.reportCodeChange();
}
break;
}
}
