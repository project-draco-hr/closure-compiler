{
  int dataSize=getWriteSize();
  byte[] data=new byte[dataSize];
  int offset=0;
  short sourceFileAttributeNameIndex=0;
  if (itsSourceFileNameIndex != 0) {
    sourceFileAttributeNameIndex=itsConstantPool.addUtf8("SourceFile");
  }
  offset=putInt32(FileHeaderConstant,data,offset);
  offset=putInt16(MinorVersion,data,offset);
  offset=putInt16(MajorVersion,data,offset);
  offset=itsConstantPool.write(data,offset);
  offset=putInt16(itsFlags,data,offset);
  offset=putInt16(itsThisClassIndex,data,offset);
  offset=putInt16(itsSuperClassIndex,data,offset);
  offset=putInt16(itsInterfaces.size(),data,offset);
  for (int i=0; i < itsInterfaces.size(); i++) {
    int interfaceIndex=((Short)(itsInterfaces.get(i))).shortValue();
    offset=putInt16(interfaceIndex,data,offset);
  }
  offset=putInt16(itsFields.size(),data,offset);
  for (int i=0; i < itsFields.size(); i++) {
    ClassFileField field=(ClassFileField)itsFields.get(i);
    offset=field.write(data,offset);
  }
  offset=putInt16(itsMethods.size(),data,offset);
  for (int i=0; i < itsMethods.size(); i++) {
    ClassFileMethod method=(ClassFileMethod)itsMethods.get(i);
    offset=method.write(data,offset);
  }
  if (itsSourceFileNameIndex != 0) {
    offset=putInt16(1,data,offset);
    offset=putInt16(sourceFileAttributeNameIndex,data,offset);
    offset=putInt32(2,data,offset);
    offset=putInt16(itsSourceFileNameIndex,data,offset);
  }
 else {
    offset=putInt16(0,data,offset);
  }
  if (offset != dataSize) {
    throw new RuntimeException();
  }
  return data;
}
