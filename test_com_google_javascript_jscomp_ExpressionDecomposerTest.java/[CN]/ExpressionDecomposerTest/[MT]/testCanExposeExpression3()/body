{
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"x = 0 && foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"x = 1 || foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"var x = 1 ? foo() : 0","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"const x = 1 ? foo() : 0","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"let x = 1 ? foo() : 0","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"goo() && foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"x = goo() && foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"x += goo() && foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"var x = goo() && foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"const x = goo() && foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"let x = goo() && foo()","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"if(goo() && foo()){}","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"switch(goo() && foo()){}","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"switch(goo() && foo()){}","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"switch(x = goo() && foo()){}","foo");
  helperCanExposeExpression(DecompositionType.DECOMPOSABLE,"function f(){ return goo() && foo();}","foo");
}
