{
  Node formalArgs=declaration.node.getFirstChild().getNext();
  Node body=formalArgs.getNext();
  Iterator<FormalParameter> it=declaration.parameters.descendingIterator();
  int index=declaration.parameters.size();
  LinkedList<Integer> indexes=new LinkedList<Integer>();
  while (it.hasNext()) {
    FormalParameter param=it.next();
    --index;
    if (index >= declaration.minParams) {
      continue;
    }
    if (param.manyValues) {
      continue;
    }
    if (!checkIsSafeToRemove(param)) {
      continue;
    }
    formalArgs.removeChild(param.arg);
    Node newVar=NodeUtil.newVarNode(param.arg.getQualifiedName(),param.initialValue.cloneTree());
    body.addChildToFront(newVar);
    compiler.reportCodeChange();
    indexes.push(index);
  }
  for (  Call call : declaration.calls) {
    int currentArg=0;
    Node arg=call.callSide.getFirstChild().getNext();
    ListIterator<Integer> itr=indexes.listIterator();
    int rsh=NodeUtil.isFunctionObjectCall(call.callSide) ? 1 : 0;
    while (itr.hasNext() && arg != null) {
      index=itr.next() + rsh;
      while (currentArg < index && arg != null) {
        arg=arg.getNext();
        ++currentArg;
      }
      if (arg != null) {
        Node temp=arg.getNext();
        call.callSide.removeChild(arg);
        compiler.reportCodeChange();
        ++currentArg;
        arg=temp;
      }
    }
  }
}
