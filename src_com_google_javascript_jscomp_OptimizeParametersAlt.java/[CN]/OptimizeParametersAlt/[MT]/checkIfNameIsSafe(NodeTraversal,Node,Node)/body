{
  Preconditions.checkState(node.getType() == Token.NAME);
  boolean isSafe=false;
  String name=node.getString();
  Scope scope=t.getScope();
  if (parent.getType() == Token.CALL && parent.getFirstChild() == node) {
    registerCall(name,parent,scope);
    return;
  }
  if (parent.getType() == Token.NEW && parent.getFirstChild() == node) {
    registerCall(name,parent,scope);
    return;
  }
  int type=parent.getType();
  if (NodeUtil.isGet(parent) && parent.getFirstChild() == node) {
    Preconditions.checkNotNull(node.getNext());
    Node grandparent=parent.getParent();
    Node prop=node.getNext();
    if (NodeUtil.isString(prop) && prop.getString().equals("call") && NodeUtil.isCall(grandparent)) {
      registerCall(name,grandparent,scope);
      return;
    }
  }
  if (NodeUtil.isFunction(parent) && parent.getFirstChild() == node) {
    return;
  }
  if (parent.getType() == Token.LP && NodeUtil.isFunction(parent.getParent()) && parent.getFirstChild().getNext() == node) {
    return;
  }
  if (NodeUtil.isVarDeclaration(node)) {
    return;
  }
  if (NodeUtil.isAssign(parent) && parent.getFirstChild() == node) {
    return;
  }
  if (name.equals("arguments")) {
    Node function=t.getEnclosingFunction();
    if (function != null) {
      name=function.getFirstChild().getString();
      if (!name.isEmpty()) {
        blacklist.add(name);
      }
      Node fparent=function.getParent();
      if (NodeUtil.isVarDeclaration(fparent)) {
        name=fparent.getString();
        blacklist.add(name);
      }
    }
    return;
  }
  blacklist.add(node.getString());
}
