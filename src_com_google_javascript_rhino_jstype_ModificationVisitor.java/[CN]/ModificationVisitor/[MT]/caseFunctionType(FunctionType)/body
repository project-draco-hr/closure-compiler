{
  if (isNativeFunctionType(type)) {
    return type;
  }
  if (!type.isOrdinaryFunction() && !type.isConstructor()) {
    return type;
  }
  boolean changed=false;
  JSType beforeThis=type.getTypeOfThis();
  JSType afterThis=coerseToThisType(beforeThis.visit(this));
  if (beforeThis != afterThis) {
    changed=true;
  }
  JSType beforeReturn=type.getReturnType();
  JSType afterReturn=beforeReturn.visit(this);
  if (beforeReturn != afterReturn) {
    changed=true;
  }
  FunctionParamBuilder paramBuilder=new FunctionParamBuilder(registry);
  for (  Node paramNode : type.getParameters()) {
    JSType beforeParamType=paramNode.getJSType();
    JSType afterParamType=beforeParamType.visit(this);
    if (beforeParamType != afterParamType) {
      changed=true;
    }
    if (paramNode.isOptionalArg()) {
      paramBuilder.addOptionalParams(afterParamType);
    }
 else     if (paramNode.isVarArgs()) {
      paramBuilder.addVarArgs(afterParamType);
    }
 else {
      paramBuilder.addRequiredParams(afterParamType);
    }
  }
  if (changed) {
    FunctionBuilder builder=new FunctionBuilder(registry).setIsConstructor(type.isConstructor()).withParams(paramBuilder).withReturnType(afterReturn).withTypeOfThis(afterThis).withTemplateKeys(type.getTemplateTypeMap().getUnfilledTemplateKeys());
    return builder.build();
  }
  return type;
}
