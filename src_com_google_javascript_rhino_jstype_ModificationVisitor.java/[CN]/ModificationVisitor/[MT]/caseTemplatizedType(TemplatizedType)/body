{
  boolean changed=false;
  ObjectType beforeBaseType=type.getReferencedType();
  ObjectType afterBaseType=ObjectType.cast(beforeBaseType.visit(this));
  if (beforeBaseType != afterBaseType) {
    changed=true;
  }
  ImmutableList.Builder<JSType> builder=ImmutableList.builder();
  for (  JSType beforeTemplateType : type.getTemplateTypes()) {
    JSType afterTemplateType=beforeTemplateType.visit(this);
    if (beforeTemplateType != afterTemplateType) {
      changed=true;
    }
    builder.add(afterTemplateType);
  }
  if (changed) {
    type=registry.createTemplatizedType(afterBaseType,builder.build());
  }
  return type;
}
