{
  JvmMetrics.maybeWriteJvmMetrics(this.output,"verbose:pretty:all");
  calcTotalStats();
  ArrayList<Entry<String,Stats>> statEntries=new ArrayList<>();
  statEntries.addAll(summary.entrySet());
  Collections.sort(statEntries,new Comparator<Entry<String,Stats>>(){
    @Override public int compare(    Entry<String,Stats> e1,    Entry<String,Stats> e2){
      return Long.compare(e1.getValue().runtime,e2.getValue().runtime);
    }
  }
);
  this.output.print("Summary:\n" + "pass,runtime,allocMem,runs,changingRuns,reduction,gzReduction\n");
  for (  Entry<String,Stats> entry : statEntries) {
    String key=entry.getKey();
    Stats stats=entry.getValue();
    this.output.print(SimpleFormat.format("%s,%d,%d,%d,%d,%d,%d\n",key,stats.runtime,stats.allocMem,stats.runs,stats.changes,stats.diff,stats.gzDiff));
  }
  this.output.print("\nTOTAL:" + "\nRuntime(ms): " + runtime + "\nMax mem usage (measured after each pass)(MB): "+ maxMem+ "\n#Runs: "+ runs+ "\n#Changing runs: "+ changes+ "\n#Loopable runs: "+ loopRuns+ "\n#Changing loopable runs: "+ loopChanges+ "\nEstimated Reduction(bytes): "+ diff+ "\nEstimated GzReduction(bytes): "+ gzDiff+ "\nEstimated Size(bytes): "+ codeSize+ "\nEstimated GzSize(bytes): "+ gzCodeSize+ "\n");
  this.output.print("\nInputs:" + "\nJS lines:   " + jsLines + "\nJS sources: "+ jsSources+ "\nExtern lines:   "+ externLines+ "\nExtern sources: "+ externSources+ "\n\n");
  this.output.print("Log:\n" + "pass,runtime,allocMem,codeChanged,reduction,gzReduction,size,gzSize\n");
  for (  Stats stats : log) {
    this.output.print(SimpleFormat.format("%s,%d,%d,%b,%d,%d,%d,%d\n",stats.pass,stats.runtime,stats.allocMem,stats.changes == 1,stats.diff,stats.gzDiff,stats.size,stats.gzSize));
  }
  this.output.print("\n");
  try {
    ((FilterOutputStream)this.output).flush();
  }
 catch (  IOException e) {
    throw new RuntimeException("Unreachable.");
  }
}
