{
  if (!passName.equals(currentRunningPass.pop())) {
    throw new RuntimeException(passName + " is not running.");
  }
  if (passName.equals(Compiler.PARSING_PASS_NAME) && trackSize) {
    CodeSizeEstimatePrinter printer=new CodeSizeEstimatePrinter();
    CodeGenerator.forCostEstimation(printer).add(jsRoot);
    initCodeSize=codeSize=printer.calcSize();
    if (this.trackGzSize) {
      initGzCodeSize=gzCodeSize=printer.calcZippedSize();
    }
  }
  Stats logStats=new Stats(passName);
  log.add(logStats);
  Stats summaryStats=summary.get(passName);
  if (summaryStats == null) {
    summaryStats=new Stats(passName);
    summary.put(passName,summaryStats);
  }
  logStats.runtime=result;
  logStats.runs=1;
  summaryStats.runtime+=result;
  summaryStats.runs+=1;
  if (codeChange.hasCodeChanged()) {
    logStats.changes=1;
    summaryStats.changes+=1;
  }
  if (codeChange.hasCodeChanged() && trackSize) {
    int newSize=0;
    CodeSizeEstimatePrinter printer=new CodeSizeEstimatePrinter();
    CodeGenerator.forCostEstimation(printer).add(jsRoot);
    if (trackSize) {
      newSize=printer.calcSize();
      logStats.diff=codeSize - newSize;
      summaryStats.diff+=logStats.diff;
      codeSize=summaryStats.size=logStats.size=newSize;
    }
    if (trackGzSize) {
      newSize=printer.calcZippedSize();
      logStats.gzDiff=gzCodeSize - newSize;
      summaryStats.gzDiff+=logStats.gzDiff;
      gzCodeSize=summaryStats.gzSize=logStats.gzSize=newSize;
    }
  }
}
