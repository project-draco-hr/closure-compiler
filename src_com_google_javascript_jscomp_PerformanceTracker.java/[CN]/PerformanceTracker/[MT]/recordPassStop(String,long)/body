{
  int allocMem=getAllocatedMegabytes();
  Stats logStats=currentPass.pop();
  Preconditions.checkState(passName.equals(logStats.pass));
  log.add(logStats);
  Stats summaryStats=summary.get(passName);
  if (summaryStats == null) {
    summaryStats=new Stats(passName,logStats.isOneTime);
    summary.put(passName,summaryStats);
  }
  if (passName.equals(Compiler.PARSING_PASS_NAME)) {
    recordInputCount();
    if (trackSize) {
      CodeSizeEstimatePrinter estimatePrinter=new CodeSizeEstimatePrinter();
      CodeGenerator.forCostEstimation(estimatePrinter).add(jsRoot);
      initCodeSize=codeSize=estimatePrinter.calcSize();
      logStats.size=summaryStats.size=initCodeSize;
      if (this.trackGzSize) {
        initGzCodeSize=gzCodeSize=estimatePrinter.calcZippedSize();
        logStats.gzSize=summaryStats.gzSize=initGzCodeSize;
      }
    }
  }
  logStats.runtime=runtime;
  logStats.allocMem=allocMem;
  logStats.runs=1;
  summaryStats.runtime+=runtime;
  summaryStats.allocMem=Math.max(allocMem,summaryStats.allocMem);
  summaryStats.runs+=1;
  if (codeChange.hasCodeChanged()) {
    logStats.changes=1;
    summaryStats.changes+=1;
  }
  if (codeChange.hasCodeChanged() && trackSize) {
    int newSize=0;
    CodeSizeEstimatePrinter estimatePrinter=new CodeSizeEstimatePrinter();
    CodeGenerator.forCostEstimation(estimatePrinter).add(jsRoot);
    if (trackSize) {
      newSize=estimatePrinter.calcSize();
      logStats.diff=codeSize - newSize;
      summaryStats.diff+=logStats.diff;
      codeSize=summaryStats.size=logStats.size=newSize;
    }
    if (trackGzSize) {
      newSize=estimatePrinter.calcZippedSize();
      logStats.gzDiff=gzCodeSize - newSize;
      summaryStats.gzDiff+=logStats.gzDiff;
      gzCodeSize=summaryStats.gzSize=logStats.gzSize=newSize;
    }
  }
}
