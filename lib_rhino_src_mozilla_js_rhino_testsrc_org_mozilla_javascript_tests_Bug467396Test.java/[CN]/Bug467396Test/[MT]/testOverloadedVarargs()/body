{
  Context cx=ContextFactory.getGlobal().enterContext();
  try {
    Scriptable scope=cx.initStandardObjects();
    Object result=unwrap(cx.evaluateString(scope,"java.lang.reflect.Array.newInstance(java.lang.Object, 1)","source",1,null));
    assertTrue(result instanceof Object[]);
    assertEquals(1,((Object[])result).length);
    result=unwrap(cx.evaluateString(scope,"java.lang.reflect.Array.newInstance(java.lang.Object, [1])","source",1,null));
    assertTrue(result instanceof Object[]);
    assertEquals(1,((Object[])result).length);
    result=unwrap(cx.evaluateString(scope,"java.lang.reflect.Array.newInstance(java.lang.Object, [1, 1])","source",1,null));
    assertTrue(result instanceof Object[][]);
    assertEquals(1,((Object[][])result).length);
    assertEquals(1,((Object[][])result)[0].length);
    result=unwrap(cx.evaluateString(scope,"java.lang.reflect.Array.newInstance(java.lang.Object, 1, 1)","source",1,null));
    assertTrue(result instanceof Object[][]);
    assertEquals(1,((Object[][])result).length);
    assertEquals(1,((Object[][])result)[0].length);
  }
  finally {
    Context.exit();
  }
}
