{
  JSDocInfo info=n.getJSDocInfo();
  if (info != null) {
    for (    Node typeNode : info.getTypeNodes()) {
      fixTypeNode(t,typeNode);
    }
  }
  boolean isShorthandObjLitKey=n.isStringKey() && !n.hasChildren();
  if (n.isName() || isShorthandObjLitKey) {
    String name=n.getString();
    if (suffix.equals(name)) {
      return;
    }
    Var var=t.getScope().getVar(name);
    if (var != null && var.isGlobal()) {
      String newName=name + "$$" + suffix;
      if (isShorthandObjLitKey) {
        n.addChildToBack(IR.name(newName).useSourceInfoIfMissingFrom(n));
      }
 else {
        n.setString(newName);
        n.setOriginalName(name);
      }
    }
 else     if (var == null && importMap.containsKey(name)) {
      if (parent.isCall() && parent.getFirstChild() == n) {
        parent.putBooleanProp(Node.FREE_CALL,false);
      }
      ModuleOriginalNamePair pair=importMap.get(name);
      Node moduleAccess=NodeUtil.newQName(compiler,pair.module);
      if (pair.originalName.isEmpty()) {
        n.getParent().replaceChild(n,moduleAccess.useSourceInfoIfMissingFromForTree(n));
      }
 else {
        n.getParent().replaceChild(n,IR.getprop(moduleAccess,IR.string(pair.originalName)).useSourceInfoIfMissingFromForTree(n));
      }
    }
  }
}
