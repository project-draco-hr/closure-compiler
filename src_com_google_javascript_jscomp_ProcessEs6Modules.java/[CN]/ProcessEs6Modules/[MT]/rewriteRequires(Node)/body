{
  NodeTraversal.traverseEs6(compiler,script,new NodeTraversal.AbstractShallowCallback(){
    @Override public void visit(    NodeTraversal t,    Node n,    Node parent){
      if (n.isCall() && n.getFirstChild().matchesQualifiedName("goog.require") && NodeUtil.isNameDeclaration(parent.getParent())) {
        visitRequire(n,parent);
      }
    }
    /** 
 * Rewrites
 * const foo = goog.require('bar.foo');
 * to
 * goog.require('bar.foo');
 * const foo = bar.foo;
 */
    private void visitRequire(    Node requireCall,    Node parent){
      String namespace=requireCall.getLastChild().getString();
      if (!parent.getParent().isConst()) {
        compiler.report(JSError.make(parent.getParent(),LHS_OF_GOOG_REQUIRE_MUST_BE_CONST));
      }
      if (parent.isObjectPattern()) {
        for (Node key=parent.getFirstChild(); key != null; key=key.getNext()) {
          if (!key.hasChildren()) {
            key.addChildToBack(IR.name(key.getString()).useSourceInfoFrom(key));
          }
        }
      }
      Node replacement=NodeUtil.newQName(compiler,namespace).srcrefTree(requireCall);
      parent.replaceChild(requireCall,replacement);
      Node varNode=parent.getParent();
      varNode.getParent().addChildBefore(IR.exprResult(requireCall).srcrefTree(requireCall),varNode);
    }
  }
);
}
