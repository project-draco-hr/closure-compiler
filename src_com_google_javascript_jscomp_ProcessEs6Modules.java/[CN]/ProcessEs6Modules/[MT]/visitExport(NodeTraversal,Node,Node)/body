{
  if (n.getBooleanProp(Node.EXPORT_DEFAULT)) {
    Node var=IR.var(IR.name(DEFAULT_EXPORT_NAME),n.removeFirstChild());
    n.getParent().replaceChild(n,var);
    exportMap.put("default",DEFAULT_EXPORT_NAME);
  }
 else   if (n.getBooleanProp(Node.EXPORT_ALL_FROM)) {
    compiler.report(JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Wildcard export"));
  }
 else   if (n.getChildCount() == 2) {
    compiler.report(JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Export with FromClause"));
  }
 else {
    if (n.getFirstChild().getType() == Token.EXPORT_SPECS) {
      for (      Node exportSpec : n.getFirstChild().children()) {
        Node origName=exportSpec.getFirstChild();
        exportMap.put(exportSpec.getChildCount() == 2 ? exportSpec.getLastChild().getString() : origName.getString(),origName.getString());
      }
      parent.removeChild(n);
    }
 else {
      Node declaration=n.getFirstChild();
      for (int i=0; i < declaration.getChildCount(); i++) {
        Node maybeName=declaration.getChildAtIndex(i);
        if (!maybeName.isName()) {
          break;
        }
        if (n.getFirstChild().isClass() && i > 0) {
          break;
        }
        String name=maybeName.getString();
        Var v=t.getScope().getVar(name);
        if (v == null || v.isGlobal()) {
          exportMap.put(name,name);
        }
        if (declaration.isClass()) {
          typedefs.add(name);
        }
      }
      parent.replaceChild(n,n.removeFirstChild());
    }
    compiler.reportCodeChange();
  }
}
