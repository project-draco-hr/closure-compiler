{
  if (!isEs6Module) {
    return;
  }
  Preconditions.checkArgument(scriptNodeCount == 1,"ProcessEs6Modules supports only one invocation per " + "CompilerInput / script node");
  String moduleName=toModuleName(loader.getLoadAddress(t.getInput()));
  NodeTraversal.traverse(compiler,script,new RenameGlobalVars(moduleName));
  if (exportMap.isEmpty()) {
    return;
  }
  Node objectlit=IR.objectlit();
  for (  String name : exportMap.keySet()) {
    objectlit.addChildToBack(IR.stringKey(name,IR.name(exportMap.get(name) + "$$" + moduleName)));
  }
  Node varNode=IR.var(IR.name(moduleName),objectlit).copyInformationFromForTree(script);
  script.addChildToBack(varNode);
  for (  String name : typedefs) {
    Node typedef=IR.getprop(IR.name(moduleName),IR.string(name));
    JSDocInfoBuilder builder=new JSDocInfoBuilder(true);
    builder.recordTypedef(new JSTypeExpression(Node.newString(exportMap.get(name) + "$$" + moduleName),t.getSourceName()));
    JSDocInfo info=builder.build(typedef);
    typedef.setJSDocInfo(info);
    script.addChildToBack(IR.exprResult(typedef).useSourceInfoIfMissingFromForTree(varNode));
  }
  exportMap.clear();
  script.addChildToFront(IR.exprResult(IR.call(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),"goog.provide"),IR.string(moduleName))).copyInformationFromForTree(script));
  if (reportDependencies) {
    t.getInput().addProvide(moduleName);
  }
  compiler.reportCodeChange();
}
