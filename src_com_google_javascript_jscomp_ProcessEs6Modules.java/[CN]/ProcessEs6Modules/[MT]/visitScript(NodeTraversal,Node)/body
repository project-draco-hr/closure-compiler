{
  if (!isEs6Module) {
    return;
  }
  Preconditions.checkArgument(scriptNodeCount == 1,"ProcessEs6Modules supports only one invocation per " + "CompilerInput / script node");
  rewriteRequires(script);
  URI normalizedAddress=loader.normalizeInputAddress(t.getInput());
  String moduleName=ES6ModuleLoader.toModuleName(normalizedAddress);
  for (  Map.Entry<String,NameNodePair> entry : exportMap.entrySet()) {
    String exportedName=entry.getKey();
    String withSuffix=entry.getValue().name;
    Node nodeForSourceInfo=entry.getValue().nodeForSourceInfo;
    Node getProp=IR.getprop(IR.name(moduleName),IR.string(exportedName));
    if (typedefs.contains(exportedName)) {
      JSDocInfoBuilder builder=new JSDocInfoBuilder(true);
      JSTypeExpression typeExpr=new JSTypeExpression(IR.string(exportedName),script.getSourceFileName());
      builder.recordTypedef(typeExpr);
      JSDocInfo info=builder.build();
      getProp.setJSDocInfo(info);
      Node exprResult=IR.exprResult(getProp).useSourceInfoIfMissingFromForTree(nodeForSourceInfo);
      script.addChildToBack(exprResult);
    }
 else {
      Node assign=IR.assign(getProp,NodeUtil.newQName(compiler,withSuffix));
      Node exprResult=IR.exprResult(assign).useSourceInfoIfMissingFromForTree(nodeForSourceInfo);
      if (classes.contains(exportedName)) {
        JSDocInfoBuilder builder=new JSDocInfoBuilder(true);
        builder.recordConstancy();
        JSDocInfo info=builder.build();
        assign.setJSDocInfo(info);
      }
      script.addChildToBack(exprResult);
    }
  }
  NodeTraversal.traverse(compiler,script,new RenameGlobalVars(moduleName));
  if (!exportMap.isEmpty()) {
    Node googProvide=IR.exprResult(IR.call(NodeUtil.newQName(compiler,"goog.provide"),IR.string(moduleName)));
    script.addChildToFront(googProvide.copyInformationFromForTree(script));
    if (reportDependencies) {
      t.getInput().addProvide(moduleName);
    }
  }
  JSDocInfoBuilder jsDocInfo=script.getJSDocInfo() == null ? new JSDocInfoBuilder(false) : JSDocInfoBuilder.copyFrom(script.getJSDocInfo());
  if (!jsDocInfo.isPopulatedWithFileOverview()) {
    jsDocInfo.recordFileOverview("");
  }
  jsDocInfo.recordSuppressions(ImmutableSet.of("missingProvide","missingRequire"));
  script.setJSDocInfo(jsDocInfo.build());
  exportMap.clear();
  compiler.reportCodeChange();
}
