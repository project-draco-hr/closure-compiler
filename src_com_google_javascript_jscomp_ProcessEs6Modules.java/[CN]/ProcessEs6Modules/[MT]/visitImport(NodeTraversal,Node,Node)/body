{
  String moduleName;
  String importName=importDecl.getLastChild().getString();
  boolean isNamespaceImport=importName.startsWith("goog:");
  if (isNamespaceImport) {
    moduleName=importName.substring("goog:".length());
  }
 else {
    moduleName=t.getInput().getUri().resolveEs6Module(importName).toModuleName();
  }
  for (  Node child : importDecl.children()) {
    if (child.isEmpty() || child.isString()) {
      continue;
    }
 else     if (child.isName()) {
      String name=isNamespaceImport ? "" : "default";
      importMap.put(child.getString(),new ModuleOriginalNamePair(moduleName,name));
    }
 else     if (child.getToken() == Token.IMPORT_SPECS) {
      for (      Node grandChild : child.children()) {
        String origName=grandChild.getFirstChild().getString();
        if (grandChild.getChildCount() == 2) {
          importMap.put(grandChild.getLastChild().getString(),new ModuleOriginalNamePair(moduleName,origName));
        }
 else {
          importMap.put(origName,new ModuleOriginalNamePair(moduleName,origName));
        }
      }
    }
 else {
      Preconditions.checkState(child.getToken() == Token.IMPORT_STAR,"Expected an IMPORT_STAR node, but was: %s",child);
      if (isNamespaceImport) {
        compiler.report(t.makeError(importDecl,NAMESPACE_IMPORT_CANNOT_USE_STAR,child.getString(),moduleName));
      }
      importMap.put(child.getString(),new ModuleOriginalNamePair(moduleName,""));
    }
  }
  Node script=NodeUtil.getEnclosingScript(parent);
  if (alreadyRequired.add(moduleName)) {
    Node require=IR.exprResult(IR.call(NodeUtil.newQName(compiler,"goog.require"),IR.string(moduleName)));
    require.copyInformationFromForTree(importDecl);
    script.addChildAfter(require,googRequireInsertSpot);
    googRequireInsertSpot=require;
    t.getInput().addRequire(moduleName);
  }
  parent.removeChild(importDecl);
  compiler.reportCodeChange();
}
