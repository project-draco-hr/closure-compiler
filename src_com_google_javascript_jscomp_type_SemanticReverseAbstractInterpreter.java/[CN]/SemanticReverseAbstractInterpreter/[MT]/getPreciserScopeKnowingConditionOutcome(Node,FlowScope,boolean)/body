{
  Token.Kind operatorToken=condition.getType();
switch (operatorToken) {
case EQ:
case NE:
case SHEQ:
case SHNE:
case CASE:
    Node left;
  Node right;
if (operatorToken == Token.CASE) {
  left=condition.getParent().getFirstChild();
  right=condition.getFirstChild();
}
 else {
  left=condition.getFirstChild();
  right=condition.getLastChild();
}
Node typeOfNode=null;
Node stringNode=null;
if (left.isTypeOf() && right.isString()) {
typeOfNode=left;
stringNode=right;
}
 else if (right.isTypeOf() && left.isString()) {
typeOfNode=right;
stringNode=left;
}
if (typeOfNode != null && stringNode != null) {
Node operandNode=typeOfNode.getFirstChild();
JSType operandType=getTypeIfRefinable(operandNode,blindScope);
if (operandType != null) {
boolean resultEqualsValue=operatorToken == Token.EQ || operatorToken == Token.SHEQ || operatorToken == Token.CASE;
if (!outcome) {
resultEqualsValue=!resultEqualsValue;
}
return caseTypeOf(operandNode,operandType,stringNode.getString(),resultEqualsValue,blindScope);
}
}
}
switch (operatorToken) {
case AND:
if (outcome) {
return caseAndOrNotShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,true);
}
 else {
return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,true);
}
case OR:
if (!outcome) {
return caseAndOrNotShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,false);
}
 else {
return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),condition.getLastChild(),blindScope,false);
}
case EQ:
if (outcome) {
return caseEquality(condition,blindScope,EQ);
}
 else {
return caseEquality(condition,blindScope,NE);
}
case NE:
if (outcome) {
return caseEquality(condition,blindScope,NE);
}
 else {
return caseEquality(condition,blindScope,EQ);
}
case SHEQ:
if (outcome) {
return caseEquality(condition,blindScope,SHEQ);
}
 else {
return caseEquality(condition,blindScope,SHNE);
}
case SHNE:
if (outcome) {
return caseEquality(condition,blindScope,SHNE);
}
 else {
return caseEquality(condition,blindScope,SHEQ);
}
case NAME:
case GETPROP:
return caseNameOrGetProp(condition,blindScope,outcome);
case ASSIGN:
return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(),firstPreciserScopeKnowingConditionOutcome(condition.getSecondChild(),blindScope,outcome),outcome);
case NOT:
return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(),blindScope,!outcome);
case LE:
case LT:
case GE:
case GT:
if (outcome) {
return caseEquality(condition,blindScope,ineq);
}
break;
case INSTANCEOF:
return caseInstanceOf(condition.getFirstChild(),condition.getLastChild(),blindScope,outcome);
case IN:
if (outcome && condition.getFirstChild().isString()) {
return caseIn(condition.getLastChild(),condition.getFirstChild().getString(),blindScope);
}
break;
case CASE:
{
Node left=condition.getParent().getFirstChild();
Node right=condition.getFirstChild();
if (outcome) {
return caseEquality(left,right,blindScope,SHEQ);
}
 else {
return caseEquality(left,right,blindScope,SHNE);
}
}
case CALL:
{
Node left=condition.getFirstChild();
String leftName=left.getQualifiedName();
if ("Array.isArray".equals(leftName) && left.getNext() != null) {
return caseIsArray(left.getNext(),blindScope,outcome);
}
break;
}
}
return nextPreciserScopeKnowingConditionOutcome(condition,blindScope,outcome);
}
