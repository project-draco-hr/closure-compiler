{
  JSType leftType=getTypeIfRefinable(left,blindScope);
  if (leftType == null) {
    return blindScope;
  }
  JSType rightType=right.getJSType();
  ObjectType targetType=typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
  if (rightType != null && rightType.isFunctionType()) {
    targetType=rightType.toMaybeFunctionType();
  }
  Visitor<JSType> visitor;
  if (outcome) {
    visitor=new RestrictByTrueInstanceOfResultVisitor(targetType);
  }
 else {
    visitor=new RestrictByFalseInstanceOfResultVisitor(targetType);
  }
  return maybeRestrictName(blindScope,left,leftType,leftType.visit(visitor));
}
