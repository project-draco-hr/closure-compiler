{
switch (peekChar()) {
case 'b':
case 'B':
    nextChar();
  if (!isBinaryDigit(peekChar())) {
    reportError("Binary Integer Literal must contain at least one digit");
  }
skipBinaryDigits();
return new LiteralToken(TokenType.NUMBER,getTokenString(beginToken),getTokenRange(beginToken));
case 'o':
case 'O':
nextChar();
if (!isOctalDigit(peekChar())) {
reportError("Octal Integer Literal must contain at least one digit");
}
skipOctalDigits();
return new LiteralToken(TokenType.NUMBER,getTokenString(beginToken),getTokenRange(beginToken));
case 'x':
case 'X':
nextChar();
if (!peekHexDigit()) {
reportError("Hex Integer Literal must contain at least one digit");
}
skipHexDigits();
return new LiteralToken(TokenType.NUMBER,getTokenString(beginToken),getTokenRange(beginToken));
case 'e':
case 'E':
return scanExponentOfNumericLiteral(beginToken);
case '.':
return scanFractionalNumericLiteral(beginToken);
case '0':
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
skipDecimalDigits();
if (peek('.')) {
nextChar();
skipDecimalDigits();
}
return new LiteralToken(TokenType.NUMBER,getTokenString(beginToken),getTokenRange(beginToken));
default :
return new LiteralToken(TokenType.NUMBER,getTokenString(beginToken),getTokenRange(beginToken));
}
}
