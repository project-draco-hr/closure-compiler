{
  StringBuilder valueBuilder=new StringBuilder();
  valueBuilder.append(ch);
  boolean containsUnicodeEscape=ch == '\\';
  ch=peekChar();
  while (isIdentifierPart(ch) || ch == '\\') {
    if (ch == '\\') {
      containsUnicodeEscape=true;
    }
    valueBuilder.append(nextChar());
    ch=peekChar();
  }
  String value=valueBuilder.toString();
  while (containsUnicodeEscape && value.contains("\\")) {
    int escapeStart=value.indexOf('\\');
    if (value.charAt(escapeStart + 1) != 'u') {
      reportError(getPosition(index),"Invalid escape sequence: '\\%c'",value.charAt(escapeStart + 1));
      return createToken(TokenType.ERROR,beginToken);
    }
    try {
      String hexDigits=value.substring(escapeStart + 2,escapeStart + 6);
      ch=(char)Integer.parseInt(hexDigits,0x10);
      if (!isIdentifierPart(ch)) {
        reportError(getPosition(index),"Character '%c' (U+%04X) is not a valid identifier char",ch,(int)ch);
        return createToken(TokenType.ERROR,beginToken);
      }
      value=value.substring(0,escapeStart) + ch + value.substring(escapeStart + 6);
    }
 catch (    NumberFormatException|StringIndexOutOfBoundsException e) {
      reportError(getPosition(index),"Invalid escape sequence");
      return createToken(TokenType.ERROR,beginToken);
    }
  }
  char start=value.charAt(0);
  if (!isIdentifierStart(start)) {
    reportError(getPosition(beginToken),"Character '%c' (U+%04X) is not a valid identifier start char",start,(int)start);
    return createToken(TokenType.ERROR,beginToken);
  }
  if (Keywords.isKeyword(value)) {
    return new Token(Keywords.getTokenType(value),getTokenRange(beginToken));
  }
  return new IdentifierToken(getTokenRange(beginToken),value);
}
