{
  StringBuilder valueBuilder=new StringBuilder();
  valueBuilder.append(ch);
  boolean containsUnicodeEscape=ch == '\\';
  boolean bracedUnicodeEscape=false;
  int unicodeEscapeLen=containsUnicodeEscape ? 1 : 0;
  ch=peekChar();
  while (isIdentifierPart(ch) || ch == '\\' || (ch == '{' && unicodeEscapeLen == 2) || (ch == '}' && bracedUnicodeEscape)) {
    if (ch == '\\') {
      containsUnicodeEscape=true;
    }
    if (ch == '\\' || unicodeEscapeLen > 0) {
      unicodeEscapeLen++;
    }
    if (ch == '{') {
      bracedUnicodeEscape=true;
    }
    if (ch == '}' || (unicodeEscapeLen >= 6 && !bracedUnicodeEscape)) {
      bracedUnicodeEscape=false;
      unicodeEscapeLen=0;
    }
    valueBuilder.append(nextChar());
    ch=peekChar();
  }
  String value=valueBuilder.toString();
  if (containsUnicodeEscape) {
    value=processUnicodeEscapes(value);
    if (value == null) {
      reportError(getPosition(index),"Invalid escape sequence");
      return createToken(TokenType.ERROR,beginToken);
    }
  }
  char start=value.charAt(0);
  if (!isIdentifierStart(start)) {
    reportError(getPosition(beginToken),"Character '%c' (U+%04X) is not a valid identifier start char",start,(int)start);
    return createToken(TokenType.ERROR,beginToken);
  }
  if (Keywords.isKeyword(value)) {
    return new Token(Keywords.getTokenType(value),getTokenRange(beginToken));
  }
  return new IdentifierToken(getTokenRange(beginToken),value.intern());
}
