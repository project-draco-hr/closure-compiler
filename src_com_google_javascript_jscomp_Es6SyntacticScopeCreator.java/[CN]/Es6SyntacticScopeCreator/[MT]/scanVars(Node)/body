{
switch (n.getType()) {
case Token.VAR:
    declareLHS(scope.getClosestHoistScope(),n);
  return;
case Token.LET:
case Token.CONST:
if (!isNodeAtCurrentLexicalScope(n)) {
  return;
}
declareLHS(scope,n);
return;
case Token.FUNCTION:
if (NodeUtil.isFunctionExpression(n) || !isNodeAtCurrentLexicalScope(n)) {
return;
}
String fnName=n.getFirstChild().getString();
if (fnName.isEmpty()) {
return;
}
declareVar(n.getFirstChild());
return;
case Token.CLASS:
if (NodeUtil.isClassExpression(n) || !isNodeAtCurrentLexicalScope(n)) {
return;
}
String className=n.getFirstChild().getString();
if (className.isEmpty()) {
return;
}
declareVar(n.getFirstChild());
return;
case Token.CATCH:
Preconditions.checkState(n.getChildCount() == 2,n);
if (isNodeAtCurrentLexicalScope(n)) {
declareLHS(scope,n);
}
final Node block=n.getSecondChild();
scanVars(block);
return;
case Token.SCRIPT:
inputId=n.getInputId();
Preconditions.checkNotNull(inputId);
break;
}
if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {
for (Node child=n.getFirstChild(); child != null; ) {
Node next=child.getNext();
scanVars(child);
child=next;
}
}
}
