{
  if (n.isFunction()) {
    if (inputId == null) {
      inputId=NodeUtil.getInputId(n);
    }
    final Node fnNameNode=n.getFirstChild();
    final Node args=fnNameNode.getNext();
    String fnName=fnNameNode.getString();
    if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {
      declareVar(fnNameNode);
    }
    Preconditions.checkState(args.isParamList());
    declareLHS(scope,args);
  }
 else   if (n.isClass()) {
    if (scope.getParent() != null) {
      inputId=NodeUtil.getInputId(n);
    }
    final Node classNameNode=n.getFirstChild();
    if (!classNameNode.isEmpty()) {
      if (NodeUtil.isClassExpression(n)) {
        declareVar(classNameNode);
      }
    }
  }
 else   if (n.isBlock() || n.isFor() || n.isForOf()|| n.isSwitch()) {
    if (scope.getParent() != null) {
      inputId=NodeUtil.getInputId(n);
    }
    scanVars(n);
  }
 else {
    Preconditions.checkState(scope.getParent() == null);
    scanVars(n);
  }
}
