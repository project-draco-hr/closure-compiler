{
  int maxargs;
  boolean local=true;
switch (methodId) {
case Id_setUTCMilliseconds:
    local=false;
case Id_setMilliseconds:
  maxargs=1;
break;
case Id_setUTCSeconds:
local=false;
case Id_setSeconds:
maxargs=2;
break;
case Id_setUTCMinutes:
local=false;
case Id_setMinutes:
maxargs=3;
break;
case Id_setUTCHours:
local=false;
case Id_setHours:
maxargs=4;
break;
default :
Kit.codeBug();
maxargs=0;
}
int i;
double conv[]=new double[4];
double hour, min, sec, msec;
double lorutime;
double time;
double result;
if (Double.isNaN(date)) return date;
if (args.length == 0) args=ScriptRuntime.padArguments(args,1);
for (i=0; i < args.length && i < maxargs; i++) {
conv[i]=ScriptRuntime.toNumber(args[i]);
if (conv[i] != conv[i] || Double.isInfinite(conv[i])) {
return ScriptRuntime.NaN;
}
conv[i]=ScriptRuntime.toInteger(conv[i]);
}
if (local) lorutime=LocalTime(date);
 else lorutime=date;
i=0;
int stop=args.length;
if (maxargs >= 4 && i < stop) hour=conv[i++];
 else hour=HourFromTime(lorutime);
if (maxargs >= 3 && i < stop) min=conv[i++];
 else min=MinFromTime(lorutime);
if (maxargs >= 2 && i < stop) sec=conv[i++];
 else sec=SecFromTime(lorutime);
if (maxargs >= 1 && i < stop) msec=conv[i++];
 else msec=msFromTime(lorutime);
time=MakeTime(hour,min,sec,msec);
result=MakeDate(Day(lorutime),time);
if (local) result=internalUTC(result);
date=TimeClip(result);
return date;
}
