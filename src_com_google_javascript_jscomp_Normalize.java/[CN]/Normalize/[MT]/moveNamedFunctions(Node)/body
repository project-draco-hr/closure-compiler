{
  Preconditions.checkState(functionBody.getParent().getType() == Token.FUNCTION);
  Node previous=null;
  Node current=functionBody.getFirstChild();
  while (current != null && NodeUtil.isFunctionDeclaration(current)) {
    previous=current;
    current=current.getNext();
  }
  Node insertAfter=previous;
  while (current != null) {
    Node next=current.getNext();
    if (NodeUtil.isFunctionDeclaration(current)) {
      Preconditions.checkNotNull(previous);
      functionBody.removeChildAfter(previous);
      insertAfter=addToFront(functionBody,current,insertAfter);
      compiler.reportCodeChange();
    }
 else {
      previous=current;
    }
    current=next;
  }
}
