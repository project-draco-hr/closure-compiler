{
  if (n.getType() == Token.NAME) {
    String name=n.getString();
    if (n.getString().isEmpty()) {
      return;
    }
    boolean isConst=n.getBooleanProp(Node.IS_CONSTANT_NAME);
    if (checkUserDeclarations) {
      boolean expectedConst=false;
      CodingConvention convention=compiler.getCodingConvention();
      if (NodeUtil.isConstantName(n) || NodeUtil.isConstantByConvention(convention,n,parent)) {
        expectedConst=true;
      }
 else {
        expectedConst=false;
        JSDocInfo info=null;
        Var var=t.getScope().getVar(n.getString());
        if (var != null) {
          info=var.getJSDocInfo();
        }
        if (info != null && info.isConstant()) {
          expectedConst=true;
        }
 else {
          expectedConst=false;
        }
      }
      if (expectedConst) {
        Preconditions.checkState(expectedConst == isConst,"The name %s is not annotated as constant.",name);
      }
 else {
        Preconditions.checkState(expectedConst == isConst,"The name %s should not be annotated as constant.",name);
      }
    }
    Boolean value=constantMap.get(name);
    if (value == null) {
      constantMap.put(name,isConst);
    }
 else {
      Preconditions.checkState(value.booleanValue() == isConst,"The name %s is not consistently annotated as constant.",name);
    }
  }
}
