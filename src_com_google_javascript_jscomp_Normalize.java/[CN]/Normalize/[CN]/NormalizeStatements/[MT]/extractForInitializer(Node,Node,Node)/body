{
  for (Node next, c=n.getFirstChild(); c != null; c=next) {
    next=c.getNext();
    Node insertBefore=(before == null) ? c : before;
    Node insertBeforeParent=(before == null) ? n : beforeParent;
switch (c.getType()) {
case LABEL:
      extractForInitializer(c,insertBefore,insertBeforeParent);
    break;
case FOR:
  if (NodeUtil.isForIn(c)) {
    Node first=c.getFirstChild();
    if (first.isVar()) {
      Node newStatement=first;
      Node name=newStatement.getFirstChild().cloneNode();
      first.getParent().replaceChild(first,name);
      insertBeforeParent.addChildBefore(newStatement,insertBefore);
      reportCodeChange("FOR-IN var declaration");
    }
  }
 else   if (!c.getFirstChild().isEmpty()) {
    Node init=c.getFirstChild();
    Node empty=IR.empty();
    empty.useSourceInfoIfMissingFrom(c);
    c.replaceChild(init,empty);
    Node newStatement;
    if (init.isVar()) {
      newStatement=init;
    }
 else {
      newStatement=NodeUtil.newExpr(init);
    }
    insertBeforeParent.addChildBefore(newStatement,insertBefore);
    reportCodeChange("FOR initializer");
  }
break;
}
}
}
