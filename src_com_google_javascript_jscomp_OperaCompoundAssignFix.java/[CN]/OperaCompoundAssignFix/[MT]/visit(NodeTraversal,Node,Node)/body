{
  if (!n.isName()) {
    return;
  }
  if (!NodeUtil.isGet(parent)) {
    return;
  }
  boolean nested=false;
  boolean reassign=false;
  Node lastAssign=null;
  Node prevParent=n;
  while (!(NodeUtil.isExpressionNode(parent) || NodeUtil.isStatementBlock(parent))) {
    if (parent.isAssign() && parent.getFirstChild().isName() && parent.getFirstChild().getString().equals(n.getString())&& nested) {
      reassign=true;
      break;
    }
 else     if (NodeUtil.isAssignmentOp(parent) && parent.getLastChild() == prevParent) {
      if (lastAssign == null) {
        nested=true;
      }
      lastAssign=parent;
    }
    prevParent=parent;
    parent=parent.getParent();
  }
  if (!(reassign && nested)) {
    return;
  }
  applyWorkAround(parent,t);
}
