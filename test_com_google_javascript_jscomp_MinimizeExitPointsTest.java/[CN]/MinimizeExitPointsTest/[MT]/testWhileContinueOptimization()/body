{
  fold("while(true){if(x)continue; x=3; continue; }","while(true)if(x);else x=3");
  foldSame("while(true){a();continue;b();}");
  fold("while(true){if(true){a();continue;}else;b();}","while(true){if(true){a();}else{b()}}");
  fold("while(true){if(false){a();continue;}else;b();continue;}","while(true){if(false){a()}else{b();}}");
  fold("while(true){if(a()){b();continue;}else;c();}","while(true){if(a()){b();}else{c();}}");
  fold("while(true){if(a()){b();}else{c();continue;}}","while(true){if(a()){b();}else{c();}}");
  fold("while(true){if(a()){b();continue;}else;}","while(true){if(a()){b();}else;}");
  fold("while(true){if(a()){continue;}else{continue;} continue;}","while(true){if(a()){}else{}}");
  fold("while(true){if(a()){continue;}else{continue;} b();}","while(true){if(a()){}else{continue;b();}}");
  fold("while(true)while(a())continue;","while(true)while(a());");
  fold("while(true)for(x in a())continue","while(true)for(x in a());");
  fold("while(true)while(a())break;","while(true)while(a())break");
  fold("while(true)for(x in a())break","while(true)for(x in a())break");
  fold("while(true){try{continue;}catch(e){continue;}}","while(true){try{}catch(e){}}");
  fold("while(true){try{if(a()){continue;}else{continue;}" + "continue;}catch(e){}}","while(true){try{if(a()){}else{}}catch(e){}}");
  fold("while(true){g:continue}","while(true){}");
  fold("while(true){g:if(a()){continue;}else{continue;} continue;}","while(true){g:if(a());else;}");
}
