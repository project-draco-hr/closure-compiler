{
  List<Node> nodes=new ArrayList<>();
  Node val=ref.getAssignedValue();
  blacklistVarReferencesInTree(val,v.scope);
  Preconditions.checkState(val.isObjectLit());
  Set<String> all=new LinkedHashSet<>(varmap.keySet());
  for (Node key=val.getFirstChild(); key != null; key=key.getNext()) {
    String var=key.getString();
    Node value=key.removeFirstChild();
    nodes.add(IR.assign(IR.name(varmap.get(var)),value));
    all.remove(var);
  }
  for (  String var : all) {
    nodes.add(IR.assign(IR.name(varmap.get(var)),NodeUtil.newUndefinedNode(null)));
  }
  Node replacement;
  if (nodes.isEmpty()) {
    replacement=IR.trueNode();
  }
 else {
    nodes.add(IR.trueNode());
    nodes=Lists.reverse(nodes);
    replacement=new Node(Token.COMMA);
    Node cur=replacement;
    int i;
    for (i=0; i < nodes.size() - 2; i++) {
      cur.addChildToFront(nodes.get(i));
      Node t=new Node(Token.COMMA);
      cur.addChildToFront(t);
      cur=t;
    }
    cur.addChildToFront(nodes.get(i));
    cur.addChildToFront(nodes.get(i + 1));
  }
  Node replace=ref.getParent();
  replacement.useSourceInfoIfMissingFromForTree(replace);
  if (replace.isVar()) {
    replace.getParent().replaceChild(replace,NodeUtil.newExpr(replacement));
  }
 else {
    replace.getParent().replaceChild(replace,replacement);
  }
}
