{
  boolean ret=false;
  Set<String> validProperties=new HashSet<>();
  for (  Reference ref : refs) {
    Node name=ref.getNode();
    Node parent=ref.getParent();
    Node grandparent=ref.getGrandparent();
    if (parent.isGetProp()) {
      Preconditions.checkState(parent.getFirstChild() == name);
      if (grandparent.isCall() && grandparent.getFirstChild() == parent) {
        return false;
      }
      if (grandparent.isDelProp()) {
        return false;
      }
      String propName=parent.getLastChild().getString();
      if (!validProperties.contains(propName)) {
        if (NodeUtil.isVarOrSimpleAssignLhs(parent,grandparent)) {
          validProperties.add(propName);
        }
 else {
          return false;
        }
      }
      continue;
    }
    if (!isVarOrAssignExprLhs(name)) {
      return false;
    }
    Node val=ref.getAssignedValue();
    if (val == null) {
      continue;
    }
    if (!val.isObjectLit()) {
      return false;
    }
    for (Node child=val.getFirstChild(); child != null; child=child.getNext()) {
      if (child.isGetterDef() || child.isSetterDef()) {
        return false;
      }
      validProperties.add(child.getString());
      Node childVal=child.getFirstChild();
      for (      Reference t : refs) {
        Node refNode=t.getParent();
        while (!NodeUtil.isStatementBlock(refNode)) {
          if (refNode == childVal) {
            return false;
          }
          refNode=refNode.getParent();
        }
      }
    }
    ret=true;
  }
  return ret;
}
