{
  if (n.getFirstChild().isThis()) {
    if (processThisRef(t,n.getFirstChild())) {
      return;
    }
  }
  String propName=n.getFirstChild().getNext().getString();
  boolean isPinningUse=isPinningPropertyUse(n);
  if (n.isQualifiedName()) {
    if (propName.equals("prototype")) {
      if (processPrototypeRef(t,n)) {
        return;
      }
    }
 else     if (compiler.getCodingConvention().isExported(propName)) {
      addGlobalUseOfSymbol(propName,t.getModule(),PROPERTY);
      return;
    }
 else {
      if (!isPinningUse) {
        String lValueName=getPrototypePropertyName(n);
        if (lValueName != null) {
          return;
        }
      }
    }
  }
  if (isPinningUse) {
    addSymbolUse(propName,t.getModule(),PROPERTY);
  }
}
