{
  String replace=input.replaceAll("foo","bar");
  final Compiler compiler=new Compiler();
  int[] threadCounts=new int[]{1,2,4};
  for (  int threadCount : threadCounts) {
    Node tree=compiler.parseTestCode(input);
    AstParallelizer splitter=AstParallelizer.createNewFunctionLevelAstParallelizer(tree,true);
    Supplier<Task> supplier=new Supplier<Task>(){
      @Override public Task get(){
        return new ReplaceStrings(compiler);
      }
    }
;
    ParallelCompilerPass pass=new ParallelCompilerPass(compiler,splitter,supplier,threadCount);
    pass.process(null,tree);
    assertEquals(replace,compiler.toSource(tree));
  }
}
