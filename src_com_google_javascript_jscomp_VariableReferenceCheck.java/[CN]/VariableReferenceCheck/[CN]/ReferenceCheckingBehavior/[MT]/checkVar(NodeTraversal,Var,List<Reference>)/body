{
  blocksWithDeclarations.clear();
  boolean isDeclaredInScope=false;
  boolean isUnhoistedNamedFunction=false;
  Reference hoistedFn=null;
  for (  Reference reference : references) {
    if (reference.isHoistedFunction()) {
      blocksWithDeclarations.add(reference.getBasicBlock());
      isDeclaredInScope=true;
      hoistedFn=reference;
      break;
    }
 else     if (NodeUtil.isFunctionDeclaration(reference.getNameNode().getParent())) {
      isUnhoistedNamedFunction=true;
    }
  }
  for (  Reference reference : references) {
    if (reference == hoistedFn) {
      continue;
    }
    BasicBlock basicBlock=reference.getBasicBlock();
    boolean isDeclaration=reference.isDeclaration();
    if (isDeclaration) {
      for (      BasicBlock declaredBlock : blocksWithDeclarations) {
        if (declaredBlock.provablyExecutesBefore(basicBlock)) {
          compiler.report(JSError.make(reference.getSourceName(),reference.getNameNode(),checkLevel,REDECLARED_VARIABLE,v.name));
          break;
        }
      }
    }
    if (!isDeclaration && isDeclaredInScope && isUnhoistedNamedFunction) {
      for (      BasicBlock declaredBlock : blocksWithDeclarations) {
        if (!declaredBlock.provablyExecutesBefore(basicBlock)) {
          compiler.report(JSError.make(reference.getSourceName(),reference.getNameNode(),checkLevel,AMBIGUOUS_FUNCTION_DECL,v.name));
          break;
        }
      }
    }
    if (!isDeclaration && !isDeclaredInScope) {
      Node grandparent=reference.getGrandparent();
      if (grandparent.getType() == Token.NAME && grandparent.getString() == v.name) {
        continue;
      }
      if (reference.getScope() == v.scope) {
        compiler.report(JSError.make(reference.getSourceName(),reference.getNameNode(),checkLevel,UNDECLARED_REFERENCE,v.name));
      }
    }
    if (isDeclaration) {
      blocksWithDeclarations.add(basicBlock);
      isDeclaredInScope=true;
    }
  }
}
