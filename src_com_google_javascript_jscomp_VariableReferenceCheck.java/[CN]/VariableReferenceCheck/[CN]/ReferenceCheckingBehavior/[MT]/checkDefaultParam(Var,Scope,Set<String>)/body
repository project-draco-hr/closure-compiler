{
  NodeTraversal.traverseEs6(compiler,param.getParentNode().getSecondChild(),new AbstractShallowCallback(){
    @Override public void visit(    NodeTraversal t,    Node n,    Node parent){
      if (!NodeUtil.isReferenceName(n)) {
        return;
      }
      String refName=n.getString();
      if (varsInFunctionBody.contains(refName) && !scope.isDeclared(refName,true)) {
        compiler.report(JSError.make(n,EARLY_REFERENCE_ERROR,refName));
      }
    }
  }
);
}
