{
  fnNode.setFunctionType(functionType);
  fnNode.addChildToBack(statements);
  int functionCount=fnNode.getFunctionCount();
  if (functionCount != 0) {
    fnNode.setRequiresActivation();
  }
  if (functionType == FunctionNode.FUNCTION_EXPRESSION) {
    Name name=fnNode.getFunctionName();
    if (name != null && name.length() != 0) {
      Node setFn=new Node(Token.EXPR_VOID,new Node(Token.SETNAME,Node.newString(Token.BINDNAME,name.getIdentifier()),new Node(Token.THISFN)));
      statements.addChildrenToFront(setFn);
    }
  }
  Node lastStmt=statements.getLastChild();
  if (lastStmt == null || lastStmt.getType() != Token.RETURN) {
    statements.addChildToBack(new Node(Token.RETURN));
  }
  Node result=Node.newString(Token.FUNCTION,fnNode.getName());
  result.putIntProp(Node.FUNCTION_PROP,functionIndex);
  return result;
}
