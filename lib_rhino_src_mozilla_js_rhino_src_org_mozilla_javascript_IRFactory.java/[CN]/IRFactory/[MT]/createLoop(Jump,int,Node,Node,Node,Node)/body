{
  Node bodyTarget=Node.newTarget();
  Node condTarget=Node.newTarget();
  if (loopType == LOOP_FOR && cond.getType() == Token.EMPTY) {
    cond=new Node(Token.TRUE);
  }
  Jump IFEQ=new Jump(Token.IFEQ,cond);
  IFEQ.target=bodyTarget;
  Node breakTarget=Node.newTarget();
  loop.addChildToBack(bodyTarget);
  loop.addChildrenToBack(body);
  if (loopType == LOOP_WHILE || loopType == LOOP_FOR) {
    loop.addChildrenToBack(new Node(Token.EMPTY,loop.getLineno()));
  }
  loop.addChildToBack(condTarget);
  loop.addChildToBack(IFEQ);
  loop.addChildToBack(breakTarget);
  loop.target=breakTarget;
  Node continueTarget=condTarget;
  if (loopType == LOOP_WHILE || loopType == LOOP_FOR) {
    loop.addChildToFront(makeJump(Token.GOTO,condTarget));
    if (loopType == LOOP_FOR) {
      int initType=init.getType();
      if (initType != Token.EMPTY) {
        if (initType != Token.VAR && initType != Token.LET) {
          init=new Node(Token.EXPR_VOID,init);
        }
        loop.addChildToFront(init);
      }
      Node incrTarget=Node.newTarget();
      loop.addChildAfter(incrTarget,body);
      if (incr.getType() != Token.EMPTY) {
        incr=new Node(Token.EXPR_VOID,incr);
        loop.addChildAfter(incr,incrTarget);
      }
      continueTarget=incrTarget;
    }
  }
  loop.setContinue(continueTarget);
  return loop;
}
