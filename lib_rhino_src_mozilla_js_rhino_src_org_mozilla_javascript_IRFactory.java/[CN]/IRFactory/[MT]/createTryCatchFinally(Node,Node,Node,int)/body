{
  boolean hasFinally=(finallyBlock != null) && (finallyBlock.getType() != Token.BLOCK || finallyBlock.hasChildren());
  if (tryBlock.getType() == Token.BLOCK && !tryBlock.hasChildren() && !hasFinally) {
    return tryBlock;
  }
  boolean hasCatch=catchBlocks.hasChildren();
  if (!hasFinally && !hasCatch) {
    return tryBlock;
  }
  Node handlerBlock=new Node(Token.LOCAL_BLOCK);
  Jump pn=new Jump(Token.TRY,tryBlock,lineno);
  pn.putProp(Node.LOCAL_BLOCK_PROP,handlerBlock);
  if (hasCatch) {
    Node endCatch=Node.newTarget();
    pn.addChildToBack(makeJump(Token.GOTO,endCatch));
    Node catchTarget=Node.newTarget();
    pn.target=catchTarget;
    pn.addChildToBack(catchTarget);
    Node catchScopeBlock=new Node(Token.LOCAL_BLOCK);
    Node cb=catchBlocks.getFirstChild();
    boolean hasDefault=false;
    int scopeIndex=0;
    while (cb != null) {
      int catchLineNo=cb.getLineno();
      Node name=cb.getFirstChild();
      Node cond=name.getNext();
      Node catchStatement=cond.getNext();
      cb.removeChild(name);
      cb.removeChild(cond);
      cb.removeChild(catchStatement);
      catchStatement.addChildToBack(new Node(Token.LEAVEWITH));
      catchStatement.addChildToBack(makeJump(Token.GOTO,endCatch));
      Node condStmt;
      if (cond.getType() == Token.EMPTY) {
        condStmt=catchStatement;
        hasDefault=true;
      }
 else {
        condStmt=createIf(cond,catchStatement,null,catchLineNo);
      }
      Node catchScope=new Node(Token.CATCH_SCOPE,name,createUseLocal(handlerBlock));
      catchScope.putProp(Node.LOCAL_BLOCK_PROP,catchScopeBlock);
      catchScope.putIntProp(Node.CATCH_SCOPE_PROP,scopeIndex);
      catchScopeBlock.addChildToBack(catchScope);
      catchScopeBlock.addChildToBack(createWith(createUseLocal(catchScopeBlock),condStmt,catchLineNo));
      cb=cb.getNext();
      ++scopeIndex;
    }
    pn.addChildToBack(catchScopeBlock);
    if (!hasDefault) {
      Node rethrow=new Node(Token.RETHROW);
      rethrow.putProp(Node.LOCAL_BLOCK_PROP,handlerBlock);
      pn.addChildToBack(rethrow);
    }
    pn.addChildToBack(endCatch);
  }
  if (hasFinally) {
    Node finallyTarget=Node.newTarget();
    pn.setFinally(finallyTarget);
    pn.addChildToBack(makeJump(Token.JSR,finallyTarget));
    Node finallyEnd=Node.newTarget();
    pn.addChildToBack(makeJump(Token.GOTO,finallyEnd));
    pn.addChildToBack(finallyTarget);
    Node fBlock=new Node(Token.FINALLY,finallyBlock);
    fBlock.putProp(Node.LOCAL_BLOCK_PROP,handlerBlock);
    pn.addChildToBack(fBlock);
    pn.addChildToBack(finallyEnd);
  }
  handlerBlock.addChildToBack(pn);
  return handlerBlock;
}
