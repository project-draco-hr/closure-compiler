{
  Compiler compiler=new Compiler();
  CompilerOptions options=new CompilerOptions();
  options.setLanguageIn(LanguageMode.ECMASCRIPT6);
  compiler.initOptions(options);
  ScopeCreator creator=new Es6SyntacticScopeCreator(compiler);
  ExpectNodeOnEnterScope callback=new ExpectNodeOnEnterScope();
  NodeTraversal t=new NodeTraversal(compiler,callback,creator);
  String code=Joiner.on('\n').join("function foo() {","  if (bar) {","    let x;","  }","}");
  Node tree=parse(compiler,code);
  Scope topScope=creator.createScope(tree,null);
  Node innerBlock=tree.getFirstChild().getLastChild().getFirstChild().getLastChild();
  Scope blockScope=creator.createScope(innerBlock,topScope);
  callback.expect(innerBlock,innerBlock);
  t.traverseAtScope(blockScope);
  callback.assertEntered();
}
