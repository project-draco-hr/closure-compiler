{
  super(convention,typeRegistry);
  this.restricters=new ImmutableMap.Builder<String,Function<TypeRestriction,JSType>>().put("isDef",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getRestrictedWithoutUndefined(p.type);
      }
 else {
        return null;
      }
    }
  }
).put("isNull",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getNativeType(NULL_TYPE);
      }
 else {
        return getRestrictedWithoutNull(p.type);
      }
    }
  }
).put("isDefAndNotNull",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      if (p.outcome) {
        return getRestrictedWithoutUndefined(getRestrictedWithoutNull(p.type));
      }
 else {
        return null;
      }
    }
  }
).put("isString",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,"string",p.outcome);
    }
  }
).put("isBoolean",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,"boolean",p.outcome);
    }
  }
).put("isNumber",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,"number",p.outcome);
    }
  }
).put("isFunction",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      return getRestrictedByTypeOfResult(p.type,"function",p.outcome);
    }
  }
).put("isArray",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      Visitor<JSType> visitor=p.outcome ? restrictToArrayVisitor : restrictToNotArrayVisitor;
      return p.type == null ? null : p.type.visit(visitor);
    }
  }
).put("isObject",new Function<TypeRestriction,JSType>(){
    public JSType apply(    TypeRestriction p){
      Visitor<JSType> visitor=p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor;
      return p.type == null ? null : p.type.visit(visitor);
    }
  }
).build();
}
