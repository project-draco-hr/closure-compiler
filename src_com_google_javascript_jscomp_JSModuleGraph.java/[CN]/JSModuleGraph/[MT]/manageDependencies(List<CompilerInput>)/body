{
  SortedDependencies<CompilerInput> sorter=new SortedDependencies<CompilerInput>(inputs);
  List<CompilerInput> inputsWithoutProvides=sorter.getInputsWithoutProvides();
  List<CompilerInput> absoluteOrder=sorter.getSortedDependenciesOf(inputs);
  ListMultimap<JSModule,CompilerInput> inputsWithoutProvidesPerModule=LinkedListMultimap.create();
  for (  CompilerInput input : inputsWithoutProvides) {
    JSModule module=input.getModule();
    Preconditions.checkNotNull(module);
    inputsWithoutProvidesPerModule.put(module,input);
  }
  for (  JSModule module : getAllModules()) {
    module.removeAll();
  }
  for (  JSModule module : inputsWithoutProvidesPerModule.keySet()) {
    List<CompilerInput> transitiveClosure=sorter.getSortedDependenciesOf(inputsWithoutProvidesPerModule.get(module));
    for (    CompilerInput input : transitiveClosure) {
      JSModule oldModule=input.getModule();
      input.setModule(oldModule == null ? module : getDeepestCommonDependencyInclusive(oldModule,module));
    }
  }
  for (  CompilerInput input : absoluteOrder) {
    JSModule module=input.getModule();
    if (module != null) {
      module.add(input);
    }
  }
  List<CompilerInput> result=Lists.newArrayList();
  for (  JSModule module : getAllModulesInDependencyOrder()) {
    result.addAll(module.getInputs());
  }
  return result;
}
