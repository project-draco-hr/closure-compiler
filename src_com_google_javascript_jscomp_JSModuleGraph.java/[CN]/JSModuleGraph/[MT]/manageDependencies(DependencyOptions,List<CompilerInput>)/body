{
  SortedDependencies<CompilerInput> sorter=new Es6SortedDependencies<>(inputs);
  Iterable<CompilerInput> entryPointInputs=createEntryPointInputs(depOptions,inputs,sorter);
  List<CompilerInput> absoluteOrder=sorter.getDependenciesOf(inputs,depOptions.shouldSortDependencies());
  ListMultimap<JSModule,CompilerInput> entryPointInputsPerModule=LinkedListMultimap.create();
  for (  CompilerInput input : entryPointInputs) {
    JSModule module=input.getModule();
    Preconditions.checkNotNull(module);
    entryPointInputsPerModule.put(module,input);
  }
  for (  JSModule module : getAllModules()) {
    module.removeAll();
  }
  for (  JSModule module : entryPointInputsPerModule.keySet()) {
    List<CompilerInput> transitiveClosure=sorter.getDependenciesOf(entryPointInputsPerModule.get(module),depOptions.shouldSortDependencies());
    for (    CompilerInput input : transitiveClosure) {
      JSModule oldModule=input.getModule();
      if (oldModule == null) {
        input.setModule(module);
      }
 else {
        input.setModule(null);
        input.setModule(getDeepestCommonDependencyInclusive(oldModule,module));
      }
    }
  }
  for (  CompilerInput input : absoluteOrder) {
    JSModule module=input.getModule();
    if (module != null) {
      module.add(input);
    }
  }
  ImmutableList.Builder<CompilerInput> result=ImmutableList.builder();
  for (  JSModule module : getAllModules()) {
    result.addAll(module.getInputs());
  }
  return result.build();
}
