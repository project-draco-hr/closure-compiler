{
  Node callTarget=n.getFirstChild();
  Node objectToExtend=callTarget.getNext();
  Node extendArg=objectToExtend.getNext();
  boolean ensureObjectDefined=true;
  if (extendArg == null) {
    extendArg=objectToExtend;
    objectToExtend=callTarget.getFirstChild();
    ensureObjectDefined=false;
  }
 else   if (objectToExtend.isGetProp() && (objectToExtend.getLastChild().getString().equals("prototype") || convention.isPrototypeAlias(objectToExtend))) {
    ensureObjectDefined=false;
  }
  if (!extendArg.hasChildren()) {
    return;
  }
  Node fncBlock=IR.block().srcref(n);
  if (ensureObjectDefined) {
    Node assignVal=IR.or(objectToExtend.cloneTree(),IR.objectlit().srcref(n)).srcref(n);
    Node assign=IR.assign(objectToExtend.cloneTree(),assignVal).srcref(n);
    fncBlock.addChildrenToFront(IR.exprResult(assign).srcref(n));
  }
  while (extendArg.hasChildren()) {
    Node currentProp=extendArg.removeFirstChild();
    Node propValue=currentProp.removeFirstChild();
    Node newProp;
    if (currentProp.isQuotedString()) {
      newProp=IR.getelem(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
    }
 else {
      newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
    }
    Node assignNode=IR.assign(newProp,propValue).srcref(currentProp);
    fncBlock.addChildToBack(IR.exprResult(assignNode).srcref(currentProp));
  }
  if (n.getParent().isExprResult()) {
    Node parent=n.getParent();
    parent.getParent().replaceChild(parent,fncBlock);
  }
 else {
    Node targetVal;
    if ("jQuery.prototype".equals(objectToExtend.getQualifiedName())) {
      targetVal=objectToExtend.removeFirstChild();
    }
 else {
      targetVal=objectToExtend.detachFromParent();
    }
    fncBlock.addChildToBack(IR.returnNode(targetVal).srcref(targetVal));
    Node fnc=IR.function(IR.name("").srcref(n),IR.paramList().srcref(n),fncBlock);
    n.replaceChild(callTarget,fnc);
    n.putBooleanProp(Node.FREE_CALL,true);
    while (fnc.getNext() != null) {
      n.removeChildAfter(fnc);
    }
  }
  compiler.reportCodeChange();
}
