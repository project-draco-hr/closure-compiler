{
  Node callTarget=n.getFirstChild();
  Node objectToExtend=callTarget.getNext();
  Node extendArg=objectToExtend.getNext();
  if (extendArg == null) {
    extendArg=objectToExtend;
    objectToExtend=callTarget.getFirstChild();
  }
  if (!extendArg.hasChildren())   return;
  Node fncBlock=IR.block().srcref(n);
  while (extendArg.hasChildren()) {
    Node currentProp=extendArg.removeFirstChild();
    Node propValue=currentProp.removeFirstChild();
    Node newProp;
    if (currentProp.isQuotedString()) {
      newProp=IR.getelem(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
    }
 else {
      newProp=IR.getprop(objectToExtend.cloneTree(),currentProp).srcref(currentProp);
    }
    Node assignNode=IR.assign(newProp,propValue).srcref(currentProp);
    fncBlock.addChildToBack(IR.exprResult(assignNode).srcref(currentProp));
  }
  Node targetVal;
  if ("jQuery.prototype".equals(objectToExtend.getQualifiedName())) {
    targetVal=objectToExtend.getFirstChild().cloneTree();
  }
 else {
    targetVal=objectToExtend.cloneTree();
  }
  fncBlock.addChildToBack(IR.returnNode(targetVal).srcref(targetVal));
  Node fnc=IR.function(IR.name("").srcref(n),IR.paramList().srcref(n),fncBlock);
  n.replaceChild(callTarget,fnc);
  while (fnc.getNext() != null) {
    n.removeChildAfter(fnc);
  }
  compiler.reportCodeChange();
}
