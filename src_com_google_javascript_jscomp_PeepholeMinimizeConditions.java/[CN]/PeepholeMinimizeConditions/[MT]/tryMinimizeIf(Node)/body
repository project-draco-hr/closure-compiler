{
  Node parent=n.getParent();
  Node originalCond=n.getFirstChild();
  if (NodeUtil.isLiteralValue(originalCond,true)) {
    return n;
  }
  Node thenBranch=originalCond.getNext();
  Node elseBranch=thenBranch.getNext();
  MinimizedCondition minCond=MinimizedCondition.fromConditionNode(originalCond);
  originalCond=null;
  Node placeholder=minCond.getPlaceholder();
  MinimizedCondition.MeasuredNode unnegatedCond;
  MinimizedCondition.MeasuredNode shortCond;
  unnegatedCond=minCond.getMinimized(MinimizationStyle.PREFER_UNNEGATED);
  shortCond=minCond.getMinimized(MinimizationStyle.ALLOW_LEADING_NOT);
  if (elseBranch == null) {
    if (isFoldableExpressBlock(thenBranch)) {
      Node expr=getBlockExpression(thenBranch);
      if (!late && isPropertyAssignmentInExpression(expr)) {
        replaceNode(placeholder,unnegatedCond);
        return n;
      }
      if (shortCond.getNode().isNot()) {
        Node or=IR.or(shortCond.getNode().removeFirstChild(),expr.removeFirstChild()).srcref(n);
        Node newExpr=NodeUtil.newExpr(or);
        parent.replaceChild(n,newExpr);
        reportCodeChange();
        return newExpr;
      }
      if (isLowerPrecedence(shortCond.getNode(),AND_PRECEDENCE) && isLowerPrecedence(expr.getFirstChild(),AND_PRECEDENCE)) {
        replaceNode(placeholder,shortCond);
        return n;
      }
      n.removeChild(placeholder);
      Node and=IR.and(shortCond.getNode(),expr.removeFirstChild()).srcref(n);
      Node newExpr=NodeUtil.newExpr(and);
      parent.replaceChild(n,newExpr);
      reportCodeChange();
      return newExpr;
    }
 else {
      if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) {
        Node innerIf=thenBranch.getFirstChild();
        if (innerIf.isIf()) {
          Node innerCond=innerIf.getFirstChild();
          Node innerThenBranch=innerCond.getNext();
          Node innerElseBranch=innerThenBranch.getNext();
          if (innerElseBranch == null && !(isLowerPrecedence(unnegatedCond.getNode(),AND_PRECEDENCE) && isLowerPrecedence(innerCond,AND_PRECEDENCE))) {
            n.detachChildren();
            n.addChildToBack(IR.and(unnegatedCond.getNode(),innerCond.detach()).srcref(placeholder));
            n.addChildToBack(innerThenBranch.detach());
            reportCodeChange();
            return n;
          }
        }
      }
    }
    replaceNode(placeholder,unnegatedCond);
    return n;
  }
  tryRemoveRepeatedStatements(n);
  if (shortCond.getNode().isNot() && !consumesDanglingElse(elseBranch)) {
    n.replaceChild(placeholder,shortCond.getNode().removeFirstChild());
    n.removeChild(thenBranch);
    n.addChildToBack(thenBranch);
    reportCodeChange();
    return n;
  }
  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
    Node thenExpr=getBlockReturnExpression(thenBranch);
    Node elseExpr=getBlockReturnExpression(elseBranch);
    n.removeChild(placeholder);
    thenExpr.detach();
    elseExpr.detach();
    Node returnNode=IR.returnNode(IR.hook(shortCond.getNode(),thenExpr,elseExpr).srcref(n));
    parent.replaceChild(n,returnNode);
    reportCodeChange();
    return returnNode;
  }
  boolean thenBranchIsExpressionBlock=isFoldableExpressBlock(thenBranch);
  boolean elseBranchIsExpressionBlock=isFoldableExpressBlock(elseBranch);
  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
    Node thenOp=getBlockExpression(thenBranch).getFirstChild();
    Node elseOp=getBlockExpression(elseBranch).getFirstChild();
    if (thenOp.getToken() == elseOp.getToken()) {
      if (NodeUtil.isAssignmentOp(thenOp)) {
        Node lhs=thenOp.getFirstChild();
        if (areNodesEqualForInlining(lhs,elseOp.getFirstChild()) && !mayEffectMutableState(lhs) && (!mayHaveSideEffects(unnegatedCond.getNode()) || (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {
          n.removeChild(placeholder);
          Node assignName=thenOp.removeFirstChild();
          Node thenExpr=thenOp.removeFirstChild();
          Node elseExpr=elseOp.getLastChild();
          elseOp.removeChild(elseExpr);
          Node hookNode=IR.hook(shortCond.getNode(),thenExpr,elseExpr).srcref(n);
          Node assign=new Node(thenOp.getToken(),assignName,hookNode).srcref(thenOp);
          Node expr=NodeUtil.newExpr(assign);
          parent.replaceChild(n,expr);
          reportCodeChange();
          return expr;
        }
      }
    }
    n.removeChild(placeholder);
    thenOp.detach();
    elseOp.detach();
    Node expr=IR.exprResult(IR.hook(shortCond.getNode(),thenOp,elseOp).srcref(n));
    parent.replaceChild(n,expr);
    reportCodeChange();
    return expr;
  }
  boolean thenBranchIsVar=isVarBlock(thenBranch);
  boolean elseBranchIsVar=isVarBlock(elseBranch);
  if (thenBranchIsVar && elseBranchIsExpressionBlock && getBlockExpression(elseBranch).getFirstChild().isAssign()) {
    Node var=getBlockVar(thenBranch);
    Node elseAssign=getBlockExpression(elseBranch).getFirstChild();
    Node name1=var.getFirstChild();
    Node maybeName2=elseAssign.getFirstChild();
    if (name1.hasChildren() && maybeName2.isName() && name1.getString().equals(maybeName2.getString())) {
      Preconditions.checkState(name1.hasOneChild());
      Node thenExpr=name1.removeFirstChild();
      Node elseExpr=elseAssign.getLastChild().detach();
      placeholder.detach();
      Node hookNode=IR.hook(shortCond.getNode(),thenExpr,elseExpr).srcref(n);
      var.detach();
      name1.addChildToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
 else   if (elseBranchIsVar && thenBranchIsExpressionBlock && getBlockExpression(thenBranch).getFirstChild().isAssign()) {
    Node var=getBlockVar(elseBranch);
    Node thenAssign=getBlockExpression(thenBranch).getFirstChild();
    Node maybeName1=thenAssign.getFirstChild();
    Node name2=var.getFirstChild();
    if (name2.hasChildren() && maybeName1.isName() && maybeName1.getString().equals(name2.getString())) {
      Node thenExpr=thenAssign.getLastChild().detach();
      Preconditions.checkState(name2.hasOneChild());
      Node elseExpr=name2.removeFirstChild();
      placeholder.detach();
      Node hookNode=IR.hook(shortCond.getNode(),thenExpr,elseExpr).srcref(n);
      var.detach();
      name2.addChildToBack(hookNode);
      parent.replaceChild(n,var);
      reportCodeChange();
      return var;
    }
  }
  replaceNode(placeholder,unnegatedCond);
  return n;
}
