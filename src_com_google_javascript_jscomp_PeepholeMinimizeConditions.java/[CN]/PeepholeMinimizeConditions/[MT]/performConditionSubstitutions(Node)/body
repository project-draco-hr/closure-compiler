{
  Node parent=n.getParent();
switch (n.getType()) {
case Token.OR:
case Token.AND:
{
      Node left=n.getFirstChild();
      Node right=n.getLastChild();
      left=performConditionSubstitutions(left);
      right=performConditionSubstitutions(right);
      TernaryValue rightVal=NodeUtil.getPureBooleanValue(right);
      if (NodeUtil.getPureBooleanValue(right) != TernaryValue.UNKNOWN) {
        int type=n.getType();
        Node replacement=null;
        boolean rval=rightVal.toBoolean(true);
        if (type == Token.OR && !rval || type == Token.AND && rval) {
          replacement=left;
        }
 else         if (!mayHaveSideEffects(left)) {
          replacement=right;
        }
        if (replacement != null) {
          n.detachChildren();
          parent.replaceChild(n,replacement);
          reportCodeChange();
          return replacement;
        }
      }
      return n;
    }
case Token.HOOK:
{
    Node condition=n.getFirstChild();
    Node trueNode=n.getFirstChild().getNext();
    Node falseNode=n.getLastChild();
    trueNode=performConditionSubstitutions(trueNode);
    falseNode=performConditionSubstitutions(falseNode);
    Node replacement=null;
    TernaryValue trueNodeVal=NodeUtil.getPureBooleanValue(trueNode);
    TernaryValue falseNodeVal=NodeUtil.getPureBooleanValue(falseNode);
    if (trueNodeVal == TernaryValue.TRUE && falseNodeVal == TernaryValue.FALSE) {
      condition.detachFromParent();
      replacement=condition;
    }
 else     if (trueNodeVal == TernaryValue.FALSE && falseNodeVal == TernaryValue.TRUE) {
      condition.detachFromParent();
      replacement=IR.not(condition);
    }
 else     if (trueNodeVal == TernaryValue.TRUE) {
      n.detachChildren();
      replacement=IR.or(condition,falseNode);
    }
 else     if (falseNodeVal == TernaryValue.FALSE) {
      n.detachChildren();
      replacement=IR.and(condition,trueNode);
    }
    if (replacement != null) {
      parent.replaceChild(n,replacement);
      n=replacement;
      reportCodeChange();
    }
    return n;
  }
default :
TernaryValue nVal=NodeUtil.getPureBooleanValue(n);
if (nVal != TernaryValue.UNKNOWN) {
boolean result=nVal.toBoolean(true);
int equivalentResult=result ? 1 : 0;
return maybeReplaceChildWithNumber(n,parent,equivalentResult);
}
return n;
}
}
