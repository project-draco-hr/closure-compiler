{
  Node next=null;
  for (Node child=n.getFirstChild(); child != null; child=next) {
    next=child.getNext();
    if (child.isIf()) {
      Node cond=child.getFirstChild();
      Node thenBranch=cond.getNext();
      Node elseBranch=thenBranch.getNext();
      Node nextNode=child.getNext();
      if (nextNode != null && elseBranch == null && isReturnBlock(thenBranch) && nextNode.isIf()) {
        Node nextCond=nextNode.getFirstChild();
        Node nextThen=nextCond.getNext();
        Node nextElse=nextThen.getNext();
        if (thenBranch.isEquivalentToTyped(nextThen)) {
          child.detach();
          child.detachChildren();
          Node newCond=new Node(Token.OR,cond);
          nextNode.replaceChild(nextCond,newCond);
          newCond.addChildToBack(nextCond);
          reportCodeChange();
        }
 else         if (nextElse != null && thenBranch.isEquivalentToTyped(nextElse)) {
          child.detach();
          child.detachChildren();
          Node newCond=new Node(Token.AND,IR.not(cond).srcref(cond));
          nextNode.replaceChild(nextCond,newCond);
          newCond.addChildToBack(nextCond);
          reportCodeChange();
        }
      }
 else       if (nextNode != null && elseBranch == null && isReturnBlock(thenBranch) && isReturnExpression(nextNode)) {
        Node thenExpr=null;
        if (isReturnExpressBlock(thenBranch)) {
          thenExpr=getBlockReturnExpression(thenBranch);
          thenExpr.detach();
        }
 else {
          thenExpr=NodeUtil.newUndefinedNode(child);
        }
        Node elseExpr=nextNode.getFirstChild();
        cond.detach();
        elseExpr.detach();
        Node returnNode=IR.returnNode(IR.hook(cond,thenExpr,elseExpr).srcref(child));
        n.replaceChild(child,returnNode);
        n.removeChild(nextNode);
        reportCodeChange();
        break;
      }
 else       if (elseBranch != null && statementMustExitParent(thenBranch)) {
        child.removeChild(elseBranch);
        n.addChildAfter(elseBranch,child);
        reportCodeChange();
      }
    }
  }
  return n;
}
