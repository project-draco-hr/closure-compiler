{
switch (node.getType()) {
case Token.THROW:
case Token.RETURN:
{
      Node result=tryRemoveRedundantExit(node);
      if (result != node) {
        return result;
      }
      return tryReplaceExitWithBreak(node);
    }
case Token.NOT:
  tryMinimizeCondition(node.getFirstChild());
return tryMinimizeNot(node);
case Token.IF:
performConditionSubstitutions(node.getFirstChild());
return tryMinimizeIf(node);
case Token.EXPR_RESULT:
performConditionSubstitutions(node.getFirstChild());
return tryMinimizeExprResult(node);
case Token.HOOK:
performConditionSubstitutions(node.getFirstChild());
return tryMinimizeHook(node);
case Token.WHILE:
case Token.DO:
tryMinimizeCondition(NodeUtil.getConditionExpression(node));
return node;
case Token.FOR:
if (!NodeUtil.isForIn(node)) {
tryJoinForCondition(node);
tryMinimizeCondition(NodeUtil.getConditionExpression(node));
}
return node;
case Token.BLOCK:
return tryReplaceIf(node);
default :
return node;
}
}
