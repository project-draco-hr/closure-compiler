{
switch (n.getType()) {
case Token.NOT:
{
      MinimizedCondition subtree=fromConditionNode(n.getFirstChild());
      ImmutableSet<MeasuredNode> positiveAsts=ImmutableSet.of(subtree.positive.cloneTree().addNot(),subtree.negative.cloneTree());
      ImmutableSet<MeasuredNode> negativeAsts=ImmutableSet.of(subtree.negative.negate(),subtree.positive);
      return new MinimizedCondition(Collections.min(positiveAsts,AST_LENGTH_COMPARATOR),Collections.min(negativeAsts,AST_LENGTH_COMPARATOR));
    }
case Token.AND:
case Token.OR:
{
    int opType=n.getType();
    int complementType=opType == Token.AND ? Token.OR : Token.AND;
    MinimizedCondition leftSubtree=fromConditionNode(n.getFirstChild());
    MinimizedCondition rightSubtree=fromConditionNode(n.getLastChild());
    ImmutableSet<MeasuredNode> positiveAsts=ImmutableSet.of(MeasuredNode.addNode(new Node(opType).srcref(n),leftSubtree.positive.cloneTree(),rightSubtree.positive.cloneTree()),MeasuredNode.addNode(new Node(complementType).srcref(n),leftSubtree.negative.cloneTree(),rightSubtree.negative.cloneTree()).negate());
    ImmutableSet<MeasuredNode> negativeAsts=ImmutableSet.of(MeasuredNode.addNode(new Node(opType).srcref(n),leftSubtree.positive,rightSubtree.positive).negate(),MeasuredNode.addNode(new Node(complementType).srcref(n),leftSubtree.negative,rightSubtree.negative));
    return new MinimizedCondition(Collections.min(positiveAsts,AST_LENGTH_COMPARATOR),Collections.min(negativeAsts,AST_LENGTH_COMPARATOR));
  }
case Token.HOOK:
{
  Node cond=n.getFirstChild();
  Node thenNode=cond.getNext();
  Node elseNode=thenNode.getNext();
  MinimizedCondition thenSubtree=fromConditionNode(thenNode);
  MinimizedCondition elseSubtree=fromConditionNode(elseNode);
  MeasuredNode posTree=MeasuredNode.addNode(new Node(Token.HOOK,cond.cloneTree()).srcref(n),thenSubtree.positive,elseSubtree.positive);
  MeasuredNode negTree=MeasuredNode.addNode(new Node(Token.HOOK,cond.cloneTree()).srcref(n),thenSubtree.negative,elseSubtree.negative);
  return new MinimizedCondition(posTree,negTree);
}
case Token.COMMA:
{
Node lhs=n.getFirstChild();
MinimizedCondition rhsSubtree=fromConditionNode(lhs.getNext());
MeasuredNode posTree=MeasuredNode.addNode(new Node(Token.COMMA,lhs.cloneTree()).srcref(n),rhsSubtree.positive);
MeasuredNode negTree=MeasuredNode.addNode(new Node(Token.COMMA,lhs.cloneTree()).srcref(n),rhsSubtree.negative);
return new MinimizedCondition(posTree,negTree);
}
default :
return unoptimized(n);
}
}
