{
  List<ScriptStackElement> list=new ArrayList<ScriptStackElement>();
  ScriptStackElement[][] interpreterStack=null;
  if (interpreterStackInfo != null) {
    Evaluator interpreter=Context.createInterpreter();
    if (interpreter instanceof Interpreter)     interpreterStack=((Interpreter)interpreter).getScriptStackElements(this);
  }
  int interpreterStackIndex=0;
  StackTraceElement[] stack=getStackTrace();
  Pattern pattern=Pattern.compile("_c_(.*)_\\d+");
  for (  StackTraceElement e : stack) {
    String fileName=e.getFileName();
    if (e.getMethodName().startsWith("_c_") && e.getLineNumber() > -1 && fileName != null && !fileName.endsWith(".java")) {
      String methodName=e.getMethodName();
      Matcher match=pattern.matcher(methodName);
      methodName=!"_c_script_0".equals(methodName) && match.find() ? match.group(1) : null;
      list.add(new ScriptStackElement(fileName,methodName,e.getLineNumber()));
    }
 else     if ("org.mozilla.javascript.Interpreter".equals(e.getClassName()) && "interpretLoop".equals(e.getMethodName()) && interpreterStack != null && interpreterStack.length > interpreterStackIndex) {
      for (      ScriptStackElement elem : interpreterStack[interpreterStackIndex++]) {
        list.add(elem);
      }
    }
  }
  return list.toArray(new ScriptStackElement[list.size()]);
}
