{
switch (n.getType()) {
case GETPROP:
    if (n.isGetProp() && n.getLastChild().isString() && blacklistedPropNames.contains(n.getLastChild().getString())) {
      markAllPropsRead();
      return true;
    }
  if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
    return false;
  }
Property property=getOrCreateProperty(n);
if (property != null) {
property.markLastWriteRead();
if (!parent.isGetProp()) {
  property.markChildrenRead();
}
}
return true;
case CALL:
if (ASSUME_CONSTRUCTORS_HAVENT_ESCAPED && isConstructor && !NodeUtil.referencesThis(n)&& NodeUtil.getEnclosingType(n,Token.TRY) == null) {
markAllPropsReadExceptThisProps();
}
 else {
markAllPropsRead();
}
return false;
case THIS:
case NAME:
Property nameProp=Preconditions.checkNotNull(getOrCreateProperty(n));
nameProp.markLastWriteRead();
if (!parent.isGetProp()) {
nameProp.markChildrenRead();
}
return true;
case THROW:
case FOR:
case SWITCH:
markAllPropsRead();
return false;
case BLOCK:
visitBlock(n);
return true;
default :
if (isConditionalExpression(n)) {
markAllPropsRead();
return false;
}
return true;
}
}
