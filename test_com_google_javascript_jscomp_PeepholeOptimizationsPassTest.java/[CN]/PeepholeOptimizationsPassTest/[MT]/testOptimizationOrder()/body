{
  final List<String> visitationLog=Lists.newArrayList();
  AbstractPeepholeOptimization note1Applied=new AbstractPeepholeOptimization(){
    @Override public Node optimizeSubtree(    Node node){
      if (node.isName()) {
        visitationLog.add(node.getString() + "1");
      }
      return node;
    }
  }
;
  AbstractPeepholeOptimization note2Applied=new AbstractPeepholeOptimization(){
    @Override public Node optimizeSubtree(    Node node){
      if (node.isName()) {
        visitationLog.add(node.getString() + "2");
      }
      return node;
    }
  }
;
  currentPeepholePasses=ImmutableList.of(note1Applied,note2Applied);
  test("var x; var y","var x; var y");
  assertEquals(4,visitationLog.size());
  assertEquals("x1",visitationLog.get(0));
  assertEquals("x2",visitationLog.get(1));
  assertEquals("y1",visitationLog.get(2));
  assertEquals("y2",visitationLog.get(3));
}
