{
  final List<String> visitationLog=new ArrayList<>();
  AbstractPeepholeOptimization note1Applied=new AbstractPeepholeOptimization(){
    @Override public Node optimizeSubtree(    Node node){
      if (node.isName()) {
        visitationLog.add(node.getString() + "1");
      }
      return node;
    }
  }
;
  AbstractPeepholeOptimization note2Applied=new AbstractPeepholeOptimization(){
    @Override public Node optimizeSubtree(    Node node){
      if (node.isName()) {
        visitationLog.add(node.getString() + "2");
      }
      return node;
    }
  }
;
  currentPeepholePasses=ImmutableList.of(note1Applied,note2Applied);
  test("var x; var y","var x; var y");
  assertThat(visitationLog).containsExactly("x1","x2","y1","y2").inOrder();
}
