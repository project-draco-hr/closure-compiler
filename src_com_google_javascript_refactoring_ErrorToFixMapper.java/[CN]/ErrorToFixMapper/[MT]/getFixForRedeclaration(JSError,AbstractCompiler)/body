{
  Node name=error.node;
  Preconditions.checkState(name.isName(),name);
  Node parent=name.getParent();
  Preconditions.checkState(NodeUtil.isNameDeclaration(parent),parent);
  SuggestedFix.Builder fix=new SuggestedFix.Builder().attachMatchedNodeInfo(name,compiler);
  if (!name.hasChildren()) {
    Node nodeToDelete=parent.hasOneChild() ? parent : error.node;
    return fix.delete(nodeToDelete).build();
  }
  Node assign=IR.exprResult(IR.assign(name.cloneNode(),name.getFirstChild().cloneTree()));
  if (parent.hasOneChild()) {
    return fix.replace(parent,assign,compiler).build();
  }
  List<Node> childrenOfAddedVarStatement=new ArrayList<>();
  for (  Node n : parent.children()) {
    if (n == name) {
      break;
    }
    childrenOfAddedVarStatement.add(n);
  }
  if (!childrenOfAddedVarStatement.isEmpty()) {
    Node var=new Node(parent.getToken());
    for (    Node n : childrenOfAddedVarStatement) {
      var.addChildToBack(n.cloneTree());
    }
    fix.insertBefore(parent,var,compiler);
  }
  if (name.getNext() != null) {
    for (    Node n : childrenOfAddedVarStatement) {
      fix.delete(n);
    }
    fix.delete(name);
    fix.insertBefore(parent,assign,compiler);
  }
 else {
    fix.replace(parent,assign,compiler);
  }
  return fix.build();
}
