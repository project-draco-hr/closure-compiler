{
switch (error.getType().key) {
case "JSC_REDECLARED_VARIABLE":
    return getFixForRedeclaration(error,compiler);
case "JSC_MISSING_SEMICOLON":
  return getFixForMissingSemicolon(error,compiler);
case "JSC_REQUIRES_NOT_SORTED":
return getFixForUnsortedRequiresOrProvides("goog.require",error,compiler);
case "JSC_PROVIDES_NOT_SORTED":
return getFixForUnsortedRequiresOrProvides("goog.provide",error,compiler);
case "JSC_DEBUGGER_STATEMENT_PRESENT":
case "JSC_USELESS_EMPTY_STATEMENT":
return removeNode(error,compiler);
case "JSC_INEXISTENT_PROPERTY":
return getFixForInexistentProperty(error,compiler);
case "JSC_MISSING_CALL_TO_SUPER":
return getFixForMissingSuper(error,compiler);
case "JSC_INVALID_SUPER_CALL_WITH_SUGGESTION":
return getFixForInvalidSuper(error,compiler);
case "JSC_MISSING_REQUIRE_WARNING":
case "JSC_MISSING_REQUIRE_CALL_WARNING":
return getFixForMissingRequire(error,compiler);
case "JSC_DUPLICATE_REQUIRE_WARNING":
return getFixForExtraRequire(error,compiler,DUPLICATE_REQUIRE);
case "JSC_EXTRA_REQUIRE_WARNING":
return getFixForExtraRequire(error,compiler,EXTRA_REQUIRE);
case "JSC_REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME_INCLUDING_SHORT_NAME":
return getFixForReferenceToShortImportByLongName(error,compiler);
default :
return null;
}
}
