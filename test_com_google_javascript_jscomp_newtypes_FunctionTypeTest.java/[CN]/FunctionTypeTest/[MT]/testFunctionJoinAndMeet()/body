{
  FunctionType numToNum=parse("function (number): number");
  FunctionType optnumToNum=parse("function (number=): number");
  FunctionType optstrToNum=parse("function (string=): number");
  FunctionType numorstrToNum=parse("function ((number|string)): number");
  FunctionType anynumsToNum=FunctionType.makeJSType(null,null,NUMBER,NUMBER).getFunType();
  assertEquals(TOP_FUNCTION,FunctionType.join(TOP_FUNCTION,numToNum));
  assertEquals(numToNum,FunctionType.meet(TOP_FUNCTION,numToNum));
  assertEquals(numToNum,FunctionType.join(null,numToNum));
  assertEquals(null,FunctionType.meet(null,numToNum));
  assertEquals(parse("function (number): (number|string)"),FunctionType.join(numToNum,parse("function (): string")));
  assertEquals(numToNum,FunctionType.join(optnumToNum,numorstrToNum));
  assertEquals(FunctionType.makeJSType(ImmutableList.of(BOTTOM),null,null,NUMBER).getFunType(),FunctionType.join(numToNum,parse("function (string): number")));
  assertEquals(FunctionType.makeJSType(null,ImmutableList.of(UNDEFINED),null,NUMBER).getFunType(),FunctionType.join(optnumToNum,optstrToNum));
  assertEquals(parse("function (number, number=)"),FunctionType.meet(parse("function (number, number)"),parse("function (number)")));
  assertEquals(parse("function ((number|string)=): number"),FunctionType.meet(optnumToNum,optstrToNum));
  assertEquals(numorstrToNum,FunctionType.meet(numToNum,parse("function (string): number")));
  assertEquals(anynumsToNum,FunctionType.meet(anynumsToNum,parse("function (): number")));
}
