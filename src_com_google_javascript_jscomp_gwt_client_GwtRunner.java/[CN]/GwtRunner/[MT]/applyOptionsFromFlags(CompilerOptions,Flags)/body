{
  CompilationLevel level=DEFAULT_COMPILATION_LEVEL;
  if (flags.compilationLevel != null) {
    level=CompilationLevel.fromString(flags.compilationLevel.toUpperCase());
    if (level == null) {
      throw new RuntimeException("Bad value for compilationLevel: " + flags.compilationLevel);
    }
  }
  level.setOptionsForCompilationLevel(options);
  if (flags.assumeFunctionWrapper) {
    level.setWrappedOutputOptimizations(options);
  }
  if (flags.useTypesForOptimization) {
    level.setTypeBasedOptimizationOptions(options);
  }
  WarningLevel warningLevel=WarningLevel.DEFAULT;
  if (flags.warningLevel != null) {
    warningLevel=WarningLevel.valueOf(flags.warningLevel);
  }
  warningLevel.setOptionsForWarningLevel(options);
  CompilerOptions.Environment environment=CompilerOptions.Environment.BROWSER;
  if (flags.env != null) {
    environment=CompilerOptions.Environment.valueOf(flags.env.toUpperCase());
  }
  options.setEnvironment(environment);
  LanguageMode languageIn=LanguageMode.fromString(flags.languageIn);
  if (languageIn != null) {
    options.setLanguageIn(languageIn);
  }
  LanguageMode languageOut=LanguageMode.fromString(flags.languageOut);
  if (languageOut != null) {
    options.setLanguageOut(languageOut);
  }
  if (flags.createSourceMap) {
    options.setSourceMapOutputPath("%output%");
  }
  options.setAngularPass(flags.angularPass);
  options.setApplyInputSourceMaps(flags.applyInputSourceMaps);
  options.setChecksOnly(flags.checksOnly);
  options.setDartPass(flags.dartPass);
  options.setExportLocalPropertyDefinitions(flags.exportLocalPropertyDefinitions);
  options.setGenerateExports(flags.generateExports);
  options.setNewTypeInference(flags.newTypeInf);
  options.setPolymerPass(flags.polymerPass);
  options.setPreserveTypeAnnotations(flags.preserveTypeAnnotations);
  options.setProcessCommonJSModules(flags.processCommonJsModules);
  options.setRenamePrefixNamespace(flags.renamePrefixNamespace);
  options.setRewritePolyfills(flags.rewritePolyfills);
}
