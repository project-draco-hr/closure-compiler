{
  String[] unhandled=updateFlags(flags,defaultFlags);
  if (unhandled.length > 0) {
    throw new RuntimeException("Unhandled flag: " + unhandled[0]);
  }
  List<SourceFile> jsCode=fromFileArray(flags.jsCode,"Input_");
  ImmutableMap<String,SourceMapInput> sourceMaps=buildSourceMaps(flags.jsCode,"Input_");
  CompilerOptions options=new CompilerOptions();
  applyDefaultOptions(options);
  applyOptionsFromFlags(options,flags);
  options.setInputSourceMaps(sourceMaps);
  disableUnsupportedOptions(options);
  List<SourceFile> externs=fromFileArray(flags.externs,"Extern_");
  externs.addAll(createExterns(options.getEnvironment()));
  NodeErrorManager errorManager=new NodeErrorManager();
  Compiler compiler=new Compiler(new NodePrintStream());
  compiler.setErrorManager(errorManager);
  compiler.compile(externs,jsCode,options);
  ModuleOutput output=new ModuleOutput();
  output.compiledCode=compiler.toSource();
  output.errors=toNativeErrorArray(errorManager.errors);
  output.warnings=toNativeErrorArray(errorManager.warnings);
  if (flags.createSourceMap) {
    StringBuilder b=new StringBuilder();
    try {
      compiler.getSourceMap().appendTo(b,"IGNORED");
    }
 catch (    IOException e) {
    }
    output.sourceMap=b.toString();
  }
  return output;
}
