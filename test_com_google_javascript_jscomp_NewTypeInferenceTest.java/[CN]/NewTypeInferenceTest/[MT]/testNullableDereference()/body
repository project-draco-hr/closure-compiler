{
  typeCheck("function f(/** ?{ p : number } */ o) { return o.p; }",NewTypeInference.NULLABLE_DEREFERENCE);
  typeCheck("/** @constructor */ function Foo() { /** @const */ this.p = 5; }\n" + "function g(/** ?Foo */ f) { return f.p; }",NewTypeInference.NULLABLE_DEREFERENCE);
  typeCheck("/** @constructor */ function Foo() {}\n" + "Foo.prototype.p = function(){};\n" + "function g(/** ?Foo */ f) { f.p(); }",NewTypeInference.NULLABLE_DEREFERENCE);
  checkNoWarnings(CLOSURE_BASE + "function f(/** ?{ p : number } */ o) {\n" + "  goog.asserts.assert(o);\n"+ "  return o.p;\n"+ "}");
  checkNoWarnings(CLOSURE_BASE + "function f(/** ?{ p : number } */ o) {\n" + "  goog.asserts.assertObject(o);\n"+ "  return o.p;\n"+ "}");
  checkNoWarnings(CLOSURE_BASE + "function f(/** ?Array<string> */ a) {\n" + "  goog.asserts.assertArray(a);\n"+ "  return a.length;\n"+ "}");
  checkNoWarnings(CLOSURE_BASE + "/** @constructor */ function Foo() {}\n" + "Foo.prototype.p = function(){};\n"+ "function g(/** ?Foo */ f) {\n"+ "  goog.asserts.assertInstanceof(f, Foo);\n"+ "  f.p();\n"+ "}");
  typeCheck(CLOSURE_BASE + "/** @constructor */ function Foo() {}\n" + "/** @constructor */ function Bar() {}\n"+ "function g(/** !Bar */ o) {\n"+ "  goog.asserts.assertInstanceof(o, Foo);\n"+ "}",NewTypeInference.ASSERT_FALSE);
  typeCheck(CLOSURE_BASE + "/** @constructor */ function Foo() {}\n" + "function g(/** !Foo */ o) {\n"+ "  goog.asserts.assertInstanceof(o, 42);\n"+ "}",NewTypeInference.UNKNOWN_ASSERTION_TYPE);
  typeCheck(CLOSURE_BASE + "/** @constructor */ function Foo() {}\n" + "function Bar() {}\n"+ "function g(/** !Foo */ o) {\n"+ "  goog.asserts.assertInstanceof(o, Bar);\n"+ "}",NewTypeInference.UNKNOWN_ASSERTION_TYPE);
  typeCheck(CLOSURE_BASE + "/** @constructor */ function Foo() {}\n" + "/** @interface */ function Bar() {}\n"+ "function g(/** !Foo */ o) {\n"+ "  goog.asserts.assertInstanceof(o, Bar);\n"+ "}",NewTypeInference.UNKNOWN_ASSERTION_TYPE);
}
