{
  typeCheck("/** @enum {!Object} */ var E = {FOO: { prop: 1 }};\n" + "E.FOO.prop - 5;",TypeCheck.INEXISTENT_PROPERTY);
  typeCheck("/** @enum {{prop: number}} */ var E = {FOO: { prop: 1 }};\n" + "E.FOO.prop - 5;");
  typeCheck("/** @constructor */\n" + "function Foo() {\n" + "  /** @const */ this.prop = 1;\n"+ "}\n"+ "/** @enum {!Foo} */\n"+ "var E = { ONE: new Foo() };\n"+ "function f(/** E */ x) { x.prop < 'str'; }",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @constructor */\n" + "function Foo() {\n" + "  /** @const */ this.prop = 1;\n"+ "}\n"+ "/** @enum {!Foo} */\n"+ "var E = { ONE: new Foo() };\n"+ "function f(/** E */ x) { x.prop = 2; }",NewTypeInference.CONST_REASSIGNED);
  typeCheck("/** @constructor */\n" + "function Foo() {}\n" + "/** @enum {!Foo} */\n"+ "var E = { A: new Foo };\n"+ "function f(/** E */ x) { x instanceof Foo; }");
}
