{
  setUp();
  compiler.init(Lists.newArrayList(SourceFile.fromCode("[externs]",externs)),Lists.newArrayList(SourceFile.fromCode("[testcode]",js)),compiler.getOptions());
  Node externsRoot=compiler.getInput(new InputId("[externs]")).getAstRoot(compiler);
  Node astRoot=compiler.getInput(new InputId("[testcode]")).getAstRoot(compiler);
  assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()),0,compiler.getErrorCount());
  assertEquals("parsing warning: " + Joiner.on(", ").join(compiler.getWarnings()),0,compiler.getWarningCount());
  GlobalTypeInfo symbolTable=new GlobalTypeInfo(compiler);
  symbolTable.process(externsRoot,astRoot);
  compiler.setSymbolTable(symbolTable);
  NewTypeInference typeInf=new NewTypeInference(compiler);
  typeInf.process(externsRoot,astRoot);
  return typeInf;
}
