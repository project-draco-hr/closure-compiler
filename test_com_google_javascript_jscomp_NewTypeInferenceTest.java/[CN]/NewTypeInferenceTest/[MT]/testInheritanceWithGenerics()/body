{
  typeCheck("/**\n" + " * @template T\n" + " * @interface\n"+ " */\n"+ "function I() {}\n"+ "/** @param {T} x */\n"+ "I.prototype.bar = function(x) {};\n"+ "/** @constructor @implements {I<number>} */\n"+ "function Foo() {}\n"+ "Foo.prototype.bar = function(x) {};\n"+ "(new Foo).bar('str');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @interface\n"+ " */\n"+ "function I() {}\n"+ "/** @param {T} x */\n"+ "I.prototype.bar = function(x) {};\n"+ "/** @constructor @implements {I<number>} */\n"+ "function Foo() {}\n"+ "/** @override */\n"+ "Foo.prototype.bar = function(x) {};\n"+ "new Foo().bar('str');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @interface\n"+ " */\n"+ "function I() {}\n"+ "/** @param {T} x */\n"+ "I.prototype.bar = function(x) {};\n"+ "/**\n"+ " * @template U\n"+ " * @constructor\n"+ " * @implements {I<U>}\n"+ " * @param {U} x\n"+ " */\n"+ "function Foo(x) {}\n"+ "Foo.prototype.bar = function(x) {};{}\n"+ "new Foo(5).bar('str');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @interface\n"+ " */\n"+ "function I() {}\n"+ "/** @param {T} x */\n"+ "I.prototype.bar = function(x) {};\n"+ "/** @constructor @implements {I<number>} */\n"+ "function Foo() {}\n"+ "Foo.prototype.bar = function(x) {};\n"+ "/** @param {I<string>} x */ function f(x) {};\n"+ "f(new Foo());",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @interface\n"+ " */\n"+ "function I() {}\n"+ "/** @param {T} x */\n"+ "I.prototype.bar = function(x) {};\n"+ "/** @constructor @implements {I<number>} */\n"+ "function Foo() {}\n"+ "/** @param {string} x */\n"+ "Foo.prototype.bar = function(x) {};",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/**\n" + " * @template T\n" + " * @interface\n"+ " */\n"+ "function I() {}\n"+ "/** @param {T} x */\n"+ "I.prototype.bar = function(x) {};\n"+ "/**\n"+ " * @template T\n"+ " * @param {T} x\n"+ " * @constructor @implements {I<number>}\n"+ " */\n"+ "function Foo(x) {}\n"+ "/** @param {T} x */\n"+ "Foo.prototype.bar = function(x) {};",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/**\n" + " * @template T\n" + " * @constructor\n"+ " */\n"+ "function Foo() {}\n"+ "/** @param {T} x */\n"+ "Foo.prototype.method = function(x) {};\n"+ "/**\n"+ " * @template T\n"+ " * @constructor\n"+ " * @extends {Foo<T>}\n"+ " * @param {T} x\n"+ " */\n"+ "function Bar(x) {}\n"+ "/** @param {number} x */\n"+ "Bar.prototype.method = function(x) {};",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/**\n" + " * @template T\n" + " * @constructor\n"+ " */\n"+ "function High() {}\n"+ "/** @param {Low<T>} x */\n"+ "High.prototype.method = function(x) {};\n"+ "/**\n"+ " * @template T\n"+ " * @constructor\n"+ " * @extends {High<T>}\n"+ " */\n"+ "function Low() {}");
  typeCheck("/**\n" + " * @template T\n" + " * @constructor\n"+ " */\n"+ "function High() {}\n"+ "/** @param {Low<number>} x */\n"+ "High.prototype.method = function(x) {};\n"+ "/**\n"+ " * @template T\n"+ " * @constructor\n"+ " * @extends {High<T>}\n"+ " */\n"+ "function Low() {}");
  typeCheck("/**\n" + " * @template T\n" + " * @constructor\n"+ " */\n"+ "function High() {}\n"+ "/** @param {Low<T>} x */ // error, low is not templatized\n"+ "High.prototype.method = function(x) {};\n"+ "/**\n"+ " * @constructor\n"+ " * @extends {High<number>}\n"+ " */\n"+ "function Low() {}",JSTypeCreatorFromJSDoc.INVALID_GENERICS_INSTANTIATION);
  typeCheck("/**\n" + " * @template T\n" + " * @interface\n"+ " */\n"+ "function I() {}\n"+ "/**\n"+ " * @template T\n"+ " * @constructor\n"+ " * @implements {I<T>}\n"+ " * @extends {Bar}\n"+ " */\n"+ "function Foo(x) {}\n"+ "/**\n"+ " * @constructor\n"+ " * @implements {I<number>}\n"+ " */\n"+ "function Bar(x) {}");
  typeCheck("/**\n" + " * @interface\n" + " * @template T\n"+ " */\n"+ "function Foo() {}\n"+ "/** @constructor @implements {Foo<number>} */\n"+ "function A() {}\n"+ "var /** Foo<number> */ x = new A();");
}
