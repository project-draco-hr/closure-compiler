{
  typeCheck(LINE_JOINER.join("/**"," * @constructor"," * @implements {IObject<number,number>}"," */","function Foo() {}","function f(/** !Foo */ x, /** string */ s) {","  x[s];","}"),NewTypeInference.INVALID_INDEX_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @interface"," * @extends {IObject<number,number>}"," */","function Bar() {}","/**"," * @constructor"," * @implements {Bar}"," */","function Foo() {}","function f(/** !Foo */ x, /** string */ s) {","  x[s];","}"),NewTypeInference.INVALID_INDEX_TYPE);
  typeCheck(LINE_JOINER.join("/** @interface */","function Foo() {}","/**"," * @constructor"," * @implements {Foo}"," * @implements {IObject<number, number>}"," */","function Bar() {}","(new Bar)['asdf'];"),NewTypeInference.INVALID_INDEX_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @constructor"," * @implements {IObject<string, number>}"," * @implements {IArrayLike<number>}"," */","function Foo() {","  this.length = 0;","}","(new Foo)['asdf'];","(new Foo)[123];","(new Foo)[true];"),NewTypeInference.INVALID_INDEX_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @interface"," * @extends {IObject<number, (number|string)>}"," */","function Foo() {}","/**"," * @interface"," * @extends {IObject<number, (number|boolean)>}"," */","function Bar() {}","/**"," * @constructor"," * @implements {Foo}"," * @implements {Bar}"," */","function Baz() {}","var /** string */ s = (new Baz)[123];","var /** boolean */ b = (new Baz)[123];","var /** number */ n = (new Baz)[123];"),NewTypeInference.MISTYPED_ASSIGN_RHS,NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/**"," * @constructor"," * @implements {IObject<*,number>}"," */","function Foo() {}","function f(/** !Foo */ x, /** string */ s) {","  x[s];","}"));
  typeCheck(LINE_JOINER.join("/** @interface @extends {IObject<string, string>} */","function Int1() {}","/** @interface @extends {IObject<string, number>} */","function Int2() {}","/**"," * @constructor"," * @implements {Int1}"," * @implements {Int2}"," */","function Foo() {}"),GlobalTypeInfo.SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES);
  typeCheck(LINE_JOINER.join("/** @interface @extends {IObject<string, string>} */","function Int1() {}","/** @interface @extends {IObject<string, number>} */","function Int2() {}","/**"," * @constructor"," * @implements {Int1}"," * @implements {Int2}"," */","function Foo() {}","var /** null */ n = (new Foo)['asdf'+'asdf'];"),GlobalTypeInfo.SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES);
  typeCheck(LINE_JOINER.join("/** @interface @extends {IObject<function(number), number>} */","function Int1() {}","/** @interface @extends {IObject<function(string), number>} */","function Int2() {}","/**"," * @constructor"," * @implements {Int1}"," * @implements {Int2}"," */","function Foo() {}"),GlobalTypeInfo.SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES);
}
