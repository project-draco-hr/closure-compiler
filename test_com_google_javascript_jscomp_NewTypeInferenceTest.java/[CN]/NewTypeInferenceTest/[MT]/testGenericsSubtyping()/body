{
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @param {T} y\n"+ " */\n"+ "Parent.prototype.method = function(x, y){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {number} x\n"+ " * @param {number} y\n"+ " */\n"+ "Child.prototype.method = function(x, y){};",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @param {T} y\n"+ " */\n"+ "Parent.prototype.method = function(x, y){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {?} x\n"+ " * @param {number} y\n"+ " */\n"+ "Child.prototype.method = function(x, y){};",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @param {T} y\n"+ " */\n"+ "Parent.prototype.method = function(x, y){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {*} x\n"+ " * @param {*} y\n"+ " */\n"+ "Child.prototype.method = function(x, y){};");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @param {T} y\n"+ " */\n"+ "Parent.prototype.method = function(x, y){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {?} x\n"+ " * @param {?} y\n"+ " */\n"+ "Child.prototype.method = function(x, y){};");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {?} x\n"+ " * @return {?}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {*} x\n"+ " * @return {?}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };");
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {*} x\n"+ " * @return {*}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {number} x\n"+ " * @return {number}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {?} x\n"+ " * @return {*}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {function(T, T) : boolean} x\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {function(number, number) : boolean} x\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  checkNoWarnings("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " */\n"+ "function f(x) {}\n"+ "/** @param {function(number, number)} x */\n"+ "function g(x) {}\n"+ "g(f);");
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " */\n"+ "function f(x) {}\n"+ "/** @param {function()} x */\n"+ "function g(x) {}\n"+ "g(f);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  checkNoWarnings("/** @interface */\n" + "function Parent() {}\n" + "/**\n"+ " * @template T\n"+ " * @param {T} x\n"+ " */\n"+ "Parent.prototype.method = function(x) {};\n"+ "/**\n"+ " * @constructor\n"+ " * @implements {Parent}\n"+ " */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template U\n"+ " * @param {U} x\n"+ " */\n"+ "Child.prototype.method = function(x) {};");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/** @param {string} x */\n" + "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {T} x\n"+ " */\n"+ "Child.prototype.method = function(x){};");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/** @param {*} x */\n" + "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {T} x\n"+ " */\n"+ "Child.prototype.method = function(x){};");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/** @param {?} x */\n" + "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {T} x\n"+ " */\n"+ "Child.prototype.method = function(x){};");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/**\n" + " * @param {string} x\n"+ " * @param {number} y\n"+ " */\n"+ "Parent.prototype.method = function(x, y){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {T} x\n"+ " * @param {T} y\n"+ " */\n"+ "Child.prototype.method = function(x, y){};");
  checkNoWarnings("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template A, B\n"+ " * @param {A} x\n"+ " * @param {B} y\n"+ " * @return {A}\n"+ " */\n"+ "Parent.prototype.method = function(x, y){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template A, B\n"+ " * @param {A} x\n"+ " * @param {B} y\n"+ " * @return {B}\n"+ " */\n"+ "Child.prototype.method = function(x, y){ return y; };");
}
