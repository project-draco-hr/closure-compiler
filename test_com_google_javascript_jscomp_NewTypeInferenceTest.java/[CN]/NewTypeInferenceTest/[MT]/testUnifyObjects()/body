{
  checkNoWarnings("function f(b) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {T} x\n"+ "   * @param {T} y\n"+ "   */\n"+ "  function f(x, y) {}\n"+ "  f({p:5, r:'str'}, {p:20, r:b});\n"+ "}");
  checkNoWarnings("function f(b) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {T} x\n"+ "   * @param {T} y\n"+ "   */\n"+ "  function f(x, y) {}\n"+ "  f({p:20, r:b}, {p:5, r:'str'});\n"+ "}");
  typeCheck("function g(x) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {T} x\n"+ "   * @param {T} y\n"+ "   */\n"+ "  function f(x, y) {}\n"+ "  f({prop: x}, {prop: 5});\n"+ "}\n"+ "g('asdf');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("function g(x, cond) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {T} x\n"+ "   * @param {T} y\n"+ "   */\n"+ "  function f(x, y) {}\n"+ "  var y = cond ? {prop: 'str'} : {prop: 5};\n"+ "  f({prop: x}, y);\n"+ "}\n"+ "g({}, true);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("function g(x, cond) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {T} x\n"+ "   * @param {T} y\n"+ "   */\n"+ "  function f(x, y) {}\n"+ "  /** @type {{prop : (string | number)}} */\n"+ "  var y = cond ? {prop: 'str'} : {prop: 5};\n"+ "  f({prop: x}, y);\n"+ "}\n"+ "g({}, true);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {{a: number, b: T}} x\n"+ " * @return {T}\n"+ " */\n"+ "function f(x) { return x.b; }\n"+ "f({a: 1, b: 'asdf'}) - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @return {T}\n"+ " */\n"+ "function f(x) { return x.b; }\n"+ "f({b: 'asdf'}) - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
}
