{
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "function id(x) { return x; }\n"+ "id('str') - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @param {T} y\n"+ " */\n"+ "function f(x, y) {}\n"+ "f(123, 'asdf');",NewTypeInference.NOT_UNIQUE_INSTANTIATION);
  checkNoWarnings("/**\n" + " * @template T\n" + " * @param {(T|null)} x\n"+ " * @return {(T|number)}\n"+ " */\n"+ "function f(x) { return x === null ? 123 : x; }\n"+ "/** @return {(null|undefined)} */ function g() { return null; }\n"+ "var /** (number|undefined) */ y = f(g());");
  typeCheck("/**\n" + " * @template T\n" + " * @param {(T|number)} x\n"+ " */\n"+ "function f(x) {}\n"+ "/** @return {*} */ function g() { return 1; }\n"+ "f(g());",NewTypeInference.FAILED_TO_UNIFY);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "function id(x) { return x; }\n"+ "/** @return {*} */ function g() { return 1; }\n"+ "id(g()) - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/**\n" + " * @template T, U\n" + " * @param {T} x\n"+ " * @param {U} y\n"+ " * @return {U}\n"+ " */\n"+ "function f(x, y) { return y; }\n"+ "f(10, 'asdf') - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function g(x) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {T} x\n"+ "   * @param {T} y\n"+ "   */\n"+ "  function f(x, y) {}\n"+ "  f(x, 5);\n"+ "}\n"+ "g('asdf');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  checkNoWarnings("function g(/** ? */ x) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {(T|number)} x\n"+ "   */\n"+ "  function f(x) {}\n"+ "  f(x)\n"+ "}");
  checkNoWarnings("function g(x) {\n" + "  /**\n" + "   * @template T\n"+ "   * @param {T} x\n"+ "   * @return {T}\n"+ "   */\n"+ "  function f(x) { return x; }\n"+ "  f(x) - 5;\n"+ "  x = 'asdf';\n"+ "}\n"+ "g('asdf');");
  typeCheck("/**\n" + " * @template T\n" + " * @param {(T|number)} x\n"+ " */\n"+ "function f(x) {}\n"+ "f(123);",NewTypeInference.FAILED_TO_UNIFY);
  typeCheck("/**\n" + " * @template T\n" + " * @param {(T|null)} x\n"+ " * @param {(T|number)} y\n"+ " */\n"+ "function f(x, y) {}\n"+ "f(null, 'str');",NewTypeInference.FAILED_TO_UNIFY);
  typeCheck("/** @constructor */ function Foo(){};\n" + "/**\n" + " * @template T\n"+ " * @param {(T|Foo)} x\n"+ " * @param {(T|number)} y\n"+ " */\n"+ "function f(x, y) {}\n"+ "f(new Foo(), 'str');",NewTypeInference.FAILED_TO_UNIFY);
  typeCheck("/**\n" + " * @template T\n" + " * @param {function(T):T} f\n"+ " * @param {T} x\n"+ " */\n"+ "function apply(f, x) { return f(x); }\n"+ "/** @type {string} */"+ "var out;"+ "var result = apply(function(x){ out = x; return x; }, 0);",ImmutableList.of(NewTypeInference.NOT_UNIQUE_INSTANTIATION,NewTypeInference.MISTYPED_ASSIGN_RHS));
  typeCheck("/** @template T */\n" + "function f(/** T */ x, /** T */ y) {}\n" + "f(1, 'str');",NewTypeInference.NOT_UNIQUE_INSTANTIATION);
  typeCheck("/** @template T */\n" + "function /** T */ f(/** T */ x) { return x; }\n" + "f('str') - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " */\n"+ "function f(x) {\n"+ "  /** @constructor */\n"+ "  function Foo() {\n"+ "    /** @type {T} */\n"+ "    this.prop = x;\n"+ "  }\n"+ "  return (new Foo()).prop;\n"+ "}\n"+ "f('asdf') - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  checkNoWarnings("/**\n" + " * @template T\n" + " * @param {*} x\n"+ " */\n"+ "function f(x) {}\n"+ "f(123);");
}
