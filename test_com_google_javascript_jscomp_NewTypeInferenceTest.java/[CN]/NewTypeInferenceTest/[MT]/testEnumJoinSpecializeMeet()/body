{
  typeCheck("/** @enum {number} */\n" + "var E = { ONE: 1 };\n" + "function f(cond) {\n"+ "  var x = cond ? E.ONE : 5;\n"+ "  x - 2;\n"+ "  var /** E */ y = x;\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @constructor */\n" + "function High() {}\n" + "/** @constructor @extends {High} */\n"+ "function Low() {}\n"+ "/** @enum {!Low} */\n"+ "var E = { A: new Low };\n"+ "function f(cond) {\n"+ "  var x = cond ? E.A : new High;\n"+ "  var /** High */ y = x;\n"+ "  var /** E */ z = x;\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  checkNoWarnings("/** @constructor */\n" + "function High() {}\n" + "/** @constructor @extends {High} */\n"+ "function Low() {}\n"+ "/** @enum {!High} */\n"+ "var E = { A: new High };\n"+ "function f(cond) {\n"+ "  var x = cond ? E.A : new Low;\n"+ "  if (!(x instanceof Low)) { var /** E */ y = x; }\n"+ "}");
  typeCheck("/** @enum {?} */\n" + "var E = { A: 123 };\n" + "function f(x) {\n"+ "  var /** string */ s = x;\n"+ "  var /** E */ y = x;\n"+ "  s = x;\n"+ "}\n"+ "f('str');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @enum {number} */\n" + "var E1 = { ONE: 1 };\n" + "/** @enum {number} */\n"+ "var E2 = { TWO: 1 };\n"+ "/** @enum {number} */\n"+ "var E3 = { THREE: 1 };\n"+ "function f(x) {\n"+ "  var /** (E1|E2) */ y = x;\n"+ "  var /** (E1|E3) */ z = x;\n"+ "  var /** E1 */ w = x;\n"+ "}\n"+ "f(E2.TWO);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @enum {number} */\n" + "var E = { ONE: 1 };\n" + "function f(x) {\n"+ "  var /** E */ y = x;\n"+ "  var /** number */ z = x;\n"+ "}\n"+ "f(123);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @constructor */\n" + "function High() {}\n" + "/** @constructor @extends {High} */\n"+ "function Low() {}\n"+ "/** @enum {!Low} */\n"+ "var E = { A: new Low };\n"+ "function f(x) {\n"+ "  var /** !High */ y = x;\n"+ "  var /** E */ z = x;\n"+ "}\n"+ "f(new High);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @interface */\n" + "function High1() {}\n" + "/** @interface */\n"+ "function High2() {}\n"+ "/** @constructor @implements {High1} @implements {High2} */\n"+ "function Low() {}\n"+ "/** @enum {!Low} */\n"+ "var E = { A: new Low };\n"+ "function f(x) {\n"+ "  var /** (!High1 | !High2) */ y = x;\n"+ "  var /** E */ z = x;\n"+ "}\n"+ "f(/** @type {!High1} */ (new Low));",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @constructor */\n" + "function High() {}\n" + "/** @constructor @extends {High} */\n"+ "function Low() {}\n"+ "/** @enum {!High} */\n"+ "var E = { A: new High };\n"+ "/** @param {function(E)|function(!Low)} x */\n"+ "function f(x) { x(123); }",NewTypeInference.CALL_FUNCTION_WITH_BOTTOM_FORMAL);
}
