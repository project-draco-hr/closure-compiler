{
  typeCheck(LINE_JOINER.join("/** @constructor */ function Foo() {}","/** @constructor @extends {Foo} */ function Bar() {}","/** @constructor @extends {Foo} */ function Baz() {}","/**"," * @template T"," * @param {T|!Foo} x"," * @param {T} y"," * @return {T}"," */","function f(x, y) { return y; }","/** @param {!Bar|!Baz} x */","function g(x) {","  f(x, 123) - 123;","}"));
  typeCheck(LINE_JOINER.join("/** @constructor */","function Parent() {}","/** @constructor @extends {Parent} */","function Child() {}","/**"," * @template T"," * @param {T|!Parent} x"," * @return {T}"," */","function f(x) { return /** @type {?} */ (x); }","function g(/** (number|!Child) */ x) {","  f(x) - 5;","}"));
  typeCheck(LINE_JOINER.join("/**"," * @constructor"," * @template T"," */","function Parent() {}","/**"," * @constructor"," * @extends {Parent<number>}"," */","function Child() {}","/**"," * @template T"," * @param {!Parent<T>} x"," */","function f(x) {}","/**"," * @param {!Child} x"," */","function g(x) { f(x); }"));
  typeCheck(LINE_JOINER.join("/**"," * @constructor"," * @template T"," */","function Parent() {}","/**"," * @constructor"," * @template U"," * @extends {Parent<U>}"," */","function Child() {}","/**"," * @template T"," * @param {!Child<T>} x"," */","function f(x) {}","/**"," * @param {!Parent<number>} x"," */","function g(x) { f(x); }"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @constructor"," */","function High() {}","/** @constructor @extends {High<number>} */","function Low() {}","/**"," * @template T"," * @param {!High<T>} x"," * @return {T}"," */","function f(x) { return /** @type {?} */ (null); }","var /** string */ s = f(new Low);"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/**"," * @constructor"," * @template T"," */","function High() {}","/** @return {T} */","High.prototype.get = function() { return /** @type {?} */ (null); };","/**"," * @constructor"," * @template U"," * @extends {High<U>}"," */","function Low() {}","/**"," * @template V"," * @param {!High<V>} x"," * @return {V}"," */","function f(x) { return x.get(); }","/** @param {!Low<number>} x */","function g(x) {","  var /** number */ n = f(x);","  var /** string */ s = f(x);","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/**"," * @interface"," * @template T"," */","function High() {}","/**"," * @constructor"," * @template T"," * @implements {High<T>}"," */","function Mid() {}","/**"," * @constructor"," * @template T"," * @extends {Mid<T>}"," * @param {T} x"," */","function Low(x) {}","/**"," * @template T"," * @param {!High<T>} x"," * @return {T}"," */","function f(x) {","  return /** @type {?} */ (null);","}","f(new Low('asdf')) - 5;"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @param {T} x"," * @param {function(function(T=))} y"," */","function googPromiseReject(x, y) {}","googPromiseReject(123, function(x) { x(123); } )"));
  typeCheck(LINE_JOINER.join("/**"," * @constructor"," * @template T"," */","function Foo() {}","/** @constructor */","function Bar() {}","/** @type {number} */","Bar.prototype.length;","/**"," * @template T"," * @param {{length:number}|Foo<T>} x"," */","function h(x) {}","h(new Bar);"));
  typeCheck(LINE_JOINER.join("function f(x) {","  Array.prototype.slice.call(arguments, 1);","}"));
}
