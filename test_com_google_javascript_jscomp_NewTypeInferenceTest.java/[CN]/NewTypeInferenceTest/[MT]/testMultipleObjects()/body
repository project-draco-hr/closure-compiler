{
  checkNoWarnings("/** @constructor */ function Foo() {}\n" + "/** @constructor */ function Bar() {}\n" + "/** @param {(Foo|Bar)} x */ function reqFooBar(x) {}\n"+ "function f(cond) {\n"+ "  reqFooBar(cond ? new Foo : new Bar);\n"+ "}");
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @constructor */ function Bar() {}\n" + "/** @param {Foo} x */ function reqFoo(x) {}\n"+ "function f(cond) {\n"+ "  reqFoo(cond ? new Foo : new Bar);\n"+ "}",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @constructor */ function Bar() {}\n" + "/** @param {(Foo|Bar)} x */ function g(x) {\n"+ "  if (x instanceof Foo) {\n"+ "    var /** Foo */ y = x;\n"+ "  } else {\n"+ "    var /** Bar */ z = x;\n"+ "  }\n"+ "  var /** Foo */ w = x;\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @constructor */\n" + "function Foo() { /** @type {string} */ this.s = 'str'; }\n" + "/** @param {(!Foo|{n:number, s:string})} x */ function g(x) {\n"+ "  if (x instanceof Foo) {\n"+ "  } else {\n"+ "    x.s - 5;\n"+ "  }\n"+ "}",NewTypeInference.INVALID_OPERAND_TYPE);
  checkNoWarnings("/** @constructor */ function Foo() {}\n" + "/** @type {number} */ Foo.prototype.n = 5;\n" + "/** @param {{n : number}} x */ function reqRecord(x) {}\n"+ "function f() {\n"+ "  reqRecord(new Foo);\n"+ "}");
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @type {number} */ Foo.prototype.n = 5;\n" + "/** @param {{n : string}} x */ function reqRecord(x) {}\n"+ "function f() {\n"+ "  reqRecord(new Foo);\n"+ "}",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @param {{n : number}|!Foo} x */\n" + "function f(x) {\n"+ "  x.n - 5;\n"+ "}",NewTypeInference.POSSIBLY_INEXISTENT_PROPERTY);
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @param {{n : number}|!Foo} x */\n" + "function f(x) {\n"+ "  x.abc - 5;\n"+ "}",TypeCheck.INEXISTENT_PROPERTY);
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @constructor */ function Bar() {}\n" + "/** @param {!Bar|!Foo} x */\n"+ "function f(x) {\n"+ "  x.abc = 'str';\n"+ "  if (x instanceof Foo) {\n"+ "    x.abc - 5;\n"+ "  }\n"+ "}",NewTypeInference.INVALID_OPERAND_TYPE);
}
