{
  typeCheck(LINE_JOINER.join("/** @constructor */","function Foo() {","  /** @type {number} */ this.prop = 123;","}","function f(x) {","  x.prop = 234;","  return x;","}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," * @return {T}"," */","function g(x, y) { return x; }","var /** !Foo */ obj = g(new Foo, f(new Foo));"));
  typeCheck(LINE_JOINER.join("/** @constructor */","function Foo() {","  /** @type {number} */ this.prop = 123;","}","/** @constructor */","function Bar() {","  /** @type {number} */ this.prop = 456;","}","function f(x) {","  x.prop = 234;","  return x;","}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," * @return {T}"," */","function g(x, y) { return x; }","var /** !Bar */ obj = g(new Foo, f(new Foo));"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @param {T} x"," * @param {T} y"," */","function f(x, y) {}","/**"," * @param {!Array<!Function|string>|!Function} f1"," * @param {!Array<!Function|string>|!Function} f2"," */","function g(f1, f2) {","  f(f1, f2);","}"));
  typeCheck(LINE_JOINER.join("/** @constructor @struct */ function Foo() {}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," */","function f(x, y) {}","function g(x) {","  var z;","  if (1 < 2) {","    var /** number */ n = x.prop - 1;","    z = x;","  } else {","    z = new Foo;","  }","  f(z, z);","}"));
}
