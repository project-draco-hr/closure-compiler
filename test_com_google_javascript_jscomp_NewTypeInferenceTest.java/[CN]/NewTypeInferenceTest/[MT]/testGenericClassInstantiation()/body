{
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) {}\n"+ "/** @param {T} y */\n"+ "Foo.prototype.bar = function(y) {}\n"+ "new Foo('str').bar(5)",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) {}\n"+ "/** @type {function(T)} y */\n"+ "Foo.prototype.bar = function(y) {};\n"+ "new Foo('str').bar(5)",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) { /** @type {T} */ this.x = x; }\n"+ "/** @return {T} */\n"+ "Foo.prototype.bar = function() { return this.x; };\n"+ "new Foo('str').bar() - 5",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) { /** @type {T} */ this.x = x; }\n"+ "/** @type {function() : T} */\n"+ "Foo.prototype.bar = function() { return this.x; };\n"+ "new Foo('str').bar() - 5",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) {}\n"+ "/** @type {function(this:Foo<T>, T)} */\n"+ "Foo.prototype.bar = function(x) { this.x = x; };\n"+ "new Foo('str').bar(5)",NewTypeInference.INVALID_ARGUMENT_TYPE);
  checkNoWarnings("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) {}\n"+ "/** @param {!Foo<number>} x */\n"+ "function f(x) {}\n"+ "f(new Foo(7));");
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) {}\n"+ "/** @param {Foo<number>} x */\n"+ "function f(x) {}\n"+ "f(new Foo('str'));",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @param {T} x\n"+ " * @constructor\n"+ " */\n"+ "function Foo(x) {}\n"+ "/** @param {T} x */\n"+ "Foo.prototype.method = function(x) {};\n"+ "/** @param {!Foo<number>} x */\n"+ "function f(x) { x.method('asdf'); }",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @constructor\n" + " * @template T\n"+ " */\n"+ "function Foo() {}\n"+ "/** @param {T} x */\n"+ "Foo.prototype.method = function(x) {};\n"+ "var /** @type {Foo<string>} */ foo = null;\n"+ "foo.method('asdf');",NewTypeInference.PROPERTY_ACCESS_ON_NONOBJECT);
}
