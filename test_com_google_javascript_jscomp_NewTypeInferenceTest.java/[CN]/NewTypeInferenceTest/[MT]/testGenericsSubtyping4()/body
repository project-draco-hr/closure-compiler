{
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {*} x\n"+ " * @return {*}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {number} x\n"+ " * @return {number}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck("/** @interface */ function Parent() {}\n" + "/**\n" + " * @template T\n"+ " * @param {T} x\n"+ " * @return {T}\n"+ " */\n"+ "Parent.prototype.method = function(x){};\n"+ "/** @constructor @implements {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @param {?} x\n"+ " * @return {*}\n"+ " */\n"+ "Child.prototype.method = function(x){ return x; };",GlobalTypeInfo.INVALID_PROP_OVERRIDE);
}
