{
  typeCheck(LINE_JOINER.join("/** @const */ var ns = {};","/** @constructor */ ns.subns.Foo = function(){};"),NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(LINE_JOINER.join("/** @const */ var ns = {};","ns.subns.subsubns = {};"),NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(LINE_JOINER.join("/** @const */ var ns = {};","/** @enum {number} */ ns.subns.NUM = { N : 1 };"),NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(LINE_JOINER.join("/** @const */ var ns = {};","/** @typedef {number} */ ns.subns.NUM;"),NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(LINE_JOINER.join("/** @constructor */ function Foo(){}","Foo.subns.subsubns = {};"),NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(LINE_JOINER.join("/** @constructor */ function Foo(){}","/** @constructor */ Foo.subns.Bar = function(){};"),NewTypeInference.INEXISTENT_PROPERTY);
}
