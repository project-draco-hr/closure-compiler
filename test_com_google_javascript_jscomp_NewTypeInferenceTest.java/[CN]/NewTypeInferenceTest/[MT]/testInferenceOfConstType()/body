{
  typeCheck("/** @const */\n" + "var s = 'str';\n" + "function f() { s - 5; }",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function f(/** string */ x) {\n" + "  /** @const */\n" + "  var s = x;\n"+ "  function g() { s - 5; }\n"+ "}",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @constructor */\n" + "function Foo() {\n" + "  /** @const */\n"+ "  this.prop = 'str';\n"+ "}\n"+ "(new Foo).prop - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @constructor */\n" + "function Foo() {}\n" + "/** @const */\n"+ "Foo.prop = 'str';\n"+ "function g() { Foo.prop - 5; }",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function f(/** string */ s) {\n" + "  /** @constructor */\n" + "  function Foo() {}\n"+ "  /** @const */\n"+ "  Foo.prototype.prop = s;\n"+ "  function g() {\n"+ "    (new Foo).prop - 5;\n"+ "  }\n"+ "}",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @const */\n" + "var ns = {};\n" + "/** @const */\n"+ "ns.prop = 'str';\n"+ "function f() {\n"+ "  ns.prop - 5;\n"+ "}",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function f(x, y) {\n" + "  /** @const */\n" + "  var n = x - y;\n"+ "  function g() { n < 'str'; }\n"+ "}",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function f(x) {\n" + "  /** @const */\n" + "  var notx = !x;\n"+ "  function g() { notx - 5; }\n"+ "}",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @const */\n" + "var lit = { a: 'a', b: 'b' };\n" + "function g() { lit.a - 5; }",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @const */\n" + "var n = ('str', 123);\n" + "function f() { n < 'str'; }",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @const */\n" + "var s = x;\n" + "var /** string */ x;\n",ImmutableList.of(VariableReferenceCheck.UNDECLARED_REFERENCE,GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE));
  typeCheck("function f(x) {\n" + "  /** @const */\n" + "  var c = x;\n"+ "}",GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE);
  typeCheck("function f(x) {\n" + "  /** @const */\n" + "  var c = { a: 1, b: x };\n"+ "}",GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE);
  typeCheck("/**\n" + " * @constructor\n" + " * @param {{ a: string }} x\n"+ " */\n"+ "function Foo(x) {\n"+ "  /** @const */\n"+ "  this.prop = x.a;\n"+ "}\n"+ "(new Foo({ a: ''})).prop - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @return {string} */\n" + "function f() { return ''; }\n" + "/** @const */\n"+ "var s = f();\n"+ "function g() { s - 5; }",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @const */\n" + "var s = f();\n" + "/** @return {string} */\n"+ "function f() { return ''; }",GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE);
  typeCheck("/** @constructor */\n" + "function Foo() {}\n" + "/** @constructor */\n"+ "function Bar() {}\n"+ "/** @const */\n"+ "var foo = new Foo;\n"+ "function g() {\n"+ "  var /** Bar */ bar = foo;\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @const */\n" + "var n1 = 1;\n" + "/** @const */\n"+ "var n2 = n1;\n"+ "function g() { n2 < 'str'; }",NewTypeInference.INVALID_OPERAND_TYPE);
}
