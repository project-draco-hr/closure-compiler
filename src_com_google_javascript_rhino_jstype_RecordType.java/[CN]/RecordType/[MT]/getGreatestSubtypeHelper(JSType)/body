{
  if (that.isRecordType()) {
    RecordType thatRecord=that.toMaybeRecordType();
    RecordTypeBuilder builder=new RecordTypeBuilder(registry);
    builder.setSynthesized(true);
    for (    String property : getOwnPropertyNames()) {
      if (thatRecord.hasProperty(property) && !thatRecord.getPropertyType(property).isInvariant(getPropertyType(property))) {
        return registry.getNativeObjectType(JSTypeNative.NO_TYPE);
      }
      builder.addProperty(property,getPropertyType(property),getPropertyNode(property));
    }
    for (    String property : thatRecord.getOwnPropertyNames()) {
      if (!hasProperty(property)) {
        builder.addProperty(property,thatRecord.getPropertyType(property),thatRecord.getPropertyNode(property));
      }
    }
    return builder.build();
  }
  JSType greatestSubtype=registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  JSType thatRestrictedToObj=registry.getNativeType(JSTypeNative.OBJECT_TYPE).getGreatestSubtype(that);
  if (!thatRestrictedToObj.isEmptyType()) {
    for (    String propName : getOwnPropertyNames()) {
      JSType propType=getPropertyType(propName);
      UnionTypeBuilder builder=new UnionTypeBuilder(registry);
      for (      ObjectType alt : registry.getEachReferenceTypeWithProperty(propName)) {
        JSType altPropType=alt.getPropertyType(propName);
        if (altPropType != null && !alt.isEquivalentTo(this) && alt.isSubtype(that) && propType.isInvariant(altPropType)) {
          builder.addAlternate(alt);
        }
      }
      greatestSubtype=greatestSubtype.getLeastSupertype(builder.build());
    }
  }
  return greatestSubtype;
}
