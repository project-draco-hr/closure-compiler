{
  int[] minuend=this.ranges;
  int[] subtrahend=subtrahendRanges.ranges;
  int mn=minuend.length, sn=subtrahend.length;
  if (mn == 0 || sn == 0) {
    return this;
  }
  int[] difference=new int[minuend.length];
  int mIdx=0, sIdx=0, dIdx=0;
  int pos=minuend[0];
  while (mIdx < mn) {
    if (pos >= minuend[mIdx + 1]) {
      mIdx+=2;
    }
 else     if (pos < minuend[mIdx]) {
      pos=minuend[mIdx];
    }
 else     if (sIdx < sn && pos >= subtrahend[sIdx]) {
      pos=subtrahend[sIdx + 1];
      sIdx+=2;
    }
 else {
      int end=sIdx < sn ? Math.min(minuend[mIdx + 1],subtrahend[sIdx]) : minuend[mIdx + 1];
      if (dIdx != 0 && difference[dIdx - 1] == pos) {
        difference[dIdx - 1]=pos;
      }
 else {
        if (dIdx == difference.length) {
          int[] newArr=new int[dIdx * 2];
          System.arraycopy(difference,0,newArr,0,dIdx);
          difference=newArr;
        }
        difference[dIdx++]=pos;
        difference[dIdx++]=end;
      }
      pos=end;
    }
  }
  if (dIdx != difference.length) {
    int[] newArr=Arrays.copyOf(difference,dIdx);
    difference=newArr;
  }
  return new CharRanges(difference);
}
