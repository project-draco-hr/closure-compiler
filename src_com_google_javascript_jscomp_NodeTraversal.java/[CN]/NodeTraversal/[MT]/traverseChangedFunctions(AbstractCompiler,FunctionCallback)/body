{
  final AbstractCompiler comp=compiler;
  final FunctionCallback cb=callback;
  final Node jsRoot=comp.getJsRoot();
  NodeTraversal t=new NodeTraversal(comp,new AbstractPreOrderCallback(){
    @Override public final boolean shouldTraverse(    NodeTraversal t,    Node n,    Node p){
      if ((n == jsRoot || n.isFunction()) && comp.hasScopeChanged(n)) {
        cb.enterFunction(comp,n);
      }
      return true;
    }
  }
,new Es6SyntacticScopeCreator(compiler));
  t.traverse(jsRoot);
}
