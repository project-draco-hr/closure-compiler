{
  errorStream=err;
  List<String> processedArgs=processArgs(args);
  Flags.guardLevels.clear();
  Flags.mixedJsSources.clear();
  List<String> jsFiles=null;
  List<FlagEntry<JsSourceType>> mixedSources=null;
  List<LocationMapping> mappings=null;
  ImmutableMap<String,String> sourceMapInputs=null;
  try {
    flags.parse(processedArgs);
    if (!flags.flagFile.isEmpty()) {
      processFlagFile();
    }
    jsFiles=flags.getJsFiles();
    mixedSources=flags.getMixedJsSources();
    mappings=flags.getSourceMapLocationMappings();
    sourceMapInputs=flags.getSourceMapInputs();
  }
 catch (  CmdLineException e) {
    reportError(e.getMessage());
  }
catch (  IOException ioErr) {
    reportError("ERROR - " + flags.flagFile + " read error.");
  }
  List<ModuleIdentifier> entryPoints=new ArrayList<>();
  if (flags.processCommonJsModules) {
    flags.processClosurePrimitives=true;
    if (flags.commonJsEntryModule != null) {
      if (flags.entryPoints.isEmpty()) {
        entryPoints.add(ModuleIdentifier.forFile(flags.commonJsEntryModule));
      }
 else {
        reportError("--common_js_entry_module cannot be used with --entry_point.");
      }
    }
  }
  if (flags.outputWrapperFile != null && !flags.outputWrapperFile.isEmpty()) {
    flags.outputWrapper="";
    try {
      flags.outputWrapper=Files.toString(new File(flags.outputWrapperFile),UTF_8);
    }
 catch (    Exception e) {
      reportError("ERROR - invalid output_wrapper_file specified.");
    }
  }
  if (flags.outputWrapper != null && !flags.outputWrapper.isEmpty() && !flags.outputWrapper.contains(CommandLineRunner.OUTPUT_MARKER)) {
    reportError("ERROR - invalid output_wrapper specified. Missing '" + CommandLineRunner.OUTPUT_MARKER + "'.");
  }
  if (errors) {
    flags.printShortUsageAfterErrors(errorStream);
  }
 else   if (flags.displayHelp) {
    flags.printUsage(out);
  }
 else   if (flags.version) {
    out.println("Closure Compiler (http://github.com/google/closure-compiler)\n" + "Version: " + Compiler.getReleaseVersion() + "\n"+ "Built on: "+ Compiler.getReleaseDate());
    out.flush();
  }
 else {
    runCompiler=true;
    CodingConvention conv;
    if (flags.thirdParty) {
      conv=CodingConventions.getDefault();
    }
 else     if (flags.processJqueryPrimitives) {
      conv=new JqueryCodingConvention();
    }
 else {
      conv=new ClosureCodingConvention();
    }
    List<String> moduleRoots=new ArrayList<>();
    if (!flags.moduleRoot.isEmpty()) {
      moduleRoots.addAll(flags.moduleRoot);
      if (!flags.commonJsPathPrefix.isEmpty()) {
        reportError("--commonJsPathPrefix cannot be used with --js_module_root.");
      }
    }
 else     if (flags.commonJsPathPrefix != null) {
      moduleRoots.addAll(flags.commonJsPathPrefix);
    }
 else {
      moduleRoots.add(ModuleLoader.DEFAULT_FILENAME_PREFIX);
    }
    for (    String entryPoint : flags.entryPoints) {
      if (entryPoint.startsWith("goog:")) {
        entryPoints.add(ModuleIdentifier.forClosure(entryPoint));
      }
 else {
        entryPoints.add(ModuleIdentifier.forFile(entryPoint));
      }
    }
    if (flags.dependencyMode == CompilerOptions.DependencyMode.STRICT && entryPoints.isEmpty()) {
      reportError("When --dependency_mode=STRICT, you must specify at least " + "one --entry_point.");
    }
    CompilerOptions.DependencyMode depMode=flags.dependencyMode;
    if (flags.onlyClosureDependencies || flags.manageClosureDependencies) {
      if (flags.dependencyMode != CompilerOptions.DependencyMode.NONE) {
        reportError((flags.onlyClosureDependencies ? "--only_closure_dependencies" : "--manage_closure_dependencies") + " cannot be used with --dependency_mode.");
      }
 else {
        if (flags.manageClosureDependencies) {
          depMode=CompilerOptions.DependencyMode.LOOSE;
        }
 else         if (flags.onlyClosureDependencies) {
          depMode=CompilerOptions.DependencyMode.STRICT;
        }
        if (!flags.closureEntryPoint.isEmpty() && !flags.entryPoints.isEmpty()) {
          reportError("--closure_entry_point cannot be used with --entry_point.");
        }
 else {
          for (          String entryPoint : flags.closureEntryPoint) {
            entryPoints.add(ModuleIdentifier.forClosure(entryPoint));
          }
        }
      }
    }
    getCommandLineConfig().setPrintTree(flags.printTree).setPrintAst(flags.printAst).setPrintPassGraph(flags.printPassGraph).setJscompDevMode(flags.jscompDevMode).setLoggingLevel(flags.loggingLevel).setExterns(flags.externs).setJs(jsFiles).setJsZip(flags.jszip).setMixedJsSources(mixedSources).setJsOutputFile(flags.jsOutputFile).setModule(flags.module).setVariableMapOutputFile(flags.variableMapOutputFile).setCreateNameMapFiles(flags.createNameMapFiles).setPropertyMapOutputFile(flags.propertyMapOutputFile).setCodingConvention(conv).setSummaryDetailLevel(flags.summaryDetailLevel).setOutputWrapper(flags.outputWrapper).setModuleWrapper(flags.moduleWrapper).setModuleOutputPathPrefix(flags.moduleOutputPathPrefix).setCreateSourceMap(flags.createSourceMap).setSourceMapFormat(flags.sourceMapFormat).setSourceMapLocationMappings(mappings).setSourceMapInputFiles(sourceMapInputs).setWarningGuards(Flags.guardLevels).setDefine(flags.define).setCharset(flags.charset).setDependencyMode(depMode).setEntryPoints(entryPoints).setOutputManifest(ImmutableList.of(flags.outputManifest)).setOutputModuleDependencies(flags.outputModuleDependencies).setProcessCommonJSModules(flags.processCommonJsModules).setModuleRoots(moduleRoots).setTransformAMDToCJSModules(flags.transformAmdModules).setWarningsWhitelistFile(flags.warningsWhitelistFile).setHideWarningsFor(flags.hideWarningsFor).setAngularPass(flags.angularPass).setTracerMode(flags.tracerMode).setInstrumentationTemplateFile(flags.instrumentationFile).setNewTypeInference(flags.useNewTypeInference).setJsonStreamMode(flags.jsonStreamMode);
  }
  errorStream=null;
}
