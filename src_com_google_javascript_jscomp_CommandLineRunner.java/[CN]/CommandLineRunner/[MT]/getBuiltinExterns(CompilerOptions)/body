{
  InputStream input=CommandLineRunner.class.getResourceAsStream("/externs.zip");
  if (input == null) {
    input=CommandLineRunner.class.getResourceAsStream("externs.zip");
  }
  Preconditions.checkNotNull(input);
  ZipInputStream zip=new ZipInputStream(input);
  final String envPrefix=options.getEnvironment().toString().toLowerCase() + "/";
  ImmutableList.Builder<ZipEntry> builder=ImmutableList.builder();
  for (ZipEntry entry=null; (entry=zip.getNextEntry()) != null; ) {
    builder.add(entry);
  }
  ImmutableList<ZipEntry> zipEntries=builder.build();
  boolean flatExternStructure=true;
  String browserEnv=CompilerOptions.Environment.BROWSER.toString().toLowerCase();
  for (  ZipEntry entry : zipEntries) {
    if (entry.getName().contains(browserEnv)) {
      flatExternStructure=false;
      break;
    }
  }
  Map<String,SourceFile> externsMap=new HashMap<>();
  for (  ZipEntry entry : zipEntries) {
    if (entry.getName().indexOf('/') < 0 || flatExternStructure || (entry.getName().indexOf(envPrefix) == 0 && entry.getName().length() > envPrefix.length())) {
      BufferedInputStream entryStream=new BufferedInputStream(ByteStreams.limit(zip,entry.getSize()));
      externsMap.put(entry.getName(),SourceFile.fromInputStream("externs.zip//" + entry.getName(),entryStream,UTF_8));
    }
  }
  List<SourceFile> externs=new ArrayList<>();
  for (  String key : BUILTIN_LANG_EXTERNS) {
    Preconditions.checkState(externsMap.containsKey(key),"Externs zip must contain %s.",key);
    externs.add(externsMap.remove(key));
  }
  for (  String key : BUILTIN_EXTERN_DEP_ORDER) {
    if (!key.contains(envPrefix)) {
      continue;
    }
    Preconditions.checkState(externsMap.containsKey(key),"Externs zip must contain %s when environment is %s.",key,options.getEnvironment());
    externs.add(externsMap.remove(key));
  }
  externs.addAll(externsMap.values());
  return externs;
}
