{
  Path flagFile=Paths.get(flags.flagFile);
  BufferedReader buffer=java.nio.file.Files.newBufferedReader(flagFile,UTF_8);
  StringBuilder builder=new StringBuilder();
  List<String> tokens=new ArrayList<>();
  boolean quoted=false;
  boolean escaped=false;
  boolean isFirstCharacter=true;
  int c;
  while ((c=buffer.read()) != -1) {
    if (isFirstCharacter) {
      isFirstCharacter=false;
      if (c == UTF8_BOM_CODE) {
        continue;
      }
    }
    if (c == 32 || c == 9 || c == 10 || c == 13) {
      if (quoted) {
        builder.append((char)c);
      }
 else       if (builder.length() != 0) {
        tokens.add(builder.toString());
        builder.setLength(0);
      }
    }
 else     if (c == 34) {
      if (escaped) {
        if (quoted) {
          builder.setCharAt(builder.length() - 1,(char)c);
        }
 else {
          builder.append((char)c);
        }
      }
 else {
        quoted=!quoted;
      }
    }
 else {
      builder.append((char)c);
    }
    escaped=c == 92;
  }
  buffer.close();
  if (builder.length() != 0) {
    tokens.add(builder.toString());
  }
  flags.flagFile="";
  tokens=processArgs(tokens.toArray(new String[0]));
  List<FlagEntry<CheckLevel>> previousGuardLevels=new ArrayList<>(Flags.guardLevels);
  List<FlagEntry<JsSourceType>> previousMixedJsSources=new ArrayList<>(Flags.mixedJsSources);
  Flags.guardLevels.clear();
  Flags.mixedJsSources.clear();
  flags.parse(tokens);
  Flags.guardLevels.addAll(previousGuardLevels);
  Flags.mixedJsSources.addAll(previousMixedJsSources);
  if (!flags.flagFile.isEmpty()) {
    reportError("ERROR - Arguments in the file cannot contain " + "--flagfile option.");
  }
}
