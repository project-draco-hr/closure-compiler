{
  FileSystem fs=FileSystems.getDefault();
  final boolean remove=pattern.indexOf('!') == 0;
  if (remove) {
    pattern=pattern.substring(1);
  }
  String separator=File.separator.equals("\\") ? "\\\\" : File.separator;
  List<String> patternParts=Splitter.on(File.separator).splitToList(pattern);
  String prefix=".";
  for (int i=0; i < patternParts.size(); i++) {
    if (patternParts.get(i).contains("*")) {
      if (i > 0) {
        prefix=Joiner.on(separator).join(patternParts.subList(0,i));
        pattern=Joiner.on(separator).join(patternParts.subList(i,patternParts.size()));
      }
      break;
    }
  }
  final PathMatcher matcher=fs.getPathMatcher("glob:" + prefix + separator+ pattern);
  java.nio.file.Files.walkFileTree(fs.getPath(prefix),new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path p,    BasicFileAttributes attrs){
      if (matcher.matches(p) || matcher.matches(p.normalize())) {
        String pathStringAbsolute=p.normalize().toAbsolutePath().toString();
        if (remove) {
          excludes.add(pathStringAbsolute);
          allJsInputs.remove(pathStringAbsolute);
        }
 else         if (!excludes.contains(pathStringAbsolute)) {
          allJsInputs.put(pathStringAbsolute,p.toString());
        }
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException e){
      return FileVisitResult.SKIP_SUBTREE;
    }
  }
);
}
