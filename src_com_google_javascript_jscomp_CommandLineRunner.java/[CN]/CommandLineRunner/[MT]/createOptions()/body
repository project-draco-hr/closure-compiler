{
  CompilerOptions options=new CompilerOptions();
  if (!flags.languageIn.isEmpty()) {
    CompilerOptions.LanguageMode languageMode=CompilerOptions.LanguageMode.fromString(flags.languageIn);
    if (languageMode != null) {
      options.setLanguageIn(languageMode);
    }
 else {
      throw new FlagUsageException("Unknown language `" + flags.languageIn + "' specified.");
    }
  }
  if (flags.languageOut.isEmpty()) {
    options.setLanguageOut(options.getLanguageIn());
  }
 else {
    CompilerOptions.LanguageMode languageMode=CompilerOptions.LanguageMode.fromString(flags.languageOut);
    if (languageMode != null) {
      options.setLanguageOut(languageMode);
    }
 else {
      throw new FlagUsageException("Unknown language `" + flags.languageOut + "' specified.");
    }
  }
  if (flags.processJqueryPrimitives) {
    options.setCodingConvention(new JqueryCodingConvention());
  }
 else {
    options.setCodingConvention(new ClosureCodingConvention());
  }
  options.setExtraAnnotationNames(flags.extraAnnotationName);
  CompilationLevel level=flags.compilationLevelParsed;
  level.setOptionsForCompilationLevel(options);
  if (flags.debug) {
    level.setDebugOptionsForCompilationLevel(options);
  }
  options.setEnvironment(flags.environment);
  options.setChecksOnly(flags.checksOnly);
  if (flags.useTypesForOptimization) {
    level.setTypeBasedOptimizationOptions(options);
  }
  if (flags.assumeFunctionWrapper) {
    level.setWrappedOutputOptimizations(options);
  }
  if (flags.generateExports) {
    options.setGenerateExports(flags.generateExports);
  }
  if (flags.exportLocalPropertyDefinitions) {
    options.setExportLocalPropertyDefinitions(true);
  }
  WarningLevel wLevel=flags.warningLevel;
  wLevel.setOptionsForWarningLevel(options);
  for (  FormattingOption formattingOption : flags.formatting) {
    formattingOption.applyToOptions(options);
  }
  options.closurePass=flags.processClosurePrimitives;
  options.jqueryPass=CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.processJqueryPrimitives;
  options.angularPass=flags.angularPass;
  options.polymerPass=flags.polymerPass;
  options.setDartPass(flags.dartPass);
  options.setJ2clPass(flags.j2clPass);
  options.renamePrefixNamespace=flags.renamePrefixNamespace;
  options.setPreserveTypeAnnotations(flags.preserveTypeAnnotations);
  options.setPreventLibraryInjection(flags.noinjectLibrary);
  if (!flags.translationsFile.isEmpty()) {
    try {
      options.messageBundle=new XtbMessageBundle(new FileInputStream(flags.translationsFile),flags.translationsProject);
    }
 catch (    IOException e) {
      throw new RuntimeException("Reading XTB file",e);
    }
  }
 else   if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
    options.messageBundle=new EmptyMessageBundle();
    options.setWarningLevel(DiagnosticGroups.MSG_CONVENTIONS,CheckLevel.OFF);
  }
  options.setConformanceConfigs(loadConformanceConfigs(flags.conformanceConfigs));
  if (!flags.instrumentationFile.isEmpty()) {
    String instrumentationPb;
    Instrumentation.Builder builder=Instrumentation.newBuilder();
    try (BufferedReader br=new BufferedReader(Files.newReader(new File(flags.instrumentationFile),UTF_8))){
      StringBuilder sb=new StringBuilder();
      String line=br.readLine();
      while (line != null) {
        sb.append(line);
        sb.append(System.lineSeparator());
        line=br.readLine();
      }
      instrumentationPb=sb.toString();
      TextFormat.merge(instrumentationPb,builder);
      options.instrumentationTemplate=builder.build();
    }
 catch (    IOException e) {
      throw new RuntimeException("Error reading instrumentation template",e);
    }
  }
  return options;
}
