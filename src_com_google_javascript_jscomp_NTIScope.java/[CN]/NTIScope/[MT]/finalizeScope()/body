{
  Preconditions.checkState(isTopLevel() || this.declaredType != null,"No declared type for function-scope: %s",this.root);
  unknownTypeNames=ImmutableSet.of();
  for (  Map.Entry<String,Namespace> entry : localNamespaces.entrySet()) {
    String name=entry.getKey();
    Namespace ns=entry.getValue();
    JSType t;
    if (ns instanceof NamespaceLit) {
      constVars.add(name);
      NamespaceLit nslit=(NamespaceLit)ns;
      nslit.maybeSetWindowInstance(externs.get(name));
      t=nslit.toJSType();
    }
 else {
      t=ns.toJSType();
    }
    if (externs.containsKey(name)) {
      externs.put(name,t);
    }
 else {
      locals.put(name,t);
    }
  }
  for (  String typedefName : localTypedefs.keySet()) {
    locals.put(typedefName,this.commonTypes.UNDEFINED);
  }
  copyOuterVarsTransitively(this);
  preservedNamespaces=localNamespaces;
  localNamespaces=ImmutableMap.of();
  localTypedefs=ImmutableMap.of();
  escapedVars=ImmutableSet.of();
  isFinalized=true;
}
