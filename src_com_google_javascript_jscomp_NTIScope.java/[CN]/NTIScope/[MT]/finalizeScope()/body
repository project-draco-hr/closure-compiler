{
  unknownTypeNames=ImmutableSet.of();
  JSTypes commonTypes=getCommonTypes();
  for (  Map.Entry<String,NamespaceLit> entry : localNamespaces.entrySet()) {
    String name=entry.getKey();
    NamespaceLit nslit=entry.getValue();
    JSType objToInclude=null;
    if (localFunDefs.containsKey(name)) {
      objToInclude=commonTypes.fromFunctionType(localFunDefs.get(name).getDeclaredFunctionType().toFunctionType());
    }
 else {
      objToInclude=externs.get(name);
    }
    JSType t=nslit.toJSTypeIncludingObject(commonTypes,objToInclude);
    constVars.add(name);
    if (externs.containsKey(name)) {
      externs.put(name,t);
    }
 else {
      locals.put(name,t);
    }
  }
  for (  Map.Entry<String,EnumType> entry : localEnums.entrySet()) {
    locals.put(entry.getKey(),entry.getValue().toJSType(commonTypes));
  }
  for (  String typedefName : localTypedefs.keySet()) {
    locals.put(typedefName,JSType.UNDEFINED);
  }
  for (  Map.Entry<String,RawNominalType> entry : localClassDefs.entrySet()) {
    String name=entry.getKey();
    if (!localFunDefs.containsKey(name)) {
      locals.put(name,entry.getValue().toJSType(commonTypes));
    }
  }
  copyOuterVarsTransitively(this);
  localNamespaces=ImmutableMap.of();
  localClassDefs=ImmutableMap.of();
  localTypedefs=ImmutableMap.of();
  localEnums=ImmutableMap.of();
  isFinalized=true;
}
