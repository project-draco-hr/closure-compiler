{
  if (info != null && info.hasType()) {
    boolean valid=false;
switch (n.getToken()) {
case FUNCTION:
      valid=NodeUtil.isFunctionDeclaration(n);
    break;
case NAME:
case DEFAULT_VALUE:
case ARRAY_PATTERN:
case OBJECT_PATTERN:
  Node parent=n.getParent();
switch (parent.getToken()) {
case GETTER_DEF:
case SETTER_DEF:
case CATCH:
case FUNCTION:
case VAR:
case LET:
case CONST:
case PARAM_LIST:
  valid=true;
break;
default :
break;
}
break;
case CAST:
case VAR:
case LET:
case CONST:
case EXPORT:
case STRING_KEY:
case GETTER_DEF:
case SETTER_DEF:
valid=true;
break;
case ASSIGN:
{
Node lvalue=n.getFirstChild();
valid=n.getParent().isExprResult() && (lvalue.isGetProp() || lvalue.isGetElem() || lvalue.matchesQualifiedName("exports"));
break;
}
case GETPROP:
valid=n.getParent().isExprResult() && n.isQualifiedName();
break;
case CALL:
valid=info.isDefine();
break;
default :
break;
}
if (!valid) {
reportMisplaced(n,"type","Type annotations are not allowed here. " + "Are you missing parentheses?");
}
}
}
