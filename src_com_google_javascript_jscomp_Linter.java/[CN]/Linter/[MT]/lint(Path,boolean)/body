{
  SourceFile file=SourceFile.fromFile(path.toString());
  Compiler compiler=new Compiler(System.out);
  CompilerOptions options=new CompilerOptions();
  options.setLanguage(LanguageMode.ECMASCRIPT8);
  options.setSkipTranspilationAndCrash(true);
  options.setParseJsDocDocumentation(INCLUDE_DESCRIPTIONS_WITH_WHITESPACE);
  options.setCodingConvention(new GoogleCodingConvention());
  options.setWarningLevel(DiagnosticGroups.CHECK_TYPES,CheckLevel.WARNING);
  options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES,CheckLevel.WARNING);
  options.setWarningLevel(DiagnosticGroups.LINT_CHECKS,CheckLevel.WARNING);
  options.setWarningLevel(DiagnosticGroups.STRICT_MISSING_REQUIRE,CheckLevel.WARNING);
  options.setWarningLevel(DiagnosticGroups.EXTRA_REQUIRE,CheckLevel.WARNING);
  options.setWarningLevel(DiagnosticGroups.USE_OF_GOOG_BASE,CheckLevel.WARNING);
  options.setSummaryDetailLevel(0);
  compiler.setPassConfig(new LintPassConfig(options));
  compiler.disableThreads();
  SourceFile externs=SourceFile.fromCode("<Linter externs>","");
  compiler.compile(ImmutableList.<SourceFile>of(externs),ImmutableList.of(file),options);
  if (fix) {
    List<SuggestedFix> fixes=new ArrayList<>();
    for (    JSError warning : concat(compiler.getErrors(),compiler.getWarnings(),JSError.class)) {
      SuggestedFix suggestedFix=ErrorToFixMapper.getFixForJsError(warning,compiler);
      if (suggestedFix != null) {
        fixes.add(suggestedFix);
      }
    }
    ApplySuggestedFixes.applySuggestedFixesToFiles(fixes);
  }
}
