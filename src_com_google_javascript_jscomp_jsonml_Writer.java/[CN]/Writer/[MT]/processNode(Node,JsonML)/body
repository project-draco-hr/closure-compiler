{
switch (node.getType()) {
case Token.RETURN:
    processReturn(node,currentParent);
  break;
case Token.BITOR:
processBinaryExpr(node,currentParent,"|");
break;
case Token.BITXOR:
processBinaryExpr(node,currentParent,"^");
break;
case Token.BITAND:
processBinaryExpr(node,currentParent,"&");
break;
case Token.EQ:
processBinaryExpr(node,currentParent,"==");
break;
case Token.NE:
processBinaryExpr(node,currentParent,"!=");
break;
case Token.LT:
processBinaryExpr(node,currentParent,"<");
break;
case Token.LE:
processBinaryExpr(node,currentParent,"<=");
break;
case Token.GT:
processBinaryExpr(node,currentParent,">");
break;
case Token.GE:
processBinaryExpr(node,currentParent,">=");
break;
case Token.LSH:
processBinaryExpr(node,currentParent,"<<");
break;
case Token.RSH:
processBinaryExpr(node,currentParent,">>");
break;
case Token.URSH:
processBinaryExpr(node,currentParent,">>>");
break;
case Token.ADD:
processBinaryExpr(node,currentParent,"+");
break;
case Token.SUB:
processBinaryExpr(node,currentParent,"-");
break;
case Token.MUL:
processBinaryExpr(node,currentParent,"*");
break;
case Token.DIV:
processBinaryExpr(node,currentParent,"/");
break;
case Token.MOD:
processBinaryExpr(node,currentParent,"%");
break;
case Token.NOT:
processUnaryExpr(node,currentParent,"!");
break;
case Token.BITNOT:
processUnaryExpr(node,currentParent,"~");
break;
case Token.POS:
processUnaryExpr(node,currentParent,"+");
break;
case Token.NEG:
processUnaryExpr(node,currentParent,"-");
break;
case Token.NEW:
processNew(node,currentParent,TagType.NewExpr);
break;
case Token.DELPROP:
processOneArgExpr(node,currentParent,TagType.DeleteExpr);
break;
case Token.TYPEOF:
processOneArgExpr(node,currentParent,TagType.TypeofExpr);
break;
case Token.GETPROP:
processMemberExpr(node,currentParent,".");
break;
case Token.GETELEM:
processMemberExpr(node,currentParent,"[]");
break;
case Token.CALL:
processCall(node,currentParent);
break;
case Token.NAME:
processName(node,currentParent);
break;
case Token.NUMBER:
case Token.STRING:
case Token.NULL:
case Token.FALSE:
case Token.TRUE:
processLiteral(node,currentParent);
break;
case Token.THIS:
processThis(node,currentParent);
break;
case Token.SHEQ:
processBinaryExpr(node,currentParent,"===");
break;
case Token.SHNE:
processBinaryExpr(node,currentParent,"!==");
break;
case Token.REGEXP:
processRegExp(node,currentParent);
break;
case Token.THROW:
processThrow(node,currentParent);
break;
case Token.IN:
processBinaryExpr(node,currentParent,"in");
break;
case Token.INSTANCEOF:
processBinaryExpr(node,currentParent,"instanceof");
break;
case Token.ARRAYLIT:
processArrayLiteral(node,currentParent);
break;
case Token.OBJECTLIT:
processObjectLiteral(node,currentParent);
break;
case Token.TRY:
processTry(node,currentParent);
break;
case Token.COMMA:
processBinaryExpr(node,currentParent,",");
break;
case Token.ASSIGN:
processAssignExpr(node,currentParent,"=");
break;
case Token.ASSIGN_BITOR:
processAssignExpr(node,currentParent,"|=");
break;
case Token.ASSIGN_BITXOR:
processAssignExpr(node,currentParent,"^=");
break;
case Token.ASSIGN_BITAND:
processAssignExpr(node,currentParent,"&=");
break;
case Token.ASSIGN_LSH:
processAssignExpr(node,currentParent,"<<=");
break;
case Token.ASSIGN_RSH:
processAssignExpr(node,currentParent,">>=");
break;
case Token.ASSIGN_URSH:
processAssignExpr(node,currentParent,">>>=");
break;
case Token.ASSIGN_ADD:
processAssignExpr(node,currentParent,"+=");
break;
case Token.ASSIGN_SUB:
processAssignExpr(node,currentParent,"-=");
break;
case Token.ASSIGN_MUL:
processAssignExpr(node,currentParent,"*=");
break;
case Token.ASSIGN_DIV:
processAssignExpr(node,currentParent,"/=");
break;
case Token.ASSIGN_MOD:
processAssignExpr(node,currentParent,"%=");
break;
case Token.HOOK:
processHook(node,currentParent);
break;
case Token.OR:
processLogicalExpr(node,currentParent,"||");
break;
case Token.AND:
processLogicalExpr(node,currentParent,"&&");
break;
case Token.INC:
processIncrDecrExpr(node,currentParent,"++");
break;
case Token.DEC:
processIncrDecrExpr(node,currentParent,"--");
break;
case Token.FUNCTION:
processFunction(node,currentParent);
break;
case Token.IF:
processIf(node,currentParent);
break;
case Token.SWITCH:
processSwitch(node,currentParent);
break;
case Token.CASE:
processCase(node,currentParent,TagType.Case);
break;
case Token.DEFAULT:
processCase(node,currentParent,TagType.DefaultCase);
break;
case Token.WHILE:
processLoop(node,currentParent,TagType.WhileStmt);
break;
case Token.DO:
processLoop(node,currentParent,TagType.DoWhileStmt);
break;
case Token.FOR:
processForLoop(node,currentParent);
break;
case Token.BREAK:
processJmp(node,currentParent,TagType.BreakStmt);
break;
case Token.CONTINUE:
processJmp(node,currentParent,TagType.ContinueStmt);
break;
case Token.VAR:
processVar(node,currentParent);
break;
case Token.WITH:
processWith(node,currentParent);
break;
case Token.CATCH:
processCatch(node,currentParent);
break;
case Token.VOID:
processUnaryExpr(node,currentParent,"void");
break;
case Token.EMPTY:
processEmpty(node,currentParent);
break;
case Token.BLOCK:
processBlock(node,currentParent);
break;
case Token.LABEL:
processLabel(node,currentParent);
break;
case Token.EXPR_RESULT:
processExprResult(node,currentParent);
break;
case Token.SCRIPT:
processScript(node,currentParent);
break;
}
}
