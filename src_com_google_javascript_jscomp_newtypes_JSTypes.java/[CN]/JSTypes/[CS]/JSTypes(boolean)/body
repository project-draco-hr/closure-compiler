{
  Map<String,JSType> types=JSType.createScalars(this);
  this.BOOLEAN=Preconditions.checkNotNull(types.get("BOOLEAN"));
  this.BOTTOM=Preconditions.checkNotNull(types.get("BOTTOM"));
  this.FALSE_TYPE=Preconditions.checkNotNull(types.get("FALSE_TYPE"));
  this.FALSY=Preconditions.checkNotNull(types.get("FALSY"));
  this.NULL=Preconditions.checkNotNull(types.get("NULL"));
  this.NUMBER=Preconditions.checkNotNull(types.get("NUMBER"));
  this.STRING=Preconditions.checkNotNull(types.get("STRING"));
  this.TOP=Preconditions.checkNotNull(types.get("TOP"));
  this.TOP_SCALAR=Preconditions.checkNotNull(types.get("TOP_SCALAR"));
  this.TRUE_TYPE=Preconditions.checkNotNull(types.get("TRUE_TYPE"));
  this.TRUTHY=Preconditions.checkNotNull(types.get("TRUTHY"));
  this.UNDEFINED=Preconditions.checkNotNull(types.get("UNDEFINED"));
  this.UNKNOWN=Preconditions.checkNotNull(types.get("UNKNOWN"));
  this.UNDEFINED_OR_BOOLEAN=Preconditions.checkNotNull(types.get("UNDEFINED_OR_BOOLEAN"));
  this.UNDEFINED_OR_NUMBER=Preconditions.checkNotNull(types.get("UNDEFINED_OR_NUMBER"));
  this.UNDEFINED_OR_STRING=Preconditions.checkNotNull(types.get("UNDEFINED_OR_STRING"));
  this.NULL_OR_BOOLEAN=Preconditions.checkNotNull(types.get("NULL_OR_BOOLEAN"));
  this.NULL_OR_NUMBER=Preconditions.checkNotNull(types.get("NULL_OR_NUMBER"));
  this.NULL_OR_STRING=Preconditions.checkNotNull(types.get("NULL_OR_STRING"));
  this.NULL_OR_UNDEFINED=Preconditions.checkNotNull(types.get("NULL_OR_UNDEFINED"));
  this.NUMBER_OR_STRING=Preconditions.checkNotNull(types.get("NUMBER_OR_STRING"));
  Map<String,FunctionType> functions=FunctionType.createInitialFunctionTypes(this);
  this.QMARK_FUNCTION=Preconditions.checkNotNull(functions.get("QMARK_FUNCTION"));
  this.BOTTOM_FUNCTION=Preconditions.checkNotNull(functions.get("BOTTOM_FUNCTION"));
  this.TOP_FUNCTION=Preconditions.checkNotNull(functions.get("TOP_FUNCTION"));
  this.LOOSE_TOP_FUNCTION=Preconditions.checkNotNull(functions.get("LOOSE_TOP_FUNCTION"));
  this.BOTTOM_PROPERTY_MAP=PersistentMap.of("_",Property.make(this.BOTTOM,this.BOTTOM));
  Map<String,ObjectType> objects=ObjectType.createInitialObjectTypes(this);
  this.TOP_OBJECTTYPE=Preconditions.checkNotNull(objects.get("TOP_OBJECTTYPE"));
  this.TOP_OBJECT=JSType.fromObjectType(this.TOP_OBJECTTYPE);
  this.TOP_STRUCT=JSType.fromObjectType(Preconditions.checkNotNull(objects.get("TOP_STRUCT")));
  this.TOP_DICT=JSType.fromObjectType(Preconditions.checkNotNull(objects.get("TOP_DICT")));
  this.BOTTOM_OBJECT=Preconditions.checkNotNull(objects.get("BOTTOM_OBJECT"));
  JSType.initObjects(this);
  this.allowMethodsAsFunctions=inCompatibilityMode;
  this.MAP_TO_UNKNOWN=new Map<String,JSType>(){
    @Override public void clear(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean containsKey(    Object k){
      return true;
    }
    @Override public boolean containsValue(    Object v){
      return v == JSType.UNKNOWN;
    }
    @Override public Set<Map.Entry<String,JSType>> entrySet(){
      throw new UnsupportedOperationException();
    }
    @Override public JSType get(    Object k){
      return JSType.UNKNOWN;
    }
    @Override public boolean isEmpty(){
      return false;
    }
    @Override public Set<String> keySet(){
      throw new UnsupportedOperationException();
    }
    @Override public JSType put(    String k,    JSType v){
      throw new UnsupportedOperationException();
    }
    @Override public void putAll(    Map<? extends String,? extends JSType> m){
      throw new UnsupportedOperationException();
    }
    @Override public JSType remove(    Object k){
      throw new UnsupportedOperationException();
    }
    @Override public int size(){
      throw new UnsupportedOperationException();
    }
    @Override public Collection<JSType> values(){
      return ImmutableSet.of(JSType.UNKNOWN);
    }
    @Override public int hashCode(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean equals(    Object o){
      return o == this;
    }
  }
;
}
