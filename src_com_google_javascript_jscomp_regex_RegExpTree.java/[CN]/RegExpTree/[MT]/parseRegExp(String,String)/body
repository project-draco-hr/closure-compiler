{
  /** 
 * A recursive descent parser that closes over pattern and flags above. 
 */
class Parser {
    /** 
 * The number of characters in pattern consumed. 
 */
    int pos;
    /** 
 * The number of capturing groups seen so far. 
 */
    int numCapturingGroups=0;
    /** 
 * The length of pattern. 
 */
    final int limit=pattern.length();
    RegExpTree parseTopLevel(){
      this.pos=0;
      RegExpTree out=parse();
      if (pos < limit) {
        throw new IllegalArgumentException(pattern.substring(pos));
      }
      return out;
    }
    RegExpTree parse(){
      ImmutableList.Builder<RegExpTree> alternatives=null;
      RegExpTree preceder=null;
      topLoop:       while (pos < limit) {
        char ch=pattern.charAt(pos);
        RegExpTree atom;
switch (ch) {
case '[':
          atom=parseCharset();
        break;
case '(':
      atom=parseParenthetical();
    break;
case ')':
  break topLoop;
case '\\':
atom=parseEscape();
break;
case '^':
case '$':
atom=new Anchor(ch);
++pos;
break;
case '.':
atom=DOT_CHARSET;
++pos;
break;
case '|':
atom=Empty.INSTANCE;
break;
default :
int start=pos;
int end=pos + 1;
charsLoop: while (end < limit) {
switch (pattern.charAt(end)) {
case '[':
case '(':
case ')':
case '\\':
case '^':
case '$':
case '|':
case '.':
case '*':
case '+':
case '?':
case '{':
break charsLoop;
default :
if (end + 1 >= limit || !isRepetitionStart(pattern.charAt(end + 1))) {
++end;
}
 else {
break charsLoop;
}
}
}
atom=new Text(pattern.substring(start,end));
pos=end;
break;
}
if (pos < limit && isRepetitionStart(pattern.charAt(pos))) {
atom=parseRepetition(atom);
}
if (preceder == null) {
preceder=atom;
}
 else {
preceder=new Concatenation(preceder,atom);
}
if (pos < limit && pattern.charAt(pos) == '|') {
if (alternatives == null) {
alternatives=ImmutableList.builder();
}
alternatives.add(preceder);
preceder=null;
++pos;
}
}
if (preceder == null) {
preceder=Empty.INSTANCE;
}
if (alternatives != null) {
alternatives.add(preceder);
return new Alternation(alternatives.build());
}
 else {
return preceder;
}
}
/** 
 * Handles capturing groups {@code (...)},
 * non-capturing groups {@code (?:...)}, and lookahead assertions{@code (?=...)}.
 */
private RegExpTree parseParenthetical(){
Preconditions.checkState(pattern.charAt(pos) == '(');
int start=pos;
++pos;
boolean capturing=true;
int type=0;
if (pos < limit && pattern.charAt(pos) == '?') {
if (pos + 1 < limit) {
capturing=false;
char ch=pattern.charAt(pos + 1);
switch (ch) {
case ':':
pos+=2;
break;
case '!':
case '=':
pos+=2;
type=ch;
break;
default :
throw new IllegalArgumentException("Malformed parenthetical: " + pattern.substring(start));
}
}
}
RegExpTree body=parse();
if (pos < limit && pattern.charAt(pos) == ')') {
++pos;
}
 else {
throw new IllegalArgumentException("Unclosed parenthetical group: " + pattern.substring(start));
}
if (capturing) {
++numCapturingGroups;
return new CapturingGroup(body);
}
 else if (type != 0) {
return new LookaheadAssertion(body,type == '=');
}
 else {
return body;
}
}
/** 
 * Parses a square bracketed character set.
 * Standalone character groups (@code /\d/} are handled by{@link #parseEscape}.
 */
private RegExpTree parseCharset(){
Preconditions.checkState(pattern.charAt(pos) == '[');
++pos;
boolean isCaseInsensitive=flags.indexOf('i') >= 0;
boolean inverse=pos < limit && pattern.charAt(pos) == '^';
if (inverse) {
++pos;
}
CharRanges ranges=CharRanges.EMPTY;
CharRanges ieExplicits=CharRanges.EMPTY;
while (pos < limit && pattern.charAt(pos) != ']') {
char ch=pattern.charAt(pos);
char start;
if (ch == '\\') {
++pos;
char possibleGroupName=pattern.charAt(pos);
CharRanges group=NAMED_CHAR_GROUPS.get(possibleGroupName);
if (group != null) {
++pos;
ranges=ranges.union(group);
continue;
}
start=parseEscapeChar();
}
 else {
start=ch;
++pos;
}
char end=start;
if (pos + 1 < limit && pattern.charAt(pos) == '-' && pattern.charAt(pos + 1) != ']') {
++pos;
ch=pattern.charAt(pos);
if (ch == '\\') {
++pos;
end=parseEscapeChar();
}
 else {
end=ch;
++pos;
}
}
CharRanges range=CharRanges.inclusive(start,end);
ranges=ranges.union(range);
if (IE_SPEC_ERRORS.contains(start) && IE_SPEC_ERRORS.contains(end)) {
ieExplicits=ieExplicits.union(range.intersection(IE_SPEC_ERRORS));
}
if (isCaseInsensitive) {
ranges=CaseCanonicalize.expandToAllMatched(ranges);
}
}
++pos;
if (inverse) {
ranges=CharRanges.ALL_CODE_UNITS.difference(ranges);
}
return new Charset(ranges,ieExplicits);
}
/** 
 * Parses an escape to a codepoint.
 * Some of the characters parsed here have special meanings in various
 * contexts, so contexts must filter those instead.
 * E.g. '\b' means a different thing inside a charset than without.
 */
private char parseEscapeChar(){
char ch=pattern.charAt(pos++);
switch (ch) {
case 'b':
return '\b';
case 'f':
return '\f';
case 'n':
return '\n';
case 'r':
return '\r';
case 't':
return '\t';
case 'u':
return parseHex(4);
case 'v':
return '\u000b';
case 'x':
return parseHex(2);
default :
if ('0' <= ch && ch <= '7') {
char codeUnit=(char)(ch - '0');
int octLimit=Math.min(limit,pos + (ch <= '3' ? 2 : 1) + (ch == '0' ? 1 : 0));
while (pos < octLimit) {
ch=pattern.charAt(pos);
if ('0' <= ch && ch <= '7') {
codeUnit=(char)((codeUnit << 3) + (ch - '0'));
++pos;
}
 else {
break;
}
}
return codeUnit;
}
return ch;
}
}
/** 
 * Parses an escape that appears outside a charset.
 */
private RegExpTree parseEscape(){
Preconditions.checkState(pattern.charAt(pos) == '\\');
++pos;
char ch=pattern.charAt(pos);
if (ch == 'b' || ch == 'B') {
++pos;
return new WordBoundary(ch);
}
 else if ('1' <= ch && ch <= '9') {
++pos;
int possibleGroupIndex=ch - '0';
if (numCapturingGroups >= possibleGroupIndex) {
if (pos < limit) {
char next=pattern.charAt(pos);
if ('0' <= next && next <= '9') {
int twoDigitGroupIndex=possibleGroupIndex * 10 + (next - '0');
if (numCapturingGroups >= twoDigitGroupIndex) {
++pos;
possibleGroupIndex=twoDigitGroupIndex;
}
}
}
return new BackReference(possibleGroupIndex);
}
 else {
return new Text(Character.toString(possibleGroupIndex <= 7 ? (char)possibleGroupIndex : ch));
}
}
 else {
CharRanges charGroup=NAMED_CHAR_GROUPS.get(ch);
if (charGroup != null) {
++pos;
return new Charset(charGroup,CharRanges.EMPTY);
}
return new Text("" + parseEscapeChar());
}
}
/** 
 * Parses n hex digits to a code-unit.
 */
private char parseHex(int n){
if (pos + n > limit) {
throw new IllegalArgumentException("Abbreviated hex escape " + pattern.substring(pos));
}
int result=0;
while (--n >= 0) {
char ch=pattern.charAt(pos);
int digit;
if ('0' <= ch && ch <= '9') {
digit=ch - '0';
}
 else if ('a' <= ch && ch <= 'f') {
digit=ch + (10 - 'a');
}
 else if ('A' <= ch && ch <= 'F') {
digit=ch + (10 - 'A');
}
 else {
throw new IllegalArgumentException(pattern.substring(pos));
}
++pos;
result=(result << 4) | digit;
}
return (char)result;
}
private boolean isRepetitionStart(char ch){
switch (ch) {
case '?':
case '*':
case '+':
case '{':
return true;
default :
return false;
}
}
/** 
 * Parse a repetition.  {@code x?} is treated as a repetition --
 * an optional production can be matched 0 or 1 time.
 */
private RegExpTree parseRepetition(RegExpTree body){
if (pos == limit) {
return body;
}
int min, max;
switch (pattern.charAt(pos)) {
case '+':
++pos;
min=1;
max=Integer.MAX_VALUE;
break;
case '*':
++pos;
min=0;
max=Integer.MAX_VALUE;
break;
case '?':
++pos;
min=0;
max=1;
break;
case '{':
++pos;
int start=pos;
int end=pattern.indexOf('}',start);
if (end < 0) {
pos=start - 1;
return body;
}
String counts=pattern.substring(start,end);
pos=end + 1;
int comma=counts.indexOf(',');
try {
min=Integer.parseInt(comma >= 0 ? counts.substring(0,comma) : counts);
max=comma >= 0 ? comma + 1 != counts.length() ? Integer.parseInt(counts.substring(comma + 1)) : Integer.MAX_VALUE : min;
}
 catch (NumberFormatException ex) {
min=max=-1;
}
if (min < 0 || min > max) {
pos=start - 1;
return body;
}
break;
default :
return body;
}
boolean greedy=true;
if (pos < limit && pattern.charAt(pos) == '?') {
greedy=false;
++pos;
}
return new Repetition(body,min,max,greedy);
}
}
return new Parser().parseTopLevel();
}
