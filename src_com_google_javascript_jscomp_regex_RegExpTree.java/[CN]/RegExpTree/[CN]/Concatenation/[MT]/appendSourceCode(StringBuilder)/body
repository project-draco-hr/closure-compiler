{
  boolean digitsMightBleed=false;
  for (  RegExpTree element : elements) {
    boolean parenthesize=false;
    if (element instanceof Alternation || element instanceof Concatenation) {
      parenthesize=true;
    }
 else {
      digitsMightBleed=element instanceof Text;
      if (digitsMightBleed) {
        Text text=(Text)element;
        if (text.text.length() != 0) {
          char first=text.text.charAt(0);
          parenthesize='0' <= first && first <= '9';
        }
      }
    }
    if (parenthesize) {
      sb.append("(?:");
      element.appendSourceCode(sb);
      sb.append(')');
    }
 else {
      element.appendSourceCode(sb);
    }
    digitsMightBleed=element instanceof BackReference && ((BackReference)element).groupIndex < 10;
  }
}
