{
  int bodyStart=sb.length();
  appendBodySourceCode(sb);
  int bodyEnd=sb.length();
  int bodyLen=bodyEnd - bodyStart;
  int min=this.min;
  int max=this.max;
  if (min >= 2 && max == Integer.MAX_VALUE || max - min <= 1) {
    int expanded=min == max || max == Integer.MAX_VALUE ? min - 1 : min;
    int expandedMin=min - expanded;
    int expandedMax=max == Integer.MAX_VALUE ? max : max - expanded;
    int suffixLen=suffixLen(min,max);
    int expandedSuffixLen=suffixLen(expandedMin,expandedMax);
    if (bodyLen * expanded + expandedSuffixLen < suffixLen && !body.hasCapturingGroup()) {
      while (--expanded >= 0) {
        sb.append(sb,bodyStart,bodyEnd);
      }
      min=expandedMin;
      max=expandedMax;
    }
  }
  if (max == Integer.MAX_VALUE) {
switch (min) {
case 0:
      sb.append('*');
    break;
case 1:
  sb.append('+');
break;
default :
sb.append('{').append(min).append(",}");
}
}
 else if (min == 0 && max == 1) {
sb.append('?');
}
 else if (min == max) {
if (min != 1) {
sb.append('{').append(min).append('}');
}
}
 else {
sb.append('{').append(min).append(',').append(max).append('}');
}
if (!greedy) {
sb.append('?');
}
}
