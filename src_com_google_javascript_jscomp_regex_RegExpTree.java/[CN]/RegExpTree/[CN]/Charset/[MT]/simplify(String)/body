{
  if (ranges.isEmpty()) {
    return NEVER_MATCHES;
  }
  CharRanges best=ranges;
  if (flags.indexOf('i') >= 0) {
    Set<CharRanges> options=new LinkedHashSet<>();
    options.add(CaseCanonicalize.expandToAllMatched(ranges));
    options.add(CaseCanonicalize.reduceToMinimum(ranges));
    CharRanges lcaseLetters=ranges.intersection(LCASE_LETTERS);
    CharRanges ucaseLetters=ranges.intersection(UCASE_LETTERS);
    CharRanges lcaseLettersToUpper=lcaseLetters.shift(-32);
    CharRanges ucaseLettersToLower=ucaseLetters.shift(32);
    options.add(ranges.union(ucaseLettersToLower));
    options.add(ranges.union(lcaseLettersToUpper));
    options.add(ranges.union(lcaseLettersToUpper).union(ucaseLettersToLower));
    options.add(ranges.union(ucaseLettersToLower).difference(ucaseLetters));
    options.add(ranges.union(lcaseLettersToUpper).difference(lcaseLetters));
    int bestComplexity=complexityWordFolded(ranges);
    for (    CharRanges option : options) {
      int complexity=complexityWordFolded(option);
      if (complexity < bestComplexity) {
        bestComplexity=complexity;
        best=option;
      }
    }
  }
  if (best.getNumRanges() == 1 && best.end(0) - best.start(0) == 1) {
    return new Text(Character.toString((char)best.start(0)));
  }
  if (!best.equals(ranges)) {
    return new Charset(best,ieExplicits);
  }
  return this;
}
