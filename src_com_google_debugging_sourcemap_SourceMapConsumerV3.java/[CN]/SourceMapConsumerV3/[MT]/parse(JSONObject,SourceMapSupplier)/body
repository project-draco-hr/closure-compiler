{
  try {
    int version=sourceMapRoot.getInt("version");
    if (version != 3) {
      throw new SourceMapParseException("Unknown version: " + version);
    }
    String file=sourceMapRoot.getString("file");
    if (file.isEmpty()) {
      throw new SourceMapParseException("File entry is missing or empty");
    }
    if (sourceMapRoot.has("sections")) {
      parseMetaMap(sourceMapRoot,sectionSupplier);
      return;
    }
    lineCount=sourceMapRoot.getInt("lineCount");
    String lineMap=sourceMapRoot.getString("mappings");
    sources=getJavaStringArray(sourceMapRoot.getJSONArray("sources"));
    names=getJavaStringArray(sourceMapRoot.getJSONArray("names"));
    lines=Lists.newArrayListWithCapacity(lineCount);
    if (sourceMapRoot.has("sourceRoot")) {
      sourceRoot=sourceMapRoot.getString("sourceRoot");
    }
    for (    Object objkey : Lists.newArrayList(sourceMapRoot.keys())) {
      String key=(String)objkey;
      if (key.startsWith("x_")) {
        extensions.put(key,sourceMapRoot.get(key));
      }
    }
    new MappingBuilder(lineMap).build();
  }
 catch (  JSONException ex) {
    throw new SourceMapParseException("JSON parse exception: " + ex);
  }
}
