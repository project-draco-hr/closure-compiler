{
  try {
    int version=sourceMapRoot.getInt("version");
    if (version != 3) {
      throw new SourceMapParseException("Unknown version: " + version);
    }
    if (sourceMapRoot.has("file") && sourceMapRoot.getString("file").isEmpty()) {
      throw new SourceMapParseException("File entry is empty");
    }
    if (sourceMapRoot.has("sections")) {
      parseMetaMap(sourceMapRoot,sectionSupplier);
      return;
    }
    lineCount=sourceMapRoot.has("lineCount") ? sourceMapRoot.getInt("lineCount") : -1;
    String lineMap=sourceMapRoot.getString("mappings");
    sources=getJavaStringArray(sourceMapRoot.getJSONArray("sources"));
    names=getJavaStringArray(sourceMapRoot.getJSONArray("names"));
    if (lineCount >= 0) {
      lines=Lists.newArrayListWithCapacity(lineCount);
    }
 else {
      lines=Lists.newArrayList();
    }
    if (sourceMapRoot.has("sourceRoot")) {
      sourceRoot=sourceMapRoot.getString("sourceRoot");
    }
    @SuppressWarnings("unchecked") Iterator<String> keys=sourceMapRoot.keys();
    for (    String key : Lists.newArrayList(keys)) {
      if (key.startsWith("x_")) {
        extensions.put(key,sourceMapRoot.get(key));
      }
    }
    new MappingBuilder(lineMap).build();
  }
 catch (  JSONException ex) {
    throw new SourceMapParseException("JSON parse exception: " + ex);
  }
}
