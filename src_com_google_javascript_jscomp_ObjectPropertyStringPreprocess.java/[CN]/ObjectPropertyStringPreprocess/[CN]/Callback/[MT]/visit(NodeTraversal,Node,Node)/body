{
  if (n.matchesQualifiedName(OBJECT_PROPERTY_STRING)) {
    Node newName=IR.name(NodeUtil.EXTERN_OBJECT_PROPERTY_STRING);
    newName.useSourceInfoIfMissingFrom(n);
    parent.replaceChild(n,newName);
    compiler.reportCodeChange();
    return;
  }
  if (!n.isNew()) {
    return;
  }
  Node objectName=n.getFirstChild();
  if (!objectName.matchesQualifiedName(NodeUtil.EXTERN_OBJECT_PROPERTY_STRING)) {
    return;
  }
  if (n.getChildCount() != 3) {
    compiler.report(t.makeError(n,INVALID_NUM_ARGUMENTS_ERROR,"" + n.getChildCount()));
    return;
  }
  Node firstArgument=objectName.getNext();
  if (!firstArgument.isQualifiedName()) {
    compiler.report(t.makeError(firstArgument,QUALIFIED_NAME_EXPECTED_ERROR,firstArgument.getToken().toString()));
    return;
  }
  Node secondArgument=firstArgument.getNext();
  if (!secondArgument.isString()) {
    compiler.report(t.makeError(secondArgument,STRING_LITERAL_EXPECTED_ERROR,secondArgument.getToken().toString()));
    return;
  }
  Node newFirstArgument=NodeUtil.newQName(compiler,compiler.getCodingConvention().getGlobalObject()).srcrefTree(firstArgument);
  Node newSecondArgument=NodeUtil.newQName(compiler,firstArgument.getQualifiedName() + "." + firstArgument.getNext().getString()).srcrefTree(secondArgument);
  n.replaceChild(firstArgument,newFirstArgument);
  n.replaceChild(secondArgument,newSecondArgument);
  compiler.reportCodeChange();
}
