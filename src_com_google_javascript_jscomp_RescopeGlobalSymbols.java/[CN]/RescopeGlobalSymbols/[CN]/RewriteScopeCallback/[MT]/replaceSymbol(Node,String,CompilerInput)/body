{
  Node parent=node.getParent();
  boolean isCrossModule=isCrossModuleName(name);
  if (!isCrossModule) {
    if (!parent.isVar()) {
      return;
    }
    boolean hasCrossModuleChildren=false;
    for (    Node c : parent.children()) {
      if (!c.isName() || isCrossModuleName(c.getString())) {
        hasCrossModuleChildren=true;
        break;
      }
    }
    if (!hasCrossModuleChildren) {
      return;
    }
  }
  Node replacement=isCrossModule ? IR.getprop(IR.name(globalSymbolNamespace).srcref(node),IR.string(name).srcref(node)) : IR.name(name).srcref(node);
  replacement.srcref(node);
  if (node.hasChildren()) {
    Node assign=IR.assign(replacement,node.removeFirstChild());
    parent.replaceChild(node,assign);
  }
 else   if (isCrossModule) {
    parent.replaceChild(node,replacement);
    if (parent.isCall() && !maybeReferencesThis.contains(name)) {
      parent.putBooleanProp(Node.FREE_CALL,false);
    }
  }
  if (!isCrossModule && parent.isVar()) {
    Node root=input.getAstRoot(compiler);
    Node preDeclaration=IR.name(name).srcref(node);
    if (root.getFirstChild().isVar() && root.getFirstChild() != parent) {
      root.getFirstChild().addChildToBack(preDeclaration);
    }
 else {
      root.addChildToFront(IR.var(preDeclaration).srcref(node));
    }
  }
  compiler.reportCodeChange();
}
