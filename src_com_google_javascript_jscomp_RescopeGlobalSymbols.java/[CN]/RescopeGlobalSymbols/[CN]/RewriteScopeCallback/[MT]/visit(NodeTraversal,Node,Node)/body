{
  if (!n.isName()) {
    return;
  }
  String name=n.getString();
  if (parent.isFunction() && name.length() == 0) {
    return;
  }
  Scope.Var var=t.getScope().getVar(name);
  if (var == null) {
    return;
  }
  if (var.isExtern()) {
    return;
  }
  if (!var.isExtern() && !var.isGlobal() && (name.equals(globalSymbolNamespace) || name.indexOf(globalSymbolNamespace + DISAMBIGUATION_SUFFIX) == 0)) {
    n.setString(name + DISAMBIGUATION_SUFFIX);
    compiler.reportCodeChange();
  }
  if (!var.isGlobal()) {
    return;
  }
  Node nameNode=var.getNameNode();
  if (nameNode != null && nameNode.getParent() != null && nameNode.getParent().isCatch()) {
    return;
  }
  replaceSymbol(n,name,t.getInput());
}
