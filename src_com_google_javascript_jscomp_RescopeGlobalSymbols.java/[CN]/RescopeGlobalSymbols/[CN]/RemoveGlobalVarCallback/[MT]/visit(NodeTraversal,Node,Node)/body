{
  if (!n.isVar()) {
    return;
  }
  List<Node> commas=new ArrayList<>();
  List<Node> interestingChildren=new ArrayList<>();
  boolean allName=true;
  for (  Node c : n.children()) {
    if (!c.isName()) {
      allName=false;
    }
    if (c.isAssign() || parent.isFor()) {
      interestingChildren.add(c);
    }
  }
  if (allName) {
    return;
  }
  for (  Node c : interestingChildren) {
    if (parent.isFor() && parent.getFirstChild() == n) {
      commas.add(c.cloneTree());
    }
 else {
      Node expr=IR.exprResult(c.cloneTree()).srcref(c);
      parent.addChildBefore(expr,n);
    }
  }
  if (!commas.isEmpty()) {
    Node comma=joinOnComma(commas,n);
    parent.addChildBefore(comma,n);
  }
  parent.removeChild(n);
  compiler.reportCodeChange();
}
