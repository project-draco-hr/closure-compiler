{
  Node root=compiler.parseTestCode("(function() {" + js + "});");
  assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()),0,compiler.getErrorCount());
  Node n=root.getFirstChild().getFirstChild();
  TypedScopeCreator scopeCreator=new TypedScopeCreator(compiler);
  Scope assumedScope=scopeCreator.createScope(n,scopeCreator.createScope(root,null));
  for (  Map.Entry<String,JSType> entry : assumptions.entrySet()) {
    assumedScope.declare(entry.getKey(),null,entry.getValue(),null);
  }
  ControlFlowAnalysis cfa=new ControlFlowAnalysis(compiler,false,false);
  cfa.process(null,n);
  ControlFlowGraph<Node> cfg=cfa.getCfg();
  ReverseAbstractInterpreter rai=compiler.getReverseAbstractInterpreter();
  TypeInference dfa=new TypeInference(compiler,cfg,rai,assumedScope,ASSERTION_FUNCTION_MAP);
  dfa.analyze();
  BranchedFlowState<FlowScope> rtnState=cfg.getImplicitReturn().getAnnotation();
  returnScope=rtnState.getIn();
}
