{
switch (val.getType()) {
case STRING:
case NUMBER:
case TRUE:
case FALSE:
    return true;
case AND:
case OR:
case ADD:
case BITAND:
case BITNOT:
case BITOR:
case BITXOR:
case DIV:
case EQ:
case EXPONENT:
case GE:
case GT:
case LE:
case LSH:
case LT:
case MOD:
case MUL:
case NE:
case RSH:
case SHEQ:
case SHNE:
case SUB:
case URSH:
  return isValidDefineValue(val.getFirstChild(),defines) && isValidDefineValue(val.getLastChild(),defines);
case HOOK:
return isValidDefineValue(val.getFirstChild(),defines) && isValidDefineValue(val.getSecondChild(),defines) && isValidDefineValue(val.getLastChild(),defines);
case NOT:
case NEG:
case POS:
return isValidDefineValue(val.getFirstChild(),defines);
case NAME:
case GETPROP:
if (val.isQualifiedName()) {
return defines.contains(val.getQualifiedName());
}
}
return false;
}
