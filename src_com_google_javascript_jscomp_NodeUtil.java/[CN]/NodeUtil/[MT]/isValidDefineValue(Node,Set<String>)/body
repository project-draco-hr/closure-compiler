{
switch (val.getType()) {
case Token.STRING:
case Token.NUMBER:
case Token.TRUE:
case Token.FALSE:
    return true;
case Token.AND:
case Token.OR:
case Token.ADD:
case Token.BITAND:
case Token.BITNOT:
case Token.BITOR:
case Token.BITXOR:
case Token.DIV:
case Token.EQ:
case Token.GE:
case Token.GT:
case Token.LE:
case Token.LSH:
case Token.LT:
case Token.MOD:
case Token.MUL:
case Token.NE:
case Token.RSH:
case Token.SHEQ:
case Token.SHNE:
case Token.SUB:
case Token.URSH:
  return isValidDefineValue(val.getFirstChild(),defines) && isValidDefineValue(val.getLastChild(),defines);
case Token.HOOK:
return isValidDefineValue(val.getFirstChild(),defines) && isValidDefineValue(val.getSecondChild(),defines) && isValidDefineValue(val.getLastChild(),defines);
case Token.NOT:
case Token.NEG:
case Token.POS:
return isValidDefineValue(val.getFirstChild(),defines);
case Token.NAME:
case Token.GETPROP:
if (val.isQualifiedName()) {
return defines.contains(val.getQualifiedName());
}
}
return false;
}
