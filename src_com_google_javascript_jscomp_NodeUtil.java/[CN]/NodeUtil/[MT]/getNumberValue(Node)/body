{
switch (n.getType()) {
case Token.TRUE:
    return 1.0;
case Token.FALSE:
case Token.NULL:
  return 0.0;
case Token.NUMBER:
return n.getDouble();
case Token.VOID:
return Double.NaN;
case Token.NAME:
String name=n.getString();
if (name.equals("undefined")) {
return Double.NaN;
}
if (name.equals("NaN")) {
return Double.NaN;
}
if (name.equals("Infinity")) {
return Double.POSITIVE_INFINITY;
}
return null;
case Token.NEG:
if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME && n.getFirstChild().getString().equals("Infinity")) {
return Double.NEGATIVE_INFINITY;
}
return null;
case Token.STRING:
String s=n.getString();
if (s.length() == 0) {
return 0.0;
}
if (s.length() > 2 && s.charAt(0) == '0' && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
try {
return Double.valueOf(Integer.parseInt(s.substring(2),16));
}
 catch (NumberFormatException e) {
return null;
}
}
try {
return Double.parseDouble(s);
}
 catch (NumberFormatException e) {
return null;
}
}
return null;
}
