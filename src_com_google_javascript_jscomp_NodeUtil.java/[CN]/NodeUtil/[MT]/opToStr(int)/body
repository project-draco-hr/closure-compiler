{
switch (operator) {
case Token.BITOR:
    return "|";
case Token.OR:
  return "||";
case Token.BITXOR:
return "^";
case Token.AND:
return "&&";
case Token.BITAND:
return "&";
case Token.SHEQ:
return "===";
case Token.EQ:
return "==";
case Token.NOT:
return "!";
case Token.NE:
return "!=";
case Token.SHNE:
return "!==";
case Token.LSH:
return "<<";
case Token.IN:
return "in";
case Token.LE:
return "<=";
case Token.LT:
return "<";
case Token.URSH:
return ">>>";
case Token.RSH:
return ">>";
case Token.GE:
return ">=";
case Token.GT:
return ">";
case Token.MUL:
return "*";
case Token.DIV:
return "/";
case Token.MOD:
return "%";
case Token.BITNOT:
return "~";
case Token.ADD:
case Token.POS:
return "+";
case Token.SUB:
case Token.NEG:
return "-";
case Token.ASSIGN:
return "=";
case Token.ASSIGN_BITOR:
return "|=";
case Token.ASSIGN_BITXOR:
return "^=";
case Token.ASSIGN_BITAND:
return "&=";
case Token.ASSIGN_LSH:
return "<<=";
case Token.ASSIGN_RSH:
return ">>=";
case Token.ASSIGN_URSH:
return ">>>=";
case Token.ASSIGN_ADD:
return "+=";
case Token.ASSIGN_SUB:
return "-=";
case Token.ASSIGN_MUL:
return "*=";
case Token.ASSIGN_DIV:
return "/=";
case Token.ASSIGN_MOD:
return "%=";
case Token.VOID:
return "void";
case Token.TYPEOF:
return "typeof";
case Token.INSTANCEOF:
return "instanceof";
default :
return null;
}
}
