{
  Node parent=propAccess.getParent();
switch (parent.getType()) {
case Token.CALL:
    return parent.getFirstChild() != propAccess && compiler.getCodingConvention().isPropertyTestFunction(parent);
case Token.IF:
case Token.WHILE:
case Token.DO:
case Token.FOR:
  return NodeUtil.getConditionExpression(parent) == propAccess;
case Token.INSTANCEOF:
case Token.TYPEOF:
case Token.AND:
case Token.OR:
return true;
case Token.NE:
case Token.SHNE:
{
Node other=parent.getFirstChild() == propAccess ? parent.getSecondChild() : parent.getFirstChild();
return isUndefined(other);
}
case Token.HOOK:
return parent.getFirstChild() == propAccess;
case Token.NOT:
return parent.getParent().isOr() && parent.getParent().getFirstChild() == parent;
case Token.CAST:
return isPropertyTest(compiler,parent);
}
return false;
}
