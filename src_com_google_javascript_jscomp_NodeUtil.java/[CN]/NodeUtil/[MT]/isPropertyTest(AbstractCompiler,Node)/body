{
  Node parent=propAccess.getParent();
switch (parent.getType()) {
case CALL:
    return parent.getFirstChild() != propAccess && compiler.getCodingConvention().isPropertyTestFunction(parent);
case IF:
case WHILE:
case DO:
case FOR:
  return NodeUtil.getConditionExpression(parent) == propAccess;
case INSTANCEOF:
case TYPEOF:
case AND:
case OR:
return true;
case NE:
case SHNE:
{
Node other=parent.getFirstChild() == propAccess ? parent.getSecondChild() : parent.getFirstChild();
return isUndefined(other);
}
case HOOK:
return parent.getFirstChild() == propAccess;
case NOT:
return parent.getParent().isOr() && parent.getParent().getFirstChild() == parent;
case CAST:
return isPropertyTest(compiler,parent);
}
return false;
}
