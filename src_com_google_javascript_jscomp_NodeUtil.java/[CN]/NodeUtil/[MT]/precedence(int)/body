{
switch (type) {
case Token.COMMA:
    return 0;
case Token.ASSIGN_BITOR:
case Token.ASSIGN_BITXOR:
case Token.ASSIGN_BITAND:
case Token.ASSIGN_LSH:
case Token.ASSIGN_RSH:
case Token.ASSIGN_URSH:
case Token.ASSIGN_ADD:
case Token.ASSIGN_SUB:
case Token.ASSIGN_MUL:
case Token.ASSIGN_DIV:
case Token.ASSIGN_MOD:
case Token.ASSIGN:
  return 1;
case Token.YIELD:
return 2;
case Token.HOOK:
return 3;
case Token.OR:
return 4;
case Token.AND:
return 5;
case Token.BITOR:
return 6;
case Token.BITXOR:
return 7;
case Token.BITAND:
return 8;
case Token.EQ:
case Token.NE:
case Token.SHEQ:
case Token.SHNE:
return 9;
case Token.LT:
case Token.GT:
case Token.LE:
case Token.GE:
case Token.INSTANCEOF:
case Token.IN:
return 10;
case Token.LSH:
case Token.RSH:
case Token.URSH:
return 11;
case Token.SUB:
case Token.ADD:
return 12;
case Token.MUL:
case Token.MOD:
case Token.DIV:
return 13;
case Token.INC:
case Token.DEC:
case Token.NEW:
case Token.DELPROP:
case Token.TYPEOF:
case Token.VOID:
case Token.NOT:
case Token.BITNOT:
case Token.POS:
case Token.NEG:
return 14;
case Token.CALL:
case Token.GETELEM:
case Token.GETPROP:
case Token.ARRAYLIT:
case Token.ARRAY_PATTERN:
case Token.DEFAULT_VALUE:
case Token.EMPTY:
case Token.FALSE:
case Token.FUNCTION:
case Token.CLASS:
case Token.NAME:
case Token.NULL:
case Token.NUMBER:
case Token.OBJECTLIT:
case Token.OBJECT_PATTERN:
case Token.REGEXP:
case Token.REST:
case Token.SPREAD:
case Token.STRING:
case Token.STRING_KEY:
case Token.THIS:
case Token.SUPER:
case Token.TRUE:
case Token.TAGGED_TEMPLATELIT:
case Token.TEMPLATELIT:
case Token.UNION_TYPE:
return 15;
case Token.FUNCTION_TYPE:
return 16;
case Token.ARRAY_TYPE:
case Token.PARAMETERIZED_TYPE:
return 17;
case Token.STRING_TYPE:
case Token.NUMBER_TYPE:
case Token.BOOLEAN_TYPE:
case Token.ANY_TYPE:
case Token.RECORD_TYPE:
case Token.NULLABLE_TYPE:
case Token.NAMED_TYPE:
case Token.UNDEFINED_TYPE:
case Token.GENERIC_TYPE:
return 18;
case Token.CAST:
return 19;
default :
throw new IllegalStateException("Unknown precedence for " + Token.name(type) + " (type "+ type+ ")");
}
}
