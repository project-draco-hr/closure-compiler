{
  inspect:   do {
    Node parent=n.getParent();
switch (parent.getType()) {
case IF:
case HOOK:
case AND:
case OR:
      if (parent.getFirstChild() != n) {
        return false;
      }
    continue inspect;
case FOR:
  if (NodeUtil.isForIn(parent)) {
    if (parent.getSecondChild() != n) {
      return false;
    }
  }
 else {
    if (parent.getFirstChild() != n) {
      return false;
    }
  }
continue inspect;
case WHILE:
case DO:
return false;
case TRY:
if (!hasFinally(parent) || parent.getLastChild() != n) {
return false;
}
continue inspect;
case CASE:
case DEFAULT_CASE:
return false;
case SCRIPT:
case FUNCTION:
break inspect;
}
}
 while ((n=n.getParent()) != null);
return true;
}
