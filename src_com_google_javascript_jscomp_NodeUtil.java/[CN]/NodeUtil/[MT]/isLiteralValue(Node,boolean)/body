{
switch (n.getType()) {
case Token.ARRAYLIT:
case Token.REGEXP:
    for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
      if (!isLiteralValue(child,includeFunctions)) {
        return false;
      }
    }
  return true;
case Token.OBJECTLIT:
for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
  if (!isLiteralValue(child.getFirstChild(),includeFunctions)) {
    return false;
  }
}
return true;
case Token.FUNCTION:
return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
default :
return isImmutableValue(n);
}
}
