{
switch (n.getToken()) {
case CAST:
    return isLiteralValue(n.getFirstChild(),includeFunctions);
case ARRAYLIT:
  for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
    if ((!child.isEmpty()) && !isLiteralValue(child,includeFunctions)) {
      return false;
    }
  }
return true;
case REGEXP:
for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
if (!isLiteralValue(child,includeFunctions)) {
  return false;
}
}
return true;
case OBJECTLIT:
for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
if (!isLiteralValue(child.getFirstChild(),includeFunctions)) {
return false;
}
}
return true;
case FUNCTION:
return includeFunctions && !NodeUtil.isFunctionDeclaration(n);
default :
return isImmutableValue(n);
}
}
