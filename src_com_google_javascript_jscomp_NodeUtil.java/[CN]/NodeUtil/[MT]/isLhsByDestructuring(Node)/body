{
  Node parent=n.getParent();
  if (parent.isDestructuringPattern() || (parent.isStringKey() && parent.getParent().isObjectPattern())) {
    if (n.isStringKey() && n.hasChildren()) {
      return false;
    }
    Node childNode=n;
    boolean isLastChildOfHighestPattern=false;
    for (    Node currAncestor : n.getAncestors()) {
      if (currAncestor.isForOf() || currAncestor.isFor() || currAncestor.isAssign()|| currAncestor.isDefaultValue()) {
        return currAncestor.getFirstChild() == childNode;
      }
      if (currAncestor.isDestructuringPattern()) {
        isLastChildOfHighestPattern=currAncestor.getLastChild() == childNode;
      }
      childNode=currAncestor;
    }
    return !isLastChildOfHighestPattern;
  }
  return false;
}
