{
switch (type) {
case COMMA:
    return 0;
case ASSIGN_BITOR:
case ASSIGN_BITXOR:
case ASSIGN_BITAND:
case ASSIGN_LSH:
case ASSIGN_RSH:
case ASSIGN_URSH:
case ASSIGN_ADD:
case ASSIGN_SUB:
case ASSIGN_MUL:
case ASSIGN_DIV:
case ASSIGN_MOD:
case ASSIGN:
  return 1;
case YIELD:
return 2;
case HOOK:
return 3;
case OR:
return 4;
case AND:
return 5;
case BITOR:
return 6;
case BITXOR:
return 7;
case BITAND:
return 8;
case EQ:
case NE:
case SHEQ:
case SHNE:
return 9;
case LT:
case GT:
case LE:
case GE:
case INSTANCEOF:
case IN:
return 10;
case LSH:
case RSH:
case URSH:
return 11;
case SUB:
case ADD:
return 12;
case MUL:
case MOD:
case DIV:
return 13;
case INC:
case DEC:
case NEW:
case DELPROP:
case TYPEOF:
case VOID:
case NOT:
case BITNOT:
case POS:
case NEG:
return 14;
case CALL:
case GETELEM:
case GETPROP:
case ARRAYLIT:
case ARRAY_PATTERN:
case DEFAULT_VALUE:
case DESTRUCTURING_LHS:
case EMPTY:
case FALSE:
case FUNCTION:
case CLASS:
case NAME:
case NULL:
case NUMBER:
case OBJECTLIT:
case OBJECT_PATTERN:
case REGEXP:
case REST:
case SPREAD:
case STRING:
case STRING_KEY:
case MEMBER_VARIABLE_DEF:
case INDEX_SIGNATURE:
case CALL_SIGNATURE:
case THIS:
case SUPER:
case TRUE:
case TAGGED_TEMPLATELIT:
case TEMPLATELIT:
case UNION_TYPE:
return 15;
case FUNCTION_TYPE:
return 16;
case ARRAY_TYPE:
case PARAMETERIZED_TYPE:
return 17;
case STRING_TYPE:
case NUMBER_TYPE:
case BOOLEAN_TYPE:
case ANY_TYPE:
case RECORD_TYPE:
case NULLABLE_TYPE:
case NAMED_TYPE:
case UNDEFINED_TYPE:
case GENERIC_TYPE:
return 18;
case CAST:
return 19;
default :
throw new IllegalStateException("Unknown precedence for " + Token.name(type) + " (type "+ type+ ")");
}
}
