{
switch (operator) {
case BITOR:
    return "|";
case OR:
  return "||";
case BITXOR:
return "^";
case AND:
return "&&";
case BITAND:
return "&";
case SHEQ:
return "===";
case EQ:
return "==";
case NOT:
return "!";
case NE:
return "!=";
case SHNE:
return "!==";
case LSH:
return "<<";
case IN:
return "in";
case LE:
return "<=";
case LT:
return "<";
case URSH:
return ">>>";
case RSH:
return ">>";
case GE:
return ">=";
case GT:
return ">";
case MUL:
return "*";
case DIV:
return "/";
case MOD:
return "%";
case EXPONENT:
return "**";
case BITNOT:
return "~";
case ADD:
case POS:
return "+";
case SUB:
case NEG:
return "-";
case ASSIGN:
return "=";
case ASSIGN_BITOR:
return "|=";
case ASSIGN_BITXOR:
return "^=";
case ASSIGN_BITAND:
return "&=";
case ASSIGN_LSH:
return "<<=";
case ASSIGN_RSH:
return ">>=";
case ASSIGN_URSH:
return ">>>=";
case ASSIGN_ADD:
return "+=";
case ASSIGN_SUB:
return "-=";
case ASSIGN_MUL:
return "*=";
case ASSIGN_EXPONENT:
return "**=";
case ASSIGN_DIV:
return "/=";
case ASSIGN_MOD:
return "%=";
case VOID:
return "void";
case TYPEOF:
return "typeof";
case INSTANCEOF:
return "instanceof";
default :
return null;
}
}
