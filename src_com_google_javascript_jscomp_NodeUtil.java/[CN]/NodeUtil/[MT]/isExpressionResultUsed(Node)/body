{
  Node parent=expr.getParent();
switch (parent.getType()) {
case Token.BLOCK:
case Token.EXPR_RESULT:
    return false;
case Token.CAST:
  return isExpressionResultUsed(parent);
case Token.HOOK:
case Token.AND:
case Token.OR:
return (expr == parent.getFirstChild()) || isExpressionResultUsed(parent);
case Token.COMMA:
Node grandparent=parent.getParent();
if (grandparent.isCall() && parent == grandparent.getFirstChild()) {
if (expr == parent.getFirstChild() && parent.getChildCount() == 2 && expr.getNext().isName() && "eval".equals(expr.getNext().getString())) {
return true;
}
}
return (expr == parent.getFirstChild()) ? false : isExpressionResultUsed(parent);
case Token.FOR:
if (!NodeUtil.isForIn(parent)) {
return (parent.getSecondChild() == expr);
}
break;
}
return true;
}
