{
switch (n.getToken()) {
case THROW:
case YIELD:
    return true;
case OBJECTLIT:
  if (checkForNewObjects) {
    return true;
  }
for (Node key=n.getFirstChild(); key != null; key=key.getNext()) {
  for (Node c=key.getFirstChild(); c != null; c=c.getNext()) {
    if (checkForStateChangeHelper(c,checkForNewObjects,compiler)) {
      return true;
    }
  }
}
return false;
case ARRAYLIT:
case REGEXP:
if (checkForNewObjects) {
return true;
}
break;
case VAR:
case NAME:
if (n.getFirstChild() != null) {
return true;
}
break;
case FUNCTION:
return checkForNewObjects || !isFunctionExpression(n);
case CLASS:
return checkForNewObjects || isClassDeclaration(n) || checkForStateChangeHelper(n.getSecondChild(),checkForNewObjects,compiler)|| checkForStateChangeHelper(n.getLastChild(),checkForNewObjects,compiler);
case CLASS_MEMBERS:
for (Node member=n.getFirstChild(); member != null; member=member.getNext()) {
if (member.isComputedProp() && checkForStateChangeHelper(member.getFirstChild(),checkForNewObjects,compiler)) {
return true;
}
}
return false;
case NEW:
if (checkForNewObjects) {
return true;
}
if (!constructorCallHasSideEffects(n)) {
break;
}
return true;
case CALL:
if (!functionCallHasSideEffects(n,compiler)) {
break;
}
return true;
case TAGGED_TEMPLATELIT:
return functionCallHasSideEffects(n,compiler);
case CAST:
case AND:
case BLOCK:
case EXPR_RESULT:
case HOOK:
case IF:
case IN:
case PARAM_LIST:
case NUMBER:
case OR:
case THIS:
case TRUE:
case FALSE:
case NULL:
case STRING:
case STRING_KEY:
case SWITCH:
case TEMPLATELIT_SUB:
case TRY:
case EMPTY:
case TEMPLATELIT:
break;
default :
if (isSimpleOperator(n)) {
break;
}
if (isAssignmentOp(n)) {
Node assignTarget=n.getFirstChild();
if (assignTarget.isName()) {
return true;
}
if (checkForStateChangeHelper(n.getFirstChild(),checkForNewObjects,compiler) || checkForStateChangeHelper(n.getLastChild(),checkForNewObjects,compiler)) {
return true;
}
if (isGet(assignTarget)) {
Node current=assignTarget.getFirstChild();
if (evaluatesToLocalValue(current)) {
return false;
}
while (isGet(current)) {
current=current.getFirstChild();
}
return !isLiteralValue(current,true);
}
 else {
return !isLiteralValue(assignTarget,true);
}
}
return true;
}
for (Node c=n.getFirstChild(); c != null; c=c.getNext()) {
if (checkForStateChangeHelper(c,checkForNewObjects,compiler)) {
return true;
}
}
return false;
}
