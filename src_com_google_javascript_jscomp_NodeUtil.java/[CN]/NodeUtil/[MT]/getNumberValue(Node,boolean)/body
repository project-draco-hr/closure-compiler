{
switch (n.getType()) {
case TRUE:
    return 1.0;
case FALSE:
case NULL:
  return 0.0;
case NUMBER:
return n.getDouble();
case VOID:
if (mayHaveSideEffects(n.getFirstChild())) {
return null;
}
 else {
return Double.NaN;
}
case NAME:
String name=n.getString();
if (name.equals("undefined")) {
return Double.NaN;
}
if (name.equals("NaN")) {
return Double.NaN;
}
if (name.equals("Infinity")) {
return Double.POSITIVE_INFINITY;
}
if (useType) {
JSType type=n.getJSType();
if (type != null) {
if (type.isVoidType()) {
return Double.NaN;
}
 else if (type.isNullType()) {
return 0.0;
}
}
}
return null;
case NEG:
if (n.getChildCount() == 1 && n.getFirstChild().isName() && n.getFirstChild().getString().equals("Infinity")) {
return Double.NEGATIVE_INFINITY;
}
return null;
case NOT:
TernaryValue child=getPureBooleanValue(n.getFirstChild());
if (child != TernaryValue.UNKNOWN) {
return child.toBoolean(true) ? 0.0 : 1.0;
}
break;
case STRING:
return getStringNumberValue(n.getString());
case ARRAYLIT:
case OBJECTLIT:
String value=getStringValue(n);
return value != null ? getStringNumberValue(value) : null;
}
return null;
}
