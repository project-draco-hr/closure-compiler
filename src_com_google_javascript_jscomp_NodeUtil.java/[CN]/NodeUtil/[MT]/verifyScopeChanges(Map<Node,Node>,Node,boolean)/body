{
  final Map<Node,Node> mtoc=map;
  final boolean checkUnchanged=verifyUnchangedNodes;
  Node clone=mtoc.get(main);
  if (main.getChangeTime() > clone.getChangeTime()) {
    Preconditions.checkState(!isEquivalentToExcludingFunctions(main,clone));
  }
 else   if (checkUnchanged) {
    Preconditions.checkState(isEquivalentToExcludingFunctions(main,clone));
  }
  visitPreOrder(main,new Visitor(){
    @Override public void visit(    Node n){
      if (n.isFunction() && mtoc.containsKey(n)) {
        Node clone=mtoc.get(n);
        if (n.getChangeTime() > clone.getChangeTime()) {
          Preconditions.checkState(!isEquivalentToExcludingFunctions(n,clone));
        }
 else         if (checkUnchanged) {
          Preconditions.checkState(isEquivalentToExcludingFunctions(n,clone));
        }
      }
    }
  }
,Predicates.<Node>alwaysTrue());
}
