{
switch (value.getToken()) {
case CAST:
    return evaluatesToLocalValue(value.getFirstChild(),locals);
case ASSIGN:
  return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(),locals));
case COMMA:
return evaluatesToLocalValue(value.getLastChild(),locals);
case AND:
case OR:
return evaluatesToLocalValue(value.getFirstChild(),locals) && evaluatesToLocalValue(value.getLastChild(),locals);
case HOOK:
return evaluatesToLocalValue(value.getSecondChild(),locals) && evaluatesToLocalValue(value.getLastChild(),locals);
case INC:
case DEC:
return true;
case THIS:
return locals.apply(value);
case NAME:
return isImmutableValue(value) || locals.apply(value);
case GETELEM:
case GETPROP:
return locals.apply(value);
case CALL:
return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
case NEW:
return newHasLocalResult(value) || locals.apply(value);
case FUNCTION:
case REGEXP:
case ARRAYLIT:
case OBJECTLIT:
return true;
case DELPROP:
case IN:
return true;
default :
if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
return true;
}
throw new IllegalStateException("Unexpected expression node" + value + "\n parent:"+ value.getParent());
}
}
