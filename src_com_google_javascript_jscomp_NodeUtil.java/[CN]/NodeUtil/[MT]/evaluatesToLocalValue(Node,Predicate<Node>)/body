{
switch (value.getType()) {
case Token.CAST:
    return evaluatesToLocalValue(value.getFirstChild(),locals);
case Token.ASSIGN:
  return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(),locals));
case Token.COMMA:
return evaluatesToLocalValue(value.getLastChild(),locals);
case Token.AND:
case Token.OR:
return evaluatesToLocalValue(value.getFirstChild(),locals) && evaluatesToLocalValue(value.getLastChild(),locals);
case Token.HOOK:
return evaluatesToLocalValue(value.getSecondChild(),locals) && evaluatesToLocalValue(value.getLastChild(),locals);
case Token.INC:
case Token.DEC:
if (value.getBooleanProp(Node.INCRDECR_PROP)) {
return evaluatesToLocalValue(value.getFirstChild(),locals);
}
 else {
return true;
}
case Token.THIS:
return locals.apply(value);
case Token.NAME:
return isImmutableValue(value) || locals.apply(value);
case Token.GETELEM:
case Token.GETPROP:
return locals.apply(value);
case Token.CALL:
return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);
case Token.NEW:
return newHasLocalResult(value) || locals.apply(value);
case Token.FUNCTION:
case Token.REGEXP:
case Token.ARRAYLIT:
case Token.OBJECTLIT:
return true;
case Token.DELPROP:
case Token.IN:
return true;
default :
if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {
return true;
}
throw new IllegalStateException("Unexpected expression node" + value + "\n parent:"+ value.getParent());
}
}
