{
switch (n.getType()) {
case CAST:
    return getKnownValueType(n.getFirstChild());
case ASSIGN:
case COMMA:
  return getKnownValueType(n.getLastChild());
case AND:
case OR:
return and(getKnownValueType(n.getFirstChild()),getKnownValueType(n.getLastChild()));
case HOOK:
return and(getKnownValueType(n.getSecondChild()),getKnownValueType(n.getLastChild()));
case ADD:
{
ValueType last=getKnownValueType(n.getLastChild());
if (last == ValueType.STRING) {
return ValueType.STRING;
}
ValueType first=getKnownValueType(n.getFirstChild());
if (first == ValueType.STRING) {
return ValueType.STRING;
}
if (first == ValueType.OBJECT || last == ValueType.OBJECT) {
return ValueType.UNDETERMINED;
}
if (!mayBeString(first) && !mayBeString(last)) {
return ValueType.NUMBER;
}
return ValueType.UNDETERMINED;
}
case ASSIGN_ADD:
{
ValueType last=getKnownValueType(n.getLastChild());
if (last == ValueType.STRING) {
return ValueType.STRING;
}
return ValueType.UNDETERMINED;
}
case NAME:
String name=n.getString();
if (name.equals("undefined")) {
return ValueType.VOID;
}
if (name.equals("NaN")) {
return ValueType.NUMBER;
}
if (name.equals("Infinity")) {
return ValueType.NUMBER;
}
return ValueType.UNDETERMINED;
case ASSIGN_BITOR:
case ASSIGN_BITXOR:
case ASSIGN_BITAND:
case ASSIGN_LSH:
case ASSIGN_RSH:
case ASSIGN_URSH:
case ASSIGN_SUB:
case ASSIGN_MUL:
case ASSIGN_DIV:
case ASSIGN_MOD:
case BITNOT:
case BITOR:
case BITXOR:
case BITAND:
case LSH:
case RSH:
case URSH:
case SUB:
case MUL:
case MOD:
case DIV:
case INC:
case DEC:
case POS:
case NEG:
case NUMBER:
return ValueType.NUMBER;
case TRUE:
case FALSE:
case EQ:
case NE:
case SHEQ:
case SHNE:
case LT:
case GT:
case LE:
case GE:
case IN:
case INSTANCEOF:
case NOT:
case DELPROP:
return ValueType.BOOLEAN;
case TYPEOF:
case STRING:
return ValueType.STRING;
case NULL:
return ValueType.NULL;
case VOID:
return ValueType.VOID;
case FUNCTION:
case NEW:
case ARRAYLIT:
case OBJECTLIT:
case REGEXP:
return ValueType.OBJECT;
default :
return ValueType.UNDETERMINED;
}
}
