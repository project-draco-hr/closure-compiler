{
  assertTransitiveDepsDeepestFirst(A);
  assertTransitiveDepsDeepestFirst(B,A);
  assertTransitiveDepsDeepestFirst(C,A);
  assertTransitiveDepsDeepestFirst(D,B,A);
  assertTransitiveDepsDeepestFirst(E,C,B,A);
  assertTransitiveDepsDeepestFirst(F,E,C,B,A);
}
