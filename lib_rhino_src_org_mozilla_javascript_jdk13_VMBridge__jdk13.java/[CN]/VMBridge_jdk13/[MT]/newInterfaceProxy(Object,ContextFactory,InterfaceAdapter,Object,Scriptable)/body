{
  Constructor<?> c=(Constructor<?>)proxyHelper;
  InvocationHandler handler=new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args){
      if (method.getDeclaringClass() == Object.class) {
        String methodName=method.getName();
        if (methodName.equals("equals")) {
          Object other=args[0];
          return Boolean.valueOf(proxy == other);
        }
        if (methodName.equals("hashCode")) {
          return Integer.valueOf(target.hashCode());
        }
        if (methodName.equals("toString")) {
          return "Proxy[" + target.toString() + "]";
        }
      }
      return adapter.invoke(cf,target,topScope,proxy,method,args);
    }
  }
;
  Object proxy;
  try {
    proxy=c.newInstance(handler);
  }
 catch (  InvocationTargetException ex) {
    throw Context.throwAsScriptRuntimeEx(ex);
  }
catch (  IllegalAccessException ex) {
    throw Kit.initCause(new IllegalStateException(),ex);
  }
catch (  InstantiationException ex) {
    throw Kit.initCause(new IllegalStateException(),ex);
  }
  return proxy;
}
