{
  CommandLineRunner runner=createCommandLineRunner(original);
  assertTrue(runner.shouldRunCompiler());
  Supplier<List<SourceFile>> inputsSupplier=null;
  Supplier<List<JSModule>> modulesSupplier=null;
  if (useModules == ModulePattern.NONE) {
    List<SourceFile> inputs=Lists.newArrayList();
    for (int i=0; i < original.length; i++) {
      inputs.add(SourceFile.fromCode(getFilename(i),original[i]));
    }
    inputsSupplier=Suppliers.ofInstance(inputs);
  }
 else   if (useModules == ModulePattern.STAR) {
    modulesSupplier=Suppliers.<List<JSModule>>ofInstance(Lists.<JSModule>newArrayList(CompilerTestCase.createModuleStar(original)));
  }
 else   if (useModules == ModulePattern.CHAIN) {
    modulesSupplier=Suppliers.<List<JSModule>>ofInstance(Lists.<JSModule>newArrayList(CompilerTestCase.createModuleChain(original)));
  }
 else {
    throw new IllegalArgumentException("Unknown module type: " + useModules);
  }
  runner.enableTestMode(Suppliers.<List<SourceFile>>ofInstance(externs),inputsSupplier,modulesSupplier,new Function<Integer,Boolean>(){
    @Override public Boolean apply(    Integer code){
      return exitCodes.add(code);
    }
  }
);
  runner.run();
  lastCompiler=runner.getCompiler();
  lastCommandLineRunner=runner;
  return lastCompiler;
}
