{
  args.add("--js_output_file");
  args.add("/path/to/out.js");
  for (int i=0; i < original.length; i++) {
    args.add("--js");
    args.add("/path/to/input" + i + ".js");
    if (useModules == ModulePattern.CHAIN) {
      args.add("--module");
      args.add("mod" + i + ":1"+ (i > 0 ? (":mod" + (i - 1)) : ""));
    }
 else     if (useModules == ModulePattern.STAR) {
      args.add("--module");
      args.add("mod" + i + ":1"+ (i > 0 ? ":mod0" : ""));
    }
  }
  String[] argStrings=args.toArray(new String[]{});
  CommandLineRunner runner=new CommandLineRunner(argStrings);
  Compiler compiler=runner.createCompiler();
  lastCommandLineRunner=runner;
  lastCompiler=compiler;
  CompilerOptions options=runner.createOptions();
  try {
    runner.setRunOptions(options);
  }
 catch (  AbstractCommandLineRunner.FlagUsageException e) {
    fail("Unexpected exception " + e);
  }
catch (  IOException e) {
    assert(false);
  }
  if (useModules != ModulePattern.NONE) {
    compiler.compile(externs,useModules == ModulePattern.STAR ? CompilerTestCase.createModuleStar(original) : CompilerTestCase.createModuleChain(original),options);
  }
 else {
    JSSourceFile[] inputs=new JSSourceFile[original.length];
    for (int i=0; i < original.length; i++) {
      inputs[i]=JSSourceFile.fromCode("input" + i,original[i]);
    }
    compiler.compile(externs,inputs,options);
  }
  return compiler;
}
