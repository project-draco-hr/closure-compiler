{
  JSType type=fnNode.getJSType();
  Preconditions.checkState(fnNode.isFunction() || type.isFunctionType());
  if (type == null || type.isUnknownType()) {
    return "";
  }
  FunctionType funType=type.toMaybeFunctionType();
  if (JSType.isEquivalent(type,(JSType)registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {
    return "/** @type {!Function} */\n";
  }
  StringBuilder sb=new StringBuilder("/**\n");
  Node paramNode=null;
  if (fnNode != null && fnNode.isFunction()) {
    paramNode=NodeUtil.getFunctionParameters(fnNode).getFirstChild();
  }
  int i=0;
  for (  Node n : funType.getParameters()) {
    sb.append(" * ");
    appendAnnotation(sb,"param",getParameterNodeJSDocType(n));
    sb.append(" ").append(paramNode == null ? "p" + i : paramNode.getString()).append("\n");
    if (paramNode != null) {
      paramNode=paramNode.getNext();
    }
 else {
      i++;
    }
  }
  JSType retType=funType.getReturnType();
  if (retType != null && !retType.isEmptyType() && !funType.isInterface() && !(funType.isConstructor() && retType.isVoidType())) {
    sb.append(" * ");
    appendAnnotation(sb,"return",retType.toNonNullAnnotationString());
    sb.append("\n");
  }
  if (funType.isConstructor() || funType.isInterface()) {
    FunctionType superConstructor=funType.getSuperClassConstructor();
    if (superConstructor != null) {
      ObjectType superInstance=funType.getSuperClassConstructor().getInstanceType();
      if (!superInstance.toString().equals("Object")) {
        sb.append(" * ");
        appendAnnotation(sb,"extends",superInstance.toAnnotationString());
        sb.append("\n");
      }
    }
    if (funType.isInterface()) {
      for (      ObjectType interfaceType : funType.getExtendedInterfaces()) {
        sb.append(" * ");
        appendAnnotation(sb,"extends",interfaceType.toAnnotationString());
        sb.append("\n");
      }
    }
    Set<String> interfaces=new TreeSet<>();
    for (    ObjectType interfaze : funType.getImplementedInterfaces()) {
      interfaces.add(interfaze.toAnnotationString());
    }
    for (    String interfaze : interfaces) {
      sb.append(" * ");
      appendAnnotation(sb,"implements",interfaze);
      sb.append("\n");
    }
    if (funType.isConstructor()) {
      sb.append(" * @constructor\n");
    }
 else     if (funType.isStructuralInterface()) {
      sb.append(" * @record\n");
    }
 else     if (funType.isInterface()) {
      sb.append(" * @interface\n");
    }
  }
  if (!funType.getTemplateTypeMap().getTemplateKeys().isEmpty()) {
    sb.append(" * @template ");
    Joiner.on(",").appendTo(sb,funType.getTemplateTypeMap().getTemplateKeys());
    sb.append("\n");
  }
  sb.append(" */\n");
  return sb.toString();
}
