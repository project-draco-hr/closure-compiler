{
  NodeTraversal.traverse(compiler,externs,new GetAliasableNames(aliasableGlobals));
  props.put("prototype",newSymbolForProperty("prototype"));
  NodeTraversal.traverse(compiler,root,new PropertyGatherer());
  for (  Symbol prop : props.values()) {
    if (prop.name.length() >= MIN_PROP_SIZE) {
      if (prop.accessorCount >= requiredUsage) {
        prop.aliasAccessor=true;
      }
      if (prop.mutatorCount >= requiredUsage) {
        prop.aliasMutator=true;
      }
    }
  }
  for (  Node propInfo : accessors) {
    replaceAccessor(propInfo);
  }
  for (  Node propInfo : mutators) {
    replaceMutator(propInfo);
  }
  for (  Symbol prop : props.values()) {
    if (prop.aliasAccessor) {
      addAccessorPropName(prop.name,getAddingRoot(prop.deepestModuleAccess));
    }
  }
  for (  Symbol prop : props.values()) {
    if (prop.aliasMutator) {
      addMutatorFunction(prop.name,getAddingRoot(prop.deepestModuleMutate));
    }
  }
}
