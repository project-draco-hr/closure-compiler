{
  Compiler compiler=new Compiler();
  List<SourceFile> files=Lists.newArrayList();
  for (int i=0; i < input.length; i++) {
    files.add(SourceFile.fromCode("file" + i,input[i]));
  }
  compiler.init(ImmutableList.<SourceFile>of(),files,new CompilerOptions());
  compiler.parse();
  Node original=compiler.getRoot();
  Node root=original.cloneTree();
  AstParallelizer parallelizer=AstParallelizer.createNewFileLevelAstParallelizer(root);
  List<Node> forest=parallelizer.split();
  assertThat(forest).hasSize(input.length);
  int i=0;
  for (  Node n : forest) {
    Node tree=compiler.parseTestCode(input[i++]);
    assertEquals(compiler.toSource(tree),compiler.toSource(n));
  }
  parallelizer.join();
  assertTrue(original.isEquivalentTo(root));
}
