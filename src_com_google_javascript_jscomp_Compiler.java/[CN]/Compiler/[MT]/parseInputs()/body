{
  boolean devMode=options.devMode != DevMode.OFF;
  externsRoot.detachChildren();
  jsRoot.detachChildren();
  if (options.tracer.isOn()) {
    tracker=new PerformanceTracker(jsRoot,options.tracer,this.outStream);
    addChangeHandler(tracker.getCodeChangeHandler());
  }
  Tracer tracer=newTracer(PARSING_PASS_NAME);
  beforePass(PARSING_PASS_NAME);
  try {
    for (    CompilerInput input : externs) {
      Node n=input.getAstRoot(this);
      if (hasErrors()) {
        return null;
      }
      externsRoot.addChildToBack(n);
    }
    if (options.lowerFromEs6()) {
      processEs6Modules();
    }
    if (options.transformAMDToCJSModules || options.processCommonJSModules) {
      processAMDAndCommonJSModules();
    }
    if (options.lowerFromEs6() || options.transformAMDToCJSModules || options.processCommonJSModules) {
      Map<String,CompilerInput> inputModuleIdentifiers=new HashMap<>();
      for (      CompilerInput input : inputs) {
        if (input.getKnownProvides().isEmpty()) {
          ModuleIdentifier modInfo=ModuleIdentifier.forFile(input.getSourceFile().getOriginalPath());
          inputModuleIdentifiers.put(modInfo.getClosureNamespace(),input);
        }
      }
      Map<String,CompilerInput> inputsToRewrite=new HashMap<>();
      for (      CompilerInput input : inputs) {
        for (        String require : input.getKnownRequires()) {
          if (inputModuleIdentifiers.containsKey(require) && !inputsToRewrite.containsKey(require)) {
            inputsToRewrite.put(require,inputModuleIdentifiers.get(require));
          }
        }
      }
      if (!inputsToRewrite.isEmpty()) {
        processEs6Modules(new ArrayList<>(inputsToRewrite.values()),true);
      }
    }
    orderInputs();
    if (hasErrors()) {
      return null;
    }
    for (    CompilerInput input : inputs) {
      Node n=input.getAstRoot(this);
      if (n == null) {
        continue;
      }
      if (devMode) {
        runSanityCheck();
        if (hasErrors()) {
          return null;
        }
      }
      if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null || options.isExternExportsEnabled() || options.externExportsPath != null || !options.replaceStringsFunctionDescriptions.isEmpty()) {
        SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF);
        NodeTraversal.traverseEs6(this,n,sia);
      }
      jsRoot.addChildToBack(n);
    }
    if (hasErrors()) {
      return null;
    }
    return externAndJsRoot;
  }
  finally {
    afterPass(PARSING_PASS_NAME);
    stopTracer(tracer,PARSING_PASS_NAME);
  }
}
