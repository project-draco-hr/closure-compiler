{
  boolean devMode=options_.devMode != DevMode.OFF;
  if (externsRoot != null) {
    externsRoot.detachChildren();
  }
  if (jsRoot != null) {
    jsRoot.detachChildren();
  }
  jsRoot=new Node(Token.BLOCK);
  jsRoot.setIsSyntheticBlock(true);
  if (options_.tracer.isOn()) {
    tracker=new PerformanceTracker(jsRoot,options_.tracer == TracerMode.ALL);
    addChangeHandler(tracker.getCodeChangeHandler());
  }
  Tracer tracer=newTracer("parseInputs");
  try {
    externsRoot=new Node(Token.BLOCK);
    externsRoot.setIsSyntheticBlock(true);
    for (    CompilerInput input : externs_) {
      Node n=input.getAstRoot(this);
      if (hasErrors()) {
        return null;
      }
      externsRoot.addChildToBack(n);
    }
    for (    CompilerInput input : inputs_) {
      Node n=input.getAstRoot(this);
      if (hasErrors()) {
        return null;
      }
      if (n == null) {
        continue;
      }
      if (devMode) {
        runSanityCheck();
        if (hasErrors()) {
          return null;
        }
      }
      if (options_.sourceMapOutputPath != null || options_.nameReferenceReportPath != null) {
        SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName());
        NodeTraversal.traverse(this,n,sia);
      }
      jsRoot.addChildToBack(n);
    }
    externAndJsRoot=new Node(Token.BLOCK,externsRoot,jsRoot);
    externAndJsRoot.setIsSyntheticBlock(true);
    return externAndJsRoot;
  }
  finally {
    stopTracer(tracer,"parseInputs");
  }
}
