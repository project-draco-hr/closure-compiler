{
  boolean devMode=options.devMode != DevMode.OFF;
  if (externsRoot != null) {
    externsRoot.detachChildren();
  }
  if (jsRoot != null) {
    jsRoot.detachChildren();
  }
  jsRoot=new Node(Token.BLOCK);
  jsRoot.setIsSyntheticBlock(true);
  if (options.tracer.isOn()) {
    tracker=new PerformanceTracker(jsRoot,options.tracer == TracerMode.ALL);
    addChangeHandler(tracker.getCodeChangeHandler());
  }
  Tracer tracer=newTracer("parseInputs");
  try {
    externsRoot=new Node(Token.BLOCK);
    externsRoot.setIsSyntheticBlock(true);
    for (    CompilerInput input : externs) {
      Node n=input.getAstRoot(this);
      if (hasErrors()) {
        return null;
      }
      externsRoot.addChildToBack(n);
    }
    List<CompilerInput> annotatedExterns=Lists.newArrayList();
    Iterator<CompilerInput> inputIterator=inputs.iterator();
    while (inputIterator.hasNext()) {
      CompilerInput input=inputIterator.next();
      Node n=input.getAstRoot(this);
      if (hasErrors()) {
        return null;
      }
      if (n == null) {
        continue;
      }
      if (n.getJSDocInfo() != null && n.getJSDocInfo().isExterns()) {
        externsRoot.addChildToBack(n);
        input.setIsExtern(true);
        inputIterator.remove();
        externs.add(input);
        continue;
      }
      if (devMode) {
        runSanityCheck();
        if (hasErrors()) {
          return null;
        }
      }
      if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {
        SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName());
        NodeTraversal.traverse(this,n,sia);
      }
      jsRoot.addChildToBack(n);
    }
    externAndJsRoot=new Node(Token.BLOCK,externsRoot,jsRoot);
    externAndJsRoot.setIsSyntheticBlock(true);
    return externAndJsRoot;
  }
  finally {
    stopTracer(tracer,"parseInputs");
  }
}
