{
  boolean devMode=options.devMode != DevMode.OFF;
  if (externsRoot != null) {
    externsRoot.detachChildren();
  }
  if (jsRoot != null) {
    jsRoot.detachChildren();
  }
  jsRoot=new Node(Token.BLOCK);
  jsRoot.setIsSyntheticBlock(true);
  externsRoot=new Node(Token.BLOCK);
  externsRoot.setIsSyntheticBlock(true);
  externAndJsRoot=new Node(Token.BLOCK,externsRoot,jsRoot);
  externAndJsRoot.setIsSyntheticBlock(true);
  if (options.tracer.isOn()) {
    tracker=new PerformanceTracker(jsRoot,options.tracer == TracerMode.ALL);
    addChangeHandler(tracker.getCodeChangeHandler());
  }
  Tracer tracer=newTracer("parseInputs");
  try {
    for (    CompilerInput input : externs) {
      Node n=input.getAstRoot(this);
      if (hasErrors()) {
        return null;
      }
      externsRoot.addChildToBack(n);
    }
    if (options.manageClosureDependencies) {
      for (      CompilerInput input : inputs) {
        input.setCompiler(this);
        for (        String provide : input.getProvides()) {
          getTypeRegistry().forwardDeclareType(provide);
        }
      }
      try {
        inputs=(moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph).manageDependencies(options.manageClosureDependenciesEntryPoints,inputs);
      }
 catch (      CircularDependencyException e) {
        report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR,e.getMessage()));
        return null;
      }
catch (      MissingProvideException e) {
        report(JSError.make(MISSING_ENTRY_ERROR,e.getMessage()));
        return null;
      }
    }
    boolean staleInputs=false;
    for (    CompilerInput input : inputs) {
      Node n=input.getAstRoot(this);
      if (hasErrors()) {
        return null;
      }
      if (n == null) {
        continue;
      }
      if (n.getJSDocInfo() != null) {
        JSDocInfo info=n.getJSDocInfo();
        if (info.isExterns()) {
          externsRoot.addChildToBack(n);
          input.setIsExtern(true);
          input.getModule().remove(input);
          externs.add(input);
          staleInputs=true;
        }
 else         if (info.isNoCompile()) {
          input.getModule().remove(input);
          staleInputs=true;
        }
      }
    }
    if (staleInputs) {
      fillEmptyModules(modules);
      rebuildInputsFromModules();
    }
    for (    CompilerInput input : inputs) {
      Node n=input.getAstRoot(this);
      if (n == null) {
        continue;
      }
      if (devMode) {
        runSanityCheck();
        if (hasErrors()) {
          return null;
        }
      }
      if (options.sourceMapOutputPath != null || options.nameReferenceReportPath != null) {
        SourceInformationAnnotator sia=new SourceInformationAnnotator(input.getName(),options.devMode != DevMode.OFF);
        NodeTraversal.traverse(this,n,sia);
      }
      jsRoot.addChildToBack(n);
    }
    return externAndJsRoot;
  }
  finally {
    stopTracer(tracer,"parseInputs");
  }
}
