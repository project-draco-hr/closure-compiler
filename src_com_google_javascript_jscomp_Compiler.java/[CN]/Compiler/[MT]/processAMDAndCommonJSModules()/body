{
  Map<String,JSModule> modulesByProvide=Maps.newLinkedHashMap();
  Map<CompilerInput,JSModule> modulesByInput=Maps.newLinkedHashMap();
  for (  CompilerInput input : inputs) {
    input.setCompiler(this);
    Node root=input.getAstRoot(this);
    if (root == null) {
      continue;
    }
    if (options.transformAMDToCJSModules) {
      new TransformAMDToCJSModule(this).process(null,root);
    }
    if (options.processCommonJSModules) {
      ProcessCommonJSModules cjs=new ProcessCommonJSModules(this,ES6ModuleLoader.createNaiveLoader(this,options.commonJSModulePathPrefix),true);
      cjs.process(null,root);
      JSModule m=new JSModule(cjs.inputToModuleName(input));
      m.addAndOverrideModule(input);
      for (      String provide : input.getProvides()) {
        modulesByProvide.put(provide,m);
      }
      modulesByInput.put(input,m);
    }
  }
  if (options.processCommonJSModules) {
    List<JSModule> modules=new ArrayList<>(modulesByProvide.values());
    if (!modules.isEmpty()) {
      this.modules=modules;
      this.moduleGraph=new JSModuleGraph(this.modules);
    }
    for (    JSModule module : modules) {
      for (      CompilerInput input : module.getInputs()) {
        for (        String require : input.getRequires()) {
          JSModule dependency=modulesByProvide.get(require);
          if (dependency == null) {
            report(JSError.make(MISSING_ENTRY_ERROR,require));
          }
 else {
            module.addDependency(dependency);
          }
        }
      }
    }
    try {
      addCommonJSModulesToGraph(modules,modulesByInput);
    }
 catch (    Exception e) {
      Throwables.propagate(e);
    }
  }
}
