{
  CompilerInput oldInput=getInput(ast.getInputId());
  Preconditions.checkNotNull(oldInput,"No input to replace: " + ast.getInputId().getIdName());
  Node newRoot=ast.getAstRoot(this);
  if (newRoot == null) {
    return false;
  }
  Node oldRoot=oldInput.getAstRoot(this);
  if (oldRoot != null) {
    oldRoot.getParent().replaceChild(oldRoot,newRoot);
  }
 else {
    getRoot().getLastChild().addChildToBack(newRoot);
  }
  CompilerInput newInput=new CompilerInput(ast);
  inputsById.put(ast.getInputId(),newInput);
  JSModule module=oldInput.getModule();
  if (module != null) {
    module.addAfter(newInput,oldInput);
    module.remove(oldInput);
  }
  Preconditions.checkState(newInput.getInputId().equals(oldInput.getInputId()));
  InputId inputIdOnAst=newInput.getAstRoot(this).getInputId();
  Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
  inputs.remove(oldInput);
  return true;
}
