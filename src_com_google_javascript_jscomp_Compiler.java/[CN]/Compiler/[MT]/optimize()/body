{
  PhaseOptimizer phaseOptimizer=new PhaseOptimizer(this,tracker);
  if (options_.devMode == DevMode.EVERY_PASS) {
    phaseOptimizer.setSanityCheck(sanityCheck);
  }
  phaseOptimizer.consume(getPassConfig().getOptimizations());
  phaseOptimizer.process(externsRoot,jsRoot);
  if (hasErrors()) {
    return;
  }
  if (options_.flowSensitiveInlineVariables) {
    flowSensitiveInlineVariables();
  }
  if (options_.collapseAnonymousFunctions) {
    collapseAnonymousFunctions();
  }
  if (options_.moveFunctionDeclarations) {
    moveFunctionDeclarations();
  }
  if (options_.anonymousFunctionNaming == AnonymousFunctionNamingPolicy.MAPPED) {
    nameAnonymousFunctions(AnonymousFunctionNamingPolicy.MAPPED);
  }
  if (options_.extractPrototypeMemberDeclarations && (options_.propertyRenaming != PropertyRenamingPolicy.HEURISTIC && options_.propertyRenaming != PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {
    extractPrototypeMemberDeclarations();
  }
  if (options_.coalesceVariableNames) {
    coalesceVariableNames();
  }
  VariableMap prevPropertyMap=null;
  if (options_.inputPropertyMapSerialized != null) {
    try {
      prevPropertyMap=VariableMap.fromBytes(options_.inputPropertyMapSerialized);
    }
 catch (    ParseException e) {
      report(JSError.make(INPUT_MAP_PROP_PARSE,e.getMessage()));
    }
  }
  if (options_.ambiguateProperties && (options_.propertyRenaming == PropertyRenamingPolicy.ALL_UNQUOTED)) {
    ambiguateProperties(options_.anonymousFunctionNaming.getReservedCharacters());
  }
switch (options_.propertyRenaming) {
case HEURISTIC:
    renamePrototypes(false,options_.anonymousFunctionNaming,prevPropertyMap);
  break;
case AGGRESSIVE_HEURISTIC:
renamePrototypes(true,options_.anonymousFunctionNaming,prevPropertyMap);
break;
case ALL_UNQUOTED:
renameProperties(options_.generatePseudoNames,options_.anonymousFunctionNaming,prevPropertyMap);
break;
}
if (options_.convertToDottedProperties) {
convertToDottedProperties();
}
if (options_.rewriteFunctionExpressions) {
rewriteFunctionExpressions();
}
if (!options_.aliasableStrings.isEmpty() || options_.aliasAllStrings) {
aliasStrings(options_.aliasableStrings,options_.aliasAllStrings,options_.aliasStringsBlacklist,options_.outputJsStringUsage);
}
if (options_.aliasExternals) {
aliasExternals();
}
if (options_.aliasKeywords) {
aliasKeywords();
}
if (options_.collapseVariableDeclarations) {
collapseVariableDeclarations();
}
denormalize();
if (options_.instrumentationTemplate != null) {
instrumentFunctions();
}
if (options_.variableRenaming != VariableRenamingPolicy.ALL) {
invertContextualRenaming();
}
if (options_.variableRenaming != VariableRenamingPolicy.OFF) {
VariableMap prevVariableMap=null;
if (options_.inputVariableMapSerialized != null) {
try {
prevVariableMap=VariableMap.fromBytes(options_.inputVariableMapSerialized);
}
 catch (ParseException e) {
report(JSError.make(INPUT_VAR_PROP_PARSE,e.getMessage()));
}
}
renameVars(options_.renamePrefix,options_.variableRenaming == VariableRenamingPolicy.LOCAL,options_.anonymousFunctionNaming,prevVariableMap);
}
if (options_.processObjectPropertyString) {
objectPropertyStringPostprocess();
}
if (options_.labelRenaming) {
renameLabels();
}
if (options_.anonymousFunctionNaming == AnonymousFunctionNamingPolicy.UNMAPPED) {
nameAnonymousFunctions(AnonymousFunctionNamingPolicy.UNMAPPED);
}
if (options_.checkSymbols) {
sanityCheckVars();
}
}
