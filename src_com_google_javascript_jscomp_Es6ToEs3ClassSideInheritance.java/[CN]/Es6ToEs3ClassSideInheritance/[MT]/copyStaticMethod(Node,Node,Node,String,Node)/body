{
  Preconditions.checkState(staticMember.isAssign(),staticMember);
  String memberName=staticMember.getFirstChild().getLastChild().getString();
  LinkedHashSet<Node> subclassMethods=getSet(staticMethods,subclassQname);
  for (  Node subclassMember : subclassMethods) {
    Preconditions.checkState(subclassMember.isAssign(),subclassMember);
    if (subclassMember.getFirstChild().getLastChild().getString().equals(memberName)) {
      return;
    }
  }
  JSDocInfoBuilder info=JSDocInfoBuilder.maybeCopyFrom(staticMember.getJSDocInfo());
  Node function=staticMember.getLastChild();
  Node sourceInfoNode=function;
  if (function.isFunction()) {
    sourceInfoNode=function.getFirstChild();
    Node params=NodeUtil.getFunctionParameters(function);
    Preconditions.checkState(params.isParamList(),params);
    for (    Node param : params.children()) {
      if (param.getJSDocInfo() != null) {
        String name=param.getString();
        info.recordParameter(name,param.getJSDocInfo().getType());
      }
    }
  }
  Node assign=IR.assign(IR.getprop(subclassNameNode.cloneTree(),IR.string(memberName)),IR.getprop(superclassNameNode.cloneTree(),IR.string(memberName)));
  info.addSuppression("visibility");
  assign.setJSDocInfo(info.build());
  Node exprResult=IR.exprResult(assign);
  exprResult.useSourceInfoIfMissingFromForTree(sourceInfoNode);
  insertionPoint.getParent().addChildAfter(exprResult,insertionPoint);
  subclassMethods.add(assign);
  compiler.reportCodeChange();
}
