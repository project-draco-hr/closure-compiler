{
  if (!n.isCall()) {
    return;
  }
  if (n.getFirstChild().matchesQualifiedName(Es6ToEs3Converter.COPY_PROP)) {
    Node superclassNameNode=n.getLastChild();
    Node subclassNameNode=n.getChildBefore(superclassNameNode);
    if (multiplyDefinedClasses.contains(superclassNameNode.getQualifiedName())) {
      compiler.report(JSError.make(n,DUPLICATE_CLASS));
      return;
    }
    for (    Node staticMember : staticMembers.get(superclassNameNode.getQualifiedName())) {
      copyStaticMember(staticMember,superclassNameNode,subclassNameNode,parent);
    }
    parent.detachFromParent();
    compiler.reportCodeChange();
  }
}
