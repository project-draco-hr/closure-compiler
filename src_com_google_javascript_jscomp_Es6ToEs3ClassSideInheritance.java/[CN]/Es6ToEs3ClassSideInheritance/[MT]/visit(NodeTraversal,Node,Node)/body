{
  if (!n.isCall()) {
    return;
  }
  if (n.getFirstChild().matchesQualifiedName(Es6ToEs3Converter.INHERITS)) {
    Node superclassNameNode=n.getLastChild();
    Node subclassNameNode=n.getChildBefore(superclassNameNode);
    if (multiplyDefinedClasses.contains(superclassNameNode.getQualifiedName())) {
      compiler.report(JSError.make(n,DUPLICATE_CLASS));
      return;
    }
    for (    Node staticMethod : staticMethods.get(superclassNameNode.getQualifiedName())) {
      copyStaticMethod(staticMethod,superclassNameNode,subclassNameNode,parent);
    }
    for (    Node staticProperty : staticProperties.get(superclassNameNode.getQualifiedName())) {
      Preconditions.checkState(staticProperty.isGetProp(),staticProperty);
      String memberName=staticProperty.getLastChild().getString();
      Node getprop=IR.getprop(subclassNameNode.cloneTree(),IR.string(memberName));
      JSDocInfoBuilder info=JSDocInfoBuilder.maybeCopyFrom(staticProperty.getJSDocInfo());
      JSTypeExpression unknown=new JSTypeExpression(new Node(Token.QMARK),"<synthetic>");
      info.recordType(unknown);
      getprop.setJSDocInfo(info.build());
      Node declaration=IR.exprResult(getprop);
      declaration.useSourceInfoIfMissingFromForTree(n);
      parent.getParent().addChildAfter(declaration,parent);
      staticProperties.put(subclassNameNode.getQualifiedName(),staticProperty);
      compiler.reportCodeChange();
    }
  }
}
