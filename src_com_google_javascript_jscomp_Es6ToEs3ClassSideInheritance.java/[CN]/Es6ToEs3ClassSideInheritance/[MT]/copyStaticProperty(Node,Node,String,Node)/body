{
  Preconditions.checkState(staticProperty.isGetProp(),staticProperty);
  String memberName=staticProperty.getLastChild().getString();
  LinkedHashSet<Node> subclassProps=getSet(staticProperties,subclassQname);
  for (  Node subclassMember : getSet(staticProperties,subclassQname)) {
    Preconditions.checkState(subclassMember.isGetProp());
    if (subclassMember.getLastChild().getString().equals(memberName)) {
      return;
    }
  }
  Node getprop=IR.getprop(subclassNameNode.cloneTree(),IR.string(memberName));
  JSDocInfoBuilder info=JSDocInfoBuilder.maybeCopyFrom(staticProperty.getJSDocInfo());
  JSTypeExpression unknown=new JSTypeExpression(new Node(Token.QMARK),"<synthetic>");
  info.recordType(unknown);
  info.addSuppression("visibility");
  getprop.setJSDocInfo(info.build());
  Node declaration=IR.exprResult(getprop);
  declaration.useSourceInfoIfMissingFromForTree(inheritsCall);
  Node parent=inheritsCall.getParent();
  parent.getParent().addChildBefore(declaration,parent);
  subclassProps.add(staticProperty);
  compiler.reportCodeChange();
}
