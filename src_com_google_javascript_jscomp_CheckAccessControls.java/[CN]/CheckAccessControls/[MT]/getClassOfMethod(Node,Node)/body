{
  if (parent.isAssign()) {
    Node lValue=parent.getFirstChild();
    if (NodeUtil.isGet(lValue)) {
      TypeI lValueType=lValue.getTypeI();
      if (lValueType != null && (lValueType.isConstructor() || lValueType.isInterface())) {
        return (lValueType.toMaybeFunctionType()).getInstanceType();
      }
 else       if (NodeUtil.isPrototypeProperty(lValue)) {
        return normalizeClassType(NodeUtil.getPrototypeClassName(lValue).getTypeI());
      }
 else {
        return normalizeClassType(lValue.getFirstChild().getTypeI());
      }
    }
 else {
      return normalizeClassType(lValue.getTypeI());
    }
  }
 else   if (NodeUtil.isFunctionDeclaration(n) || parent.isName()) {
    return normalizeClassType(n.getTypeI());
  }
 else   if (parent.isStringKey() || parent.isGetterDef() || parent.isSetterDef()) {
    Node objectLitParent=parent.getGrandparent();
    if (!objectLitParent.isAssign()) {
      return null;
    }
    Node className=NodeUtil.getPrototypeClassName(objectLitParent.getFirstChild());
    if (className != null) {
      return normalizeClassType(className.getTypeI());
    }
  }
  return null;
}
