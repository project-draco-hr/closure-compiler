{
  Node parent=getprop.getParent();
  boolean isDelete=parent.isDelProp();
  if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && !parent.isInc() && !parent.isDec()&& !isDelete) {
    return;
  }
  ObjectTypeI objectType=castToObject(dereference(getprop.getFirstChild().getTypeI()));
  String propertyName=getprop.getLastChild().getString();
  boolean isConstant=isPropertyDeclaredConstant(objectType,propertyName);
  if (isConstant) {
    JSDocInfo info=parent.getJSDocInfo();
    if (info != null && info.getSuppressions().contains("const")) {
      return;
    }
    if (isDelete) {
      compiler.report(t.makeError(getprop,CONST_PROPERTY_DELETED,propertyName));
      return;
    }
    if (objectType == null || (objectType.isFunctionType() && !objectType.toMaybeFunctionType().isConstructor())) {
      return;
    }
    ObjectTypeI oType=objectType;
    while (oType != null) {
      if (initializedConstantProperties.containsEntry(oType,propertyName)) {
        compiler.report(t.makeError(getprop,CONST_PROPERTY_REASSIGNED_VALUE,propertyName));
        break;
      }
      oType=oType.getPrototypeObject();
    }
    initializedConstantProperties.put(objectType,propertyName);
    if (objectType.isInstanceType()) {
      ObjectTypeI prototype=objectType.getPrototypeObject();
      if (prototype != null && prototype.hasProperty(propertyName)) {
        initializedConstantProperties.put(prototype,propertyName);
      }
    }
  }
}
