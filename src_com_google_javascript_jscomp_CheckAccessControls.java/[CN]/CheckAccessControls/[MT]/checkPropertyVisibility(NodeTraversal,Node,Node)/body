{
  JSDocInfo jsdoc=parent.getJSDocInfo();
  if (jsdoc != null && jsdoc.getSuppressions().contains("visibility")) {
    return;
  }
  ObjectType referenceType=ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));
  String propertyName=getprop.getLastChild().getString();
  boolean isPrivateByConvention=isPrivateByConvention(propertyName);
  if (isPrivateByConvention && propertyIsDeclaredButNotPrivate(getprop,parent)) {
    compiler.report(t.makeError(getprop,CONVENTION_MISMATCH));
    return;
  }
  StaticSourceFile definingSource=getDefiningSource(getprop,referenceType,propertyName);
  boolean isClassType=false;
  boolean isOverride=jsdoc != null && parent.isAssign() && parent.getFirstChild() == getprop;
  ObjectType objectType=getObjectType(referenceType,isOverride,propertyName);
  Visibility fileOverviewVisibility=defaultVisibilityForFiles.get(definingSource);
  Visibility visibility=AccessControlUtils.getEffectivePropertyVisibility(getprop,referenceType,defaultVisibilityForFiles,enforceCodingConventions ? compiler.getCodingConvention() : null);
  if (isOverride) {
    Visibility overriding=getOverridingPropertyVisibility(parent);
    if (overriding != null) {
      checkOverriddenPropertyVisibilityMismatch(overriding,visibility,fileOverviewVisibility,t,getprop);
    }
  }
  if (objectType != null) {
    Property p=objectType.getOwnSlot(propertyName);
    Node node=p.getNode();
    if (node == null) {
      return;
    }
    definingSource=node.getStaticSourceFile();
    isClassType=p.getJSDocInfo().isConstructor();
  }
 else   if (isPrivateByConvention) {
    objectType=referenceType;
  }
 else   if (fileOverviewVisibility == null) {
    return;
  }
  StaticSourceFile referenceSource=getprop.getStaticSourceFile();
  if (isOverride) {
    boolean sameInput=referenceSource != null && referenceSource.getName().equals(definingSource.getName());
    checkOverriddenPropertyVisibility(t,getprop,parent,visibility,fileOverviewVisibility,objectType,sameInput);
  }
 else {
    checkNonOverriddenPropertyVisibility(t,getprop,parent,visibility,isClassType,objectType,referenceSource,definingSource);
  }
}
