{
  final Compiler compiler=new Compiler();
  final FunctionInjector injector=new FunctionInjector(compiler,compiler.getUniqueNameIdSupplier(),allowDecomposition,assumeStrictThis,assumeMinimumCapture);
  final Node tree=parse(compiler,code);
  final Node fnNode=findFunction(tree,fnName);
  final Set<String> unsafe=FunctionArgumentInjector.findModifiedParameters(fnNode);
  Method tester=new Method(){
    @Override public boolean call(    NodeTraversal t,    Node n,    Node parent){
      Reference ref=new Reference(n,t.getScope(),t.getModule(),mode);
      CanInlineResult result=injector.canInlineReferenceToFunction(ref,fnNode,unsafe,NodeUtil.referencesThis(fnNode),NodeUtil.containsFunction(NodeUtil.getFunctionBody(fnNode)));
      assertEquals(expectedResult,result);
      return true;
    }
  }
;
  compiler.resetUniqueNameId();
  TestCallback test=new TestCallback(fnName,tester);
  NodeTraversal.traverseEs6(compiler,tree,test);
}
