{
  String source="function A(){};\n" + "function B(){ExternalFunction(6); C(); D();}\n" + "function C(){B(); A();};\n"+ "function D(){A();};\n"+ "function E(){C()};\n"+ "A();\n";
  CallGraph callgraph=compileAndRunForward(source);
  final Set<Function> poisonedFunctions=new HashSet<>();
  for (  Callsite callsite : callgraph.getAllCallsites()) {
    if (callsite.hasExternTarget()) {
      poisonedFunctions.add(callsite.getContainingFunction());
    }
  }
  EdgeCallback<CallGraph.Function,CallGraph.Callsite> edgeCallback=new EdgeCallback<CallGraph.Function,CallGraph.Callsite>(){
    @Override public boolean traverseEdge(    Function callee,    Callsite callsite,    Function caller){
      boolean changed;
      if (poisonedFunctions.contains(callee)) {
        changed=poisonedFunctions.add(caller);
      }
 else {
        changed=false;
      }
      return changed;
    }
  }
;
  FixedPointGraphTraversal.newTraversal(edgeCallback).computeFixedPoint(callgraph.getBackwardDirectedGraph());
  assertThat(poisonedFunctions).containsExactly(callgraph.getUniqueFunctionWithName("B"),callgraph.getUniqueFunctionWithName("C"),callgraph.getUniqueFunctionWithName("E"));
}
