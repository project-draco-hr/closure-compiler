{
  String source="function A(){B()};\n" + "function B(){C();C();};\n" + "function C(){C()};\n"+ "A();\n";
  CallGraph callgraph=compileAndRunBackward(source);
  Function main=callgraph.getMainFunction();
  Function functionA=callgraph.getUniqueFunctionWithName("A");
  Function functionB=callgraph.getUniqueFunctionWithName("B");
  Function functionC=callgraph.getUniqueFunctionWithName("C");
  assertThat(main.getCallsitesPossiblyTargetingFunction()).isEmpty();
  Collection<Callsite> callsitesTargetingA=functionA.getCallsitesPossiblyTargetingFunction();
  assertThat(callsitesTargetingA).hasSize(1);
  assertEquals(main,callsitesTargetingA.iterator().next().getContainingFunction());
  Collection<Callsite> callsitesTargetingB=functionB.getCallsitesPossiblyTargetingFunction();
  assertThat(callsitesTargetingB).hasSize(1);
  assertEquals(functionA,callsitesTargetingB.iterator().next().getContainingFunction());
  Collection<Callsite> callsitesTargetingC=functionC.getCallsitesPossiblyTargetingFunction();
  assertThat(callsitesTargetingC).hasSize(3);
  Collection<Callsite> expectedFunctionsCallingC=Sets.newHashSet(functionB.getCallsitesInFunction());
  expectedFunctionsCallingC.addAll(functionC.getCallsitesInFunction());
  assertTrue(callsitesTargetingC.containsAll(expectedFunctionsCallingC));
}
