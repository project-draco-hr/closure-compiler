{
  String source="function A(){B()};\n" + "function B(){C();D()}\n" + "function C(){B()};\n"+ "function D(){};\n"+ "function E(){C()};\n"+ "function X(){Y()};\n"+ "function Y(){Z()};\n"+ "function Z(){};"+ "B();\n";
  CallGraph callgraph=compileAndRunBackward(source);
  final Set<Function> reachableFunctions=Sets.newHashSet();
  reachableFunctions.add(callgraph.getMainFunction());
  reachableFunctions.add(callgraph.getUniqueFunctionWithName("X"));
  EdgeCallback<CallGraph.Function,CallGraph.Callsite> edgeCallback=new EdgeCallback<CallGraph.Function,CallGraph.Callsite>(){
    @Override public boolean traverseEdge(    Function caller,    Callsite callsite,    Function callee){
      boolean changed;
      if (reachableFunctions.contains(caller)) {
        changed=reachableFunctions.add(callee);
      }
 else {
        changed=false;
      }
      return changed;
    }
  }
;
  FixedPointGraphTraversal.newTraversal(edgeCallback).computeFixedPoint(callgraph.getForwardDirectedGraph());
  assertEquals(7,reachableFunctions.size());
  assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("B")));
  assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("C")));
  assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("D")));
  assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("X")));
  assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("Y")));
  assertTrue(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("Z")));
  assertTrue(reachableFunctions.contains(callgraph.getMainFunction()));
  assertFalse(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("A")));
  assertFalse(reachableFunctions.contains(callgraph.getUniqueFunctionWithName("E")));
}
