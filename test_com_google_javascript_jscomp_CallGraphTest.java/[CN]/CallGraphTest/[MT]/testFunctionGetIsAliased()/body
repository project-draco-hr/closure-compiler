{
  String source="function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n"+ "var C = function() {}\n"+ "var D = function() {}\n"+ "var aliasA = A;\n"+ "var aliasB = ns.B;\n"+ "var aliasC = C;\n"+ "D();";
  compileAndRunForward(source);
  assertFunctionAliased(true,"A");
  assertFunctionAliased(true,"ns.B");
  assertFunctionAliased(true,"C");
  assertFunctionAliased(false,"D");
  source="function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n"+ "var C = function() {}\n"+ "ns.D = function() {}\n"+ "var aliasA;\n"+ "aliasA = A;\n"+ "var aliasB = {};\n"+ "aliasB.foo = ns.B;\n"+ "var aliasC;\n"+ "aliasC = C;\n"+ "ns.D();";
  compileAndRunForward(source);
  assertFunctionAliased(true,"A");
  assertFunctionAliased(true,"ns.B");
  assertFunctionAliased(true,"C");
  assertFunctionAliased(false,"ns.D");
  source="function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n"+ "var C = function() {}\n"+ "function D() {}\n"+ "var foo = function(a) {}\n"+ "foo(A);\n"+ "foo(ns.B)\n"+ "foo(C);\n"+ "D();";
  compileAndRunForward(source);
  assertFunctionAliased(true,"A");
  assertFunctionAliased(true,"ns.B");
  assertFunctionAliased(true,"C");
  assertFunctionAliased(false,"D");
  source="function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n"+ "var C = function() {}\n"+ "A();\n"+ "ns.B();\n"+ "C();\n";
  compileAndRunForward(source);
  assertFunctionAliased(false,"A");
  assertFunctionAliased(false,"ns.B");
  assertFunctionAliased(false,"C");
  source="function A(){};\n" + "var ns = {};\n" + "ns.B = function() {};\n"+ "var C = function() {}\n"+ "A.foo;\n"+ "ns.B.prototype;\n"+ "C[0];\n";
  compileAndRunForward(source);
  assertFunctionAliased(false,"A");
  assertFunctionAliased(false,"ns.B");
  assertFunctionAliased(false,"C");
}
