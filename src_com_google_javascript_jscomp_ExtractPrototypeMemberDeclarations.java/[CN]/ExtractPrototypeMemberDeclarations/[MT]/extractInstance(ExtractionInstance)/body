{
  PrototypeMemberDeclaration first=instance.declarations.getFirst();
  String className=first.qualifiedClassName;
  if (pattern == Pattern.USE_GLOBAL_TEMP) {
    Node stmt=new Node(first.node.getType(),IR.assign(IR.name(prototypeAlias),NodeUtil.newQName(compiler,className + ".prototype",instance.parent,className + ".prototype"))).useSourceInfoIfMissingFromForTree(first.node);
    instance.parent.addChildBefore(stmt,first.node);
  }
 else   if (pattern == Pattern.USE_IIFE) {
    Node block=IR.block();
    Node func=IR.function(IR.name(""),IR.paramList(IR.name(prototypeAlias)),block);
    Node call=IR.call(func,NodeUtil.newQName(compiler,className + ".prototype",instance.parent,className + ".prototype"));
    call.putIntProp(Node.FREE_CALL,1);
    Node stmt=new Node(first.node.getType(),call);
    stmt.useSourceInfoIfMissingFromForTree(first.node);
    instance.parent.addChildBefore(stmt,first.node);
    for (    PrototypeMemberDeclaration declar : instance.declarations) {
      block.addChildToBack(declar.node.detachFromParent());
    }
  }
  for (  PrototypeMemberDeclaration declar : instance.declarations) {
    replacePrototypeMemberDeclaration(declar);
  }
}
