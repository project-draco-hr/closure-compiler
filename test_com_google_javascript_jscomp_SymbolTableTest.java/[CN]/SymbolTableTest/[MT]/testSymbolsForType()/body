{
  SymbolTable table=createSymbolTable("function random() { return 1; }" + "/** @constructor */ function Foo() {}" + "/** @constructor */ function Bar() {}"+ "var x = random() ? new Foo() : new Bar();");
  Symbol x=getGlobalVar(table,"x");
  Symbol foo=getGlobalVar(table,"Foo");
  Symbol bar=getGlobalVar(table,"Bar");
  Symbol fooPrototype=getGlobalVar(table,"Foo.prototype");
  Symbol fn=getGlobalVar(table,"Function");
  assertEquals(ImmutableList.of(foo,bar),table.getAllSymbolsForTypeOf(x));
  assertEquals(ImmutableList.of(fn),table.getAllSymbolsForTypeOf(foo));
  assertEquals(ImmutableList.of(foo),table.getAllSymbolsForTypeOf(fooPrototype));
  assertEquals(foo,table.getSymbolDeclaredBy(foo.getType().toMaybeFunctionType()));
}
