{
  SymbolTable table=createSymbolTable("  var a = {b: {}};\n" + "/** @constructor */\n" + "a.b.BaseClass = function() {};\n"+ "a.b.BaseClass.prototype.doSomething = function() {\n"+ "  alert('hi');\n"+ "};\n"+ "/**\n"+ " * @constructor\n"+ " * @extends {a.b.BaseClass}\n"+ " */\n"+ "a.b.DerivedClass = function() {};\n"+ "goog.inherits(a.b.DerivedClass, a.b.BaseClass);\n"+ "/** @override */\n"+ "a.b.DerivedClass.prototype.doSomething = function() {\n"+ "  a.b.DerivedClass.superClass_.doSomething();\n"+ "};\n");
  Symbol bad=getGlobalVar(table,"a.b.DerivedClass.superClass_.doSomething");
  assertNull(bad);
  Symbol good=getGlobalVar(table,"a.b.BaseClass.prototype.doSomething");
  assertNotNull(good);
  List<Reference> refs=table.getReferenceList(good);
  assertThat(refs).hasSize(2);
  assertEquals("a.b.DerivedClass.superClass_.doSomething",refs.get(1).getNode().getQualifiedName());
}
