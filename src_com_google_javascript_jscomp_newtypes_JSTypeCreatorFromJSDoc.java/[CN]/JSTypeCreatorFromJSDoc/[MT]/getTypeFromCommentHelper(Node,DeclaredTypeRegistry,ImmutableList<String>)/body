{
  Preconditions.checkNotNull(n);
  if (typeParameters == null) {
    typeParameters=ImmutableList.of();
  }
switch (n.getToken()) {
case LC:
    return getRecordTypeHelper(n,registry,typeParameters);
case EMPTY:
  return this.commonTypes.UNKNOWN;
case VOID:
return this.commonTypes.UNDEFINED;
case LB:
warnings.add(JSError.make(n,BAD_ARRAY_TYPE_SYNTAX));
return this.commonTypes.UNKNOWN;
case STRING:
return getNamedTypeHelper(n,registry,typeParameters);
case PIPE:
{
JSType union=this.commonTypes.BOTTOM;
for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
JSType nextType=getTypeFromCommentHelper(child,registry,typeParameters);
if (nextType.isUnknown()) {
return this.commonTypes.UNKNOWN;
}
JSType nextUnion=JSType.join(union,nextType);
if (nextUnion.isBottom()) {
warnings.add(JSError.make(n,UNION_IS_UNINHABITABLE,nextType.toString(),union.toString()));
return this.commonTypes.UNKNOWN;
}
union=nextUnion;
}
return union;
}
case BANG:
{
JSType nullableType=getTypeFromCommentHelper(n.getFirstChild(),registry,typeParameters);
if (nullableType.isTypeVariable()) {
warnings.add(JSError.make(n,CANNOT_MAKE_TYPEVAR_NON_NULL));
}
return nullableType.removeType(this.commonTypes.NULL);
}
case QMARK:
{
Node child=n.getFirstChild();
if (child == null) {
return this.commonTypes.UNKNOWN;
}
 else {
return JSType.join(this.commonTypes.NULL,getTypeFromCommentHelper(child,registry,typeParameters));
}
}
case STAR:
return this.commonTypes.TOP;
case FUNCTION:
return getFunTypeHelper(n,registry,typeParameters);
default :
throw new IllegalArgumentException("Unsupported type exp: " + n.getToken() + " "+ n.toStringTree());
}
}
