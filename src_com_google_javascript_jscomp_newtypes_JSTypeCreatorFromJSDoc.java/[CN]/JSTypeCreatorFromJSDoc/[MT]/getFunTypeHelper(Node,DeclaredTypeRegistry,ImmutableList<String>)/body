{
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  Node child=n.getFirstChild();
  if (child.getType() == Token.THIS) {
    builder.addReceiverType(getClassType(child.getFirstChild(),registry));
    child=child.getNext();
  }
 else   if (child.getType() == Token.NEW) {
    builder.addClass(getClassType(child.getFirstChild(),registry));
    child=child.getNext();
  }
  if (child.getType() == Token.PARAM_LIST) {
    for (Node arg=child.getFirstChild(); arg != null; arg=arg.getNext()) {
      try {
switch (arg.getType()) {
case Token.EQUALS:
          builder.addOptFormal(getTypeFromNodeHelper(arg.getFirstChild(),registry,typeParameters));
        break;
case Token.ELLIPSIS:
      builder.addRestFormals(getTypeFromNodeHelper(arg.getFirstChild(),registry,typeParameters));
    break;
default :
  builder.addReqFormal(getTypeFromNodeHelper(arg,registry,typeParameters));
break;
}
}
 catch (IllegalStateException e) {
warn("Wrong parameter order: required parameters are first, " + "then optional, then varargs",n);
}
}
child=child.getNext();
}
builder.addRetType(getTypeFromNodeHelper(child,registry,typeParameters));
return builder.buildType();
}
