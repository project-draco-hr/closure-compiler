{
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  Node childJsdoc=jsdoc.getType().getRootNode().getFirstChild();
  Node param=funNode.getFirstChild().getNext().getFirstChild();
  Node paramType;
  boolean warnedForMissingTypes=false;
  boolean warnedForInlineJsdoc=false;
  if (childJsdoc.getType() == Token.PARAM_LIST) {
    paramType=childJsdoc.getFirstChild();
    childJsdoc=childJsdoc.getNext();
  }
 else {
    paramType=null;
  }
  while (param != null) {
    if (paramType == null) {
      if (!warnedForMissingTypes) {
        warn("The function has more formal parameters than the types " + "declared in the JSDoc",funNode);
        warnedForMissingTypes=true;
      }
      builder.addOptFormal(null);
    }
 else {
      if (!warnedForInlineJsdoc && param.getJSDocInfo() != null) {
        warn("The function cannot have both an @type jsdoc and inline " + "jsdocs. Ignoring inline jsdocs.",param);
        warnedForInlineJsdoc=true;
      }
switch (paramType.getType()) {
case Token.EQUALS:
        builder.addOptFormal(getTypeFromNode(paramType.getFirstChild(),registry));
      break;
case Token.ELLIPSIS:
    if (!warnedForMissingTypes) {
      warn("The function has more formal parameters than the types " + "declared in the JSDoc",funNode);
      warnedForMissingTypes=true;
      builder.addOptFormal(null);
    }
  break;
default :
builder.addReqFormal(getTypeFromNode(paramType,registry));
break;
}
paramType=paramType.getNext();
}
param=param.getNext();
}
if (paramType != null) {
if (paramType.getType() == Token.ELLIPSIS) {
builder.addRestFormals(getTypeFromNode(paramType.getFirstChild(),registry));
}
 else {
warn("The function has fewer formal parameters than the types " + "declared in the JSDoc",funNode);
}
}
if (!warnedForInlineJsdoc && funNode.getFirstChild().getJSDocInfo() != null) {
warn("The function cannot have both an @type jsdoc and inline " + "jsdocs. Ignoring the inline return jsdoc.",funNode);
}
if (jsdoc.getReturnType() != null) {
warn("The function cannot have both an @type jsdoc and @return " + "jsdoc. Ignoring @return jsdoc.",funNode);
}
builder.addRetType(getTypeFromNode(childJsdoc,registry));
return builder;
}
