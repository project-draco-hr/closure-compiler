{
  ImmutableList.Builder<String> typeParamsBuilder=ImmutableList.builder();
  ImmutableList<String> typeParameters=ImmutableList.of();
  Node parent=funNode.getParent();
  boolean ignoreJsdoc=false;
  if (jsdoc != null) {
    if (constructorType != null) {
      typeParamsBuilder.addAll(constructorType.getTypeParameters());
    }
 else {
      for (      String typeParam : jsdoc.getTemplateTypeNames()) {
        typeParamsBuilder.add(this.nameGen.getNextName(typeParam));
      }
    }
    for (    String typeParam : jsdoc.getTypeTransformations().keySet()) {
      typeParamsBuilder.add(this.nameGen.getNextName(typeParam));
    }
    typeParameters=typeParamsBuilder.build();
    if (!typeParameters.isEmpty()) {
      if (parent.isSetterDef() || parent.isGetterDef()) {
        ignoreJsdoc=true;
        jsdoc=null;
        warnings.add(JSError.make(funNode,TEMPLATED_GETTER_SETTER));
      }
 else {
        builder.addTypeParameters(typeParameters);
      }
    }
  }
  if (ownerType != null) {
    typeParamsBuilder.addAll(ownerType.getTypeParameters());
    typeParameters=typeParamsBuilder.build();
  }
  fillInFormalParameterTypes(jsdoc,funNode,typeParameters,registry,builder,ignoreJsdoc);
  fillInReturnType(jsdoc,funNode,parent,typeParameters,registry,builder,ignoreJsdoc);
  if (jsdoc == null) {
    return builder.buildDeclaration();
  }
  NominalType parentClass=getMaybeParentClass(jsdoc,functionName,funNode,typeParameters,registry);
  ImmutableSet<NominalType> implementedIntfs=getImplementedInterfaces(jsdoc,registry,typeParameters);
  if (constructorType == null && jsdoc.isConstructorOrInterface()) {
    return builder.buildDeclaration();
  }
 else   if (jsdoc.isConstructor()) {
    handleConstructorAnnotation(functionName,funNode,constructorType,parentClass,implementedIntfs,registry,builder);
  }
 else   if (jsdoc.isInterface()) {
    handleInterfaceAnnotation(jsdoc,functionName,funNode,constructorType,implementedIntfs,typeParameters,registry,builder);
  }
 else   if (!implementedIntfs.isEmpty()) {
    warnings.add(JSError.make(funNode,IMPLEMENTS_WITHOUT_CONSTRUCTOR,functionName));
  }
  if (jsdoc.hasThisType()) {
    Node thisRoot=jsdoc.getThisType().getRoot();
    Preconditions.checkState(thisRoot.getToken() == Token.BANG);
    builder.addReceiverType(getThisOrNewType(thisRoot.getFirstChild(),registry,typeParameters));
  }
  return builder.buildDeclaration();
}
