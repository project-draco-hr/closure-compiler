{
  String typeName=n.getString();
switch (typeName) {
case "boolean":
    return JSType.BOOLEAN;
case "null":
  return JSType.NULL;
case "number":
return JSType.NUMBER;
case "string":
return JSType.STRING;
case "undefined":
case "void":
return JSType.UNDEFINED;
case "Function":
return JSType.qmarkFunction();
case "Object":
return JSType.TOP_OBJECT;
default :
{
if (hasTypeVariable(outerTypeParameters,ownerType,typeName)) {
return JSType.fromTypeVar(typeName);
}
 else {
JSType namedType=registry.lookupTypeByName(typeName);
if (namedType == null) {
unknownTypeNames.put(n,typeName);
throw new UnknownTypeException("Unhandled type: " + typeName);
}
if (namedType.isTypeVariable()) {
return namedType;
}
return JSType.join(JSType.NULL,getNominalTypeHelper(namedType,n,ownerType,registry,outerTypeParameters));
}
}
}
}
