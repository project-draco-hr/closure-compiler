{
  String typeName=n.getString();
  if (typeName.equals("boolean")) {
    return JSType.BOOLEAN;
  }
 else   if (typeName.equals("null")) {
    return JSType.NULL;
  }
 else   if (typeName.equals("number")) {
    return JSType.NUMBER;
  }
 else   if (typeName.equals("string")) {
    return JSType.STRING;
  }
 else   if (typeName.equals("undefined")) {
    return JSType.UNDEFINED;
  }
 else   if (hasTypeVariable(outerTypeParameters,ownerType,typeName)) {
    return JSType.fromTypeVar(typeName);
  }
 else {
    JSType namedType=registry.lookupTypeByName(typeName);
    if (namedType == null) {
      unknownTypeNames.put(n,typeName);
      throw new UnknownTypeException("Unhandled type: " + typeName);
    }
    if (!n.hasChildren()) {
      return namedType;
    }
    Preconditions.checkState(n.getFirstChild().isBlock());
    ImmutableList.Builder<JSType> typeList=ImmutableList.builder();
    for (    Node child : n.getFirstChild().children()) {
      JSType childType=getTypeFromNodeHelper(child,ownerType,registry,outerTypeParameters);
      typeList.add(childType);
    }
    NominalType uninstantiated=namedType.getNominalTypeIfUnique();
    ImmutableList<JSType> typeArguments=typeList.build();
    ImmutableList<String> typeParameters=uninstantiated.getRawNominalType().getTemplateVars();
    if (typeArguments.size() != typeParameters.size()) {
      warn("Invalid generics instantiation.\n" + "Expected " + typeParameters.size() + " type arguments, but "+ typeArguments.size()+ " were passed.",n);
      return JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated));
    }
    return JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(typeArguments)));
  }
}
