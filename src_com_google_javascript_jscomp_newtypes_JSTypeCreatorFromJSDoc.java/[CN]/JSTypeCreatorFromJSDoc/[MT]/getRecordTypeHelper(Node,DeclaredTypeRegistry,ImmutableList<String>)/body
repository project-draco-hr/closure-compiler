{
  Map<String,Property> props=new LinkedHashMap<>();
  for (Node propNode=n.getFirstFirstChild(); propNode != null; propNode=propNode.getNext()) {
    boolean isPropDeclared=propNode.getType() == Token.COLON;
    Node propNameNode=isPropDeclared ? propNode.getFirstChild() : propNode;
    String propName=propNameNode.getString();
    if (propName.startsWith("'") || propName.startsWith("\"")) {
      propName=propName.substring(1,propName.length() - 1);
    }
    if (n.isFromExterns()) {
      this.allPropertyNames.add(propName);
    }
    JSType propType=!isPropDeclared ? JSType.UNKNOWN : getTypeFromCommentHelper(propNode.getLastChild(),registry,typeParameters);
    Property prop;
    if (propType.equals(JSType.UNDEFINED) || isUnionWithUndefined(propNode.getLastChild())) {
      prop=Property.makeOptional(null,propType,propType);
    }
 else {
      prop=Property.make(propType,propType);
    }
    props.put(propName,prop);
  }
  return JSType.fromObjectType(ObjectType.fromProperties(props));
}
