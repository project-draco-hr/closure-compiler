{
  String typeName=n.getString();
switch (typeName) {
case "boolean":
    return JSType.BOOLEAN;
case "null":
  return JSType.NULL;
case "number":
return JSType.NUMBER;
case "string":
return JSType.STRING;
case "undefined":
case "void":
return JSType.UNDEFINED;
case "Function":
return getQmarkFunctionOrNull(registry.getCommonTypes());
case "Object":
return OBJECT_OR_NULL;
default :
{
if (outerTypeParameters.contains(typeName)) {
return JSType.fromTypeVar(typeName);
}
 else {
Typedef td=registry.getTypedef(typeName);
if (td != null) {
return getTypedefType(td,registry);
}
EnumType e=registry.getEnum(typeName);
if (e != null) {
return getEnumPropType(e,registry);
}
JSType namedType=registry.lookupTypeByName(typeName);
if (namedType == null) {
unknownTypeNames.put(n,typeName);
throw new UnknownTypeException("Unhandled type: " + typeName);
}
if (namedType.isTypeVariable()) {
howmanyTypeVars++;
return namedType;
}
if (namedType.isUnknown()) {
return namedType;
}
return getNominalTypeHelper(namedType,n,registry,outerTypeParameters);
}
}
}
}
