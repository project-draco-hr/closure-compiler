{
  NominalType uninstantiated=namedType.getNominalTypeIfUnique();
  RawNominalType rawType=uninstantiated.getRawNominalType();
  if (!rawType.isGeneric() && !n.hasChildren()) {
    return rawType.getInstanceAsNullableJSType();
  }
  if (!n.hasChildren()) {
    ImmutableList.Builder<JSType> typeList=ImmutableList.builder();
    for (    String unused : rawType.getTypeParameters()) {
      typeList.add(JSType.UNKNOWN);
    }
    return JSType.join(JSType.NULL,JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(typeList.build()))));
  }
  Preconditions.checkState(n.getFirstChild().isBlock());
  ImmutableList.Builder<JSType> typeList=ImmutableList.builder();
  for (  Node child : n.getFirstChild().children()) {
    JSType childType=getTypeFromNodeHelper(child,ownerType,registry,outerTypeParameters);
    typeList.add(childType);
  }
  ImmutableList<JSType> typeArguments=typeList.build();
  ImmutableList<String> typeParameters=rawType.getTypeParameters();
  if (typeArguments.size() != typeParameters.size()) {
    warn("Invalid generics instantiation.\n" + "Expected " + typeParameters.size() + " type arguments, but "+ typeArguments.size()+ " were passed.",n);
    return JSType.join(JSType.NULL,JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(JSType.fixLengthOfTypeList(typeParameters.size(),typeArguments)))));
  }
  return JSType.join(JSType.NULL,JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(typeArguments))));
}
