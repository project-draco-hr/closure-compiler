{
  NominalType uninstantiated=namedType.getNominalTypeIfUnique();
  RawNominalType rawType=uninstantiated.getRawNominalType();
  if (!rawType.isGeneric() && !n.hasChildren()) {
    return rawType.getInstanceAsNullableJSType();
  }
  if (!n.hasChildren()) {
    ImmutableList.Builder<JSType> typeList=ImmutableList.builder();
    for (    String unused : rawType.getTypeParameters()) {
      typeList.add(JSType.UNKNOWN);
    }
    return JSType.join(JSType.NULL,JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(typeList.build()))));
  }
  Preconditions.checkState(n.getFirstChild().isBlock());
  ImmutableList.Builder<JSType> typeList=ImmutableList.builder();
  for (  Node child : n.getFirstChild().children()) {
    JSType childType=getTypeFromNodeHelper(child,ownerType,registry,outerTypeParameters);
    typeList.add(childType);
  }
  ImmutableList<JSType> typeArguments=typeList.build();
  ImmutableList<String> typeParameters=rawType.getTypeParameters();
  int typeArgsSize=typeArguments.size();
  int typeParamsSize=typeParameters.size();
  if (typeArgsSize != typeParamsSize) {
    String nominalTypeName=uninstantiated.getName();
    if (!nominalTypeName.equals("Object") && !nominalTypeName.equals("Array")) {
      warn("Invalid generics instantiation for " + nominalTypeName + ".\n"+ "Expected "+ typeParamsSize+ " type argument(s), but "+ typeArgsSize+ (typeArgsSize == 1 ? " was passed." : " were passed."),n);
    }
    return JSType.join(JSType.NULL,JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(JSType.fixLengthOfTypeList(typeParameters.size(),typeArguments)))));
  }
  return JSType.join(JSType.NULL,JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(typeArguments))));
}
