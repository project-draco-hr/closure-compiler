{
  Node child=jsdocNode.getFirstChild();
  if (child.getToken() == Token.THIS) {
    if (ownerType == null) {
      builder.addReceiverType(getThisOrNewType(child.getFirstChild(),registry,typeParameters));
    }
    child=child.getNext();
  }
 else   if (child.getToken() == Token.NEW) {
    Node newTypeNode=child.getFirstChild();
    JSType t=getThisOrNewType(newTypeNode,registry,typeParameters);
    if (!t.isSubtypeOf(this.commonTypes.TOP_OBJECT) && (!t.hasTypeVariable() || t.hasScalar())) {
      warnings.add(JSError.make(newTypeNode,NEW_EXPECTS_OBJECT_OR_TYPEVAR,t.toString()));
    }
    builder.addNominalType(t);
    child=child.getNext();
  }
  if (child.getToken() == Token.PARAM_LIST) {
    for (Node arg=child.getFirstChild(); arg != null; arg=arg.getNext()) {
      try {
switch (arg.getToken()) {
case EQUALS:
          builder.addOptFormal(getTypeFromCommentHelper(arg.getFirstChild(),registry,typeParameters));
        break;
case ELLIPSIS:
      Node restNode=arg.getFirstChild();
    builder.addRestFormals(restNode == null ? this.commonTypes.UNKNOWN : getTypeFromCommentHelper(restNode,registry,typeParameters));
  break;
default :
builder.addReqFormal(getTypeFromCommentHelper(arg,registry,typeParameters));
break;
}
}
 catch (FunctionTypeBuilder.WrongParameterOrderException e) {
warnings.add(JSError.make(jsdocNode,WRONG_PARAMETER_ORDER));
builder.addPlaceholderFormal();
}
}
child=child.getNext();
}
builder.addRetType(getTypeFromCommentHelper(child,registry,typeParameters));
}
