{
  NominalType uninstantiated=rawType.getAsNominalType();
  if (!rawType.isGeneric() && !n.hasChildren()) {
    return rawType.getInstanceWithNullability(NULLABLE_TYPES_BY_DEFAULT);
  }
  ImmutableList.Builder<JSType> typeList=ImmutableList.builder();
  if (n.hasChildren()) {
    Preconditions.checkState(n.getFirstChild().isBlock(),n);
    for (    Node child : n.getFirstChild().children()) {
      typeList.add(getTypeFromCommentHelper(child,registry,outerTypeParameters));
    }
  }
  ImmutableList<JSType> typeArguments=typeList.build();
  ImmutableList<String> typeParameters=rawType.getTypeParameters();
  int typeArgsSize=typeArguments.size();
  int typeParamsSize=typeParameters.size();
  if (typeArgsSize != typeParamsSize) {
    if (typeArgsSize > typeParamsSize) {
      warnings.add(JSError.make(n,INVALID_GENERICS_INSTANTIATION," for type " + uninstantiated.getName(),String.valueOf(typeParamsSize),String.valueOf(typeArgsSize)));
    }
    return maybeMakeNullable(JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(fixLengthOfTypeList(typeParameters.size(),typeArguments)))));
  }
  return maybeMakeNullable(JSType.fromObjectType(ObjectType.fromNominalType(uninstantiated.instantiateGenerics(typeArguments))));
}
