{
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  if (ownerType != null) {
    builder.addReceiverType(ownerType.getAsNominalType());
  }
  try {
    if (jsdoc != null && jsdoc.getType() != null) {
      Node jsdocNode=jsdoc.getType().getRoot();
      int tokenType=jsdocNode.getType();
      if (tokenType == Token.FUNCTION) {
        if (declNode.isFunction()) {
          return getFunTypeFromAtTypeJsdoc(jsdoc,declNode,ownerType,registry,builder);
        }
        try {
          fillInFunTypeBuilder(jsdocNode,ownerType,registry,ImmutableList.<String>of(),builder);
          return builder.buildDeclaration();
        }
 catch (        UnknownTypeException e) {
          return qmarkFunctionDeclared;
        }
      }
      if (isQmarkFunction(jsdocNode)) {
        return qmarkFunctionDeclared;
      }
 else {
        warn("The function is annotated with a non-function jsdoc. " + "Ignoring jsdoc.",declNode);
        return getFunTypeFromTypicalFunctionJsdoc(null,functionName,declNode,constructorType,ownerType,registry,builder,true);
      }
    }
    return getFunTypeFromTypicalFunctionJsdoc(jsdoc,functionName,declNode,constructorType,ownerType,registry,builder,false);
  }
 catch (  FunctionTypeBuilder.WrongParameterOrderException e) {
    warn("Wrong parameter order: required parameters are first, " + "then optional, then varargs. Ignoring jsdoc.",declNode);
    return qmarkFunctionDeclared;
  }
}
