{
  boolean ignoreFunNode=!funNode.isFunction();
  Node params=ignoreFunNode ? null : funNode.getFirstChild().getNext();
  ParamIterator iterator=new ParamIterator(params,jsdoc);
  while (iterator.hasNext()) {
    String pname=iterator.nextString();
    Node param=iterator.getNode();
    JSType inlineParamType=(ignoreJsdoc || ignoreFunNode) ? null : getDeclaredTypeOfNode(param.getJSDocInfo(),registry,typeParameters);
    boolean isRequired=true;
    boolean isRestFormals=false;
    JSTypeExpression texp=jsdoc == null ? null : jsdoc.getParameterType(pname);
    Node jsdocNode=texp == null ? null : texp.getRoot();
    if (param != null) {
      if (convention.isOptionalParameter(param)) {
        isRequired=false;
      }
 else       if (convention.isVarArgsParameter(param)) {
        isRequired=false;
        isRestFormals=true;
      }
    }
    JSType fnParamType=null;
    if (jsdocNode != null) {
      if (jsdocNode.getType() == Token.EQUALS) {
        isRequired=false;
        jsdocNode=jsdocNode.getFirstChild();
      }
 else       if (jsdocNode.getType() == Token.ELLIPSIS) {
        isRequired=false;
        isRestFormals=true;
        jsdocNode=jsdocNode.getFirstChild();
      }
      fnParamType=getTypeFromComment(jsdocNode,registry,typeParameters);
    }
    if (inlineParamType != null) {
      builder.addReqFormal(inlineParamType);
      if (fnParamType != null) {
        warn("Found two JsDoc comments for formal parameter " + pname,param);
      }
    }
 else     if (isRequired) {
      builder.addReqFormal(fnParamType);
    }
 else     if (isRestFormals) {
      builder.addRestFormals(fnParamType == null ? JSType.UNKNOWN : fnParamType);
    }
 else {
      builder.addOptFormal(fnParamType);
    }
  }
}
