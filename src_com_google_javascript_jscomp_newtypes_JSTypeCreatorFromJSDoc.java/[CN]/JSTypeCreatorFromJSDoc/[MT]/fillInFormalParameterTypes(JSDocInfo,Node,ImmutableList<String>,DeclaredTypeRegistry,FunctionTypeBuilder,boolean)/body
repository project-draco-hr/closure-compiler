{
  boolean ignoreFunNode=!funNode.isFunction();
  Node params=ignoreFunNode ? null : funNode.getSecondChild();
  ParamIterator iterator=new ParamIterator(params,jsdoc);
  while (iterator.hasNext()) {
    String pname=iterator.nextString();
    Node param=iterator.getNode();
    ParameterKind p=ParameterKind.REQUIRED;
    if (param != null && convention.isOptionalParameter(param)) {
      p=ParameterKind.OPTIONAL;
    }
 else     if (param != null && convention.isVarArgsParameter(param)) {
      p=ParameterKind.REST;
    }
    ParameterType inlineParamType=(ignoreJsdoc || ignoreFunNode || param.getJSDocInfo() == null) ? null : parseParameter(param.getJSDocInfo().getType(),p,registry,typeParameters);
    ParameterType fnParamType=inlineParamType;
    JSTypeExpression jsdocExp=jsdoc == null ? null : jsdoc.getParameterType(pname);
    if (jsdocExp != null) {
      if (inlineParamType == null) {
        fnParamType=parseParameter(jsdocExp,p,registry,typeParameters);
      }
 else {
        warnings.add(JSError.make(param,TWO_JSDOCS,"formal parameter " + pname));
      }
    }
    JSType t=null;
    if (fnParamType != null) {
      p=fnParamType.kind;
      t=fnParamType.type;
    }
switch (p) {
case REQUIRED:
      builder.addReqFormal(t);
    break;
case OPTIONAL:
  builder.addOptFormal(t);
break;
case REST:
builder.addRestFormals(t != null ? t : JSType.UNKNOWN);
break;
}
}
}
