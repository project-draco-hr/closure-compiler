{
  if (state.stack.search(value) != -1) {
    throw ScriptRuntime.typeError0("msg.cyclic.value");
  }
  state.stack.push(value);
  String stepback=state.indent;
  state.indent=state.indent + state.gap;
  Object[] k=null;
  if (state.propertyList != null) {
    k=state.propertyList.toArray();
  }
 else {
    k=value.getIds();
  }
  List<Object> partial=new LinkedList<Object>();
  for (  Object p : k) {
    Object strP=str(p,value,state);
    if (strP != Undefined.instance) {
      String member=quote(p.toString()) + ":";
      if (state.gap.length() > 0) {
        member=member + " ";
      }
      member=member + strP;
      partial.add(member);
    }
  }
  final String finalValue;
  if (partial.isEmpty()) {
    finalValue="{}";
  }
 else {
    if (state.gap.length() == 0) {
      finalValue='{' + join(partial,",") + '}';
    }
 else {
      String separator=",\n" + state.indent;
      String properties=join(partial,separator);
      finalValue="{\n" + state.indent + properties+ '\n'+ stepback+ '}';
    }
  }
  state.stack.pop();
  state.indent=stepback;
  return finalValue;
}
