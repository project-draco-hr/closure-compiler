{
  String indent="";
  String gap="";
  List<Object> propertyList=null;
  Callable replacerFunction=null;
  if (replacer instanceof Callable) {
    replacerFunction=(Callable)replacer;
  }
 else   if (replacer instanceof NativeArray) {
    propertyList=new LinkedList<Object>();
    NativeArray replacerArray=(NativeArray)replacer;
    for (    int i : replacerArray.getIndexIds()) {
      Object v=replacerArray.get(i,replacerArray);
      if (v instanceof String || v instanceof Number) {
        propertyList.add(v);
      }
 else       if (v instanceof NativeString || v instanceof NativeNumber) {
        propertyList.add(ScriptRuntime.toString(v));
      }
    }
  }
  if (space instanceof NativeNumber) {
    space=ScriptRuntime.toNumber(space);
  }
 else   if (space instanceof NativeString) {
    space=ScriptRuntime.toString(space);
  }
  if (space instanceof Number) {
    int gapLength=(int)ScriptRuntime.toInteger(space);
    gapLength=Math.min(MAX_STRINGIFY_GAP_LENGTH,gapLength);
    gap=(gapLength > 0) ? repeat(' ',gapLength) : "";
    space=gapLength;
  }
 else   if (space instanceof String) {
    gap=(String)space;
    if (gap.length() > MAX_STRINGIFY_GAP_LENGTH) {
      gap=gap.substring(0,MAX_STRINGIFY_GAP_LENGTH);
    }
  }
  StringifyState state=new StringifyState(cx,scope,indent,gap,replacerFunction,propertyList,space);
  ScriptableObject wrapper=new NativeObject();
  wrapper.setParentScope(scope);
  wrapper.setPrototype(ScriptableObject.getObjectPrototype(scope));
  wrapper.defineProperty("",value,0);
  return str("",wrapper,state);
}
