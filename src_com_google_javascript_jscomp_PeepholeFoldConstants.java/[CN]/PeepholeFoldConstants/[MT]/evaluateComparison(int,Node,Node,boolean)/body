{
  if (NodeUtil.mayHaveSideEffects(left) || NodeUtil.mayHaveSideEffects(right)) {
    return TernaryValue.UNKNOWN;
  }
switch (op) {
case Token.EQ:
    return tryAbstractEqualityComparison(left,right,useTypes);
case Token.NE:
  return tryAbstractEqualityComparison(left,right,useTypes).not();
case Token.SHEQ:
return tryStrictEqualityComparison(left,right,useTypes);
case Token.SHNE:
return tryStrictEqualityComparison(left,right,useTypes).not();
case Token.LT:
return tryAbstractRelationalComparison(left,right,useTypes,false);
case Token.GT:
return tryAbstractRelationalComparison(right,left,useTypes,false);
case Token.LE:
return tryAbstractRelationalComparison(right,left,useTypes,true).not();
case Token.GE:
return tryAbstractRelationalComparison(left,right,useTypes,true).not();
}
throw new IllegalStateException("Unexpected operator for comparison");
}
