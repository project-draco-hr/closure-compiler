{
  if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {
    double result;
    double lval=left.getDouble();
    double rval=right.getDouble();
switch (n.getType()) {
case Token.ADD:
      result=lval + rval;
    break;
case Token.SUB:
  result=lval - rval;
break;
case Token.MUL:
result=lval * rval;
break;
case Token.MOD:
if (rval == 0) {
error(DIVIDE_BY_0_ERROR,right);
return n;
}
result=lval % rval;
break;
case Token.DIV:
if (rval == 0) {
error(DIVIDE_BY_0_ERROR,right);
return n;
}
result=lval / rval;
break;
default :
throw new Error("Unknown arithmetic operator");
}
if (String.valueOf(result).length() <= String.valueOf(lval).length() + String.valueOf(rval).length() + 1 && Math.abs(result) <= MAX_FOLD_NUMBER) {
Node newNumber=Node.newNumber(result);
n.getParent().replaceChild(n,newNumber);
reportCodeChange();
return newNumber;
}
}
return n;
}
