{
  Preconditions.checkState(n.hasOneChild(),n);
  Node left=n.getFirstChild();
  Node parent=n.getParent();
  if (left == null) {
    return n;
  }
  TernaryValue leftVal=NodeUtil.getPureBooleanValue(left);
  if (leftVal == TernaryValue.UNKNOWN) {
    return n;
  }
switch (n.getToken()) {
case NOT:
    if (late && left.isNumber()) {
      double numValue=left.getDouble();
      if (numValue == 0 || numValue == 1) {
        return n;
      }
    }
  Node replacementNode=NodeUtil.booleanNode(!leftVal.toBoolean(true));
parent.replaceChild(n,replacementNode);
reportCodeChange();
return replacementNode;
case POS:
if (NodeUtil.isNumericResult(left)) {
parent.replaceChild(n,left.detachFromParent());
reportCodeChange();
return left;
}
return n;
case NEG:
if (left.isName()) {
if (left.getString().equals("Infinity")) {
return n;
}
 else if (left.getString().equals("NaN")) {
n.removeChild(left);
parent.replaceChild(n,left);
reportCodeChange();
return left;
}
}
if (left.isNumber()) {
double negNum=-left.getDouble();
Node negNumNode=IR.number(negNum);
parent.replaceChild(n,negNumNode);
reportCodeChange();
return negNumNode;
}
 else {
report(NEGATING_A_NON_NUMBER_ERROR,left);
return n;
}
case BITNOT:
try {
double val=left.getDouble();
if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {
int intVal=(int)val;
if (intVal == val) {
Node notIntValNode=IR.number(~intVal);
parent.replaceChild(n,notIntValNode);
reportCodeChange();
return notIntValNode;
}
 else {
report(FRACTIONAL_BITWISE_OPERAND,left);
return n;
}
}
 else {
report(BITWISE_OPERAND_OUT_OF_RANGE,left);
return n;
}
}
 catch (UnsupportedOperationException ex) {
report(NEGATING_A_NON_NUMBER_ERROR,left);
return n;
}
default :
return n;
}
}
