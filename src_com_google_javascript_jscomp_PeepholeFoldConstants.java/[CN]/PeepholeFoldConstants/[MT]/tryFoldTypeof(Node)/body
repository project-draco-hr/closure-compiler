{
  Preconditions.checkArgument(originalTypeofNode.isTypeOf());
  Node argumentNode=originalTypeofNode.getFirstChild();
  if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode,true)) {
    return originalTypeofNode;
  }
  String typeNameString=null;
switch (argumentNode.getType()) {
case Token.FUNCTION:
    typeNameString="function";
  break;
case Token.STRING:
typeNameString="string";
break;
case Token.NUMBER:
typeNameString="number";
break;
case Token.TRUE:
case Token.FALSE:
typeNameString="boolean";
break;
case Token.NULL:
case Token.OBJECTLIT:
case Token.ARRAYLIT:
typeNameString="object";
break;
case Token.VOID:
typeNameString="undefined";
break;
case Token.NAME:
if ("undefined".equals(argumentNode.getString())) {
typeNameString="undefined";
}
break;
}
if (typeNameString != null) {
Node newNode=Node.newString(typeNameString);
originalTypeofNode.getParent().replaceChild(originalTypeofNode,newNode);
reportCodeChange();
return newNode;
}
return originalTypeofNode;
}
