{
  Node left=subtree.getFirstChild();
  if (left == null) {
    return subtree;
  }
  Node right=left.getNext();
  if (right == null) {
    return subtree;
  }
switch (subtree.getToken()) {
case GETPROP:
    return tryFoldGetProp(subtree,left,right);
case GETELEM:
  return tryFoldGetElem(subtree,left,right);
case INSTANCEOF:
return tryFoldInstanceof(subtree,left,right);
case AND:
case OR:
return tryFoldAndOr(subtree,left,right);
case LSH:
case RSH:
case URSH:
return tryFoldShift(subtree,left,right);
case ASSIGN:
return tryFoldAssign(subtree,left,right);
case ASSIGN_BITOR:
case ASSIGN_BITXOR:
case ASSIGN_BITAND:
case ASSIGN_LSH:
case ASSIGN_RSH:
case ASSIGN_URSH:
case ASSIGN_ADD:
case ASSIGN_SUB:
case ASSIGN_MUL:
case ASSIGN_DIV:
case ASSIGN_MOD:
return tryUnfoldAssignOp(subtree,left,right);
case ADD:
return tryFoldAdd(subtree,left,right);
case SUB:
case DIV:
case MOD:
return tryFoldArithmeticOp(subtree,left,right);
case MUL:
case BITAND:
case BITOR:
case BITXOR:
Node result=tryFoldArithmeticOp(subtree,left,right);
if (result != subtree) {
return result;
}
return tryFoldLeftChildOp(subtree,left,right);
case LT:
case GT:
case LE:
case GE:
case EQ:
case NE:
case SHEQ:
case SHNE:
return tryFoldComparison(subtree,left,right);
default :
return subtree;
}
}
