{
  Preconditions.checkArgument(n.getType() == Token.CALL);
  Preconditions.checkArgument(stringNode.getType() == Token.STRING);
  int start, end;
  String stringAsString=stringNode.getString();
  if (arg1 != null && arg1.getType() == Token.NUMBER) {
    start=(int)arg1.getDouble();
  }
 else {
    return n;
  }
  Node arg2=arg1.getNext();
  if (arg2 != null) {
    if (arg2.getType() == Token.NUMBER) {
      end=(int)arg2.getDouble();
    }
 else {
      return n;
    }
    if (arg2.getNext() != null) {
      return n;
    }
  }
 else {
    end=stringAsString.length();
  }
  if ((end > stringAsString.length()) || (start > stringAsString.length()) || (end < 0)|| (start < 0)) {
    return n;
  }
  String result=stringAsString.substring(start,end);
  Node resultNode=Node.newString(result);
  Node parent=n.getParent();
  parent.replaceChild(n,resultNode);
  reportCodeChange();
  return resultNode;
}
