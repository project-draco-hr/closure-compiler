{
  int opType=n.getType();
  Preconditions.checkState(NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType));
  if (right.getType() == Token.NUMBER && left.getType() == opType) {
    Preconditions.checkState(left.getChildCount() == 2);
    Node ll=left.getFirstChild();
    Node lr=ll.getNext();
    Node valueToCombine;
    if (ll.getType() == Token.NUMBER) {
      valueToCombine=ll;
    }
 else     if (lr.getType() == Token.NUMBER) {
      valueToCombine=lr;
    }
 else {
      return n;
    }
    Node replacement=performArithmeticOp(opType,valueToCombine,right);
    if (replacement != null) {
      left.removeChild(valueToCombine);
      n.replaceChild(left,left.removeFirstChild());
      n.replaceChild(right,replacement);
      reportCodeChange();
    }
  }
  return n;
}
