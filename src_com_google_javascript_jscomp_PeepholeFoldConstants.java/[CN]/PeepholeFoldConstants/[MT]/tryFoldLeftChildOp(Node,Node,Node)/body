{
  Token opType=n.getToken();
  Preconditions.checkState((NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.isAdd());
  Preconditions.checkState(!n.isAdd() || !NodeUtil.mayBeString(n,shouldUseTypes));
  Double rightValObj=NodeUtil.getNumberValue(right,shouldUseTypes);
  if (rightValObj != null && left.getToken() == opType) {
    Preconditions.checkState(left.getChildCount() == 2);
    Node ll=left.getFirstChild();
    Node lr=ll.getNext();
    Node valueToCombine=ll;
    Node replacement=performArithmeticOp(opType,valueToCombine,right);
    if (replacement == null) {
      valueToCombine=lr;
      replacement=performArithmeticOp(opType,valueToCombine,right);
    }
    if (replacement != null) {
      left.removeChild(valueToCombine);
      n.replaceChild(left,left.removeFirstChild());
      replacement.useSourceInfoIfMissingFromForTree(right);
      n.replaceChild(right,replacement);
      reportCodeChange();
    }
  }
  return n;
}
