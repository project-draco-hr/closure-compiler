{
  if (left.isNumber() && right.isNumber()) {
    double result;
    double lval=left.getDouble();
    double rval=right.getDouble();
    if (!(rval >= 0 && rval < 32)) {
      report(SHIFT_AMOUNT_OUT_OF_BOUNDS,n);
      return n;
    }
    int rvalInt=(int)rval;
    if (rvalInt != rval) {
      report(FRACTIONAL_BITWISE_OPERAND,right);
      return n;
    }
    if (Math.floor(lval) != lval) {
      report(FRACTIONAL_BITWISE_OPERAND,left);
      return n;
    }
    int bits=jsConvertDoubleToBits(lval);
switch (n.getToken()) {
case LSH:
      result=bits << rvalInt;
    break;
case RSH:
  result=bits >> rvalInt;
break;
case URSH:
result=0xffffffffL & (bits >>> rvalInt);
break;
default :
throw new AssertionError("Unknown shift operator: " + n.getToken());
}
Node newNumber=IR.number(result);
n.getParent().replaceChild(n,newNumber);
reportCodeChange();
return newNumber;
}
return n;
}
