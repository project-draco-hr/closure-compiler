{
  Node parent=n.getParent();
  Node result=null;
  int type=n.getType();
  TernaryValue leftVal=NodeUtil.getBooleanValue(left);
  if (leftVal != TernaryValue.UNKNOWN) {
    boolean lval=leftVal.toBoolean(true);
    if (lval && type == Token.OR || !lval && type == Token.AND) {
      result=left;
    }
 else {
      result=right;
    }
  }
 else {
    TernaryValue rightVal=NodeUtil.getBooleanValue(right);
    if (rightVal != TernaryValue.UNKNOWN) {
      int pt=parent.getType();
      if (pt == Token.IF || pt == Token.WHILE || pt == Token.DO || (pt == Token.FOR && NodeUtil.getConditionExpression(parent) == n) || (pt == Token.HOOK && parent.getFirstChild() == n)) {
        boolean rval=rightVal.toBoolean(true);
        if (type == Token.OR && !rval || type == Token.AND && rval) {
          result=left;
        }
 else {
          if (!mayHaveSideEffects(left)) {
            result=right;
          }
        }
      }
    }
  }
  if (result != null) {
    n.removeChild(result);
    parent.replaceChild(n,result);
    reportCodeChange();
    return result;
  }
 else {
    return n;
  }
}
