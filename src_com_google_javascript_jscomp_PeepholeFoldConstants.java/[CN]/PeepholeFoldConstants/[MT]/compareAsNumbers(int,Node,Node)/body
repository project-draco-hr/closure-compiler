{
  Double leftValue=NodeUtil.getNumberValue(left);
  if (leftValue == null) {
    return TernaryValue.UNKNOWN;
  }
  Double rightValue=NodeUtil.getNumberValue(right);
  if (rightValue == null) {
    return TernaryValue.UNKNOWN;
  }
  double lv=leftValue;
  double rv=rightValue;
switch (op) {
case Token.SHEQ:
case Token.EQ:
    Preconditions.checkState(left.isNumber() && right.isNumber());
  return TernaryValue.forBoolean(lv == rv);
case Token.SHNE:
case Token.NE:
Preconditions.checkState(left.isNumber() && right.isNumber());
return TernaryValue.forBoolean(lv != rv);
case Token.LE:
return TernaryValue.forBoolean(lv <= rv);
case Token.LT:
return TernaryValue.forBoolean(lv < rv);
case Token.GE:
return TernaryValue.forBoolean(lv >= rv);
case Token.GT:
return TernaryValue.forBoolean(lv > rv);
default :
return TernaryValue.UNKNOWN;
}
}
