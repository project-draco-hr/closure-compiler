{
  Preconditions.checkArgument(n.isAssign());
  if (!late) {
    return n;
  }
  if (!right.hasChildren() || right.getSecondChild() != right.getLastChild()) {
    return n;
  }
  if (mayHaveSideEffects(left)) {
    return n;
  }
  Node newRight;
  if (areNodesEqualForInlining(left,right.getFirstChild())) {
    newRight=right.getLastChild();
  }
 else   if (NodeUtil.isCommutative(right.getToken()) && areNodesEqualForInlining(left,right.getLastChild())) {
    newRight=right.getFirstChild();
  }
 else {
    return n;
  }
  Token newType=null;
switch (right.getToken()) {
case ADD:
    newType=Token.ASSIGN_ADD;
  break;
case BITAND:
newType=Token.ASSIGN_BITAND;
break;
case BITOR:
newType=Token.ASSIGN_BITOR;
break;
case BITXOR:
newType=Token.ASSIGN_BITXOR;
break;
case DIV:
newType=Token.ASSIGN_DIV;
break;
case LSH:
newType=Token.ASSIGN_LSH;
break;
case MOD:
newType=Token.ASSIGN_MOD;
break;
case MUL:
newType=Token.ASSIGN_MUL;
break;
case RSH:
newType=Token.ASSIGN_RSH;
break;
case SUB:
newType=Token.ASSIGN_SUB;
break;
case URSH:
newType=Token.ASSIGN_URSH;
break;
default :
return n;
}
Node newNode=new Node(newType,left.detachFromParent(),newRight.detachFromParent());
n.getParent().replaceChild(n,newNode);
reportCodeChange();
return newNode;
}
