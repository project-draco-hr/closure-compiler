{
  NameGenerator globalNameGenerator=null;
  NameGenerator localNameGenerator=null;
  globalNameGenerator=nameGenerator;
  nameGenerator.reset(reservedNames,prefix,reservedCharacters);
  localNameGenerator=prefix.isEmpty() ? globalNameGenerator : nameGenerator.clone(reservedNames,"",reservedCharacters);
  List<Assignment> pendingAssignments=new ArrayList<>();
  List<String> generatedNamesForAssignments=new ArrayList<>();
  for (  Assignment a : varsToRename) {
    if (a.newName != null) {
      continue;
    }
    if (externNames.contains(a.oldName)) {
      continue;
    }
    String newName;
    if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {
      newName=localNameGenerator.generateNextName();
      finalizeNameAssignment(a,newName);
    }
 else {
      newName=globalNameGenerator.generateNextName();
      pendingAssignments.add(a);
      generatedNamesForAssignments.add(newName);
    }
    reservedNames.add(newName);
  }
  int numPendingAssignments=generatedNamesForAssignments.size();
  for (int i=0; i < numPendingAssignments; ) {
    SortedSet<Assignment> varsByOrderOfOccurrence=new TreeSet<>(ORDER_OF_OCCURRENCE_COMPARATOR);
    int len=generatedNamesForAssignments.get(i).length();
    for (int j=i; j < numPendingAssignments && generatedNamesForAssignments.get(j).length() == len; j++) {
      varsByOrderOfOccurrence.add(pendingAssignments.get(j));
    }
    for (    Assignment a : varsByOrderOfOccurrence) {
      finalizeNameAssignment(a,generatedNamesForAssignments.get(i));
      ++i;
    }
  }
}
