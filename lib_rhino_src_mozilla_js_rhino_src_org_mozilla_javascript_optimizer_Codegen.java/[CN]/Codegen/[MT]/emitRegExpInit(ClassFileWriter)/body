{
  int totalRegCount=0;
  for (int i=0; i != scriptOrFnNodes.length; ++i) {
    totalRegCount+=scriptOrFnNodes[i].getRegexpCount();
  }
  if (totalRegCount == 0) {
    return;
  }
  cfw.startMethod(REGEXP_INIT_METHOD_NAME,REGEXP_INIT_METHOD_SIGNATURE,(short)(ClassFileWriter.ACC_STATIC | ClassFileWriter.ACC_PRIVATE | ClassFileWriter.ACC_SYNCHRONIZED));
  cfw.addField("_reInitDone","Z",(short)(ClassFileWriter.ACC_STATIC | ClassFileWriter.ACC_PRIVATE));
  cfw.add(ByteCode.GETSTATIC,mainClassName,"_reInitDone","Z");
  int doInit=cfw.acquireLabel();
  cfw.add(ByteCode.IFEQ,doInit);
  cfw.add(ByteCode.RETURN);
  cfw.markLabel(doInit);
  for (int i=0; i != scriptOrFnNodes.length; ++i) {
    ScriptNode n=scriptOrFnNodes[i];
    int regCount=n.getRegexpCount();
    for (int j=0; j != regCount; ++j) {
      String reFieldName=getCompiledRegexpName(n,j);
      String reFieldType="Ljava/lang/Object;";
      String reString=n.getRegexpString(j);
      String reFlags=n.getRegexpFlags(j);
      cfw.addField(reFieldName,reFieldType,(short)(ClassFileWriter.ACC_STATIC | ClassFileWriter.ACC_PRIVATE));
      cfw.addALoad(0);
      cfw.addALoad(1);
      cfw.addPush(reString);
      if (reFlags == null) {
        cfw.add(ByteCode.ACONST_NULL);
      }
 else {
        cfw.addPush(reFlags);
      }
      cfw.addInvoke(ByteCode.INVOKEINTERFACE,"org/mozilla/javascript/RegExpProxy","compileRegExp","(Lorg/mozilla/javascript/Context;" + "Ljava/lang/String;Ljava/lang/String;" + ")Ljava/lang/Object;");
      cfw.add(ByteCode.PUTSTATIC,mainClassName,reFieldName,reFieldType);
    }
  }
  cfw.addPush(1);
  cfw.add(ByteCode.PUTSTATIC,mainClassName,"_reInitDone","Z");
  cfw.add(ByteCode.RETURN);
  cfw.stopMethod((short)2);
}
