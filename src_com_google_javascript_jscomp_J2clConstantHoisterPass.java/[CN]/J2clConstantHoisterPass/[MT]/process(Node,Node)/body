{
  if (!J2clSourceFileChecker.shouldRunJ2clPasses(compiler)) {
    return;
  }
  if (j2clChangeTracker != null && j2clChangeTracker.isEnabled() && !j2clChangeTracker.hasChanged()) {
    return;
  }
  final Multimap<String,Node> fieldAssignments=ArrayListMultimap.create();
  final Set<Node> hoistableFunctions=new HashSet<>();
  NodeTraversal.traverseEs6(compiler,root,new AbstractPostOrderCallback(){
    @Override public void visit(    NodeTraversal t,    Node node,    Node parent){
      if (parent != null && NodeUtil.isLValue(node)) {
        fieldAssignments.put(node.getQualifiedName(),parent);
      }
      if (isHoistableFunction(t,node)) {
        hoistableFunctions.add(node);
      }
    }
  }
);
  for (  Collection<Node> assignments : fieldAssignments.asMap().values()) {
    maybeHoistClassField(assignments,hoistableFunctions);
  }
}
