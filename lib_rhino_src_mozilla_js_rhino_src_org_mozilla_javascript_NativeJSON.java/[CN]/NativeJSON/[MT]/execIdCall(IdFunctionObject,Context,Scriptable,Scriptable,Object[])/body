{
  if (!f.hasTag(JSON_TAG)) {
    return super.execIdCall(f,cx,scope,thisObj,args);
  }
  int methodId=f.methodId();
switch (methodId) {
case Id_toSource:
    return "JSON";
case Id_parse:
{
    String jtext=ScriptRuntime.toString(args,0);
    Object reviver=null;
    if (args.length > 1) {
      reviver=args[1];
    }
    if (reviver instanceof Callable) {
      return parse(cx,scope,jtext,(Callable)reviver);
    }
 else {
      return parse(cx,scope,jtext);
    }
  }
case Id_stringify:
{
  Object value=null, replacer=null, space=null;
switch (args.length) {
default :
case 3:
    space=args[2];
case 2:
  replacer=args[1];
case 1:
value=args[0];
case 0:
}
return stringify(cx,scope,value,replacer,space);
}
default :
throw new IllegalStateException(String.valueOf(methodId));
}
}
