{
  mode=LanguageMode.ECMASCRIPT6;
  expectFeatures(Feature.FOR_OF,Feature.DESTRUCTURING);
  parseError("for({x}=a of b) c;",INVALID_ASSIGNMENT_TARGET);
  parseError("for({x: y}=a of b) c;",INVALID_ASSIGNMENT_TARGET);
  parseError("for([x, y]=a of b) c;",INVALID_ASSIGNMENT_TARGET);
  parseError("for([x, ...y]=a of b) c;",INVALID_ASSIGNMENT_TARGET);
  expectFeatures(Feature.FOR_OF,Feature.DESTRUCTURING,Feature.LET_DECLARATIONS);
  parseError("for(let {x}=a of b) c;","for-of statement may not have initializer");
  parseError("for(let {x: y}=a of b) c;","for-of statement may not have initializer");
  parseError("for(let [x, y]=a of b) c;","for-of statement may not have initializer");
  parseError("for(let [x, ...y]=a of b) c;","for-of statement may not have initializer");
  expectFeatures(Feature.FOR_OF,Feature.DESTRUCTURING,Feature.CONST_DECLARATIONS);
  parseError("for(const {x}=a of b) c;","for-of statement may not have initializer");
  parseError("for(const {x: y}=a of b) c;","for-of statement may not have initializer");
  parseError("for(const [x, y]=a of b) c;","for-of statement may not have initializer");
  parseError("for(const [x, ...y]=a of b) c;","for-of statement may not have initializer");
}
