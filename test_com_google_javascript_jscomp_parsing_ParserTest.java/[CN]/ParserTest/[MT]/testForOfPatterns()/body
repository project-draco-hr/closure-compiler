{
  expectFeatures(Feature.FOR_OF,Feature.DESTRUCTURING);
  mode=LanguageMode.ECMASCRIPT6;
  parse("for({x} of b) c;");
  parse("for({x: y} of b) c;");
  parse("for([x, y] of b) c;");
  parse("for([x, ...y] of b) c;");
  expectFeatures(Feature.FOR_OF,Feature.DESTRUCTURING,Feature.LET_DECLARATIONS);
  parse("for(let {x} of b) c;");
  parse("for(let {x: y} of b) c;");
  parse("for(let [x, y] of b) c;");
  parse("for(let [x, ...y] of b) c;");
  expectFeatures(Feature.FOR_OF,Feature.DESTRUCTURING,Feature.CONST_DECLARATIONS);
  parse("for(const {x} of b) c;");
  parse("for(const {x: y} of b) c;");
  parse("for(const [x, y] of b) c;");
  parse("for(const [x, ...y] of b) c;");
  expectFeatures(Feature.FOR_OF,Feature.DESTRUCTURING);
  parse("for(var {x} of b) c;");
  parse("for(var {x: y} of b) c;");
  parse("for(var [x, y] of b) c;");
  parse("for(var [x, ...y] of b) c;");
}
