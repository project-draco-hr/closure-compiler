{
  Node varNode=parse("/** @type {number} */var a;").getFirstChild();
  assertNode(varNode).hasType(Token.VAR);
  JSDocInfo varInfo=varNode.getJSDocInfo();
  assertThat(varInfo).isNotNull();
  assertTypeEquals(NUMBER_TYPE,varInfo.getType());
  Node varNameNode=varNode.getFirstChild();
  assertNode(varNameNode).hasType(Token.NAME);
  assertThat(varNameNode.getJSDocInfo()).isNull();
  mode=LanguageMode.ECMASCRIPT6;
  expectFeatures(Feature.LET_DECLARATIONS);
  Node letNode=parse("/** @type {number} */let a;").getFirstChild();
  assertNode(letNode).hasType(Token.LET);
  JSDocInfo letInfo=letNode.getJSDocInfo();
  assertThat(letInfo).isNotNull();
  assertTypeEquals(NUMBER_TYPE,letInfo.getType());
  Node letNameNode=letNode.getFirstChild();
  assertNode(letNameNode).hasType(Token.NAME);
  assertThat(letNameNode.getJSDocInfo()).isNull();
  expectFeatures(Feature.CONST_DECLARATIONS);
  Node constNode=parse("/** @type {number} */const a = 0;").getFirstChild();
  assertNode(constNode).hasType(Token.CONST);
  JSDocInfo constInfo=constNode.getJSDocInfo();
  assertThat(constInfo).isNotNull();
  assertTypeEquals(NUMBER_TYPE,constInfo.getType());
  Node constNameNode=constNode.getFirstChild();
  assertNode(constNameNode).hasType(Token.NAME);
  assertThat(constNameNode.getJSDocInfo()).isNull();
}
