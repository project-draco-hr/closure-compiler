{
  Preconditions.checkArgument(getProp.isGetProp());
  QualifiedName qname=QualifiedName.fromGetprop(getProp);
  String leftmost=qname.getLeftmostName();
  QualifiedName allButLeftmost=qname.getAllButLeftmost();
  JSType currentType=currentScope.getDeclaredTypeOf(leftmost);
  JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(getProp);
  JSType typeInJsdoc=getTypeDeclarationFromJsdoc(jsdoc,currentScope);
  boolean isConst=NodeUtil.hasConstAnnotation(getProp);
  if (NodeUtil.isNamespaceDecl(getProp)) {
    currentScope.updateTypeOfLocal(leftmost,currentType.withProperty(allButLeftmost,JSType.TOP_OBJECT));
  }
 else   if (typeInJsdoc != null || isConst) {
    JSType previousPropType=currentType.getDeclaredProp(allButLeftmost);
    if (currentType.mayHaveProp(allButLeftmost) && previousPropType != null && !suppressDupPropWarning(jsdoc,typeInJsdoc,previousPropType)) {
      warnings.add(JSError.make(getProp,REDECLARED_PROPERTY,allButLeftmost.toString(),currentType.toString()));
      return;
    }
    JSType declType=typeInJsdoc;
    if (isConst && !mayWarnAboutNoInit(getProp) && declType == null) {
      declType=inferConstTypeFromRhs(getProp);
    }
    currentScope.updateTypeOfLocal(leftmost,currentType.withDeclaredProperty(allButLeftmost,declType,isConst));
  }
 else   if (getProp.getParent().isAssign()) {
    JSType t=simpleInferExprType(getProp.getParent().getLastChild());
    if (t == null) {
      t=JSType.UNKNOWN;
    }
    currentScope.updateTypeOfLocal(leftmost,currentType.withProperty(allButLeftmost,t));
  }
 else {
    currentScope.updateTypeOfLocal(leftmost,currentType.withProperty(allButLeftmost,JSType.UNKNOWN));
  }
}
