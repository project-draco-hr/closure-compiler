{
  if (recv.isGetProp() && recv.getLastChild().getString().equals("prototype")) {
    return simpleInferPrototypeProperty(recv.getFirstChild(),pname);
  }
  if (!recv.isQualifiedName()) {
    return null;
  }
  QualifiedName recvQname=QualifiedName.fromNode(recv);
  Declaration decl=this.currentScope.getDeclaration(recvQname,false);
  QualifiedName propQname=new QualifiedName(pname);
  if (decl != null) {
    EnumType et=decl.getEnum();
    if (et != null && et.enumLiteralHasKey(pname)) {
      return et.getEnumeratedType();
    }
    Namespace ns=decl.getNamespace();
    if (ns != null) {
      return simpleInferDeclaration(ns.getDeclaration(propQname));
    }
  }
  JSType recvType=simpleInferExprType(recv);
  if (recvType != null && recvType.mayHaveProp(propQname)) {
    return recvType.getProp(propQname);
  }
  return null;
}
