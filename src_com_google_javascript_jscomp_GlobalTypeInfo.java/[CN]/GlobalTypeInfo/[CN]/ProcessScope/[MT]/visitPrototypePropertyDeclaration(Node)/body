{
  Preconditions.checkArgument(getProp.isGetProp());
  Node parent=getProp.getParent();
  Node initializer=parent.isAssign() ? parent.getLastChild() : null;
  Node ctorNameNode=NodeUtil.getPrototypeClassName(getProp);
  String ctorName=ctorNameNode.getQualifiedName();
  RawNominalType rawType=currentScope.getNominalType(ctorName);
  if (rawType == null) {
    return;
  }
  if (!currentScope.isDefinedLocally(ctorName)) {
    warnings.add(JSError.make(getProp,CTOR_IN_DIFFERENT_SCOPE));
    return;
  }
  String pname=NodeUtil.getPrototypePropertyName(getProp);
  JSType propDeclType;
  DeclaredFunctionType methodType;
  Scope methodScope=null;
  if (initializer != null && initializer.isFunction()) {
    methodScope=visitFunctionDef(initializer,rawType);
    methodType=methodScope.getDeclaredType();
    propDeclType=JSType.fromFunctionType(methodType.toFunctionType());
  }
 else {
    JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(getProp);
    if (jsdoc == null) {
      methodType=null;
      propDeclType=null;
    }
 else     if (jsdoc.hasType() && !jsdoc.getType().getRoot().isFunction()) {
      methodType=null;
      propDeclType=typeParser.getNodeTypeDeclaration(jsdoc,rawType,currentScope);
    }
 else {
      methodType=computeFnDeclaredType(jsdoc,pname,getProp,rawType,currentScope);
      propDeclType=JSType.fromFunctionType(methodType.toFunctionType());
    }
  }
  propertyDefs.put(rawType.getId(),pname,new PropertyDef(getProp,methodType,methodScope));
  if (propDeclType != null) {
    if (mayWarnAboutExistingProp(rawType,pname,getProp)) {
      return;
    }
    rawType.addProtoProperty(pname,propDeclType);
  }
 else {
    rawType.addUndeclaredProtoProperty(pname);
  }
}
