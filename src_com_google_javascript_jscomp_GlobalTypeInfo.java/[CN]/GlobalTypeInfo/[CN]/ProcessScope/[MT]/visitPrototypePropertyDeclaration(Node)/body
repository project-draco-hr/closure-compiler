{
  Node expr=exprResult.getFirstChild();
  Node getPropNode, initializer;
  if (expr.isAssign()) {
    getPropNode=expr.getFirstChild();
    initializer=expr.getLastChild();
  }
 else {
    getPropNode=expr;
    initializer=null;
  }
  Node ctorNameNode=NodeUtil.getPrototypeClassName(getPropNode);
  String ctorName=ctorNameNode.getQualifiedName();
  if (currentScope.isDefinedLocally(ctorName)) {
    NominalType nominalType=currentScope.getLocalNominalType(ctorName);
    if (nominalType == null) {
      return;
    }
    String pname=NodeUtil.getPrototypePropertyName(getPropNode);
    JSType propDeclType;
    Scope methodScope=null;
    if (initializer != null && initializer.isFunction()) {
      methodScope=visitFunctionDef(initializer,nominalType);
      propDeclType=JSType.fromFunctionType(methodScope.getDeclaredType().toFunctionType());
    }
 else {
      propDeclType=typeParser.getNodeTypeDeclaration(expr.getJSDocInfo(),nominalType,currentScope);
    }
    propertyDefs.put(nominalType,pname,new PropertyDef(exprResult,methodScope));
    if (propDeclType != null) {
      if (mayWarnAboutExistingProp(nominalType,pname,expr)) {
        return;
      }
      nominalType.addProtoProperty(pname,propDeclType);
    }
 else {
      nominalType.addUndeclaredProtoProperty(pname);
    }
  }
 else {
    warnings.add(JSError.make(expr,CTOR_IN_DIFFERENT_SCOPE));
  }
}
