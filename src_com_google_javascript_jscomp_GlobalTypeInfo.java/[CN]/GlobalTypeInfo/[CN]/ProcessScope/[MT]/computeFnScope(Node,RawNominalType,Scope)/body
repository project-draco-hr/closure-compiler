{
  Preconditions.checkArgument(fn.isFunction());
  JSDocInfo fnDoc=NodeUtil.getFunctionJSDocInfo(fn);
  String functionName=getFunInternalName(fn);
  DeclaredFunctionType declFunType=computeFnDeclaredType(fnDoc,functionName,fn,ownerType,parentScope);
  ArrayList<String> formals=Lists.newArrayList();
  ArrayList<String> tmpRestFormals=Lists.newArrayList();
  Node param=NodeUtil.getFunctionParameters(fn).getFirstChild();
  int optionalArity=declFunType.getOptionalArity();
  int formalIndex=0;
  while (param != null) {
    if (!typeParser.isRestArg(fnDoc,param.getString()) || formalIndex < optionalArity) {
      formals.add(param.getString());
    }
 else {
      tmpRestFormals.add(param.getString());
    }
    param=param.getNext();
    formalIndex++;
  }
  if (fnDoc != null) {
    for (    String formalInJsdoc : fnDoc.getParameterNames()) {
      if (!formals.contains(formalInJsdoc) && !tmpRestFormals.contains(formalInJsdoc)) {
        warnings.add(JSError.make(fn,INEXISTENT_PARAM,formalInJsdoc,functionName));
      }
    }
  }
  return new Scope(fn,parentScope,formals,declFunType);
}
