{
switch (n.getType()) {
case Token.REGEXP:
    return commonTypes.getRegexpType();
case Token.ARRAYLIT:
{
    if (!n.hasChildren()) {
      return null;
    }
    Node child=n.getFirstChild();
    JSType arrayType=simpleInferExprType(child);
    if (arrayType == null) {
      return null;
    }
    while (null != (child=child.getNext())) {
      if (!arrayType.equals(simpleInferExprType(child))) {
        return null;
      }
    }
    return commonTypes.getArrayInstance(arrayType);
  }
case Token.TRUE:
return JSType.TRUE_TYPE;
case Token.FALSE:
return JSType.FALSE_TYPE;
case Token.NAME:
{
String varName=n.getString();
if (varName.equals("undefined")) {
return JSType.UNDEFINED;
}
 else if (currentScope.isNamespace(varName)) {
return null;
}
return currentScope.getDeclaredTypeOf(varName);
}
case Token.OBJECTLIT:
{
JSType objLitType=JSType.TOP_OBJECT;
for (Node prop : n.children()) {
JSType propType=simpleInferExprType(prop.getFirstChild());
if (propType == null) {
return null;
}
objLitType=objLitType.withProperty(new QualifiedName(NodeUtil.getObjectLitKeyName(prop)),propType);
}
return objLitType;
}
case Token.GETPROP:
Node recv=n.getFirstChild();
if (recv.isQualifiedName()) {
EnumType et=currentScope.getEnum(QualifiedName.fromNode(recv));
if (et != null && et.enumLiteralHasKey(n.getLastChild().getString())) {
return et.getEnumeratedType();
}
if (currentScope.isNamespace(recv)) {
return null;
}
JSType recvType=simpleInferExprType(recv);
QualifiedName qname=new QualifiedName(n.getLastChild().getString());
if (recvType != null && recvType.mayHaveProp(qname)) {
return recvType.getProp(qname);
}
}
return null;
case Token.COMMA:
case Token.ASSIGN:
return simpleInferExprType(n.getLastChild());
case Token.CALL:
case Token.NEW:
{
Node callee=n.getFirstChild();
if (callee.matchesQualifiedName("goog.getMsg")) {
return JSType.STRING;
}
FunctionType funType=simpleInferFunctionType(callee);
if (funType == null) {
return null;
}
if (funType.isGeneric()) {
ImmutableList.Builder<JSType> argTypes=ImmutableList.builder();
for (Node argNode=n.getFirstChild().getNext(); argNode != null; argNode=argNode.getNext()) {
JSType t=simpleInferExprType(argNode);
if (t == null) {
return null;
}
argTypes.add(t);
}
funType=funType.instantiateGenericsFromArgumentTypes(argTypes.build());
if (funType == null) {
return null;
}
}
JSType retType=n.isNew() ? funType.getThisType() : funType.getReturnType();
return retType;
}
default :
switch (NodeUtil.getKnownValueType(n)) {
case NULL:
return JSType.NULL;
case VOID:
return JSType.UNDEFINED;
case NUMBER:
return JSType.NUMBER;
case STRING:
return JSType.STRING;
case BOOLEAN:
return JSType.BOOLEAN;
case UNDETERMINED:
default :
return null;
}
}
}
