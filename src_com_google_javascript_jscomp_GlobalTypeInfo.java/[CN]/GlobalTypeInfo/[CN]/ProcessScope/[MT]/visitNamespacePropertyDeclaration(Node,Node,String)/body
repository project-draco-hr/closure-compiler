{
  Preconditions.checkArgument(declNode.isGetProp() || declNode.isStringKey());
  Preconditions.checkArgument(currentScope.isNamespace(recv));
  EnumType et=currentScope.getEnum(QualifiedName.fromNode(recv));
  if (et != null && et.enumLiteralHasKey(pname)) {
    return;
  }
  Namespace ns=currentScope.getNamespace(QualifiedName.fromNode(recv));
  JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(declNode);
  JSType propDeclType=getTypeAtPropDeclNode(declNode,jsdoc);
  boolean isConst=isConst(declNode);
  if (propDeclType != null || isConst) {
    JSType previousPropType=ns.getPropDeclaredType(pname);
    if (ns.hasProp(pname) && previousPropType != null && !suppressDupPropWarning(jsdoc,propDeclType,previousPropType)) {
      warnings.add(JSError.make(declNode,REDECLARED_PROPERTY,pname,ns.toString()));
      return;
    }
    if (isConst && !mayWarnAboutNoInit(declNode) && propDeclType == null) {
      propDeclType=inferConstTypeFromRhs(declNode);
    }
    ns.addProperty(pname,declNode,propDeclType,isConst);
    declNode.putBooleanProp(Node.ANALYZED_DURING_GTI,true);
    if (declNode.isGetProp() && isConst) {
      declNode.putBooleanProp(Node.CONSTANT_PROPERTY_DEF,true);
    }
  }
 else {
    Node initializer=NodeUtil.getRValueOfLValue(declNode);
    JSType t=initializer == null ? null : simpleInferExprType(initializer);
    if (t == null) {
      t=JSType.UNKNOWN;
    }
    ns.addUndeclaredProperty(pname,declNode,t,false);
  }
}
