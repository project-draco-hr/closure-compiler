{
switch (n.getType()) {
case Token.FUNCTION:
    Node grandparent=parent.getParent();
  if (grandparent == null || !isPrototypePropertyDeclaration(grandparent)) {
    visitFunctionLate(n,null);
  }
break;
case Token.NAME:
{
String name=n.getString();
if (name == null || "undefined".equals(name) || parent.isFunction()) {
  return;
}
if (parent.isVar() || parent.isCatch()) {
  if (NodeUtil.isNamespaceDecl(n) || NodeUtil.isTypedefDecl(n) || NodeUtil.isEnumDecl(n)) {
    if (!currentScope.isDefinedLocally(name)) {
      currentScope.addLocal(name,JSType.UNKNOWN,false,n.isFromExterns());
    }
    break;
  }
  Node initializer=n.getFirstChild();
  if (initializer != null && initializer.isFunction()) {
    break;
  }
 else   if (currentScope.isDefinedLocally(name)) {
  }
 else {
    undeclaredVars.removeAll(name);
    if (parent.isCatch()) {
      currentScope.addLocal(name,JSType.UNKNOWN,false,n.isFromExterns());
    }
 else {
      boolean isConst=isConst(parent);
      JSType declType=getVarTypeFromAnnotation(n);
      if (isConst && !mayWarnAboutNoInit(n) && declType == null) {
        declType=inferConstTypeFromRhs(n);
      }
      currentScope.addLocal(name,declType,isConst,n.isFromExterns());
    }
  }
}
 else if (currentScope.isOuterVarEarly(name)) {
  currentScope.addOuterVar(name);
}
 else if (currentScope.getTypedef(name) != null || !name.equals(currentScope.getName()) && !currentScope.isDefinedLocally(name)) {
  undeclaredVars.put(name,n);
}
break;
}
case Token.GETPROP:
if (parent.isExprResult()) {
visitPropertyDeclaration(n);
}
break;
case Token.ASSIGN:
{
Node lvalue=n.getFirstChild();
if (lvalue.isGetProp() && parent.isExprResult()) {
visitPropertyDeclaration(lvalue);
}
break;
}
case Token.CAST:
castTypes.put(n,getDeclaredTypeOfNode(n.getJSDocInfo(),currentScope));
break;
case Token.OBJECTLIT:
{
JSDocInfo jsdoc=n.getJSDocInfo();
if (jsdoc != null && jsdoc.getLendsName() != null) {
lendsObjlits.add(n);
}
Node receiver=parent.isAssign() ? parent.getFirstChild() : parent;
if (NodeUtil.isNamespaceDecl(receiver) && currentScope.isNamespace(receiver)) {
for (Node prop : n.children()) {
visitNamespacePropertyDeclaration(prop,receiver,prop.getString());
}
}
 else {
for (Node prop : n.children()) {
if (prop.getJSDocInfo() != null) {
declaredObjLitProps.put(prop,getDeclaredTypeOfNode(prop.getJSDocInfo(),currentScope));
}
if (isAnnotatedAsConst(prop)) {
warnings.add(JSError.make(prop,MISPLACED_CONST_ANNOTATION));
}
}
}
break;
}
}
}
