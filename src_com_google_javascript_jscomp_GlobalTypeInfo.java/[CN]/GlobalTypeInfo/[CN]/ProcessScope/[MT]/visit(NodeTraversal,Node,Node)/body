{
switch (n.getType()) {
case Token.FUNCTION:
    Node grandparent=parent.getParent();
  if (grandparent == null || (!grandparent.isVar() && !NodeUtil.isPrototypePropertyDeclaration(grandparent))) {
    visitFunctionDef(n,null);
  }
break;
case Token.NAME:
{
String name=n.getString();
if (name == null || "undefined".equals(name) || parent.isFunction()) {
  return;
}
if (parent.isVar() || parent.isCatch()) {
  if (currentScope.isDefinedLocally(name)) {
    warnings.add(JSError.make(n,VariableReferenceCheck.REDECLARED_VARIABLE,name));
  }
 else {
    for (    Node useBeforeDeclNode : undeclaredVars.get(name)) {
      warnings.add(JSError.make(useBeforeDeclNode,VariableReferenceCheck.UNDECLARED_REFERENCE,name));
    }
    undeclaredVars.removeAll(name);
    Node initializer=n.getFirstChild();
    if (initializer != null && initializer.isFunction()) {
      visitFunctionDef(initializer,null);
    }
 else     if (initializer != null && NodeUtil.isNamespaceDecl(n)) {
      currentScope.addNamespace(name);
    }
 else {
      currentScope.addLocal(name,parent.isVar() ? getVarTypeFromAnnotation(n) : JSType.UNKNOWN);
    }
  }
}
 else if (currentScope.isOuterVarEarly(name)) {
  currentScope.addOuterVar(name);
}
 else if (!name.equals(currentScope.getName()) && !currentScope.isDefinedLocally(name)) {
  undeclaredVars.put(name,n);
}
break;
}
case Token.GETPROP:
if (parent.isExprResult()) {
visitPropertyDeclaration(n);
}
break;
case Token.ASSIGN:
{
Node lvalue=n.getFirstChild();
if (lvalue.isGetProp()) {
visitPropertyDeclaration(lvalue);
}
break;
}
case Token.CAST:
castTypes.put(n,getTypeDeclarationFromJsdoc(n.getJSDocInfo(),currentScope));
break;
case Token.OBJECTLIT:
{
for (Node prop : n.children()) {
if (prop.getJSDocInfo() != null) {
declaredObjLitProps.put(prop,getTypeDeclarationFromJsdoc(prop.getJSDocInfo(),currentScope));
}
}
}
}
}
