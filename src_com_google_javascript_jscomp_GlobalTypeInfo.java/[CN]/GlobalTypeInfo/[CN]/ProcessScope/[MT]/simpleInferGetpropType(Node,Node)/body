{
  Preconditions.checkArgument(n.isGetProp());
  Node recv=n.getFirstChild();
  if (!recv.isQualifiedName()) {
    return null;
  }
  QualifiedName recvQname=QualifiedName.fromNode(recv);
  String pname=n.getLastChild().getString();
  Declaration decl=this.currentScope.getDeclaration(recvQname,false);
  if (decl == null) {
    return null;
  }
  EnumType et=decl.getEnum();
  if (et != null && et.enumLiteralHasKey(pname)) {
    return et.getEnumeratedType();
  }
  QualifiedName propQname=new QualifiedName(pname);
  Namespace ns=decl.getNamespace();
  if (ns != null) {
    return simpleInferDeclaration(ns.getDeclaration(propQname),constDeclNode);
  }
  JSType recvType=simpleInferExprType(recv,constDeclNode);
  if (recvType != null && recvType.mayHaveProp(propQname)) {
    return recvType.getProp(propQname);
  }
  return null;
}
