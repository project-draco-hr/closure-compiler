{
  Preconditions.checkArgument(getProp.isGetProp());
  JSType t=currentScope.getDeclaredFunctionType().getThisType();
  NominalType thisType=t == null ? null : t.getNominalTypeIfSingletonObj();
  if (thisType == null) {
    return;
  }
  RawNominalType rawType=thisType.getRawNominalType();
  String pname=getProp.getLastChild().getString();
  Node parent=getProp.getParent();
  Node initializer=parent.isAssign() ? parent.getLastChild() : null;
  JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(getProp);
  PropertyType pt=getPropTypeHelper(jsdoc,initializer,rawType);
  JSType propDeclType=pt.declType;
  JSType propInferredFunType=pt.inferredFunType;
  boolean isConst=isConst(getProp);
  if (initializer != null && initializer.isFunction()) {
    parent.putBooleanProp(Node.ANALYZED_DURING_GTI,true);
  }
  if (propDeclType != null || isConst) {
    mayWarnAboutExistingProp(rawType,pname,getProp,propDeclType);
    if (propDeclType == null) {
      propDeclType=mayInferFromRhsIfConst(getProp);
    }
    if (mayAddPropToType(getProp,rawType)) {
      rawType.addClassProperty(pname,getProp,propDeclType,isConst);
    }
    if (isConst) {
      getProp.putBooleanProp(Node.CONSTANT_PROPERTY_DEF,true);
    }
  }
 else   if (mayAddPropToType(getProp,rawType)) {
    if (propInferredFunType != null) {
      rawType.addUndeclaredClassProperty(pname,propInferredFunType,getProp);
    }
 else {
      rawType.addUndeclaredClassProperty(pname,JSType.UNKNOWN,getProp);
    }
  }
  if (!propertyDefs.contains(rawType,pname)) {
    propertyDefs.put(rawType,pname,new PropertyDef(getProp,null,null));
  }
}
