{
  Preconditions.checkArgument(fn.isFunction());
  JSDocInfo fnDoc=NodeUtil.getFunctionJSDocInfo(fn);
  ImmutableList<String> typeParameters=fnDoc == null ? null : fnDoc.getTemplateTypeNames();
  FunctionTypeBuilder builder=typeParser.getFunctionType(fnDoc,fn,ownerType,parentScope);
  String functionName=getFunInternalName(fn);
  if (fnDoc != null) {
    NominalType parentClass=null;
    if (fnDoc.hasBaseType()) {
      if (!fnDoc.isConstructor()) {
        warnings.add(JSError.make(fn,EXTENDS_NOT_ON_CTOR_OR_INTERF,functionName));
      }
 else {
        Node docNode=fnDoc.getBaseType().getRootNode();
        if (typeParser.hasKnownType(docNode,ownerType,parentScope,typeParameters)) {
          parentClass=typeParser.getNominalType(docNode,ownerType,parentScope,typeParameters);
          if (parentClass == null) {
            warnings.add(JSError.make(fn,EXTENDS_NON_OBJECT,functionName,docNode.toStringTree()));
          }
 else           if (!parentClass.isClass()) {
            warnings.add(JSError.make(fn,TypeCheck.CONFLICTING_EXTENDED_TYPE,"constructor",functionName));
            parentClass=null;
          }
        }
      }
    }
    RawNominalType rawNominalType=nominaltypesByNode.get(fn);
    if (fnDoc.isConstructor()) {
      if (parentClass != null) {
        if (!rawNominalType.addSuperClass(parentClass)) {
          warnings.add(JSError.make(fn,INHERITANCE_CYCLE,rawNominalType.toString()));
        }
      }
      boolean noCycles=rawNominalType.addInterfaces(typeParser.getImplementedInterfaces(fnDoc,ownerType,parentScope,typeParameters));
      Preconditions.checkState(noCycles);
      builder.addNominalType(NominalType.fromRaw(rawNominalType));
    }
 else     if (fnDoc.isInterface()) {
      if (!NodeUtil.isEmptyBlock(NodeUtil.getFunctionBody(fn))) {
        warnings.add(JSError.make(fn,INTERFACE_WITH_A_BODY));
      }
      ImmutableSet<NominalType> implemented=typeParser.getImplementedInterfaces(fnDoc,ownerType,parentScope,typeParameters);
      if (!implemented.isEmpty()) {
        warnings.add(JSError.make(fn,TypeCheck.CONFLICTING_IMPLEMENTED_TYPE,functionName));
      }
      boolean noCycles=rawNominalType.addInterfaces(typeParser.getExtendedInterfaces(fnDoc,ownerType,parentScope,typeParameters));
      if (!noCycles) {
        warnings.add(JSError.make(fn,INHERITANCE_CYCLE,rawNominalType.toString()));
      }
      builder.addNominalType(NominalType.fromRaw(rawNominalType));
    }
  }
  if (NodeUtil.isPrototypeMethod(fn)) {
    Node lhsNode=fn.getParent().getFirstChild();
    String className=NodeUtil.getPrototypeClassName(lhsNode).getQualifiedName();
    builder.addReceiverType(parentScope.getScope(className).getDeclaredType().getNominalType());
  }
  DeclaredFunctionType declFunType=builder.buildDeclaration();
  ArrayList<String> formals=Lists.newArrayList();
  Node param=NodeUtil.getFunctionParameters(fn).getFirstChild();
  int optionalArity=declFunType.getOptionalArity();
  int formalIndex=0;
  while (param != null) {
    if (!typeParser.isRestArg(fnDoc,param.getString()) || formalIndex < optionalArity) {
      formals.add(param.getString());
    }
    param=param.getNext();
    formalIndex++;
  }
  return new Scope(fn,parentScope,formals,declFunType);
}
