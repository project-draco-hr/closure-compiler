{
  Preconditions.checkState(nameNode == null || nameNode.isQualifiedName());
  if (fnDoc != null && fnDoc.isConstructorOrInterface()) {
    if (nameNode == null) {
      warnings.add(JSError.make(defSite,ANONYMOUS_NOMINAL_TYPE));
      return;
    }
    String qname=nameNode.getQualifiedName();
    ImmutableList.Builder<String> builder=ImmutableList.builder();
    for (    String typeParam : fnDoc.getTemplateTypeNames()) {
      builder.add(varNameGen.getNextName(typeParam));
    }
    ImmutableList<String> typeParameters=builder.build();
    RawNominalType rawNominalType;
    if (fnDoc.usesImplicitMatch()) {
      rawNominalType=RawNominalType.makeStructuralInterface(defSite,qname,typeParameters);
    }
 else     if (fnDoc.isInterface()) {
      rawNominalType=RawNominalType.makeNominalInterface(defSite,qname,typeParameters);
    }
 else     if (fnDoc.makesStructs()) {
      rawNominalType=RawNominalType.makeStructClass(defSite,qname,typeParameters);
    }
 else     if (fnDoc.makesDicts()) {
      rawNominalType=RawNominalType.makeDictClass(defSite,qname,typeParameters);
    }
 else {
      rawNominalType=RawNominalType.makeUnrestrictedClass(defSite,qname,typeParameters);
    }
    nominaltypesByNode.put(defSite,rawNominalType);
    if (isRedeclaration) {
      return;
    }
    Node firstChild=nameNode.getFirstChild();
    if (nameNode.isName() || currentScope.isNamespace(firstChild) || mayCreateFunctionNamespace(firstChild)|| mayCreateWindowNamespace(firstChild)) {
      if (nameNode.isGetProp()) {
        defSite.getParent().getFirstChild().putBooleanProp(Node.ANALYZED_DURING_GTI,true);
      }
 else       if (currentScope.isTopLevel()) {
        maybeRecordBuiltinType(qname,rawNominalType);
      }
      currentScope.addNominalType(nameNode,rawNominalType);
    }
  }
 else   if (fnDoc != null) {
    if (fnDoc.makesStructs()) {
      warnings.add(JSError.make(defSite,STRUCTDICT_WITHOUT_CTOR,"@struct"));
    }
 else     if (fnDoc.makesDicts()) {
      warnings.add(JSError.make(defSite,STRUCTDICT_WITHOUT_CTOR,"@dict"));
    }
  }
}
