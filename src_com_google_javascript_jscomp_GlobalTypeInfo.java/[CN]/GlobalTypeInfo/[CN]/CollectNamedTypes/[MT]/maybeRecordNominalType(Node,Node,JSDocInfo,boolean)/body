{
  Preconditions.checkState(nameNode == null || nameNode.isQualifiedName());
  if (fnDoc != null && fnDoc.isConstructorOrInterface()) {
    QualifiedName qname=QualifiedName.fromNode(nameNode);
    if (qname == null) {
      warnings.add(JSError.make(fn,ANONYMOUS_NOMINAL_TYPE));
      return;
    }
    ImmutableList<String> typeParameters=fnDoc.getTemplateTypeNames();
    RawNominalType rawNominalType;
    if (fnDoc.isInterface()) {
      rawNominalType=RawNominalType.makeInterface(fn,qname,typeParameters);
    }
 else     if (fnDoc.makesStructs()) {
      rawNominalType=RawNominalType.makeStructClass(fn,qname,typeParameters);
    }
 else     if (fnDoc.makesDicts()) {
      rawNominalType=RawNominalType.makeDictClass(fn,qname,typeParameters);
    }
 else {
      rawNominalType=RawNominalType.makeUnrestrictedClass(fn,qname,typeParameters);
    }
    nominaltypesByNode.put(fn,rawNominalType);
    if (isRedeclaration) {
      return;
    }
    Node firstChild=nameNode.getFirstChild();
    if (nameNode.isName() || currentScope.isNamespace(firstChild) || mayCreateFunctionNamespace(firstChild)|| mayCreateWindowNamespace(firstChild)) {
      if (nameNode.isGetProp()) {
        fn.getParent().getFirstChild().putBooleanProp(Node.ANALYZED_DURING_GTI,true);
      }
 else       if (currentScope.isTopLevel()) {
        maybeRecordBuiltinType(nameNode.getString(),rawNominalType);
      }
      currentScope.addNominalType(nameNode,rawNominalType);
    }
  }
 else   if (fnDoc != null) {
    if (fnDoc.makesStructs()) {
      warnings.add(JSError.make(fn,STRUCTDICT_WITHOUT_CTOR,"@struct"));
    }
 else     if (fnDoc.makesDicts()) {
      warnings.add(JSError.make(fn,STRUCTDICT_WITHOUT_CTOR,"@dict"));
    }
  }
}
