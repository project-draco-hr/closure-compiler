{
  Preconditions.checkState(qnameNode.isQualifiedName());
  qnameNode.putBooleanProp(Node.ANALYZED_DURING_GTI,true);
  if (currentScope.isDefined(qnameNode)) {
    return;
  }
  Node init=NodeUtil.getRValueOfLValue(qnameNode);
  if (init != null && init.isQualifiedName()) {
    EnumType et=currentScope.getEnum(QualifiedName.fromNode(init));
    if (et != null) {
      currentScope.addEnum(qnameNode,et);
      return;
    }
  }
  if (init == null || !init.isObjectLit() || init.getFirstChild() == null) {
    warnings.add(JSError.make(qnameNode,MALFORMED_ENUM));
    return;
  }
  JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(qnameNode);
  Set<String> propNames=new LinkedHashSet<>();
  for (  Node prop : init.children()) {
    String pname=NodeUtil.getObjectLitKeyName(prop);
    if (propNames.contains(pname)) {
      warnings.add(JSError.make(qnameNode,DUPLICATE_PROP_IN_ENUM,pname));
    }
    propNames.add(pname);
  }
  currentScope.addEnum(qnameNode,EnumType.make(qnameNode.getQualifiedName(),jsdoc.getEnumParameterType(),ImmutableSet.copyOf(propNames)));
}
