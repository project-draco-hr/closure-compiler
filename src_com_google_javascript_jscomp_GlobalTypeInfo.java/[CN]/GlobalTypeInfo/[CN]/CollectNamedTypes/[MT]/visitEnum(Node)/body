{
  Preconditions.checkState(nameNode.isQualifiedName());
  if (nameNode.isName() && currentScope.isDefinedLocally(nameNode.getString())) {
    String qname=nameNode.getQualifiedName();
    warnings.add(JSError.make(nameNode,VariableReferenceCheck.REDECLARED_VARIABLE,qname));
  }
  if (currentScope.isDefined(nameNode)) {
    return;
  }
  Node init=NodeUtil.getInitializer(nameNode);
  if (init == null || !init.isObjectLit() || init.getFirstChild() == null) {
    warnings.add(JSError.make(nameNode,MALFORMED_ENUM));
    return;
  }
  JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(nameNode);
  Set<String> propNames=Sets.newHashSet();
  for (  Node prop : init.children()) {
    String pname=NodeUtil.getObjectLitKeyName(prop);
    if (propNames.contains(pname)) {
      warnings.add(JSError.make(nameNode,DUPLICATE_PROP_IN_ENUM,pname));
    }
    if (!convention.isValidEnumKey(pname)) {
      warnings.add(JSError.make(prop,TypeCheck.ENUM_NOT_CONSTANT,pname));
    }
    propNames.add(pname);
  }
  currentScope.addEnum(nameNode,EnumType.make(nameNode.getQualifiedName(),jsdoc.getEnumParameterType(),ImmutableSet.copyOf(propNames)));
}
