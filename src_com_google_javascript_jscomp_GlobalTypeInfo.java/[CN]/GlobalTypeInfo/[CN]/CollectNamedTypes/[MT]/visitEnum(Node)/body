{
  Preconditions.checkState(n.isVar());
  String varName=n.getFirstChild().getString();
  if (currentScope.isDefinedLocally(varName)) {
    warnings.add(JSError.make(n,VariableReferenceCheck.REDECLARED_VARIABLE,varName));
    return;
  }
  Node init=n.getFirstChild().getFirstChild();
  if (init == null || !init.isObjectLit() || init.getFirstChild() == null) {
    warnings.add(JSError.make(n,MALFORMED_ENUM));
    currentScope.addLocal(varName,JSType.UNKNOWN,false);
    return;
  }
  JSDocInfo jsdoc=n.getJSDocInfo();
  Set<String> propNames=Sets.newHashSet();
  for (  Node prop : init.children()) {
    String pname=NodeUtil.getObjectLitKeyName(prop);
    if (propNames.contains(pname)) {
      warnings.add(JSError.make(n,DUPLICATE_PROP_IN_ENUM,pname));
    }
    if (!convention.isValidEnumKey(pname)) {
      warnings.add(JSError.make(prop,TypeCheck.ENUM_NOT_CONSTANT,pname));
    }
    propNames.add(pname);
  }
  currentScope.addEnum(varName,EnumType.make(varName,jsdoc.getEnumParameterType(),ImmutableSet.copyOf(propNames)));
}
