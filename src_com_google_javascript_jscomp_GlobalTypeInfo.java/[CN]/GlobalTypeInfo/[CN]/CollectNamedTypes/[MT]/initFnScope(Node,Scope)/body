{
  String qname=NodeUtil.getFunctionName(fn);
  if (qname == null || qname.contains(".")) {
    anonFunNames.put(fn,ANON_FUN_PREFIX + freshId);
    freshId++;
  }
  JSDocInfo fnDoc=NodeUtil.getFunctionJSDocInfo(fn);
  if (fnDoc != null && (fnDoc.isConstructor() || fnDoc.isInterface())) {
    if (qname == null) {
      warnings.add(JSError.make(fn,ANONYMOUS_NOMINAL_TYPE));
      return;
    }
    ImmutableList<String> typeParameters=fnDoc.getTemplateTypeNames();
    RawNominalType rawNominalType;
    if (fnDoc.isInterface()) {
      rawNominalType=RawNominalType.makeInterface(qname,typeParameters);
    }
 else     if (fnDoc.makesStructs()) {
      rawNominalType=RawNominalType.makeStructClass(qname,typeParameters);
    }
 else     if (fnDoc.makesDicts()) {
      rawNominalType=RawNominalType.makeDictClass(qname,typeParameters);
    }
 else {
      rawNominalType=RawNominalType.makeUnrestrictedClass(qname,typeParameters);
    }
    nominaltypesByNode.put(fn,rawNominalType);
    parentScope.addNominalType(qname,rawNominalType);
  }
 else   if (fnDoc != null) {
    if (fnDoc.makesStructs()) {
      warnings.add(JSError.make(fn,CONSTRUCTOR_REQUIRED,"@struct"));
    }
 else     if (fnDoc.makesDicts()) {
      warnings.add(JSError.make(fn,CONSTRUCTOR_REQUIRED,"@dict"));
    }
  }
}
