{
switch (n.getToken()) {
case FUNCTION:
{
      visitFunctionEarly(n);
      break;
    }
case VAR:
{
    Node nameNode=n.getFirstChild();
    String varName=nameNode.getString();
    if (NodeUtil.isNamespaceDecl(nameNode)) {
      visitObjlitNamespace(nameNode);
    }
 else     if (NodeUtil.isTypedefDecl(nameNode)) {
      visitTypedef(nameNode);
    }
 else     if (NodeUtil.isEnumDecl(nameNode)) {
      visitEnum(nameNode);
    }
 else     if (isAliasedNamespaceDefinition(nameNode)) {
      visitAliasedNamespace(nameNode);
    }
 else     if (varName.equals(WINDOW_INSTANCE) && nameNode.isFromExterns()) {
      visitWindowVar(nameNode);
    }
 else     if (isCtorDefinedByCall(nameNode)) {
      visitNewCtorDefinedByCall(nameNode);
    }
 else     if (isCtorWithoutFunctionLiteral(nameNode)) {
      visitNewCtorWithoutFunctionLiteral(nameNode);
    }
    if (!n.isFromExterns() && !this.currentScope.isDefinedLocally(varName,false)) {
      this.currentScope.addLocal(varName,JSType.UNKNOWN,false,false);
    }
    break;
  }
case NAME:
{
  if (this.currentScope.isFunction()) {
    NTIScope.mayRecordEscapedVar(this.currentScope,n.getString());
  }
  break;
}
case EXPR_RESULT:
{
Node expr=n.getFirstChild();
switch (expr.getToken()) {
case ASSIGN:
  Node lhs=expr.getFirstChild();
if (isCtorDefinedByCall(lhs)) {
  visitNewCtorDefinedByCall(lhs);
  return;
}
if (!lhs.isGetProp()) {
return;
}
expr=lhs;
case GETPROP:
if (isCtorWithoutFunctionLiteral(expr)) {
visitNewCtorWithoutFunctionLiteral(expr);
return;
}
if (isPrototypeProperty(expr) || NodeUtil.referencesThis(expr) || !expr.isQualifiedName()) {
return;
}
processQualifiedDefinition(expr);
break;
default :
break;
}
break;
}
default :
break;
}
}
