{
switch (n.getType()) {
case Token.FUNCTION:
{
      visitFunctionEarly(n);
      break;
    }
case Token.VAR:
{
    Node nameNode=n.getFirstChild();
    String varName=nameNode.getString();
    if (NodeUtil.isNamespaceDecl(nameNode)) {
      visitObjlitNamespace(nameNode);
    }
 else     if (NodeUtil.isTypedefDecl(nameNode)) {
      visitTypedef(nameNode);
    }
 else     if (NodeUtil.isEnumDecl(nameNode)) {
      visitEnum(nameNode);
    }
 else     if (isAliasedNamespaceDefinition(nameNode)) {
      visitAliasedNamespace(nameNode);
    }
 else     if (varName.equals(WINDOW_INSTANCE) && nameNode.isFromExterns() && !this.currentScope.isDefinedLocally(WINDOW_INSTANCE,false)) {
      this.currentScope.addLocal(WINDOW_INSTANCE,getVarTypeFromAnnotation(nameNode,this.currentScope),false,true);
    }
 else     if (this.currentScope.isFunction() && !this.currentScope.isDefinedLocally(varName,false)) {
      this.currentScope.addLocal(varName,JSType.UNKNOWN,false,false);
    }
 else     if (isCtorDefinedByCall(nameNode)) {
      visitNewCtorDefinedByCall(nameNode);
    }
    break;
  }
case Token.EXPR_RESULT:
{
  Node expr=n.getFirstChild();
switch (expr.getType()) {
case Token.ASSIGN:
    Node lhs=expr.getFirstChild();
  if (isCtorDefinedByCall(lhs)) {
    visitNewCtorDefinedByCall(lhs);
    return;
  }
if (!lhs.isGetProp()) {
  return;
}
expr=lhs;
case Token.GETPROP:
if (isPrototypeProperty(expr) || NodeUtil.referencesThis(expr) || !expr.isQualifiedName()) {
return;
}
processQualifiedDefinition(expr);
break;
}
break;
}
}
}
