{
  Deque<Node> workset=Lists.newLinkedList(nominaltypesByNode.keySet());
  int iterations=0;
  final int MAX_ITERATIONS=50000;
  workset_loop:   while (!workset.isEmpty()) {
    Preconditions.checkState(iterations < MAX_ITERATIONS);
    Node funNode=workset.removeFirst();
    RawNominalType rawNominalType=nominaltypesByNode.get(funNode);
    NominalType superClass=rawNominalType.getSuperClass();
    if (superClass != null && !superClass.isFinalized()) {
      workset.addLast(funNode);
      iterations++;
      continue workset_loop;
    }
    for (    NominalType superInterf : rawNominalType.getInterfaces()) {
      if (!superInterf.isFinalized()) {
        workset.addLast(funNode);
        iterations++;
        continue workset_loop;
      }
    }
    if (superClass != null) {
      Preconditions.checkState(superClass.isFinalized());
      for (      String pname : superClass.getAllPropsOfClass()) {
        PropertyDef localPropDef=propertyDefs.get(rawNominalType.getId(),pname);
        PropertyDef inheritedPropDef=getPropDefFromClass(superClass,pname);
        JSType inheritedPropType=superClass.getPropDeclaredType(pname);
        if (inheritedPropType == null) {
          continue;
        }
        JSType localPropType=localPropDef == null ? null : rawNominalType.getPropDeclaredType(pname);
        System.out.println("nominalType: " + rawNominalType + "'s "+ pname+ " localPropType: "+ localPropType+ " with superClass: "+ superClass+ " inheritedPropType: "+ inheritedPropType);
        if (localPropType != null && !localPropType.isSubtypeOf(inheritedPropType)) {
          warnings.add(JSError.make(localPropDef.defSite,INVALID_PROP_OVERRIDE,pname,inheritedPropType.toString(),localPropType.toString()));
        }
 else {
          if (inheritedPropDef != null && inheritedPropDef.methodScope != null) {
            DeclaredFunctionType propDeclType;
            if (localPropDef == null || localPropDef.methodScope == null) {
              propDeclType=inheritedPropDef.methodScope.getDeclaredType();
            }
 else {
              DeclaredFunctionType funDeclType=localPropDef.methodScope.getDeclaredType();
              DeclaredFunctionType inheritedFunDeclType=inheritedPropDef.methodScope.getDeclaredType();
              propDeclType=funDeclType.withTypeInfoFromSuper(inheritedFunDeclType);
              localPropDef.methodScope.setDeclaredType(propDeclType);
            }
            rawNominalType.addProtoProperty(pname,JSType.fromFunctionType(propDeclType.toFunctionType()));
          }
        }
      }
    }
    Multimap<String,DeclaredFunctionType> propMethodTypesToProcess=HashMultimap.create();
    Multimap<String,JSType> propTypesToProcess=HashMultimap.create();
    for (    NominalType superInterf : rawNominalType.getInterfaces()) {
      Preconditions.checkState(superInterf.isFinalized());
      for (      String pname : superInterf.getAllPropsOfInterface()) {
        Collection<PropertyDef> inheritedPropDefs=getPropDefsFromInterface(superInterf,pname);
        if (!rawNominalType.mayHaveProp(pname)) {
          warnings.add(JSError.make(inheritedPropDefs.iterator().next().defSite,TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED,pname,superInterf.toString(),rawNominalType.toString()));
          continue;
        }
        PropertyDef localPropDef=propertyDefs.get(rawNominalType.getId(),pname);
        JSType localPropType=localPropDef == null ? null : rawNominalType.getPropDeclaredType(pname);
        JSType inheritedPropType=superInterf.getPropDeclaredType(pname);
        System.out.println("nominalType: " + rawNominalType + "'s "+ pname+ " localPropType: "+ localPropType+ " with superInterf: "+ superInterf+ " inheritedPropType: "+ inheritedPropType);
        if (localPropType != null && !localPropType.isSubtypeOf(inheritedPropType)) {
          warnings.add(JSError.make(localPropDef.defSite,INVALID_PROP_OVERRIDE,pname,inheritedPropType.toString(),localPropType.toString()));
        }
 else {
          if (localPropType == null) {
            propTypesToProcess.put(pname,inheritedPropType);
          }
 else           if (localPropDef.methodScope != null) {
            for (            PropertyDef inheritedPropDef : inheritedPropDefs) {
              propMethodTypesToProcess.put(pname,inheritedPropDef.methodScope.getDeclaredType());
            }
          }
        }
      }
    }
    for (    String pname : propMethodTypesToProcess.keySet()) {
      Collection<DeclaredFunctionType> methodTypes=propMethodTypesToProcess.get(pname);
      Preconditions.checkState(!methodTypes.isEmpty());
      PropertyDef localPropDef=propertyDefs.get(rawNominalType.getId(),pname);
      DeclaredFunctionType propDeclType=localPropDef.methodScope.getDeclaredType();
      for (      DeclaredFunctionType superMethodType : methodTypes) {
        propDeclType=propDeclType.withTypeInfoFromSuper(superMethodType);
      }
      localPropDef.methodScope.setDeclaredType(propDeclType);
      propTypesToProcess.put(pname,JSType.fromFunctionType(propDeclType.toFunctionType()));
    }
    add_interface_props:     for (    String pname : propTypesToProcess.keySet()) {
      Collection<JSType> defs=propTypesToProcess.get(pname);
      Preconditions.checkState(!defs.isEmpty());
      JSType resultType=JSType.TOP;
      for (      JSType inheritedType : defs) {
        if (inheritedType.isSubtypeOf(resultType)) {
          resultType=inheritedType;
        }
 else         if (!resultType.isSubtypeOf(inheritedType)) {
          warnings.add(JSError.make(funNode,TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,NodeUtil.getFunctionName(funNode),pname,"",""));
          continue add_interface_props;
        }
      }
      rawNominalType.addProtoProperty(pname,resultType);
    }
    rawNominalType.finalizeNominalType();
  }
}
