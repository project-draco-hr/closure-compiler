{
  if (rawType.isFinalized()) {
    return;
  }
  NominalType superClass=rawType.getSuperClass();
  Set<String> nonInheritedPropNames=rawType.getAllOwnProps();
  if (superClass != null && !superClass.isFinalized()) {
    checkAndFinalizeNominalType(superClass.getRawNominalType(),constDeclNode);
  }
  for (  NominalType superInterf : rawType.getInterfaces()) {
    if (!superInterf.isFinalized()) {
      checkAndFinalizeNominalType(superInterf.getRawNominalType(),constDeclNode);
    }
  }
  Multimap<String,DeclaredFunctionType> propMethodTypesToProcess=LinkedHashMultimap.create();
  Multimap<String,JSType> propTypesToProcess=LinkedHashMultimap.create();
  if (superClass != null) {
    Preconditions.checkState(superClass.isFinalized());
    for (    String pname : superClass.getAllPropsOfClass()) {
      nonInheritedPropNames.remove(pname);
      checkSuperProperty(rawType,superClass,pname,propMethodTypesToProcess,propTypesToProcess);
    }
  }
  for (  NominalType superInterf : rawType.getInterfaces()) {
    Preconditions.checkState(superInterf.isFinalized());
    for (    String pname : superInterf.getAllPropsOfInterface()) {
      nonInheritedPropNames.remove(pname);
      checkSuperProperty(rawType,superInterf,pname,propMethodTypesToProcess,propTypesToProcess);
    }
  }
  for (  String pname : propMethodTypesToProcess.keySet()) {
    Collection<DeclaredFunctionType> methodTypes=propMethodTypesToProcess.get(pname);
    Preconditions.checkState(!methodTypes.isEmpty());
    PropertyDef localPropDef=propertyDefs.get(rawType,pname);
    DeclaredFunctionType superMethodType=DeclaredFunctionType.meet(methodTypes);
    DeclaredFunctionType updatedMethodType=localPropDef.methodType.withTypeInfoFromSuper(superMethodType,getsTypeInfoFromParentMethod(localPropDef));
    localPropDef.updateMethodType(updatedMethodType);
    propTypesToProcess.put(pname,commonTypes.fromFunctionType(updatedMethodType.toFunctionType()));
  }
  add_interface_props:   for (  String pname : propTypesToProcess.keySet()) {
    Collection<JSType> defs=propTypesToProcess.get(pname);
    Preconditions.checkState(!defs.isEmpty());
    JSType resultType=JSType.TOP;
    for (    JSType inheritedType : defs) {
      resultType=JSType.meet(resultType,inheritedType);
      if (!resultType.isBottom()) {
        resultType=inheritedType;
      }
 else {
        Node defSite=rawType.getDefSite();
        warnings.add(JSError.make(defSite,TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,NodeUtil.getFunctionName(defSite),pname,"",""));
        continue add_interface_props;
      }
    }
    rawType.addProtoProperty(pname,null,resultType,false);
  }
  for (  String pname : nonInheritedPropNames) {
    Node propDefsite=propertyDefs.get(rawType,pname).defSite;
    JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(propDefsite);
    if (jsdoc != null && jsdoc.isOverride()) {
      warnings.add(JSError.make(propDefsite,TypeCheck.UNKNOWN_OVERRIDE,pname,rawType.getName()));
    }
  }
  rawType.finalizeNominalType(constDeclNode);
}
