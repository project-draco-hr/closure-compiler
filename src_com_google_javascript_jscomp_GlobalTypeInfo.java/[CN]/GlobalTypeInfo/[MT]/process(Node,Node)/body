{
  Preconditions.checkNotNull(warnings,"Cannot rerun GlobalTypeInfo.process");
  Preconditions.checkArgument(externs == null || externs.isSyntheticBlock());
  Preconditions.checkArgument(root.isSyntheticBlock());
  this.compiler.setMostRecentTypechecker(MostRecentTypechecker.NTI);
  this.globalScope=new NTIScope(root,null,ImmutableList.<String>of(),commonTypes);
  this.globalScope.addUnknownTypeNames(this.unknownTypeNames);
  scopes.add(this.globalScope);
  CollectNamedTypes rootCnt=new CollectNamedTypes(this.globalScope);
  if (externs != null) {
    NodeTraversal.traverseEs6(compiler,externs,rootCnt);
  }
  NodeTraversal.traverseEs6(compiler,root,rootCnt);
  this.globalScope.resolveTypedefs(typeParser);
  this.globalScope.resolveEnums(typeParser);
  for (int i=1; i < scopes.size(); i++) {
    NTIScope s=scopes.get(i);
    CollectNamedTypes cnt=new CollectNamedTypes(s);
    NodeTraversal.traverseEs6(compiler,s.getBody(),cnt);
    s.resolveTypedefs(typeParser);
    s.resolveEnums(typeParser);
    if (NewTypeInference.measureMem) {
      NewTypeInference.updatePeakMem();
    }
  }
  if (this.commonTypes.getFunctionType() == null) {
    warnings.add(JSError.make(root,FUNCTION_CONSTRUCTOR_NOT_DEFINED));
    return;
  }
  ProcessScope rootPs=new ProcessScope(this.globalScope);
  if (externs != null) {
    NodeTraversal.traverseEs6(compiler,externs,rootPs);
  }
  NodeTraversal.traverseEs6(compiler,root,rootPs);
  rootPs.finishProcessingScope();
  for (int i=1; i < scopes.size(); i++) {
    NTIScope s=scopes.get(i);
    ProcessScope ps=new ProcessScope(s);
    NodeTraversal.traverseEs6(compiler,s.getBody(),ps);
    ps.finishProcessingScope();
    if (NewTypeInference.measureMem) {
      NewTypeInference.updatePeakMem();
    }
  }
  RawNominalType win=null;
  for (  Map.Entry<Node,RawNominalType> entry : nominaltypesByNode.entrySet()) {
    RawNominalType rawType=entry.getValue();
    if (rawType.getName().equals(WINDOW_CLASS) && entry.getKey().isFromExterns()) {
      win=rawType;
      continue;
    }
    checkAndFinalizeNominalType(rawType);
  }
  JSType globalThisType;
  if (win != null) {
    Namespace winNs=this.globalScope.getNamespace(WINDOW_INSTANCE);
    if (winNs != null) {
      winNs.copyWindowProperties(this.commonTypes,win);
    }
    checkAndFinalizeNominalType(win);
    globalThisType=win.getInstanceAsJSType();
  }
 else {
    globalThisType=this.commonTypes.TOP_OBJECT.withLoose();
  }
  this.globalScope.setDeclaredType((new FunctionTypeBuilder(this.commonTypes)).addReceiverType(globalThisType).buildDeclaration());
  nominaltypesByNode=null;
  propertyDefs=null;
  for (  NTIScope s : scopes) {
    s.finalizeScope();
  }
  Map<Node,String> unknownTypes=typeParser.getUnknownTypesMap();
  for (  Map.Entry<Node,String> unknownTypeEntry : unknownTypes.entrySet()) {
    this.warnings.add(JSError.make(unknownTypeEntry.getKey(),UNRECOGNIZED_TYPE_NAME,unknownTypeEntry.getValue()));
  }
  for (  JSError warning : typeParser.getWarnings()) {
    this.warnings.add(warning);
  }
  this.warnings=null;
  this.varNameGen=null;
  this.funNameGen=null;
  Collections.reverse(scopes);
  this.compiler.setExternProperties(ImmutableSet.copyOf(this.externPropertyNames));
}
