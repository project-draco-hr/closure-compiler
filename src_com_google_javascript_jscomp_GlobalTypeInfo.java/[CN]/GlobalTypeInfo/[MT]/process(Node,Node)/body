{
  Preconditions.checkNotNull(warnings,"Cannot rerun GlobalTypeInfo.process");
  Preconditions.checkArgument(externs == null || externs.isSyntheticBlock());
  Preconditions.checkArgument(root.isSyntheticBlock());
  globalScope=new Scope(root,null,ImmutableList.<String>of(),commonTypes);
  scopes.add(globalScope);
  CollectNamedTypes rootCnt=new CollectNamedTypes(globalScope);
  if (externs != null) {
    NodeTraversal.traverse(compiler,externs,rootCnt);
  }
  NodeTraversal.traverse(compiler,root,rootCnt);
  globalScope.resolveTypedefs(typeParser);
  globalScope.resolveEnums(typeParser);
  for (int i=1; i < scopes.size(); i++) {
    Scope s=scopes.get(i);
    CollectNamedTypes cnt=new CollectNamedTypes(s);
    NodeTraversal.traverse(compiler,s.getBody(),cnt);
    s.resolveTypedefs(typeParser);
    s.resolveEnums(typeParser);
    if (NewTypeInference.measureMem) {
      NewTypeInference.updatePeakMem();
    }
  }
  if (this.commonTypes.getFunctionType() == null) {
    warnings.add(JSError.make(root,FUNCTION_CONSTRUCTOR_NOT_DEFINED));
    return;
  }
  ProcessScope rootPs=new ProcessScope(globalScope);
  if (externs != null) {
    NodeTraversal.traverse(compiler,externs,rootPs);
  }
  NodeTraversal.traverse(compiler,root,rootPs);
  rootPs.finishProcessingScope();
  for (int i=1; i < scopes.size(); i++) {
    Scope s=scopes.get(i);
    ProcessScope ps=new ProcessScope(s);
    NodeTraversal.traverse(compiler,s.getBody(),ps);
    ps.finishProcessingScope();
    if (NewTypeInference.measureMem) {
      NewTypeInference.updatePeakMem();
    }
  }
  for (  RawNominalType rawType : nominaltypesByNode.values()) {
    checkAndFinalizeNominalType(rawType,null);
  }
  nominaltypesByNode=null;
  propertyDefs=null;
  for (  Scope s : scopes) {
    s.removeTmpData();
  }
  Map<Node,String> unknownTypes=typeParser.getUnknownTypesMap();
  for (  Map.Entry<Node,String> unknownTypeEntry : unknownTypes.entrySet()) {
    warnings.add(JSError.make(unknownTypeEntry.getKey(),UNRECOGNIZED_TYPE_NAME,unknownTypeEntry.getValue()));
  }
  for (  JSError warning : typeParser.getWarnings()) {
    warnings.add(warning);
  }
  typeParser=null;
  compiler.setSymbolTable(this);
  warnings=null;
  Collections.reverse(scopes);
}
