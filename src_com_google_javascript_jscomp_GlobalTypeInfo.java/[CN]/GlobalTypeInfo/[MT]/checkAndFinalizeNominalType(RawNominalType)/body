{
  if (rawType.isFinalized()) {
    return;
  }
  NominalType superClass=rawType.getSuperClass();
  Set<String> nonInheritedPropNames=rawType.getAllOwnProps();
  if (superClass != null && !superClass.isFinalized()) {
    checkAndFinalizeNominalType(superClass.getRawNominalType());
  }
  for (  NominalType superInterf : rawType.getInterfaces()) {
    if (!superInterf.isFinalized()) {
      checkAndFinalizeNominalType(superInterf.getRawNominalType());
    }
  }
  Multimap<String,DeclaredFunctionType> propMethodTypesToProcess=LinkedHashMultimap.create();
  Multimap<String,JSType> propTypesToProcess=LinkedHashMultimap.create();
  if (superClass != null) {
    Preconditions.checkState(superClass.isFinalized());
    for (    String pname : superClass.getAllPropsOfClass()) {
      nonInheritedPropNames.remove(pname);
      checkSuperProperty(rawType,superClass,pname,propMethodTypesToProcess,propTypesToProcess);
    }
  }
  for (  NominalType superInterf : rawType.getInterfaces()) {
    Preconditions.checkState(superInterf.isFinalized());
    for (    String pname : superInterf.getAllPropsOfInterface()) {
      nonInheritedPropNames.remove(pname);
      checkSuperProperty(rawType,superInterf,pname,propMethodTypesToProcess,propTypesToProcess);
    }
  }
  for (  String pname : propMethodTypesToProcess.keySet()) {
    Collection<DeclaredFunctionType> methodTypes=propMethodTypesToProcess.get(pname);
    Preconditions.checkState(!methodTypes.isEmpty());
    PropertyDef localPropDef=propertyDefs.get(rawType,pname);
    DeclaredFunctionType superMethodType=DeclaredFunctionType.meet(methodTypes);
    DeclaredFunctionType localMethodType=localPropDef.methodType;
    boolean getsTypeFromParent=getsTypeInfoFromParentMethod(localPropDef);
    if (superMethodType == null) {
      superMethodType=methodTypes.iterator().next();
      warnings.add(JSError.make(localPropDef.defSite,SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES,rawType.getName(),pname,methodTypes.toString()));
    }
 else     if (getsTypeFromParent && localMethodType.getMaxArity() > superMethodType.getMaxArity()) {
      warnings.add(JSError.make(localPropDef.defSite,INVALID_PROP_OVERRIDE,pname,superMethodType.toFunctionType().toString(),localMethodType.toFunctionType().toString()));
    }
    DeclaredFunctionType updatedMethodType=localMethodType.withTypeInfoFromSuper(superMethodType,getsTypeFromParent);
    localPropDef.updateMethodType(updatedMethodType);
    propTypesToProcess.put(pname,commonTypes.fromFunctionType(updatedMethodType.toFunctionType()));
  }
  add_interface_props:   for (  String pname : propTypesToProcess.keySet()) {
    Collection<JSType> defs=propTypesToProcess.get(pname);
    Preconditions.checkState(!defs.isEmpty());
    JSType resultType=JSType.TOP;
    for (    JSType inheritedType : defs) {
      resultType=JSType.meet(resultType,inheritedType);
      if (!resultType.isBottom()) {
        resultType=inheritedType;
      }
 else {
        warnings.add(JSError.make(rawType.getDefSite(),SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES,rawType.getName(),pname,defs.toString()));
        continue add_interface_props;
      }
    }
    rawType.addProtoProperty(pname,null,resultType,false);
  }
  for (  String pname : nonInheritedPropNames) {
    PropertyDef propDef=propertyDefs.get(rawType,pname);
    Preconditions.checkState(propDef != null || rawType.getName().equals(WINDOW_CLASS));
    if (propDef != null) {
      Node propDefsite=propDef.defSite;
      JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(propDefsite);
      if (jsdoc != null && jsdoc.isOverride()) {
        warnings.add(JSError.make(propDefsite,UNKNOWN_OVERRIDE,pname,rawType.getName()));
      }
    }
  }
  rawType.finalize();
}
