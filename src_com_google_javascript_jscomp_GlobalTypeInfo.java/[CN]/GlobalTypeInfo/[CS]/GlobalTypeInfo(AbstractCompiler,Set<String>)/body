{
  boolean inCompatibilityMode=compiler.getOptions().disables(DiagnosticGroups.NEW_CHECK_TYPES_EXTRA_CHECKS);
  this.warnings=new WarningReporter(compiler);
  this.compiler=compiler;
  this.unknownTypeNames=unknownTypeNames;
  this.convention=compiler.getCodingConvention();
  this.varNameGen=new UniqueNameGenerator();
  this.funNameGen=new DefaultNameGenerator(ImmutableSet.<String>of(),"",null);
  this.commonTypes=JSTypes.init(inCompatibilityMode);
  Function<String,Void> callback=new Function<String,Void>(){
    @Override public Void apply(    String pname){
      allPropertyNames.add(pname);
      externPropertyNames.add(pname);
      return null;
    }
  }
;
  this.typeParser=new JSTypeCreatorFromJSDoc(this.commonTypes,this.convention,this.varNameGen,callback);
  this.allPropertyNames.add("prototype");
}
