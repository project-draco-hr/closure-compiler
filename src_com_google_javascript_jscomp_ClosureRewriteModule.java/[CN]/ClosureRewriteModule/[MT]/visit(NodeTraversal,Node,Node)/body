{
  if (!inModule()) {
    return;
  }
switch (n.getType()) {
case Token.EXPR_RESULT:
    if (isCallTo(n.getFirstChild(),"goog.module.declareLegacyNamespace")) {
      n.detachFromParent();
    }
  break;
case Token.CALL:
if (isCallTo(n,"goog.module")) {
  recordAndUpdateModule(t,n);
}
 else if (isCallTo(n,"goog.require")) {
  recordRequire(t,n);
}
 else if (isLoadModuleCall(n)) {
  rewriteModuleAsScope(n);
}
break;
case Token.GETPROP:
if (isExportPropAssign(n)) {
Node rhs=parent.getLastChild();
maybeUpdateExportDeclToNode(t,parent,rhs);
}
break;
case Token.NAME:
if (n.getString().equals("exports")) {
current.exports.add(n);
if (isAssignTarget(n)) {
maybeUpdateExportObjectDecl(t,n);
}
}
break;
case Token.SCRIPT:
rewriteModuleAsScope(n);
break;
case Token.RETURN:
if (t.getScopeRoot() == current.moduleScopeRoot) {
n.detachFromParent();
}
break;
}
}
