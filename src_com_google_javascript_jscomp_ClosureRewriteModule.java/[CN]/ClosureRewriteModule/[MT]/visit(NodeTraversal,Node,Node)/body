{
  if (!inModule()) {
    return;
  }
switch (n.getType()) {
case Token.FUNCTION:
    if (current.moduleScopeRoot == n) {
      current.moduleScope=t.getScope();
    }
  break;
case Token.CALL:
Node first=n.getFirstChild();
if (first.matchesQualifiedName("goog.module")) {
recordAndUpdateModule(t,n);
}
 else if (first.matchesQualifiedName("goog.require")) {
recordRequire(t,n);
}
 else if (isLoadModuleCall(n)) {
rewriteModuleAsScope(n);
}
break;
case Token.NAME:
if (n.getString().equals("exports")) {
Node replacement=NodeUtil.newQName(compiler,current.moduleNamespace);
replacement.srcrefTree(n);
parent.replaceChild(n,replacement);
}
break;
case Token.SCRIPT:
current.moduleScope=t.getScope();
rewriteModuleAsScope(n);
break;
case Token.RETURN:
if (t.getScopeRoot() == current.moduleScopeRoot) {
n.detachFromParent();
}
break;
}
}
