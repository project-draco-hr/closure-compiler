{
  if (!currentScript.isModule || !n.getString().equals("exports") || !isAssignTarget(n)) {
    return;
  }
  Node assignNode=n.getParent();
  if (currentScript.defaultExportName != null) {
    assignNode.getParent().detachFromParent();
    return;
  }
  Node rhs=assignNode.getLastChild();
  Node jsdocNode;
  if (currentScript.declareLegacyNamespace) {
    Node legacyQname=NodeUtil.newQName(compiler,currentScript.legacyNamespace).srcrefTree(n);
    assignNode.replaceChild(n,legacyQname);
    jsdocNode=assignNode;
  }
 else {
    rhs.detachFromParent();
    Node exprResultNode=assignNode.getParent();
    Node binaryNamespaceName=IR.name(currentScript.getBinaryNamespace());
    binaryNamespaceName.putProp(Node.ORIGINALNAME_PROP,currentScript.legacyNamespace);
    Node exportsObjectCreationNode=IR.var(binaryNamespaceName,rhs);
    exportsObjectCreationNode.useSourceInfoIfMissingFromForTree(exprResultNode);
    exportsObjectCreationNode.putBooleanProp(Node.IS_NAMESPACE,true);
    exprResultNode.getParent().replaceChild(exprResultNode,exportsObjectCreationNode);
    jsdocNode=exportsObjectCreationNode;
    currentScript.hasCreatedExportObject=true;
  }
  markConstAndCopyJsDoc(assignNode,jsdocNode,rhs);
  compiler.reportCodeChange();
  maybeUpdateExportObjectLiteral(t,rhs);
  return;
}
