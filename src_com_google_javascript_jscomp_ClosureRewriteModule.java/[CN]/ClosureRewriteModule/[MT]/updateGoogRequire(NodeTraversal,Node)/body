{
  Node legacyNamespaceNode=call.getLastChild();
  Node statementNode=NodeUtil.getEnclosingStatement(call);
  String legacyNamespace=legacyNamespaceNode.getString();
  boolean targetIsNonLegacyGoogModule=rewriteState.containsModule(legacyNamespace) && !rewriteState.isLegacyModule(legacyNamespace);
  boolean importHasAlias=NodeUtil.isNameDeclaration(statementNode);
  boolean isDestructuring=statementNode.getFirstChild().isDestructuringLhs();
  boolean currentScriptIsAModule=currentScript.isModule;
  boolean requireDirectlyStoredInAlias=NodeUtil.isNameDeclaration(call.getGrandparent());
  if (currentScriptIsAModule && requireDirectlyStoredInAlias && isTopLevel(t,statementNode,ScopeType.EXEC_CONTEXT)) {
    Node lhs=call.getParent();
    String exportedNamespace=rewriteState.getExportedNamespace(legacyNamespace);
    if (exportedNamespace == null) {
    }
 else     if (lhs.isName()) {
      String aliasName=statementNode.getFirstChild().getString();
      recordNameToInline(aliasName,exportedNamespace);
    }
 else     if (lhs.isDestructuringLhs() && lhs.getFirstChild().isObjectPattern()) {
      for (      Node importSpec : lhs.getFirstChild().children()) {
        String importedProperty=importSpec.getString();
        String aliasName=importSpec.hasChildren() ? importSpec.getFirstChild().getString() : importedProperty;
        String fullName=exportedNamespace + "." + importedProperty;
        recordNameToInline(aliasName,fullName);
      }
    }
 else {
      throw new RuntimeException("Illegal goog.module import: " + lhs);
    }
  }
  if (currentScript.isModule || targetIsNonLegacyGoogModule) {
    if (isDestructuring) {
      statementNode.detachFromParent();
    }
 else     if (targetIsNonLegacyGoogModule) {
      if (!isTopLevel(t,statementNode,ScopeType.EXEC_CONTEXT)) {
        Node binaryNamespaceName=IR.name(rewriteState.getBinaryNamespace(legacyNamespace));
        binaryNamespaceName.putProp(Node.ORIGINALNAME_PROP,legacyNamespace);
        call.getParent().replaceChild(call,binaryNamespaceName);
      }
 else       if (importHasAlias || !rewriteState.isLegacyModule(legacyNamespace)) {
        statementNode.detachFromParent();
      }
    }
 else {
      call.detachFromParent();
      statementNode.getParent().replaceChild(statementNode,IR.exprResult(call));
    }
    if (targetIsNonLegacyGoogModule) {
      Node callee=call.getFirstChild();
      Node arg=callee.getNext();
      maybeAddToSymbolTable(callee);
      maybeAddToSymbolTable(createNamespaceNode(arg));
    }
    compiler.reportCodeChange();
  }
}
