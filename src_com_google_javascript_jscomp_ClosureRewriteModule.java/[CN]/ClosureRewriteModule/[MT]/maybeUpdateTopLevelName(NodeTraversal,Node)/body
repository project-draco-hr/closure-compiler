{
  String name=nameNode.getString();
  if (!currentScript.isModule || !currentScript.topLevelNames.contains(name)) {
    return;
  }
  Var var=t.getScope().getVar(name);
  if (var == null || var.getScope().getRootNode() != currentScript.rootNode) {
    return;
  }
  if (var.getNameNode() == nameNode && nameNode.getParent().isStringKey() && nameNode.getGrandparent().isObjectPattern()) {
    Node destructuringLhsNode=nameNode.getGrandparent().getParent();
    if (isCallTo(destructuringLhsNode.getLastChild(),"goog.require")) {
      return;
    }
  }
  boolean nameIsExported=name.equals(currentScript.defaultExportName);
  if (nameIsExported) {
    safeSetString(nameNode,currentScript.getBinaryNamespace());
    currentScript.hasCreatedExportObject=true;
    return;
  }
  boolean nameIsAnAlias=currentScript.namesToInlineByAlias.containsKey(name);
  if (nameIsAnAlias && var.getNode() != nameNode) {
    String namespaceToInline=currentScript.namesToInlineByAlias.get(name);
    safeSetMaybeQualifiedString(nameNode,namespaceToInline);
    if (namespaceToInline.indexOf('.') != -1) {
      String firstQualifiedName=namespaceToInline.substring(0,namespaceToInline.indexOf('.'));
      Var shadowedVar=t.getScope().getVar(firstQualifiedName);
      if (shadowedVar != null && shadowedVar.isLocal()) {
        t.report(shadowedVar.getNode(),IMPORT_INLINING_SHADOWS_VAR,shadowedVar.getName(),namespaceToInline);
      }
    }
    return;
  }
  safeSetString(nameNode,currentScript.contentsPrefix + name);
}
