{
  if (NodeUtil.isGoogModuleFile(n)) {
    n.putBooleanProp(Node.GOOG_MODULE,true);
    inlineModuleIntoGlobal(n);
    compiler.reportCodeChange();
    checkAndSetStrictModeDirective(t,n);
  }
switch (n.getToken()) {
case CALL:
    if (isCallTo(n,"goog.loadModule") && n.getLastChild().isFunction()) {
      recordGoogLoadModule(n);
    }
  if (isCallTo(n,"goog.module")) {
    recordGoogModule(t,n);
  }
if (isCallTo(n,"goog.module.declareLegacyNamespace")) {
  recordGoogDeclareLegacyNamespace();
}
if (isCallTo(n,"goog.provide")) {
recordGoogProvide(t,n);
}
if (isCallTo(n,"goog.require")) {
recordGoogRequire(t,n,true);
}
if (isCallTo(n,"goog.forwardDeclare") && !parent.isExprResult()) {
recordGoogForwardDeclare(t,n);
}
if (isCallTo(n,"goog.module.get")) {
recordGoogModuleGet(t,n);
}
break;
case CLASS:
case FUNCTION:
if (isTopLevel(t,n,ScopeType.BLOCK)) {
recordTopLevelClassOrFunctionName(n);
}
break;
case CONST:
case LET:
case VAR:
if (isTopLevel(t,n,n.isVar() ? ScopeType.EXEC_CONTEXT : ScopeType.BLOCK)) {
recordTopLevelVarNames(n);
}
break;
case STRING_KEY:
if (currentScript.isModule) {
rewriteShortObjectKey(n);
}
break;
case NAME:
maybeRecordExportDeclaration(t,n);
break;
case RETURN:
if (isTopLevel(t,n,ScopeType.BLOCK)) {
recordModuleReturn();
}
break;
default :
break;
}
return true;
}
