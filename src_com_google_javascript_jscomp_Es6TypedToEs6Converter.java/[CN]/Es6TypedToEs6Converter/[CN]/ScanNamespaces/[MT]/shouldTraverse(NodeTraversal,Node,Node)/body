{
switch (n.getType()) {
case SCRIPT:
case NAMESPACE_ELEMENTS:
    return true;
case BLOCK:
  return n.getFirstChild() != null && n.getFirstChild().isScript();
case DECLARE:
return n.getFirstChild().getType() == Token.NAMESPACE;
case EXPORT:
switch (n.getFirstChild().getType()) {
case CLASS:
case INTERFACE:
case ENUM:
case TYPE_ALIAS:
case NAMESPACE:
case DECLARE:
return true;
default :
break;
}
return false;
case NAMESPACE:
String[] segments=n.getFirstChild().getQualifiedName().split("\\.");
for (String s : segments) {
String currName=maybePrependCurrNamespace(s);
if (!namespaces.containsKey(currName)) {
currNamespace=new Namespace(currName,currNamespace);
namespaces.put(currName,currNamespace);
}
currNamespace=namespaces.get(currName);
}
nodeNamespaceMap.put(n,currNamespace);
return true;
case CLASS:
case INTERFACE:
case ENUM:
if (currNamespace != null) {
currNamespace.typeNames.add(n.getFirstChild().getString());
}
return true;
case TYPE_ALIAS:
if (currNamespace != null) {
currNamespace.typeNames.add(n.getString());
}
return true;
default :
break;
}
return false;
}
