{
  maybeAddGenerics(n,n);
  Node name=n.getFirstChild();
  Node superTypes=name.getNext();
  JSDocInfoBuilder doc=JSDocInfoBuilder.maybeCopyFrom(n.getJSDocInfo());
  doc.recordInterface();
  if (!superTypes.isEmpty()) {
    for (    Node child : superTypes.children()) {
      Node type=convertWithLocation(child);
      doc.recordExtendedInterface(new JSTypeExpression(type,n.getSourceFileName()));
    }
  }
  Node insertionPoint=n;
  Node members=n.getLastChild();
  for (  Node member : members.children()) {
    if (member.isCallSignature()) {
      compiler.report(JSError.make(n,CALL_SIGNATURE_NOT_SUPPORTED));
    }
    if (member.isIndexSignature()) {
      doc.recordExtendedInterface(createIObject(member));
    }
    if (member.isMemberFunctionDef()) {
      Node function=member.getFirstChild();
      if (function.isOptionalEs6Typed()) {
        member=convertMemberFunctionToMemberVariable(member);
      }
 else {
        function.getLastChild().setToken(Token.BLOCK);
      }
    }
    if (member.isMemberVariableDef()) {
      Node newNode=createPropertyDefinition(member,name.getString());
      insertionPoint.getParent().addChildAfter(newNode,insertionPoint);
      insertionPoint=newNode;
    }
  }
  n.setJSDocInfo(doc.build());
  n.setToken(Token.CLASS);
  Node empty=new Node(Token.EMPTY).useSourceInfoIfMissingFrom(n);
  n.replaceChild(superTypes,empty);
  members.setToken(Token.CLASS_MEMBERS);
  maybeCreateQualifiedDeclaration(n,parent);
  compiler.reportCodeChange();
}
