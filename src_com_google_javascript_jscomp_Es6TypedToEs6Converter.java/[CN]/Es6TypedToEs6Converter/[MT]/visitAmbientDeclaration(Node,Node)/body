{
  if (!n.isFromExterns()) {
    compiler.report(JSError.make(n,DECLARE_IN_NON_EXTERNS));
  }
  Node insertionPoint=n;
  Node topLevel=parent;
  boolean insideExport=parent.getToken() == Token.EXPORT;
  if (insideExport) {
    insertionPoint=parent;
    topLevel=parent.getParent();
  }
  for (  Node c : n.children()) {
    if (c.getToken() == Token.CONST) {
      JSDocInfoBuilder builder=JSDocInfoBuilder.maybeCopyFrom(c.getJSDocInfo());
      builder.recordConstancy();
      c.setType(Token.VAR);
      c.setJSDocInfo(builder.build());
    }
    Node toAdd=c.detach();
    if (insideExport && !toAdd.isExprResult()) {
      toAdd=new Node(Token.EXPORT,toAdd).srcref(parent);
    }
    topLevel.addChildBefore(toAdd,insertionPoint);
  }
  insertionPoint.detach();
  compiler.reportCodeChange();
}
