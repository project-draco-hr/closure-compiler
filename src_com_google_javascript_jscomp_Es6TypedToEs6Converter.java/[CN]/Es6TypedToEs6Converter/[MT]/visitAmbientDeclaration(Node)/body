{
  Node child=n.removeFirstChild();
  JSDocInfoBuilder builder=JSDocInfoBuilder.maybeCopyFrom(child.getJSDocInfo());
switch (child.getType()) {
case Token.FUNCTION:
    child.replaceChild(child.getLastChild(),IR.block().useSourceInfoFrom(child));
  break;
case Token.CLASS:
Node members=child.getLastChild();
for (Node member : members.children()) {
if (member.isMemberFunctionDef()) {
  Node function=member.getFirstChild();
  function.replaceChild(function.getLastChild(),IR.block().useSourceInfoIfMissingFrom(function));
}
}
break;
case Token.LET:
child.setType(Token.VAR);
break;
case Token.CONST:
builder.recordConstancy();
child.setType(Token.VAR);
break;
}
child.setJSDocInfo(builder.build());
n.detachFromParent();
compiler.getSynthesizedExternsInput().getAstRoot(compiler).addChildToBack(child);
compiler.reportCodeChange();
}
