{
  Node type=n.getDeclaredTypeExpression();
  boolean hasColonType=type != null;
  if (n.isRest() && hasColonType) {
    type=new Node(Token.ELLIPSIS,convertWithLocation(type.removeFirstChild()));
  }
 else {
    type=maybeProcessOptionalParameter(n,type);
  }
  if (type == null) {
    return;
  }
  JSDocInfoBuilder builder=JSDocInfoBuilder.maybeCopyFrom(jsDocNode.getJSDocInfo());
  JSTypeExpression typeExpression=new JSTypeExpression(type,n.getSourceFileName());
switch (n.getType()) {
case Token.FUNCTION:
    builder.recordReturnType(typeExpression);
  break;
case Token.MEMBER_VARIABLE_DEF:
builder.recordType(typeExpression);
break;
default :
builder.recordType(typeExpression);
builder.recordInlineType();
}
jsDocNode.setJSDocInfo(builder.build());
if (hasColonType) {
n.setDeclaredTypeExpression(null);
compiler.reportCodeChange();
}
}
