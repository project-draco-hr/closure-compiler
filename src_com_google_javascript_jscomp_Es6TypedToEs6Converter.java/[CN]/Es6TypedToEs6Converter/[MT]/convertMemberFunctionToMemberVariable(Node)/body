{
  Node function=member.getFirstChild();
  Node memberVariable=Node.newString(Token.MEMBER_VARIABLE_DEF,member.getString());
  memberVariable.useSourceInfoFrom(member);
  if (!processedOverloads.contains(function)) {
    Node returnType=maybeCreateAnyType(function,function.getDeclaredTypeExpression());
    LinkedHashMap<String,TypeDeclarationNode> required=new LinkedHashMap<>();
    LinkedHashMap<String,TypeDeclarationNode> optional=new LinkedHashMap<>();
    String restName=null;
    TypeDeclarationNode restType=null;
    for (    Node param : function.getSecondChild().children()) {
      if (param.isName()) {
        if (param.isOptionalEs6Typed()) {
          optional.put(param.getString(),param.getDeclaredTypeExpression());
        }
 else {
          required.put(param.getString(),param.getDeclaredTypeExpression());
        }
      }
 else       if (param.isRest()) {
        restName=param.getString();
        restType=param.getDeclaredTypeExpression();
      }
    }
    TypeDeclarationNode type=TypeDeclarationsIR.functionType(returnType,required,optional,restName,restType);
    memberVariable.setDeclaredTypeExpression(type);
  }
 else {
    memberVariable.setDeclaredTypeExpression(TypeDeclarationsIR.namedType("Function"));
  }
  memberVariable.putBooleanProp(Node.OPT_ES6_TYPED,function.isOptionalEs6Typed());
  member.getParent().replaceChild(member,memberVariable);
  return memberVariable;
}
