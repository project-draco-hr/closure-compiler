{
  JSDocInfoBuilder doc=JSDocInfoBuilder.maybeCopyFrom(n.getJSDocInfo());
  Node interfaces=(Node)n.getProp(Node.IMPLEMENTS);
  if (interfaces != null) {
    for (    Node child : interfaces.children()) {
      Node type=convertWithLocation(child);
      doc.recordImplementedInterface(new JSTypeExpression(type,n.getSourceFileName()));
    }
    n.removeProp(Node.IMPLEMENTS);
  }
  Node classMembers=n.getLastChild();
  ClassDeclarationMetadata metadata=ClassDeclarationMetadata.create(n,parent);
  for (  Node member : classMembers.children()) {
    if (member.isIndexSignature()) {
      doc.recordImplementedInterface(createIObject(member));
      continue;
    }
    if (!member.isMemberVariableDef() && !member.getBooleanProp(Node.COMPUTED_PROP_VARIABLE)) {
      maybeAddVisibility(member);
      continue;
    }
    if (metadata == null) {
      compiler.report(JSError.make(n,CANNOT_CONVERT_MEMBER_VARIABLES));
      return;
    }
    metadata.insertNodeAndAdvance(createPropertyDefinition(member,metadata.fullClassName));
    compiler.reportCodeChange();
  }
  n.setJSDocInfo(doc.build());
}
