{
  Node interfaces=(Node)n.getProp(Node.IMPLEMENTS);
  if (interfaces != null) {
    JSDocInfoBuilder doc=JSDocInfoBuilder.maybeCopyFrom(n.getJSDocInfo());
    for (    Node child : interfaces.children()) {
      Node type=convertWithLocation(child);
      doc.recordImplementedInterface(new JSTypeExpression(type,n.getSourceFileName()));
    }
    n.putProp(Node.IMPLEMENTS,null);
    n.setJSDocInfo(doc.build());
  }
  Node classMembers=n.getLastChild();
  ClassDeclarationMetadata metadata=ClassDeclarationMetadata.create(n,parent);
  for (  Node member : classMembers.children()) {
    if (!member.isMemberVariableDef() && !member.getBooleanProp(Node.COMPUTED_PROP_VARIABLE)) {
      continue;
    }
    if (metadata == null) {
      compiler.report(JSError.make(n,CANNOT_CONVERT_MEMBER_VARIABLES));
      return;
    }
    member.getParent().removeChild(member);
    Node classNameAccess=NodeUtil.newQName(compiler,metadata.fullClassName);
    Node prototypeAcess=NodeUtil.newPropertyAccess(compiler,classNameAccess,"prototype");
    Node qualifiedMemberAccess=Es6ToEs3Converter.getQualifiedMemberAccess(compiler,member,classNameAccess,prototypeAcess);
    visitColonType(member);
    qualifiedMemberAccess.setJSDocInfo(member.getJSDocInfo());
    Node newNode=NodeUtil.newExpr(qualifiedMemberAccess);
    newNode.useSourceInfoIfMissingFromForTree(member);
    metadata.insertNodeAndAdvance(newNode);
    compiler.reportCodeChange();
  }
}
