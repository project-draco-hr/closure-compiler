{
  Preconditions.checkArgument(type instanceof TypeDeclarationNode);
switch (type.getToken()) {
case STRING_TYPE:
    return IR.string("string");
case BOOLEAN_TYPE:
  return IR.string("boolean");
case NUMBER_TYPE:
return IR.string("number");
case VOID_TYPE:
return IR.string("void");
case UNDEFINED_TYPE:
return IR.string("undefined");
case ANY_TYPE:
return new Node(Token.QMARK);
case NAMED_TYPE:
return convertNamedType(type);
case ARRAY_TYPE:
{
Node arrayType=IR.string("Array");
Node memberType=convertWithLocation(type.getFirstChild());
arrayType.addChildToFront(new Node(Token.BLOCK,memberType).useSourceInfoIfMissingFrom(type));
return new Node(Token.BANG,arrayType);
}
case PARAMETERIZED_TYPE:
{
Node namedType=type.getFirstChild();
Node result=convertWithLocation(namedType);
Node typeParameterTarget=result.getToken() == Token.BANG ? result.getFirstChild() : result;
Node parameters=IR.block().useSourceInfoIfMissingFrom(type);
typeParameterTarget.addChildToFront(parameters);
for (Node param=namedType.getNext(); param != null; param=param.getNext()) {
parameters.addChildToBack(convertWithLocation(param));
}
return result;
}
case FUNCTION_TYPE:
{
Node returnType=type.getFirstChild();
Node paramList=new Node(Token.PARAM_LIST);
for (Node param=returnType.getNext(); param != null; param=param.getNext()) {
Node paramType=param.getDeclaredTypeExpression();
if (param.isRest()) {
if (paramType == null) {
paramType=new Node(Token.ELLIPSIS,new Node(Token.QMARK));
}
 else {
paramType=new Node(Token.ELLIPSIS,convertWithLocation(paramType.getFirstChild()));
}
}
 else {
paramType=maybeProcessOptionalParameter(param,maybeCreateAnyType(param,paramType));
}
paramList.addChildToBack(paramType);
}
Node function=new Node(Token.FUNCTION);
if (paramList.hasChildren()) {
function.addChildToBack(paramList);
}
function.addChildToBack(convertWithLocation(returnType));
return function;
}
case UNION_TYPE:
Node pipe=new Node(Token.PIPE);
for (Node child : type.children()) {
pipe.addChildToBack(convertWithLocation(child));
}
return pipe;
case RECORD_TYPE:
{
Node lb=new Node(Token.LB);
for (Node member : type.children()) {
if (member.isMemberFunctionDef()) {
member=convertMemberFunctionToMemberVariable(member);
}
 else if (!member.isMemberVariableDef()) {
compiler.report(JSError.make(type,UNSUPPORTED_RECORD_TYPE));
continue;
}
Node colon=new Node(Token.COLON);
member.setToken(Token.STRING_KEY);
Node memberType=maybeProcessOptionalProperty(member,member.getDeclaredTypeExpression());
member.setDeclaredTypeExpression(null);
colon.addChildToBack(member.detach());
colon.addChildToBack(memberType);
lb.addChildToBack(colon);
}
return new Node(Token.LC,lb);
}
case TYPEOF:
compiler.report(JSError.make(type,TYPE_QUERY_NOT_SUPPORTED));
return new Node(Token.QMARK);
case STRING:
compiler.report(JSError.make(type,SPECIALIZED_SIGNATURE_NOT_SUPPORTED));
return new Node(Token.QMARK);
default :
break;
}
throw new IllegalArgumentException("Unexpected node type for type conversion: " + type.getToken());
}
