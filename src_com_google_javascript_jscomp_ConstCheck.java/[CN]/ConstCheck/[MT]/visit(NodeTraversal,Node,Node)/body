{
switch (n.getType()) {
case Token.NAME:
    if (parent != null && parent.getType() == Token.VAR && n.hasChildren()) {
      String name=n.getString();
      Scope.Var var=t.getScope().getVar(name);
      if (isConstant(var)) {
        if (initializedConstants.contains(var)) {
          reportError(t,n,name);
        }
 else {
          initializedConstants.add(var);
        }
      }
    }
  break;
case Token.ASSIGN:
case Token.ASSIGN_BITOR:
case Token.ASSIGN_BITXOR:
case Token.ASSIGN_BITAND:
case Token.ASSIGN_LSH:
case Token.ASSIGN_RSH:
case Token.ASSIGN_URSH:
case Token.ASSIGN_ADD:
case Token.ASSIGN_SUB:
case Token.ASSIGN_MUL:
case Token.ASSIGN_DIV:
case Token.ASSIGN_MOD:
{
  Node lhs=n.getFirstChild();
  if (lhs.getType() == Token.NAME) {
    String name=lhs.getString();
    Scope.Var var=t.getScope().getVar(name);
    if (isConstant(var)) {
      if (initializedConstants.contains(var)) {
        reportError(t,n,name);
      }
 else {
        initializedConstants.add(var);
      }
    }
  }
  break;
}
case Token.INC:
case Token.DEC:
{
Node lhs=n.getFirstChild();
if (lhs.getType() == Token.NAME) {
  String name=lhs.getString();
  Scope.Var var=t.getScope().getVar(name);
  if (isConstant(var)) {
    reportError(t,n,name);
  }
}
break;
}
}
}
