{
  Preconditions.checkArgument(hook.isHook(),"Expected: HOOK, Got: %s",Token.name(hook.getType()));
  Node condition=hook.getFirstChild();
  Node thenBranch=condition.getNext();
  Node elseBranch=thenBranch.getNext();
  if (thenHasSideEffects && elseHasSideEffects) {
    hook.detachChildren();
    hook.addChildToBack(condition);
    hook.addChildToBack(simplifyShortCircuitBranch(thenBranch));
    hook.addChildToBack(simplifyShortCircuitBranch(elseBranch));
    keepSubTree(hook);
  }
 else   if (thenHasSideEffects || elseHasSideEffects) {
    int type=thenHasSideEffects ? Token.AND : Token.OR;
    Node body=thenHasSideEffects ? thenBranch : elseBranch;
    Node simplified=new Node(type,condition.detachFromParent(),simplifyShortCircuitBranch(body)).copyInformationFrom(hook);
    keepSubTree(simplified);
  }
 else {
    throw new IllegalArgumentException("keepSimplifiedHookExpression must keep at least 1 branch");
  }
}
