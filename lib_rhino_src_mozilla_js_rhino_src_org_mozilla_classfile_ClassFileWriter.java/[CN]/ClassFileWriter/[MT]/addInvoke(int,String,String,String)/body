{
  if (DEBUGCODE) {
    System.out.println("Add " + bytecodeStr(theOpCode) + ", "+ className+ ", "+ methodName+ ", "+ methodType);
  }
  int parameterInfo=sizeOfParameters(methodType);
  int parameterCount=parameterInfo >>> 16;
  int stackDiff=(short)parameterInfo;
  int newStack=itsStackTop + stackDiff;
  newStack+=stackChange(theOpCode);
  if (newStack < 0 || Short.MAX_VALUE < newStack)   badStack(newStack);
switch (theOpCode) {
case ByteCode.INVOKEVIRTUAL:
case ByteCode.INVOKESPECIAL:
case ByteCode.INVOKESTATIC:
case ByteCode.INVOKEINTERFACE:
{
      addToCodeBuffer(theOpCode);
      if (theOpCode == ByteCode.INVOKEINTERFACE) {
        short ifMethodRefIndex=itsConstantPool.addInterfaceMethodRef(className,methodName,methodType);
        addToCodeInt16(ifMethodRefIndex);
        addToCodeBuffer(parameterCount + 1);
        addToCodeBuffer(0);
      }
 else {
        short methodRefIndex=itsConstantPool.addMethodRef(className,methodName,methodType);
        addToCodeInt16(methodRefIndex);
      }
    }
  break;
default :
throw new IllegalArgumentException("bad opcode for method reference");
}
itsStackTop=(short)newStack;
if (newStack > itsMaxStack) itsMaxStack=(short)newStack;
if (DEBUGSTACK) {
System.out.println("After " + bytecodeStr(theOpCode) + " stack = "+ itsStackTop);
}
}
