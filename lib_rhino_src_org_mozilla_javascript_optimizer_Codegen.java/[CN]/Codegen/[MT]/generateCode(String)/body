{
  boolean hasScript=(scriptOrFnNodes[0].getType() == Token.SCRIPT);
  boolean hasFunctions=(scriptOrFnNodes.length > 1 || !hasScript);
  String sourceFile=null;
  if (compilerEnv.isGenerateDebugInfo()) {
    sourceFile=scriptOrFnNodes[0].getSourceName();
  }
  ClassFileWriter cfw=new ClassFileWriter(mainClassName,SUPER_CLASS_NAME,sourceFile);
  cfw.addField(ID_FIELD_NAME,"I",ACC_PRIVATE);
  if (hasFunctions) {
    generateFunctionConstructor(cfw);
  }
  if (hasScript) {
    cfw.addInterface("org/mozilla/javascript/Script");
    generateScriptCtor(cfw);
    generateMain(cfw);
    generateExecute(cfw);
  }
  generateCallMethod(cfw);
  generateResumeGenerator(cfw);
  generateNativeFunctionOverrides(cfw,encodedSource);
  int count=scriptOrFnNodes.length;
  for (int i=0; i != count; ++i) {
    ScriptNode n=scriptOrFnNodes[i];
    BodyCodegen bodygen=new BodyCodegen();
    bodygen.cfw=cfw;
    bodygen.codegen=this;
    bodygen.compilerEnv=compilerEnv;
    bodygen.scriptOrFn=n;
    bodygen.scriptOrFnIndex=i;
    try {
      bodygen.generateBodyCode();
    }
 catch (    ClassFileWriter.ClassFileFormatException e) {
      throw reportClassFileFormatException(n,e.getMessage());
    }
    if (n.getType() == Token.FUNCTION) {
      OptFunctionNode ofn=OptFunctionNode.get(n);
      generateFunctionInit(cfw,ofn);
      if (ofn.isTargetOfDirectCall()) {
        emitDirectConstructor(cfw,ofn);
      }
    }
  }
  emitRegExpInit(cfw);
  emitConstantDudeInitializers(cfw);
  return cfw.toByteArray();
}
