{
  cfw.startMethod("getLanguageVersion","()I",ClassFileWriter.ACC_PUBLIC);
  cfw.addPush(compilerEnv.getLanguageVersion());
  cfw.add(ByteCode.IRETURN);
  cfw.stopMethod((short)1);
  final int Do_getFunctionName=0;
  final int Do_getParamCount=1;
  final int Do_getParamAndVarCount=2;
  final int Do_getParamOrVarName=3;
  final int Do_getEncodedSource=4;
  final int Do_getParamOrVarConst=5;
  final int SWITCH_COUNT=6;
  for (int methodIndex=0; methodIndex != SWITCH_COUNT; ++methodIndex) {
    if (methodIndex == Do_getEncodedSource && encodedSource == null) {
      continue;
    }
    short methodLocals;
switch (methodIndex) {
case Do_getFunctionName:
      methodLocals=1;
    cfw.startMethod("getFunctionName","()Ljava/lang/String;",ClassFileWriter.ACC_PUBLIC);
  break;
case Do_getParamCount:
methodLocals=1;
cfw.startMethod("getParamCount","()I",ClassFileWriter.ACC_PUBLIC);
break;
case Do_getParamAndVarCount:
methodLocals=1;
cfw.startMethod("getParamAndVarCount","()I",ClassFileWriter.ACC_PUBLIC);
break;
case Do_getParamOrVarName:
methodLocals=1 + 1;
cfw.startMethod("getParamOrVarName","(I)Ljava/lang/String;",ClassFileWriter.ACC_PUBLIC);
break;
case Do_getParamOrVarConst:
methodLocals=1 + 1 + 1;
cfw.startMethod("getParamOrVarConst","(I)Z",ClassFileWriter.ACC_PUBLIC);
break;
case Do_getEncodedSource:
methodLocals=1;
cfw.startMethod("getEncodedSource","()Ljava/lang/String;",ClassFileWriter.ACC_PUBLIC);
cfw.addPush(encodedSource);
break;
default :
throw Kit.codeBug();
}
int count=scriptOrFnNodes.length;
int switchStart=0;
int switchStackTop=0;
if (count > 1) {
cfw.addLoadThis();
cfw.add(ByteCode.GETFIELD,cfw.getClassName(),ID_FIELD_NAME,"I");
switchStart=cfw.addTableSwitch(1,count - 1);
}
for (int i=0; i != count; ++i) {
ScriptNode n=scriptOrFnNodes[i];
if (i == 0) {
if (count > 1) {
cfw.markTableSwitchDefault(switchStart);
switchStackTop=cfw.getStackTop();
}
}
 else {
cfw.markTableSwitchCase(switchStart,i - 1,switchStackTop);
}
switch (methodIndex) {
case Do_getFunctionName:
if (n.getType() == Token.SCRIPT) {
cfw.addPush("");
}
 else {
String name=((FunctionNode)n).getName();
cfw.addPush(name);
}
cfw.add(ByteCode.ARETURN);
break;
case Do_getParamCount:
cfw.addPush(n.getParamCount());
cfw.add(ByteCode.IRETURN);
break;
case Do_getParamAndVarCount:
cfw.addPush(n.getParamAndVarCount());
cfw.add(ByteCode.IRETURN);
break;
case Do_getParamOrVarName:
int paramAndVarCount=n.getParamAndVarCount();
if (paramAndVarCount == 0) {
cfw.add(ByteCode.ACONST_NULL);
cfw.add(ByteCode.ARETURN);
}
 else if (paramAndVarCount == 1) {
cfw.addPush(n.getParamOrVarName(0));
cfw.add(ByteCode.ARETURN);
}
 else {
cfw.addILoad(1);
int paramSwitchStart=cfw.addTableSwitch(1,paramAndVarCount - 1);
for (int j=0; j != paramAndVarCount; ++j) {
if (cfw.getStackTop() != 0) Kit.codeBug();
String s=n.getParamOrVarName(j);
if (j == 0) {
cfw.markTableSwitchDefault(paramSwitchStart);
}
 else {
cfw.markTableSwitchCase(paramSwitchStart,j - 1,0);
}
cfw.addPush(s);
cfw.add(ByteCode.ARETURN);
}
}
break;
case Do_getParamOrVarConst:
paramAndVarCount=n.getParamAndVarCount();
boolean[] constness=n.getParamAndVarConst();
if (paramAndVarCount == 0) {
cfw.add(ByteCode.ICONST_0);
cfw.add(ByteCode.IRETURN);
}
 else if (paramAndVarCount == 1) {
cfw.addPush(constness[0]);
cfw.add(ByteCode.IRETURN);
}
 else {
cfw.addILoad(1);
int paramSwitchStart=cfw.addTableSwitch(1,paramAndVarCount - 1);
for (int j=0; j != paramAndVarCount; ++j) {
if (cfw.getStackTop() != 0) Kit.codeBug();
if (j == 0) {
cfw.markTableSwitchDefault(paramSwitchStart);
}
 else {
cfw.markTableSwitchCase(paramSwitchStart,j - 1,0);
}
cfw.addPush(constness[j]);
cfw.add(ByteCode.IRETURN);
}
}
break;
case Do_getEncodedSource:
cfw.addPush(n.getEncodedSourceStart());
cfw.addPush(n.getEncodedSourceEnd());
cfw.addInvoke(ByteCode.INVOKEVIRTUAL,"java/lang/String","substring","(II)Ljava/lang/String;");
cfw.add(ByteCode.ARETURN);
break;
default :
throw Kit.codeBug();
}
}
cfw.stopMethod(methodLocals);
}
}
