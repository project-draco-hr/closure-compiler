{
  final int SCOPE_ARG=1;
  final int CONTEXT_ARG=2;
  final int ID_ARG=3;
  cfw.startMethod("<init>",FUNCTION_CONSTRUCTOR_SIGNATURE,ACC_PUBLIC);
  cfw.addALoad(0);
  cfw.addInvoke(ByteCode.INVOKESPECIAL,SUPER_CLASS_NAME,"<init>","()V");
  cfw.addLoadThis();
  cfw.addILoad(ID_ARG);
  cfw.add(ByteCode.PUTFIELD,cfw.getClassName(),ID_FIELD_NAME,"I");
  cfw.addLoadThis();
  cfw.addALoad(CONTEXT_ARG);
  cfw.addALoad(SCOPE_ARG);
  int start=(scriptOrFnNodes[0].getType() == Token.SCRIPT) ? 1 : 0;
  int end=scriptOrFnNodes.length;
  if (start == end)   throw badTree();
  boolean generateSwitch=(2 <= end - start);
  int switchStart=0;
  int switchStackTop=0;
  if (generateSwitch) {
    cfw.addILoad(ID_ARG);
    switchStart=cfw.addTableSwitch(start + 1,end - 1);
  }
  for (int i=start; i != end; ++i) {
    if (generateSwitch) {
      if (i == start) {
        cfw.markTableSwitchDefault(switchStart);
        switchStackTop=cfw.getStackTop();
      }
 else {
        cfw.markTableSwitchCase(switchStart,i - 1 - start,switchStackTop);
      }
    }
    OptFunctionNode ofn=OptFunctionNode.get(scriptOrFnNodes[i]);
    cfw.addInvoke(ByteCode.INVOKESPECIAL,mainClassName,getFunctionInitMethodName(ofn),FUNCTION_INIT_SIGNATURE);
    cfw.add(ByteCode.RETURN);
  }
  cfw.stopMethod((short)4);
}
