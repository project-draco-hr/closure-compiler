{
  initOptFunctions_r(tree);
  int optLevel=compilerEnv.getOptimizationLevel();
  Map<String,OptFunctionNode> possibleDirectCalls=null;
  if (optLevel > 0) {
    if (tree.getType() == Token.SCRIPT) {
      int functionCount=tree.getFunctionCount();
      for (int i=0; i != functionCount; ++i) {
        OptFunctionNode ofn=OptFunctionNode.get(tree,i);
        if (ofn.fnode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT) {
          String name=ofn.fnode.getName();
          if (name.length() != 0) {
            if (possibleDirectCalls == null) {
              possibleDirectCalls=new HashMap<String,OptFunctionNode>();
            }
            possibleDirectCalls.put(name,ofn);
          }
        }
      }
    }
  }
  if (possibleDirectCalls != null) {
    directCallTargets=new ObjArray();
  }
  OptTransformer ot=new OptTransformer(possibleDirectCalls,directCallTargets);
  ot.transform(tree);
  if (optLevel > 0) {
    (new Optimizer()).optimize(tree);
  }
}
