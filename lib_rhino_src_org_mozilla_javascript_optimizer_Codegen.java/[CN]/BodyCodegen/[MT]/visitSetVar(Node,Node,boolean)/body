{
  if (!hasVarsInRegs)   Kit.codeBug();
  int varIndex=fnCurrent.getVarIndex(node);
  generateExpression(child.getNext(),node);
  boolean isNumber=(node.getIntProp(Node.ISNUMBER_PROP,-1) != -1);
  short reg=varRegisters[varIndex];
  boolean[] constDeclarations=fnCurrent.fnode.getParamAndVarConst();
  if (constDeclarations[varIndex]) {
    if (!needValue) {
      if (isNumber)       cfw.add(ByteCode.POP2);
 else       cfw.add(ByteCode.POP);
    }
  }
 else   if (varIsDirectCallParameter(varIndex)) {
    if (isNumber) {
      if (needValue)       cfw.add(ByteCode.DUP2);
      cfw.addALoad(reg);
      cfw.add(ByteCode.GETSTATIC,"java/lang/Void","TYPE","Ljava/lang/Class;");
      int isNumberLabel=cfw.acquireLabel();
      int beyond=cfw.acquireLabel();
      cfw.add(ByteCode.IF_ACMPEQ,isNumberLabel);
      short stack=cfw.getStackTop();
      addDoubleWrap();
      cfw.addAStore(reg);
      cfw.add(ByteCode.GOTO,beyond);
      cfw.markLabel(isNumberLabel,stack);
      cfw.addDStore(reg + 1);
      cfw.markLabel(beyond);
    }
 else {
      if (needValue)       cfw.add(ByteCode.DUP);
      cfw.addAStore(reg);
    }
  }
 else {
    boolean isNumberVar=fnCurrent.isNumberVar(varIndex);
    if (isNumber) {
      if (isNumberVar) {
        cfw.addDStore(reg);
        if (needValue)         cfw.addDLoad(reg);
      }
 else {
        if (needValue)         cfw.add(ByteCode.DUP2);
        addDoubleWrap();
        cfw.addAStore(reg);
      }
    }
 else {
      if (isNumberVar)       Kit.codeBug();
      cfw.addAStore(reg);
      if (needValue)       cfw.addALoad(reg);
    }
  }
}
