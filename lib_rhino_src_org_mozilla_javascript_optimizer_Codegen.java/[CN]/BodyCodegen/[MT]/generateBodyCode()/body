{
  isGenerator=Codegen.isGenerator(scriptOrFn);
  initBodyGeneration();
  if (isGenerator) {
    String type="(" + codegen.mainClassSignature + "Lorg/mozilla/javascript/Context;"+ "Lorg/mozilla/javascript/Scriptable;"+ "Ljava/lang/Object;"+ "Ljava/lang/Object;I)Ljava/lang/Object;";
    cfw.startMethod(codegen.getBodyMethodName(scriptOrFn) + "_gen",type,(short)(ACC_STATIC | ACC_PRIVATE));
  }
 else {
    cfw.startMethod(codegen.getBodyMethodName(scriptOrFn),codegen.getBodyMethodSignature(scriptOrFn),(short)(ACC_STATIC | ACC_PRIVATE));
  }
  generatePrologue();
  Node treeTop;
  if (fnCurrent != null) {
    treeTop=scriptOrFn.getLastChild();
  }
 else {
    treeTop=scriptOrFn;
  }
  generateStatement(treeTop);
  generateEpilogue();
  cfw.stopMethod((short)(localsMax + 1));
  if (isGenerator) {
    generateGenerator();
  }
  if (literals != null) {
    for (int i=0; i < literals.size(); i++) {
      Node node=literals.get(i);
      int type=node.getType();
switch (type) {
case Token.OBJECTLIT:
        generateObjectLiteralFactory(node,i + 1);
      break;
case Token.ARRAYLIT:
    generateArrayLiteralFactory(node,i + 1);
  break;
default :
Kit.codeBug(Token.typeToName(type));
}
}
}
}
