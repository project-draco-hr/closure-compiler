{
  cfw.addALoad(contextLocal);
  if (type == Token.NEW) {
    generateExpression(child,node);
  }
 else {
    generateFunctionAndThisObj(child,node);
  }
  child=child.getNext();
  generateCallArgArray(node,child,false);
  String methodName;
  String callSignature;
  if (type == Token.NEW) {
    methodName="newObjectSpecial";
    callSignature="(Lorg/mozilla/javascript/Context;" + "Ljava/lang/Object;" + "[Ljava/lang/Object;"+ "Lorg/mozilla/javascript/Scriptable;"+ "Lorg/mozilla/javascript/Scriptable;"+ "I"+ ")Ljava/lang/Object;";
    cfw.addALoad(variableObjectLocal);
    cfw.addALoad(thisObjLocal);
    cfw.addPush(specialType);
  }
 else {
    methodName="callSpecial";
    callSignature="(Lorg/mozilla/javascript/Context;" + "Lorg/mozilla/javascript/Callable;" + "Lorg/mozilla/javascript/Scriptable;"+ "[Ljava/lang/Object;"+ "Lorg/mozilla/javascript/Scriptable;"+ "Lorg/mozilla/javascript/Scriptable;"+ "I"+ "Ljava/lang/String;I"+ ")Ljava/lang/Object;";
    cfw.addALoad(variableObjectLocal);
    cfw.addALoad(thisObjLocal);
    cfw.addPush(specialType);
    String sourceName=scriptOrFn.getSourceName();
    cfw.addPush(sourceName == null ? "" : sourceName);
    cfw.addPush(itsLineNumber);
  }
  addOptRuntimeInvoke(methodName,callSignature);
}
