{
  short savedVariableObject=getNewWordLocal();
  cfw.addALoad(variableObjectLocal);
  cfw.addAStore(savedVariableObject);
  int startLabel=cfw.acquireLabel();
  cfw.markLabel(startLabel,(short)0);
  Node catchTarget=node.target;
  Node finallyTarget=node.getFinally();
  int[] handlerLabels=new int[EXCEPTION_MAX];
  exceptionManager.pushExceptionInfo(node);
  if (catchTarget != null) {
    handlerLabels[JAVASCRIPT_EXCEPTION]=cfw.acquireLabel();
    handlerLabels[EVALUATOR_EXCEPTION]=cfw.acquireLabel();
    handlerLabels[ECMAERROR_EXCEPTION]=cfw.acquireLabel();
    Context cx=Context.getCurrentContext();
    if (cx != null && cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS)) {
      handlerLabels[THROWABLE_EXCEPTION]=cfw.acquireLabel();
    }
  }
  if (finallyTarget != null) {
    handlerLabels[FINALLY_EXCEPTION]=cfw.acquireLabel();
  }
  exceptionManager.setHandlers(handlerLabels,startLabel);
  if (isGenerator && finallyTarget != null) {
    FinallyReturnPoint ret=new FinallyReturnPoint();
    if (finallys == null) {
      finallys=new HashMap<Node,FinallyReturnPoint>();
    }
    finallys.put(finallyTarget,ret);
    finallys.put(finallyTarget.getNext(),ret);
  }
  while (child != null) {
    if (child == catchTarget) {
      int catchLabel=getTargetLabel(catchTarget);
      exceptionManager.removeHandler(JAVASCRIPT_EXCEPTION,catchLabel);
      exceptionManager.removeHandler(EVALUATOR_EXCEPTION,catchLabel);
      exceptionManager.removeHandler(ECMAERROR_EXCEPTION,catchLabel);
      exceptionManager.removeHandler(THROWABLE_EXCEPTION,catchLabel);
    }
    generateStatement(child);
    child=child.getNext();
  }
  int realEnd=cfw.acquireLabel();
  cfw.add(ByteCode.GOTO,realEnd);
  int exceptionLocal=getLocalBlockRegister(node);
  if (catchTarget != null) {
    int catchLabel=catchTarget.labelId();
    generateCatchBlock(JAVASCRIPT_EXCEPTION,savedVariableObject,catchLabel,exceptionLocal,handlerLabels[JAVASCRIPT_EXCEPTION]);
    generateCatchBlock(EVALUATOR_EXCEPTION,savedVariableObject,catchLabel,exceptionLocal,handlerLabels[EVALUATOR_EXCEPTION]);
    generateCatchBlock(ECMAERROR_EXCEPTION,savedVariableObject,catchLabel,exceptionLocal,handlerLabels[ECMAERROR_EXCEPTION]);
    Context cx=Context.getCurrentContext();
    if (cx != null && cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS)) {
      generateCatchBlock(THROWABLE_EXCEPTION,savedVariableObject,catchLabel,exceptionLocal,handlerLabels[THROWABLE_EXCEPTION]);
    }
  }
  if (finallyTarget != null) {
    int finallyHandler=cfw.acquireLabel();
    int finallyEnd=cfw.acquireLabel();
    cfw.markHandler(finallyHandler);
    if (!isGenerator) {
      cfw.markLabel(handlerLabels[FINALLY_EXCEPTION]);
    }
    cfw.addAStore(exceptionLocal);
    cfw.addALoad(savedVariableObject);
    cfw.addAStore(variableObjectLocal);
    int finallyLabel=finallyTarget.labelId();
    if (isGenerator)     addGotoWithReturn(finallyTarget);
 else {
      inlineFinally(finallyTarget,handlerLabels[FINALLY_EXCEPTION],finallyEnd);
    }
    cfw.addALoad(exceptionLocal);
    if (isGenerator)     cfw.add(ByteCode.CHECKCAST,"java/lang/Throwable");
    cfw.add(ByteCode.ATHROW);
    cfw.markLabel(finallyEnd);
    if (isGenerator) {
      cfw.addExceptionHandler(startLabel,finallyLabel,finallyHandler,null);
    }
  }
  releaseWordLocal(savedVariableObject);
  cfw.markLabel(realEnd);
  if (!isGenerator) {
    exceptionManager.popExceptionInfo();
  }
}
