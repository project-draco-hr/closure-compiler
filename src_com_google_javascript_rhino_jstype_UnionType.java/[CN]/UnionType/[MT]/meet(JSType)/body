{
  UnionTypeBuilder builder=new UnionTypeBuilder(registry);
  for (  JSType alternate : alternatesWithoutStucturalTyping) {
    if (alternate.isSubtype(that)) {
      builder.addAlternate(alternate);
    }
  }
  if (that.isUnionType()) {
    for (    JSType otherAlternate : that.toMaybeUnionType().alternatesWithoutStucturalTyping) {
      if (otherAlternate.isSubtype(this)) {
        builder.addAlternate(otherAlternate);
      }
    }
  }
 else   if (that.isSubtype(this)) {
    builder.addAlternate(that);
  }
  JSType result=builder.build();
  if (!result.isNoType()) {
    return result;
  }
 else   if (this.isObject() && (that.isObject() && !that.isNoType())) {
    return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
  }
 else {
    return getNativeType(JSTypeNative.NO_TYPE);
  }
}
