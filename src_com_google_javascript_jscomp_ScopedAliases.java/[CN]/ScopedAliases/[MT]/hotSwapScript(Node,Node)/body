{
  Traversal traversal=new Traversal();
  NodeTraversal.traverse(compiler,root,traversal);
  if (!traversal.hasErrors()) {
    List<AliasUsage> aliasWorkQueue=new ArrayList<>(traversal.getAliasUsages());
    while (!aliasWorkQueue.isEmpty()) {
      List<AliasUsage> newQueue=new ArrayList<>();
      for (      AliasUsage aliasUsage : aliasWorkQueue) {
        if (aliasUsage.referencesOtherAlias()) {
          newQueue.add(aliasUsage);
        }
 else {
          aliasUsage.applyAlias();
        }
      }
      if (newQueue.size() == aliasWorkQueue.size()) {
        Var cycleVar=newQueue.get(0).aliasVar;
        compiler.report(JSError.make(cycleVar.getNode(),GOOG_SCOPE_ALIAS_CYCLE,cycleVar.getName()));
        break;
      }
 else {
        aliasWorkQueue=newQueue;
      }
    }
    for (    Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {
      if (aliasDefinition.getParent().isVar() && aliasDefinition.getParent().hasOneChild()) {
        aliasDefinition.getParent().detachFromParent();
      }
 else {
        aliasDefinition.detachFromParent();
      }
    }
    for (    Node scopeCall : traversal.getScopeCalls()) {
      Node expressionWithScopeCall=scopeCall.getParent();
      Node scopeClosureBlock=scopeCall.getLastChild().getLastChild();
      scopeClosureBlock.detachFromParent();
      expressionWithScopeCall.getParent().replaceChild(expressionWithScopeCall,scopeClosureBlock);
      NodeUtil.tryMergeBlock(scopeClosureBlock);
    }
    if (!traversal.getAliasUsages().isEmpty() || !traversal.getAliasDefinitionsInOrder().isEmpty() || !traversal.getScopeCalls().isEmpty()) {
      compiler.reportCodeChange();
    }
  }
}
