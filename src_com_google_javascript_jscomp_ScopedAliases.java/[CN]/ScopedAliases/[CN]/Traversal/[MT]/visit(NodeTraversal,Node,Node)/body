{
  if (isCallToScopeMethod(n)) {
    if (!NodeUtil.isExpressionNode(parent)) {
      report(t,n,GOOG_SCOPE_USED_IMPROPERLY);
    }
    if (n.getChildCount() != 2) {
      report(t,n,GOOG_SCOPE_HAS_BAD_PARAMETERS);
    }
 else {
      Node anonymousFnNode=n.getChildAtIndex(1);
      if (!NodeUtil.isFunction(anonymousFnNode) || NodeUtil.getFunctionName(anonymousFnNode) != null || NodeUtil.getFnParameters(anonymousFnNode).hasChildren()) {
        report(t,anonymousFnNode,GOOG_SCOPE_HAS_BAD_PARAMETERS);
      }
 else {
        scopeCalls.add(n);
      }
    }
  }
  if (t.getScopeDepth() == 2) {
    int type=n.getType();
    if (type == Token.NAME && parent.getType() == Token.VAR) {
      if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
        aliases.put(n.getString(),n.getFirstChild());
        aliasDefinitions.add(n);
        t.getScope().undeclare(t.getScope().getVar(n.getString()));
        return;
      }
 else {
        report(t,n,GOOG_SCOPE_NON_ALIAS_LOCAL,n.getString());
      }
    }
    if (type == Token.NAME && NodeUtil.isAssignmentOp(parent)) {
      report(t,n,GOOG_SCOPE_ALIAS_REDEFINED,n.getString());
    }
    if (type == Token.RETURN) {
      report(t,n,GOOG_SCOPE_USES_RETURN);
    }
 else     if (type == Token.THIS) {
      report(t,n,GOOG_SCOPE_REFERENCES_THIS);
    }
 else     if (type == Token.THROW) {
      report(t,n,GOOG_SCOPE_USES_THROW);
    }
  }
  if (t.getScopeDepth() >= 2) {
    if (n.getType() == Token.NAME) {
      Node aliasedNode=aliases.get(n.getString());
      if (t.getScope().getVar(n.getString()) == null && aliasedNode != null) {
        aliasUsages.add(new AliasedNode(n,aliasedNode));
      }
    }
    JSDocInfo info=n.getJSDocInfo();
    if (info != null) {
      for (      Node node : info.getTypeNodes()) {
        fixTypeNode(node);
      }
    }
  }
}
