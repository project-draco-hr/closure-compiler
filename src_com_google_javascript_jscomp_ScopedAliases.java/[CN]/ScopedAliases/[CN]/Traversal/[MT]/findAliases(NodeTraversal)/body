{
  Scope scope=t.getScope();
  for (  Var v : scope.getVarIterable()) {
    Node n=v.getNode();
    Node parent=n.getParent();
    boolean isVar=parent.isVar() && parent.getParent().isBlock();
    boolean isFunctionDecl=NodeUtil.isFunctionDeclaration(parent);
    if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
      recordAlias(v);
    }
 else     if (v.isBleedingFunction()) {
    }
 else     if (parent.getType() == Token.PARAM_LIST) {
    }
 else     if (isVar || isFunctionDecl) {
      boolean isHoisted=NodeUtil.isHoistedFunctionDeclaration(parent);
      Node grandparent=parent.getParent();
      Node value=v.getInitialValue() != null ? v.getInitialValue() : null;
      Node varNode=null;
      JSDocInfo varDocInfo=v.getJSDocInfo();
      String name=n.getString();
      int nameCount=scopedAliasNames.count(name);
      scopedAliasNames.add(name);
      String globalName="$jscomp.scope." + name + (nameCount == 0 ? "" : ("$" + nameCount));
      compiler.ensureLibraryInjected("base",true);
      if (isFunctionDecl) {
        Node existingName=v.getNameNode();
        Node newName=IR.name("").useSourceInfoFrom(existingName);
        value.replaceChild(existingName,newName);
        varNode=IR.var(existingName).useSourceInfoFrom(existingName);
        grandparent.replaceChild(parent,varNode);
      }
 else {
        if (value != null) {
          value.detachFromParent();
        }
        varNode=parent;
      }
      if (value != null || varDocInfo != null) {
        Node newDecl=compiler.newQualifiedNameNodeDeclaration(globalName,value,varDocInfo).useSourceInfoIfMissingFromForTree(n);
        NodeUtil.setDebugInformation(newDecl.getFirstChild().getFirstChild(),n,name);
        if (isHoisted) {
          grandparent.addChildToFront(newDecl);
        }
 else {
          grandparent.addChildBefore(newDecl,varNode);
        }
        injectedDecls.add(newDecl.getFirstChild());
      }
      v.getNameNode().addChildToFront(compiler.newQualifiedNameNode(globalName,n,name));
      recordAlias(v);
    }
 else {
      report(t,n,GOOG_SCOPE_NON_ALIAS_LOCAL,n.getString());
    }
  }
}
