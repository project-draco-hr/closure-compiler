{
  Node constructor=n.getFirstChild();
  Node pattern=constructor.getNext();
  Node flags=null != pattern ? pattern.getNext() : null;
  if (null == pattern || (null != flags && null != flags.getNext())) {
    return false;
  }
  if (pattern.getType() == Token.STRING && !"".equals(pattern.getString()) && pattern.getString().length() < 100 && (null == flags || flags.getType() == Token.STRING) && !containsUnicodeEscape(pattern.getString())) {
    pattern=makeForwardSlashBracketSafe(pattern);
    Node regexLiteral;
    if (null == flags || "".equals(flags.getString())) {
      regexLiteral=new Node(Token.REGEXP,pattern);
    }
 else {
      if (!areValidRegexpFlags(flags.getString())) {
        error(t,INVALID_REGULAR_EXPRESSION_FLAGS,flags);
        return false;
      }
      if (!areSafeFlagsToFold(flags.getString())) {
        return false;
      }
      n.removeChild(flags);
      regexLiteral=new Node(Token.REGEXP,pattern,flags);
    }
    parent.replaceChild(n,regexLiteral);
    t.getCompiler().reportCodeChange();
    return true;
  }
  return false;
}
