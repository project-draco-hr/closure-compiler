{
  if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {
    return;
  }
  Node arrayNode=left.getFirstChild();
  Node functionName=arrayNode.getNext();
  if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals("join")) {
    return;
  }
  String joinString=NodeUtil.getStringValue(right);
  List<Node> arrayFoldedChildren=Lists.newLinkedList();
  StringBuilder sb=null;
  int foldedSize=0;
  Node prev=null;
  Node elem=arrayNode.getFirstChild();
  while (elem != null) {
    if (NodeUtil.isImmutableValue(elem)) {
      if (sb == null) {
        sb=new StringBuilder();
      }
 else {
        sb.append(joinString);
      }
      sb.append(NodeUtil.getStringValue(elem));
    }
 else {
      if (sb != null) {
        Preconditions.checkNotNull(prev);
        foldedSize+=sb.length() + 2;
        arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
        sb=null;
      }
      foldedSize+=InlineCostEstimator.getCost(elem);
      arrayFoldedChildren.add(elem);
    }
    prev=elem;
    elem=elem.getNext();
  }
  if (sb != null) {
    Preconditions.checkNotNull(prev);
    foldedSize+=sb.length() + 2;
    arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));
  }
  foldedSize+=arrayFoldedChildren.size() - 1;
  int originalSize=InlineCostEstimator.getCost(n);
switch (arrayFoldedChildren.size()) {
case 0:
    Node emptyStringNode=Node.newString("");
  parent.replaceChild(n,emptyStringNode);
break;
case 1:
Node foldedStringNode=arrayFoldedChildren.remove(0);
if (foldedSize > originalSize) {
return;
}
arrayNode.detachChildren();
if (foldedStringNode.getType() != Token.STRING) {
Node replacement=new Node(Token.ADD,Node.newString("").copyInformationFrom(right),foldedStringNode);
foldedStringNode=replacement;
}
parent.replaceChild(n,foldedStringNode);
break;
default :
if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
return;
}
int kJoinOverhead="[].join()".length();
foldedSize+=kJoinOverhead;
foldedSize+=InlineCostEstimator.getCost(right);
if (foldedSize > originalSize) {
return;
}
arrayNode.detachChildren();
for (Node node : arrayFoldedChildren) {
arrayNode.addChildToBack(node);
}
break;
}
t.getCompiler().reportCodeChange();
}
