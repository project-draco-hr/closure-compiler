{
  AstRoot root=parse("\nif (\n" + "      ((a \n" + "        | 3 \n"+ "       ) == \n"+ "       (b \n"+ "        & 2)) && \n"+ "      ((a \n"+ "         ^ 0xffff) \n"+ "       != \n"+ "       (c \n"+ "        << 1))) {\n"+ "}\n");
  IfStatement ifStmt=(IfStatement)root.getFirstChild();
  InfixExpression andTest=(InfixExpression)ifStmt.getCondition();
  ParenthesizedExpression bigLHSExpr=(ParenthesizedExpression)andTest.getLeft();
  ParenthesizedExpression bigRHSExpr=(ParenthesizedExpression)andTest.getRight();
  InfixExpression eqTest=(InfixExpression)bigLHSExpr.getExpression();
  InfixExpression notEqTest=(InfixExpression)bigRHSExpr.getExpression();
  ParenthesizedExpression test1Expr=(ParenthesizedExpression)eqTest.getLeft();
  ParenthesizedExpression test2Expr=(ParenthesizedExpression)eqTest.getRight();
  ParenthesizedExpression test3Expr=(ParenthesizedExpression)notEqTest.getLeft();
  ParenthesizedExpression test4Expr=(ParenthesizedExpression)notEqTest.getRight();
  InfixExpression bitOrTest=(InfixExpression)test1Expr.getExpression();
  InfixExpression bitAndTest=(InfixExpression)test2Expr.getExpression();
  InfixExpression bitXorTest=(InfixExpression)test3Expr.getExpression();
  InfixExpression bitShiftTest=(InfixExpression)test4Expr.getExpression();
  assertEquals(1,ifStmt.getLineno());
  assertEquals(2,bigLHSExpr.getLineno());
  assertEquals(7,bigRHSExpr.getLineno());
  assertEquals(4,eqTest.getLineno());
  assertEquals(9,notEqTest.getLineno());
  assertEquals(2,test1Expr.getLineno());
  assertEquals(5,test2Expr.getLineno());
  assertEquals(7,test3Expr.getLineno());
  assertEquals(10,test4Expr.getLineno());
  assertEquals(3,bitOrTest.getLineno());
  assertEquals(6,bitAndTest.getLineno());
  assertEquals(8,bitXorTest.getLineno());
  assertEquals(11,bitShiftTest.getLineno());
}
