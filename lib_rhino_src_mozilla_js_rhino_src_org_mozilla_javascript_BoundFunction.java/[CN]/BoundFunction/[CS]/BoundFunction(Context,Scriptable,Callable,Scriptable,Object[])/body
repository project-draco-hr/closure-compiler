{
  this.targetFunction=targetFunction;
  this.boundThis=boundThis;
  this.boundArgs=boundArgs;
  if (targetFunction instanceof BaseFunction) {
    length=Math.max(0,((BaseFunction)targetFunction).getLength() - boundArgs.length);
  }
 else {
    length=0;
  }
  ScriptRuntime.setFunctionProtoAndParent(this,scope);
  Function thrower=ScriptRuntime.typeErrorThrower();
  NativeObject throwing=new NativeObject();
  throwing.put("get",throwing,thrower);
  throwing.put("set",throwing,thrower);
  throwing.put("enumerable",throwing,false);
  throwing.put("configurable",throwing,false);
  throwing.preventExtensions();
  this.defineOwnProperty(cx,"caller",throwing);
  this.defineOwnProperty(cx,"arguments",throwing);
}
