{
  if (!expression.isName() && !expression.isCall()) {
    addNewWarning("msg.jsdoc.typetransformation.invalid.expression","type transformation",expression);
    return false;
  }
  if (expression.isName()) {
    return validTTLTypeVar(expression);
  }
  Node operation=expression.getFirstChild();
  String keyword=operation.getString();
  if (!belongsTo(keyword,TYPE_CONSTRUCTORS) && !belongsTo(keyword,OPERATIONS)) {
    addNewWarning("msg.jsdoc.typetransformation.invalid.expression","type transformation",operation);
    return false;
  }
  if (belongsTo(keyword,TYPE_CONSTRUCTORS)) {
    return validTTLTypeExpression(expression);
  }
  if (isKeyword(keyword,Keywords.COND)) {
    return validTTLCondionalExpression(expression);
  }
  if (isKeyword(keyword,Keywords.MAPUNION)) {
    return validTTLMapunionExpression(expression);
  }
  throw new IllegalStateException("Invalid type transformation expression");
}
