{
  final JSDocInfo info=n.getJSDocInfo();
  if (info == null) {
    return;
  }
  final TypeIRegistry registry=compiler.getTypeIRegistry();
  for (  Node typeRoot : info.getTypeNodes()) {
    NodeUtil.visitPreOrder(typeRoot,new NodeUtil.Visitor(){
      public void visit(      Node node){
        if (!node.isString()) {
          return;
        }
        Node parent=node.getParent();
        if (parent != null) {
switch (parent.getType()) {
case Token.BANG:
case Token.QMARK:
case Token.THIS:
case Token.NEW:
            return;
case Token.PIPE:
{
            Node gp=parent.getParent();
            if (gp != null && gp.getType() == Token.QMARK) {
              return;
            }
            for (            Node child : parent.children()) {
              if (child.isString() && child.getString().equals("null")) {
                return;
              }
            }
            break;
          }
      }
    }
    String typeName=node.getString();
    if (typeName.equals("null") || registry.getType(typeName) == null) {
      return;
    }
    JSType type=(JSType)registry.createTypeFromCommentNode(node,"[internal]",null);
    if (type.isNullable()) {
      reportWarning(t,node,typeName);
    }
  }
}
,Predicates.<Node>alwaysTrue());
}
}
