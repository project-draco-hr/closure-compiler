{
  final JSDocInfo info=n.getJSDocInfo();
  if (info == null) {
    return;
  }
  final TypeIRegistry registry=compiler.getTypeIRegistry();
  final List<Node> thrownTypes=transform(info.getThrownTypes(),new Function<JSTypeExpression,Node>(){
    @Override public Node apply(    JSTypeExpression expr){
      return expr.getRoot();
    }
  }
);
  for (  Node typeRoot : info.getTypeNodes()) {
    NodeUtil.visitPreOrder(typeRoot,new NodeUtil.Visitor(){
      @Override public void visit(      Node node){
        if (!node.isString()) {
          return;
        }
        if (thrownTypes.contains(node)) {
          return;
        }
        Node parent=node.getParent();
        if (parent != null) {
switch (parent.getType()) {
case BANG:
case QMARK:
case THIS:
case NEW:
            return;
case PIPE:
{
            Node gp=parent.getParent();
            if (gp != null && gp.getType() == Token.QMARK) {
              return;
            }
            for (            Node child : parent.children()) {
              if (child.isString() && child.getString().equals("null") || child.getType() == Token.QMARK) {
                return;
              }
            }
            break;
          }
default :
        break;
    }
  }
  String typeName=node.getString();
  if (typeName.equals("null") || registry.getType(typeName) == null) {
    return;
  }
  TypeI type=registry.createTypeFromCommentNode(node);
  if (type.isNullable()) {
    reportWarning(t,node,typeName);
  }
}
}
,Predicates.<Node>alwaysTrue());
}
}
