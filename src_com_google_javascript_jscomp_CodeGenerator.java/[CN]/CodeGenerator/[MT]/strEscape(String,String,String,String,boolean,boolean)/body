{
  StringBuilder sb=new StringBuilder(s.length() + 2);
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
switch (c) {
case '\0':
      sb.append("\\x00");
    break;
case '\u000B':
  if (useSlashV) {
    sb.append("\\v");
  }
 else {
    sb.append("\\x0B");
  }
break;
case '\b':
sb.append("\\b");
break;
case '\f':
sb.append("\\f");
break;
case '\n':
sb.append("\\n");
break;
case '\r':
sb.append("\\r");
break;
case '\t':
sb.append("\\t");
break;
case '\\':
sb.append(backslashEscape);
break;
case '\"':
sb.append(doublequoteEscape);
break;
case '\'':
sb.append(singlequoteEscape);
break;
case '\u2028':
sb.append("\\u2028");
break;
case '\u2029':
sb.append("\\u2029");
break;
case '=':
if (trustedStrings || isRegexp) {
sb.append(c);
}
 else {
sb.append("\\x3d");
}
break;
case '&':
if (trustedStrings || isRegexp) {
sb.append(c);
}
 else {
sb.append("\\x26");
}
break;
case '>':
if (!trustedStrings && !isRegexp) {
sb.append(GT_ESCAPED);
break;
}
if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
sb.append(GT_ESCAPED);
}
 else {
sb.append(c);
}
break;
case '<':
if (!trustedStrings && !isRegexp) {
sb.append(LT_ESCAPED);
break;
}
final String endScript="/script";
final String startComment="!--";
if (s.regionMatches(true,i + 1,endScript,0,endScript.length())) {
sb.append(LT_ESCAPED);
}
 else if (s.regionMatches(false,i + 1,startComment,0,startComment.length())) {
sb.append(LT_ESCAPED);
}
 else {
sb.append(c);
}
break;
default :
if (outputCharsetEncoder != null && outputCharsetEncoder.canEncode(c) || c > 0x1f && c < 0x7f) {
sb.append(c);
}
 else {
Util.appendHexJavaScriptRepresentation(sb,c);
}
}
}
return sb.toString();
}
