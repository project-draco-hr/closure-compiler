{
  Node node=null;
  siblingLoop:   for (; ; ) {
    Node previous=null;
    if (node == null) {
      node=parent.getFirstChild();
    }
 else {
      previous=node;
      node=node.getNext();
    }
    if (node == null) {
      break;
    }
    int type=node.getType();
    if (createScopeObjects && (type == Token.BLOCK || type == Token.LOOP || type == Token.ARRAYCOMP) && (node instanceof Scope)) {
      Scope newScope=(Scope)node;
      if (newScope.getSymbolTable() != null) {
        Node let=new Node(type == Token.ARRAYCOMP ? Token.LETEXPR : Token.LET);
        Node innerLet=new Node(Token.LET);
        let.addChildToBack(innerLet);
        for (        String name : newScope.getSymbolTable().keySet()) {
          innerLet.addChildToBack(Node.newString(Token.NAME,name));
        }
        newScope.setSymbolTable(null);
        Node oldNode=node;
        node=replaceCurrent(parent,previous,node,let);
        type=node.getType();
        let.addChildToBack(oldNode);
      }
    }
switch (type) {
case Token.LABEL:
case Token.SWITCH:
case Token.LOOP:
      loops.push(node);
    loopEnds.push(((Jump)node).target);
  break;
case Token.WITH:
{
  loops.push(node);
  Node leave=node.getNext();
  if (leave.getType() != Token.LEAVEWITH) {
    Kit.codeBug();
  }
  loopEnds.push(leave);
  break;
}
case Token.TRY:
{
Jump jump=(Jump)node;
Node finallytarget=jump.getFinally();
if (finallytarget != null) {
  hasFinally=true;
  loops.push(node);
  loopEnds.push(finallytarget);
}
break;
}
case Token.TARGET:
case Token.LEAVEWITH:
if (!loopEnds.isEmpty() && loopEnds.peek() == node) {
loopEnds.pop();
loops.pop();
}
break;
case Token.YIELD:
((FunctionNode)tree).addResumptionPoint(node);
break;
case Token.RETURN:
{
boolean isGenerator=tree.getType() == Token.FUNCTION && ((FunctionNode)tree).isGenerator();
if (isGenerator) {
node.putIntProp(Node.GENERATOR_END_PROP,1);
}
if (!hasFinally) break;
Node unwindBlock=null;
for (int i=loops.size() - 1; i >= 0; i--) {
Node n=(Node)loops.get(i);
int elemtype=n.getType();
if (elemtype == Token.TRY || elemtype == Token.WITH) {
Node unwind;
if (elemtype == Token.TRY) {
Jump jsrnode=new Jump(Token.JSR);
Node jsrtarget=((Jump)n).getFinally();
jsrnode.target=jsrtarget;
unwind=jsrnode;
}
 else {
unwind=new Node(Token.LEAVEWITH);
}
if (unwindBlock == null) {
unwindBlock=new Node(Token.BLOCK,node.getLineno());
}
unwindBlock.addChildToBack(unwind);
}
}
if (unwindBlock != null) {
Node returnNode=node;
Node returnExpr=returnNode.getFirstChild();
node=replaceCurrent(parent,previous,node,unwindBlock);
if (returnExpr == null || isGenerator) {
unwindBlock.addChildToBack(returnNode);
}
 else {
Node store=new Node(Token.EXPR_RESULT,returnExpr);
unwindBlock.addChildToFront(store);
returnNode=new Node(Token.RETURN_RESULT);
unwindBlock.addChildToBack(returnNode);
transformCompilationUnit_r(tree,store,scope,createScopeObjects,inStrictMode);
}
continue siblingLoop;
}
break;
}
case Token.BREAK:
case Token.CONTINUE:
{
Jump jump=(Jump)node;
Jump jumpStatement=jump.getJumpStatement();
if (jumpStatement == null) Kit.codeBug();
for (int i=loops.size(); ; ) {
if (i == 0) {
throw Kit.codeBug();
}
--i;
Node n=(Node)loops.get(i);
if (n == jumpStatement) {
break;
}
int elemtype=n.getType();
if (elemtype == Token.WITH) {
Node leave=new Node(Token.LEAVEWITH);
previous=addBeforeCurrent(parent,previous,node,leave);
}
 else if (elemtype == Token.TRY) {
Jump tryNode=(Jump)n;
Jump jsrFinally=new Jump(Token.JSR);
jsrFinally.target=tryNode.getFinally();
previous=addBeforeCurrent(parent,previous,node,jsrFinally);
}
}
if (type == Token.BREAK) {
jump.target=jumpStatement.target;
}
 else {
jump.target=jumpStatement.getContinue();
}
jump.setType(Token.GOTO);
break;
}
case Token.CALL:
visitCall(node,tree);
break;
case Token.NEW:
visitNew(node,tree);
break;
case Token.LETEXPR:
case Token.LET:
{
Node child=node.getFirstChild();
if (child.getType() == Token.LET) {
boolean createWith=tree.getType() != Token.FUNCTION || ((FunctionNode)tree).requiresActivation();
node=visitLet(createWith,parent,previous,node);
break;
}
 else {
}
}
case Token.CONST:
case Token.VAR:
{
Node result=new Node(Token.BLOCK);
for (Node cursor=node.getFirstChild(); cursor != null; ) {
Node n=cursor;
cursor=cursor.getNext();
if (n.getType() == Token.NAME) {
if (!n.hasChildren()) continue;
Node init=n.getFirstChild();
n.removeChild(init);
n.setType(Token.BINDNAME);
n=new Node(type == Token.CONST ? Token.SETCONST : Token.SETNAME,n,init);
}
 else {
if (n.getType() != Token.LETEXPR) throw Kit.codeBug();
}
Node pop=new Node(Token.EXPR_VOID,n,node.getLineno());
result.addChildToBack(pop);
}
node=replaceCurrent(parent,previous,node,result);
break;
}
case Token.TYPEOFNAME:
{
Scope defining=scope.getDefiningScope(node.getString());
if (defining != null) {
node.setScope(defining);
}
}
break;
case Token.TYPEOF:
case Token.IFNE:
{
Node child=node.getFirstChild();
if (type == Token.IFNE) {
while (child.getType() == Token.NOT) {
child=child.getFirstChild();
}
if (child.getType() == Token.EQ || child.getType() == Token.NE) {
Node first=child.getFirstChild();
Node last=child.getLastChild();
if (first.getType() == Token.NAME && first.getString().equals("undefined")) child=last;
 else if (last.getType() == Token.NAME && last.getString().equals("undefined")) child=first;
}
}
if (child.getType() == Token.GETPROP) child.setType(Token.GETPROPNOWARN);
break;
}
case Token.SETNAME:
if (inStrictMode) {
node.setType(Token.STRICT_SETNAME);
}
case Token.NAME:
case Token.SETCONST:
case Token.DELPROP:
{
if (createScopeObjects) {
break;
}
Node nameSource;
if (type == Token.NAME) {
nameSource=node;
}
 else {
nameSource=node.getFirstChild();
if (nameSource.getType() != Token.BINDNAME) {
if (type == Token.DELPROP) {
break;
}
throw Kit.codeBug();
}
}
if (nameSource.getScope() != null) {
break;
}
String name=nameSource.getString();
Scope defining=scope.getDefiningScope(name);
if (defining != null) {
nameSource.setScope(defining);
if (type == Token.NAME) {
node.setType(Token.GETVAR);
}
 else if (type == Token.SETNAME || type == Token.STRICT_SETNAME) {
node.setType(Token.SETVAR);
nameSource.setType(Token.STRING);
}
 else if (type == Token.SETCONST) {
node.setType(Token.SETCONSTVAR);
nameSource.setType(Token.STRING);
}
 else if (type == Token.DELPROP) {
Node n=new Node(Token.FALSE);
node=replaceCurrent(parent,previous,node,n);
}
 else {
throw Kit.codeBug();
}
}
break;
}
}
transformCompilationUnit_r(tree,node,node instanceof Scope ? (Scope)node : scope,createScopeObjects,inStrictMode);
}
}
