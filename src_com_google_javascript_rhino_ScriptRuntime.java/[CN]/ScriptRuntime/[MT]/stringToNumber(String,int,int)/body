{
  char digitMax='9';
  char lowerCaseBound='a';
  char upperCaseBound='A';
  int len=s.length();
  if (radix < 10) {
    digitMax=(char)('0' + radix - 1);
  }
  if (radix > 10) {
    lowerCaseBound=(char)('a' + radix - 10);
    upperCaseBound=(char)('A' + radix - 10);
  }
  int end;
  double sum=0.0;
  for (end=start; end < len; end++) {
    char c=s.charAt(end);
    int newDigit;
    if ('0' <= c && c <= digitMax)     newDigit=c - '0';
 else     if ('a' <= c && c < lowerCaseBound)     newDigit=c - 'a' + 10;
 else     if ('A' <= c && c < upperCaseBound)     newDigit=c - 'A' + 10;
 else     break;
    sum=sum * radix + newDigit;
  }
  if (start == end) {
    return NaN;
  }
  if (sum >= 9007199254740992.0) {
    if (radix == 10) {
      try {
        return Double.valueOf(s.substring(start,end)).doubleValue();
      }
 catch (      NumberFormatException nfe) {
        return NaN;
      }
    }
 else     if (radix == 2 || radix == 4 || radix == 8 || radix == 16 || radix == 32) {
      int bitShiftInChar=1;
      int digit=0;
      final int SKIP_LEADING_ZEROS=0;
      final int FIRST_EXACT_53_BITS=1;
      final int AFTER_BIT_53=2;
      final int ZEROS_AFTER_54=3;
      final int MIXED_AFTER_54=4;
      int state=SKIP_LEADING_ZEROS;
      int exactBitsLimit=53;
      double factor=0.0;
      boolean bit53=false;
      boolean bit54=false;
      for (; ; ) {
        if (bitShiftInChar == 1) {
          if (start == end)           break;
          digit=s.charAt(start++);
          if ('0' <= digit && digit <= '9')           digit-='0';
 else           if ('a' <= digit && digit <= 'z')           digit-='a' - 10;
 else           digit-='A' - 10;
          bitShiftInChar=radix;
        }
        bitShiftInChar>>=1;
        boolean bit=(digit & bitShiftInChar) != 0;
switch (state) {
case SKIP_LEADING_ZEROS:
          if (bit) {
            --exactBitsLimit;
            sum=1.0;
            state=FIRST_EXACT_53_BITS;
          }
        break;
case FIRST_EXACT_53_BITS:
      sum*=2.0;
    if (bit)     sum+=1.0;
  --exactBitsLimit;
if (exactBitsLimit == 0) {
  bit53=bit;
  state=AFTER_BIT_53;
}
break;
case AFTER_BIT_53:
bit54=bit;
factor=2.0;
state=ZEROS_AFTER_54;
break;
case ZEROS_AFTER_54:
if (bit) {
state=MIXED_AFTER_54;
}
case MIXED_AFTER_54:
factor*=2;
break;
}
}
switch (state) {
case SKIP_LEADING_ZEROS:
sum=0.0;
break;
case FIRST_EXACT_53_BITS:
case AFTER_BIT_53:
break;
case ZEROS_AFTER_54:
if (bit54 & bit53) sum+=1.0;
sum*=factor;
break;
case MIXED_AFTER_54:
if (bit54) sum+=1.0;
sum*=factor;
break;
}
}
}
return sum;
}
