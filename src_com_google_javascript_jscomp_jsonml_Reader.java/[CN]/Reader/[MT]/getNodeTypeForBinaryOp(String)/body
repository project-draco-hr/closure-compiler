{
  Operator op=get(name);
  int type;
switch (op) {
case BITOR:
    type=Token.BITOR;
  break;
case BITXOR:
type=Token.BITXOR;
break;
case BITAND:
type=Token.BITAND;
break;
case EQ:
type=Token.EQ;
break;
case NE:
type=Token.NE;
break;
case LT:
type=Token.LT;
break;
case LE:
type=Token.LE;
break;
case GT:
type=Token.GT;
break;
case GE:
type=Token.GE;
break;
case LSH:
type=Token.LSH;
break;
case RSH:
type=Token.RSH;
break;
case URSH:
type=Token.URSH;
break;
case ADD:
type=Token.ADD;
break;
case SUB:
type=Token.SUB;
break;
case MUL:
type=Token.MUL;
break;
case DIV:
type=Token.DIV;
break;
case MOD:
type=Token.MOD;
break;
case SHEQ:
type=Token.SHEQ;
break;
case SHNE:
type=Token.SHNE;
break;
case COMMA:
type=Token.COMMA;
break;
case INSTANCEOF:
type=Token.INSTANCEOF;
break;
case IN:
type=Token.IN;
break;
default :
throw new IllegalArgumentException("" + "Invalid type of binary expression.");
}
return type;
}
