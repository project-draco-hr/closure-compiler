{
  Operator op=get(name);
  if (op == null) {
    return Token.ERROR;
  }
  int type;
switch (op) {
case ASSIGN:
    type=Token.ASSIGN;
  break;
case ASSIGN_BITOR:
type=Token.ASSIGN_BITOR;
break;
case ASSIGN_BITXOR:
type=Token.ASSIGN_BITXOR;
break;
case ASSIGN_BITAND:
type=Token.ASSIGN_BITAND;
break;
case ASSIGN_LSH:
type=Token.ASSIGN_LSH;
break;
case ASSIGN_RSH:
type=Token.ASSIGN_RSH;
break;
case ASSIGN_URSH:
type=Token.ASSIGN_URSH;
break;
case ASSIGN_ADD:
type=Token.ASSIGN_ADD;
break;
case ASSIGN_SUB:
type=Token.ASSIGN_SUB;
break;
case ASSIGN_MUL:
type=Token.ASSIGN_MUL;
break;
case ASSIGN_DIV:
type=Token.ASSIGN_DIV;
break;
case ASSIGN_MOD:
type=Token.ASSIGN_MOD;
break;
default :
throw new IllegalArgumentException("" + "Invalid type of assign expression.");
}
return type;
}
