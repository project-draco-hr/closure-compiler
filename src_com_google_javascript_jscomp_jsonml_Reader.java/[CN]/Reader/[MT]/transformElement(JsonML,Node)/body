{
  nodeIndex++;
  validate(element);
  if (insertExprResultState && JsonMLUtil.isExpression(element)) {
    transformExpr(element,parent);
    return;
  }
switch (element.getType()) {
case ArrayExpr:
    transformArrayExpr(element,parent);
  break;
case AssignExpr:
transformAssignExpr(element,parent);
break;
case BinaryExpr:
transformBinaryExpr(element,parent);
break;
case BlockStmt:
transformBlock(element,parent);
break;
case BreakStmt:
transformBreakStmt(element,parent);
break;
case CallExpr:
transformCallExpr(element,parent);
break;
case Case:
transformCase(element,parent);
break;
case CatchClause:
transformCatchClause(element,parent);
break;
case ConditionalExpr:
transformConditionalExpr(element,parent);
break;
case ContinueStmt:
transformContinueStmt(element,parent);
break;
case CountExpr:
transformCountExpr(element,parent);
break;
case DataProp:
transformDataProp(element,parent);
break;
case GetterProp:
transformGetterProp(element,parent);
break;
case SetterProp:
transformSetterProp(element,parent);
break;
case DefaultCase:
transformDefaultCase(element,parent);
break;
case DeleteExpr:
transformDeleteExpr(element,parent);
break;
case DoWhileStmt:
transformDoWhileStmt(element,parent);
break;
case Empty:
transformEmpty(element,parent);
break;
case EmptyStmt:
transformEmptyStmt(element,parent);
break;
case EvalExpr:
transformEvalExpr(element,parent);
break;
case ForInStmt:
transformForInStmt(element,parent);
break;
case ForStmt:
transformForStmt(element,parent);
break;
case FunctionDecl:
transformFunctionDecl(element,parent);
break;
case FunctionExpr:
transformFunctionExpr(element,parent);
break;
case IdExpr:
transformIdExpr(element,parent);
break;
case IdPatt:
transformIdPatt(element,parent);
break;
case IfStmt:
transformIfStmt(element,parent);
break;
case InitPatt:
transformInitPatt(element,parent);
break;
case InvokeExpr:
transformInvokeExpr(element,parent);
break;
case LabelledStmt:
transformLabelledStmt(element,parent);
break;
case LiteralExpr:
transformLiteralExpr(element,parent);
break;
case LogicalAndExpr:
transformLogicalAndExpr(element,parent);
break;
case LogicalOrExpr:
transformLogicalOrExpr(element,parent);
break;
case MemberExpr:
transformMemberExpr(element,parent);
break;
case NewExpr:
transformNewExpr(element,parent);
break;
case ObjectExpr:
transformObjectExpr(element,parent);
break;
case ParamDecl:
transformParamDecl(element,parent);
break;
case Program:
transformProgram(element,parent);
break;
case PrologueDecl:
transformPrologueDecl(element,parent);
break;
case RegExpExpr:
transformRegExpExpr(element,parent);
break;
case ReturnStmt:
transformReturnStmt(element,parent);
break;
case SwitchStmt:
transformSwitchStmt(element,parent);
break;
case ThisExpr:
transformThisExpr(element,parent);
break;
case ThrowStmt:
transformThrowStmt(element,parent);
break;
case TryStmt:
transformTryStmt(element,parent);
break;
case TypeofExpr:
transformTypeofExpr(element,parent);
break;
case UnaryExpr:
transformUnaryExpr(element,parent);
break;
case VarDecl:
transformVarDecl(element,parent);
break;
case WhileStmt:
transformWhileStmt(element,parent);
break;
case WithStmt:
transformWithStmt(element,parent);
break;
}
}
