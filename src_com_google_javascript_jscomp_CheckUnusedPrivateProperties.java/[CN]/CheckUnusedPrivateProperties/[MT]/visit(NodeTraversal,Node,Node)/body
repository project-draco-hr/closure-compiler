{
switch (n.getToken()) {
case SCRIPT:
{
      reportUnused(t);
      break;
    }
case GETPROP:
{
    String propName=n.getLastChild().getString();
    if (compiler.getCodingConvention().isExported(propName) || isPinningPropertyUse(n) || !isCandidatePropertyDefinition(n)) {
      used.add(propName);
    }
 else {
      if (isCheckablePrivatePropDecl(n)) {
        candidates.add(n);
      }
    }
    break;
  }
case MEMBER_FUNCTION_DEF:
{
  if (isCheckablePrivatePropDecl(n)) {
    candidates.add(n);
  }
  break;
}
case OBJECTLIT:
{
for (Node c : n.children()) {
  used.add(c.getString());
}
break;
}
case CALL:
Node target=n.getFirstChild();
if (n.hasMoreThanOneChild() && compiler.getCodingConvention().isPropertyRenameFunction(target.getOriginalQualifiedName())) {
Node propName=target.getNext();
if (propName.isString()) {
used.add(propName.getString());
}
}
break;
default :
break;
}
}
