{
  if (!f.hasTag(MATH_TAG)) {
    return super.execIdCall(f,cx,scope,thisObj,args);
  }
  double x;
  int methodId=f.methodId();
switch (methodId) {
case Id_toSource:
    return "Math";
case Id_abs:
  x=ScriptRuntime.toNumber(args,0);
x=(x == 0.0) ? 0.0 : (x < 0.0) ? -x : x;
break;
case Id_acos:
case Id_asin:
x=ScriptRuntime.toNumber(args,0);
if (x == x && -1.0 <= x && x <= 1.0) {
x=(methodId == Id_acos) ? Math.acos(x) : Math.asin(x);
}
 else {
x=Double.NaN;
}
break;
case Id_atan:
x=ScriptRuntime.toNumber(args,0);
x=Math.atan(x);
break;
case Id_atan2:
x=ScriptRuntime.toNumber(args,0);
x=Math.atan2(x,ScriptRuntime.toNumber(args,1));
break;
case Id_ceil:
x=ScriptRuntime.toNumber(args,0);
x=Math.ceil(x);
break;
case Id_cos:
x=ScriptRuntime.toNumber(args,0);
x=(x == Double.POSITIVE_INFINITY || x == Double.NEGATIVE_INFINITY) ? Double.NaN : Math.cos(x);
break;
case Id_exp:
x=ScriptRuntime.toNumber(args,0);
x=(x == Double.POSITIVE_INFINITY) ? x : (x == Double.NEGATIVE_INFINITY) ? 0.0 : Math.exp(x);
break;
case Id_floor:
x=ScriptRuntime.toNumber(args,0);
x=Math.floor(x);
break;
case Id_log:
x=ScriptRuntime.toNumber(args,0);
x=(x < 0) ? Double.NaN : Math.log(x);
break;
case Id_max:
case Id_min:
x=(methodId == Id_max) ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
for (int i=0; i != args.length; ++i) {
double d=ScriptRuntime.toNumber(args[i]);
if (d != d) {
x=d;
break;
}
if (methodId == Id_max) {
x=Math.max(x,d);
}
 else {
x=Math.min(x,d);
}
}
break;
case Id_pow:
x=ScriptRuntime.toNumber(args,0);
x=js_pow(x,ScriptRuntime.toNumber(args,1));
break;
case Id_random:
x=Math.random();
break;
case Id_round:
x=ScriptRuntime.toNumber(args,0);
if (x == x && x != Double.POSITIVE_INFINITY && x != Double.NEGATIVE_INFINITY) {
long l=Math.round(x);
if (l != 0) {
x=l;
}
 else {
if (x < 0.0) {
x=ScriptRuntime.negativeZero;
}
 else if (x != 0.0) {
x=0.0;
}
}
}
break;
case Id_sin:
x=ScriptRuntime.toNumber(args,0);
x=(x == Double.POSITIVE_INFINITY || x == Double.NEGATIVE_INFINITY) ? Double.NaN : Math.sin(x);
break;
case Id_sqrt:
x=ScriptRuntime.toNumber(args,0);
x=Math.sqrt(x);
break;
case Id_tan:
x=ScriptRuntime.toNumber(args,0);
x=Math.tan(x);
break;
default :
throw new IllegalStateException(String.valueOf(methodId));
}
return ScriptRuntime.wrapNumber(x);
}
