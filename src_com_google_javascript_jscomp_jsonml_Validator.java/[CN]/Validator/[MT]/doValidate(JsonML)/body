{
  String message;
switch (element.getType()) {
case AssignExpr:
    validateAssignExpr(element);
  break;
case BinaryExpr:
validateBinaryExpr(element);
break;
case BreakStmt:
case ContinueStmt:
validateJmpStmt(element);
break;
case Case:
validateCase(element);
break;
case CatchClause:
validateCatchClause(element);
break;
case ConditionalExpr:
validateConditionalExpr(element);
break;
case CountExpr:
validateCountExpr(element);
break;
case DataProp:
validateProp(element);
break;
case GetterProp:
validateProp(element);
break;
case SetterProp:
validateProp(element);
break;
case DeleteExpr:
validateDeleteExpr(element);
break;
case DoWhileStmt:
validateDoWhileStmt(element);
break;
case EmptyStmt:
validateEmptyStmt(element);
break;
case ForInStmt:
validateForInStmt(element);
break;
case ForStmt:
validateForStmt(element);
break;
case FunctionDecl:
validateFunctionDecl(element);
break;
case FunctionExpr:
validateFunctionExpr(element);
break;
case IdExpr:
validateIdExpr(element);
break;
case IdPatt:
validateIdPatt(element);
break;
case IfStmt:
validateIfStmt(element);
break;
case InvokeExpr:
validateInvokeExpr(element);
break;
case LabelledStmt:
validateLabelledStmt(element);
break;
case LiteralExpr:
validateLiteralExpr(element);
break;
case LogicalAndExpr:
case LogicalOrExpr:
validateLogicalExpr(element);
break;
case MemberExpr:
validateMemberExpr(element);
break;
case NewExpr:
validateNewExpr(element);
break;
case ObjectExpr:
validateObjectExpr(element);
break;
case ParamDecl:
validateParamDecl(element);
break;
case RegExpExpr:
validateRegExpExpr(element);
break;
case ReturnStmt:
validateReturnStmt(element);
break;
case SwitchStmt:
validateSwitchStmt(element);
break;
case ThisExpr:
validateThisExpr(element);
break;
case ThrowStmt:
validateThrowStmt(element);
break;
case TryStmt:
validateTryStmt(element);
break;
case TypeofExpr:
validateTypeofExpr(element);
break;
case UnaryExpr:
validateUnaryExpr(element);
break;
case VarDecl:
validateVarDecl(element);
break;
case WhileStmt:
validateWhileStmt(element);
break;
case WithStmt:
validateWithStmt(element);
break;
}
return b.length() != 0 ? b.toString() : null;
}
