{
  if (info != null) {
    isConstructor=info.isConstructor();
    makesStructs=info.makesStructs();
    makesDicts=info.makesDicts();
    isInterface=info.isInterface();
    if (makesStructs && !isConstructor) {
      reportWarning(CONSTRUCTOR_REQUIRED,"@struct",formatFnName());
    }
 else     if (makesDicts && !isConstructor) {
      reportWarning(CONSTRUCTOR_REQUIRED,"@dict",formatFnName());
    }
    ImmutableList<String> typeParameters=info.getTemplateTypeNames();
    if (!typeParameters.isEmpty() && (isConstructor || isInterface)) {
      ImmutableList.Builder<TemplateType> builder=ImmutableList.builder();
      for (      String typeParameter : typeParameters) {
        builder.add(typeRegistry.createTemplateType(typeParameter));
      }
      classTemplateTypeNames=builder.build();
      typeRegistry.setTemplateTypeNames(classTemplateTypeNames);
    }
    if (info.hasBaseType()) {
      if (isConstructor) {
        JSType maybeBaseType=info.getBaseType().evaluate(scope,typeRegistry);
        if (maybeBaseType != null && maybeBaseType.setValidator(new ExtendedTypeValidator())) {
          baseType=(ObjectType)maybeBaseType;
        }
      }
 else {
        reportWarning(EXTENDS_WITHOUT_TYPEDEF,formatFnName());
      }
    }
    if (info.getImplementedInterfaceCount() > 0) {
      if (isConstructor) {
        implementedInterfaces=Lists.newArrayList();
        Set<JSType> baseInterfaces=new HashSet<>();
        for (        JSTypeExpression t : info.getImplementedInterfaces()) {
          JSType maybeInterType=t.evaluate(scope,typeRegistry);
          if (maybeInterType != null && maybeInterType.setValidator(new ImplementedTypeValidator())) {
            JSType baseInterface=maybeInterType;
            if (baseInterface.toMaybeTemplatizedType() != null) {
              baseInterface=baseInterface.toMaybeTemplatizedType().getReferencedType();
            }
            if (!baseInterfaces.add(baseInterface)) {
              reportWarning(SAME_INTERFACE_MULTIPLE_IMPLEMENTS,baseInterface.toString());
            }
            implementedInterfaces.add((ObjectType)maybeInterType);
          }
        }
      }
 else       if (isInterface) {
        reportWarning(TypeCheck.CONFLICTING_IMPLEMENTED_TYPE,formatFnName());
      }
 else {
        reportWarning(CONSTRUCTOR_REQUIRED,"@implements",formatFnName());
      }
    }
    if (isInterface) {
      extendedInterfaces=Lists.newArrayList();
      for (      JSTypeExpression t : info.getExtendedInterfaces()) {
        JSType maybeInterfaceType=t.evaluate(scope,typeRegistry);
        if (maybeInterfaceType != null && maybeInterfaceType.setValidator(new ExtendedTypeValidator())) {
          extendedInterfaces.add((ObjectType)maybeInterfaceType);
        }
      }
    }
  }
  return this;
}
