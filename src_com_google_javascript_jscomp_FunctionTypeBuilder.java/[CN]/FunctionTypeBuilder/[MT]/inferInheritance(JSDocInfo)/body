{
  if (info != null) {
    isConstructor=info.isConstructor();
    makesStructs=info.makesStructs();
    makesDicts=info.makesDicts();
    isInterface=info.isInterface();
    if (makesStructs && !isConstructor) {
      reportWarning(CONSTRUCTOR_REQUIRED,"@struct",fnName);
    }
 else     if (makesDicts && !isConstructor) {
      reportWarning(CONSTRUCTOR_REQUIRED,"@dict",fnName);
    }
    if (info.hasBaseType()) {
      if (isConstructor) {
        JSType maybeBaseType=info.getBaseType().evaluate(scope,typeRegistry);
        if (maybeBaseType != null && maybeBaseType.setValidator(new ExtendedTypeValidator())) {
          baseType=(ObjectType)maybeBaseType;
        }
      }
 else {
        reportWarning(EXTENDS_WITHOUT_TYPEDEF,fnName);
      }
    }
    if (isConstructor || isInterface) {
      implementedInterfaces=Lists.newArrayList();
      for (      JSTypeExpression t : info.getImplementedInterfaces()) {
        JSType maybeInterType=t.evaluate(scope,typeRegistry);
        if (maybeInterType != null && maybeInterType.setValidator(new ImplementedTypeValidator())) {
          implementedInterfaces.add((ObjectType)maybeInterType);
        }
      }
    }
 else     if (info.getImplementedInterfaceCount() > 0) {
      reportWarning(CONSTRUCTOR_REQUIRED,"@implements",fnName);
    }
    if (isInterface) {
      extendedInterfaces=Lists.newArrayList();
      for (      JSTypeExpression t : info.getExtendedInterfaces()) {
        JSType maybeInterfaceType=t.evaluate(scope,typeRegistry);
        if (maybeInterfaceType != null && maybeInterfaceType.setValidator(new ExtendedTypeValidator())) {
          extendedInterfaces.add((ObjectType)maybeInterfaceType);
        }
      }
    }
  }
  return this;
}
