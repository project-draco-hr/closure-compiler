{
  if (argsParent == null) {
    if (info == null) {
      return this;
    }
 else {
      return inferParameterTypes(info);
    }
  }
  Node oldParameterType=null;
  if (parametersNode != null) {
    oldParameterType=parametersNode.getFirstChild();
  }
  FunctionParamBuilder builder=new FunctionParamBuilder(typeRegistry);
  boolean warnedAboutArgList=false;
  Set<String> allJsDocParams=(info == null) ? Sets.<String>newHashSet() : Sets.newHashSet(info.getParameterNames());
  boolean isVarArgs=false;
  for (  Node arg : argsParent.children()) {
    String argumentName=arg.getString();
    allJsDocParams.remove(argumentName);
    JSType parameterType=null;
    boolean isOptionalParam=isOptionalParameter(arg,info);
    isVarArgs=isVarArgsParameter(arg,info);
    if (info != null && info.hasParameterType(argumentName)) {
      parameterType=info.getParameterType(argumentName).evaluate(scope,typeRegistry);
    }
 else     if (oldParameterType != null && oldParameterType.getJSType() != null) {
      parameterType=oldParameterType.getJSType();
      isOptionalParam=oldParameterType.isOptionalArg();
      isVarArgs=oldParameterType.isVarArgs();
    }
 else {
      parameterType=typeRegistry.getNativeType(UNKNOWN_TYPE);
    }
    warnedAboutArgList|=addParameter(builder,parameterType,warnedAboutArgList,isOptionalParam,isVarArgs);
    if (oldParameterType != null) {
      oldParameterType=oldParameterType.getNext();
    }
  }
  if (!isVarArgs) {
    while (oldParameterType != null && !isVarArgs) {
      builder.newParameterFromNode(oldParameterType);
      oldParameterType=oldParameterType.getNext();
    }
  }
  for (  String inexistentName : allJsDocParams) {
    reportWarning(INEXISTANT_PARAM,inexistentName,fnName);
  }
  parametersNode=builder.build();
  return this;
}
