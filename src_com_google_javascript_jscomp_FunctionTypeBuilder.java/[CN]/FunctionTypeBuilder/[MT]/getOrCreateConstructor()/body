{
  FunctionType fnType=typeRegistry.createConstructorType(fnName,contents.getSourceNode(),parametersNode,returnType,null);
  JSType existingType=typeRegistry.getType(fnName);
  if (makesStructs) {
    fnType.setStruct();
  }
 else   if (makesDicts) {
    fnType.setDict();
  }
  if (existingType != null) {
    boolean isInstanceObject=existingType.isInstanceType();
    if (isInstanceObject || fnName.equals("Function")) {
      FunctionType existingFn=isInstanceObject ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);
      if (existingFn.getSource() == null) {
        existingFn.setSource(contents.getSourceNode());
      }
      if (!existingFn.hasEqualCallType(fnType)) {
        reportWarning(TYPE_REDEFINITION,fnName,fnType.toString(),existingFn.toString());
      }
      return existingFn;
    }
 else {
    }
  }
  maybeSetBaseType(fnType);
  if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty()) {
    typeRegistry.declareType(fnName,fnType.getInstanceType());
  }
  return fnType;
}
