{
  if (returnType == null || parametersNode == null) {
    throw new IllegalStateException("All Function types must have params and a return type");
  }
  FunctionType fnType;
  if (isConstructor) {
    fnType=getOrCreateConstructor();
  }
 else   if (isInterface) {
    fnType=typeRegistry.createInterfaceType(fnName,sourceNode);
    if (scope.isGlobal() && !fnName.isEmpty()) {
      typeRegistry.declareType(fnName,fnType.getInstanceType());
    }
    maybeSetBaseType(fnType);
  }
 else {
    fnType=typeRegistry.createMethodTypeWithTypeTemplate(fnName,sourceNode,parametersNode,returnType,thisType,templateTypeName);
    maybeSetBaseType(fnType);
  }
  if (implementedInterfaces != null) {
    fnType.setImplementedInterfaces(implementedInterfaces);
  }
  typeRegistry.clearTemplateTypeName();
  return fnType;
}
