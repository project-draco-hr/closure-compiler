{
  FunctionParamBuilder builder=new FunctionParamBuilder(typeRegistry);
  boolean warnedAboutArgList=false;
  Set<String> allJsDocParams=(info == null) ? Sets.<String>newHashSet() : Sets.newHashSet(info.getParameterNames());
  boolean foundTemplateType=false;
  for (  String argumentName : argList) {
    allJsDocParams.remove(argumentName);
    JSType parameterType=info != null && info.hasParameterType(argumentName) ? info.getParameterType(argumentName).evaluate(scope) : typeRegistry.getNativeType(UNKNOWN_TYPE);
    if (templateTypeName != null && parameterType.restrictByNotNullOrUndefined().isTemplateType()) {
      if (foundTemplateType) {
        reportError(TEMPLATE_TYPE_DUPLICATED,fnName);
      }
      foundTemplateType=true;
    }
    warnedAboutArgList|=addParameter(builder,parameterType,warnedAboutArgList,isOptionalParameter(argumentName,info),isVarArgsParameter(argumentName,info));
  }
  if (templateTypeName != null && !foundTemplateType) {
    reportError(TEMPLATE_TYPE_EXPECTED,fnName);
  }
  for (  String inexistentName : allJsDocParams) {
    if (!isVarArgsParameter(inexistentName,info)) {
      reportWarning(INEXISTANT_PARAM,inexistentName,fnName);
    }
  }
  parametersNode=builder.build();
  return this;
}
