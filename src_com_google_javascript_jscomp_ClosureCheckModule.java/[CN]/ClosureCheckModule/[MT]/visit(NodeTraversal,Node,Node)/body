{
  if (currentModuleName == null) {
    return;
  }
switch (n.getType()) {
case CALL:
    Node callee=n.getFirstChild();
  if (callee.matchesQualifiedName("goog.module") && !currentModuleName.equals(extractFirstArgumentName(n))) {
    t.report(n,MULTIPLE_MODULES_IN_FILE);
  }
 else   if (callee.matchesQualifiedName("goog.provide")) {
    t.report(n,MODULE_AND_PROVIDES);
  }
 else   if (callee.matchesQualifiedName("goog.require")) {
    checkRequireCall(t,n,parent);
  }
break;
case ASSIGN:
{
Node lhs=n.getFirstChild();
if (lhs.isQualifiedName() && NodeUtil.getRootOfQualifiedName(lhs).matchesQualifiedName("exports")) {
  checkModuleExport(t,n,parent);
}
break;
}
case CLASS:
case FUNCTION:
if (!NodeUtil.isStatement(n)) {
break;
}
case VAR:
case LET:
case CONST:
if (t.inModuleHoistScope() && NodeUtil.getEnclosingClass(n) == null && NodeUtil.getEnclosingType(n,Token.OBJECTLIT) == null) {
JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(n);
if (jsdoc != null && jsdoc.isExport()) {
t.report(n,AT_EXPORT_IN_GOOG_MODULE);
}
}
break;
case THIS:
if (t.inModuleHoistScope()) {
t.report(n,GOOG_MODULE_REFERENCES_THIS);
}
break;
case THROW:
if (t.inModuleHoistScope()) {
t.report(n,GOOG_MODULE_USES_THROW);
}
break;
case GETPROP:
if (currentModuleName != null && n.matchesQualifiedName(currentModuleName)) {
t.report(n,REFERENCE_TO_MODULE_GLOBAL_NAME);
}
 else if (shortRequiredNamespaces.containsKey(n.getQualifiedName())) {
String shortName=shortRequiredNamespaces.get(n.getQualifiedName());
if (shortName == null) {
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName());
}
 else {
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME_INCLUDING_SHORT_NAME,n.getQualifiedName(),shortName);
}
}
break;
default :
break;
}
}
