{
switch (n.getType()) {
case Token.CALL:
    Node callee=n.getFirstChild();
  if (callee.matchesQualifiedName("goog.module")) {
    if (currentModuleName == null) {
      currentModuleName=extractFirstArgumentName(n);
    }
 else {
      t.report(n,MULTIPLE_MODULES_IN_FILE);
    }
  }
 else   if (callee.matchesQualifiedName("goog.provide")) {
    t.report(n,MODULE_AND_PROVIDES);
  }
 else   if (callee.matchesQualifiedName("goog.require")) {
    checkRequireCall(t,n,parent);
  }
break;
case Token.ASSIGN:
{
Node lhs=n.getFirstChild();
if (lhs.isQualifiedName()) {
  Node root=NodeUtil.getRootOfQualifiedName(lhs);
  if (root.matchesQualifiedName("exports") && (lhs.isName() || !root.getNext().getString().equals("prototype")) && !NodeUtil.isLegacyGoogModuleFile(NodeUtil.getEnclosingScript(n))) {
    JSDocInfo jsDoc=n.getJSDocInfo();
    if (jsDoc != null && jsDoc.isExport()) {
      t.report(n,AT_EXPORT_IN_NON_LEGACY_GOOG_MODULE);
    }
  }
}
break;
}
case Token.CLASS:
case Token.FUNCTION:
if (!NodeUtil.isStatement(n)) {
break;
}
case Token.VAR:
case Token.LET:
case Token.CONST:
if (t.inGlobalHoistScope() && NodeUtil.getEnclosingClass(n) == null && NodeUtil.getEnclosingType(n,Token.OBJECTLIT) == null) {
JSDocInfo jsdoc=NodeUtil.getBestJSDocInfo(n);
if (jsdoc != null && jsdoc.isExport()) {
t.report(n,AT_EXPORT_IN_GOOG_MODULE);
}
}
break;
case Token.THIS:
if (t.inGlobalHoistScope()) {
t.report(n,GOOG_MODULE_REFERENCES_THIS);
}
break;
case Token.THROW:
if (t.inGlobalHoistScope()) {
t.report(n,GOOG_MODULE_USES_THROW);
}
break;
case Token.GETPROP:
if (currentModuleName != null && n.matchesQualifiedName(currentModuleName)) {
t.report(n,REFERENCE_TO_MODULE_GLOBAL_NAME);
}
 else if (shortRequiredNamespaces.containsKey(n.getQualifiedName())) {
String shortName=shortRequiredNamespaces.get(n.getQualifiedName());
if (shortName == null) {
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME,n.getQualifiedName());
}
 else {
t.report(n,REFERENCE_TO_SHORT_IMPORT_BY_LONG_NAME_INCLUDING_SHORT_NAME,n.getQualifiedName(),shortName);
}
}
break;
case Token.SCRIPT:
currentModuleName=null;
shortRequiredNamespaces.clear();
break;
}
}
