{
switch (n.getType()) {
case Token.FUNCTION:
    visitFunction(t,n,parent);
  break;
case Token.ASSIGN:
if (!n.getLastChild().isFunction()) {
  visitNonFunction(t,n);
}
checkStyleForPrivateProperties(t,n);
break;
case Token.VAR:
case Token.LET:
case Token.CONST:
for (Node decl : n.children()) {
if (decl.getFirstChild() == null || !decl.getFirstChild().isFunction()) {
visitNonFunction(t,n);
}
}
break;
case Token.STRING_KEY:
if (n.getFirstChild() == null || !n.getFirstChild().isFunction()) {
visitNonFunction(t,n);
}
break;
case Token.MEMBER_FUNCTION_DEF:
case Token.GETTER_DEF:
case Token.SETTER_DEF:
checkStyleForPrivateProperties(t,n);
break;
default :
visitNonFunction(t,n);
}
}
