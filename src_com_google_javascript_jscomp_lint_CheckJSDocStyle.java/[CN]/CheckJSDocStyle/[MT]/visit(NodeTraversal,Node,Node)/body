{
switch (n.getToken()) {
case FUNCTION:
    visitFunction(t,n,parent);
  break;
case ASSIGN:
if (!n.getLastChild().isFunction()) {
  visitNonFunction(t,n);
}
checkStyleForPrivateProperties(t,n);
break;
case VAR:
case LET:
case CONST:
for (Node decl : n.children()) {
if (decl.getFirstChild() == null || !decl.getFirstChild().isFunction()) {
visitNonFunction(t,n);
}
}
break;
case STRING_KEY:
if (n.getFirstChild() == null || !n.getFirstChild().isFunction()) {
visitNonFunction(t,n);
}
break;
case MEMBER_FUNCTION_DEF:
case GETTER_DEF:
case SETTER_DEF:
if (NodeUtil.getEnclosingClass(n) != null) {
checkStyleForPrivateProperties(t,n);
}
break;
default :
visitNonFunction(t,n);
}
}
