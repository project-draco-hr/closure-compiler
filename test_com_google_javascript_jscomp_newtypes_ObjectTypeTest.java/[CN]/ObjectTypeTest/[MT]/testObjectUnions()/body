{
  ObjectType foo=ObjectType.fromClass(NominalType.makeClass("Foo",null));
  ObjectType bar=ObjectType.fromClass(NominalType.makeClass("Bar",null));
  ObjectType baz=ObjectType.fromClass(NominalType.makeClass("Baz",null));
  ObjectType topObj=ObjectType.TOP_OBJECT;
  ObjectType withPNum=topObj.withProperty("p",NUMBER);
  ObjectType fooWithPNum=foo.withProperty("p",NUMBER);
  ObjectType fooWithQStr=foo.withProperty("q",STRING);
  assertEquals(topObj,ObjectType.join(foo,topObj));
  assertEquals(ImmutableSet.of(topObj),ObjectType.joinSets(ImmutableSet.of(foo),ImmutableSet.of(topObj)));
  assertEquals(ImmutableSet.of(foo,withPNum),ObjectType.joinSets(ImmutableSet.of(foo),ImmutableSet.of(withPNum)));
  assertEquals(ImmutableSet.of(withPNum),ObjectType.joinSets(ImmutableSet.of(fooWithPNum),ImmutableSet.of(withPNum)));
  assertEquals(ImmutableSet.of(withPNum),ObjectType.joinSets(ImmutableSet.of(withPNum),ImmutableSet.of(fooWithPNum)));
  assertEquals(ImmutableSet.of(ObjectType.join(fooWithPNum,fooWithQStr)),ObjectType.joinSets(ImmutableSet.of(fooWithQStr),ImmutableSet.of(fooWithPNum)));
  assertEquals(ImmutableSet.of(foo),ObjectType.meetSets(ImmutableSet.of(foo),ImmutableSet.of(topObj)));
  assertEquals(ImmutableSet.of(fooWithPNum),ObjectType.meetSets(ImmutableSet.of(fooWithPNum),ImmutableSet.of(withPNum)));
  assertEquals(ImmutableSet.of(fooWithPNum),ObjectType.meetSets(ImmutableSet.of(foo),ImmutableSet.of(withPNum)));
  assertEquals(ImmutableSet.of(foo),ObjectType.meetSets(ImmutableSet.of(foo,bar),ImmutableSet.of(foo,baz)));
}
