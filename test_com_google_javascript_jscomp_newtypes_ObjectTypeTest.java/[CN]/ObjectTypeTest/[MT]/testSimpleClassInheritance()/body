{
  NominalType parentClass=NominalType.fromRaw(RawNominalType.makeUnrestrictedClass("Parent",null).finalizeNominalType());
  NominalType child1Class=NominalType.fromRaw(RawNominalType.makeUnrestrictedClass("Child1",null));
  child1Class.getRawNominalType().addSuperClass(parentClass);
  child1Class.getRawNominalType().finalizeNominalType();
  NominalType child2Class=NominalType.fromRaw(RawNominalType.makeUnrestrictedClass("Child2",null));
  child2Class.getRawNominalType().addSuperClass(parentClass);
  child2Class.getRawNominalType().finalizeNominalType();
  ObjectType foo=ObjectType.fromNominalType(NominalType.fromRaw(RawNominalType.makeUnrestrictedClass("Foo",null).finalizeNominalType()));
  ObjectType parent=ObjectType.fromNominalType(parentClass);
  ObjectType child1=ObjectType.fromNominalType(child1Class);
  ObjectType child2=ObjectType.fromNominalType(child2Class);
  ObjectType parentWithP=parent.withProperty(p,NUMBER);
  ObjectType parentWithOptP=ObjectType.join(parent,parentWithP);
  assertEquals(ImmutableSet.of(parentWithOptP),ObjectType.joinSets(ImmutableSet.of(parentWithP),ImmutableSet.of(child1)));
  assertTrue(ObjectType.isUnionSubtype(true,ImmutableSet.of(foo,child1),ImmutableSet.of(foo,parent)));
  assertFalse(ObjectType.isUnionSubtype(true,ImmutableSet.of(foo,parent),ImmutableSet.of(foo,child1)));
  assertTrue(ObjectType.isUnionSubtype(true,ImmutableSet.of(child1,child2),ImmutableSet.of(parent)));
  assertFalse(ObjectType.isUnionSubtype(true,ImmutableSet.of(parent),ImmutableSet.of(child1,child2)));
}
