{
  enableNormalize();
  fold("x = new RegExp","x = RegExp()");
  fold("x = new RegExp(\"\")","x = RegExp(\"\")");
  fold("x = new RegExp(\"\", \"i\")","x = RegExp(\"\",\"i\")");
  testSame("x = RegExp(\"foobar\", \"bogus\")",PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS);
  foldSame("x = new RegExp(y)");
  fold("x = new RegExp(\"foobar\")","x = /foobar/");
  fold("x = RegExp(\"foobar\")","x = /foobar/");
  fold("x = new RegExp(\"foobar\", \"i\")","x = /foobar/i");
  fold("x = new RegExp(\"\\\\.\", \"i\")","x = /\\./i");
  fold("x = new RegExp(\"/\", \"\")","x = /\\//");
  fold("x = new RegExp(\"[/]\", \"\")","x = /[/]/");
  fold("x = new RegExp(\"///\", \"\")","x = /\\/\\/\\//");
  fold("x = new RegExp(\"\\\\\\/\", \"\")","x = /\\//");
  fold("x = new RegExp(\"\\n\")","x = /\\n/");
  fold("x = new RegExp('\\\\\\r')","x = /\\r/");
  String longRegexp="";
  for (int i=0; i < 200; i++) {
    longRegexp+="x";
  }
  foldSame("x = RegExp(\"" + longRegexp + "\")");
  disableNormalize();
  foldSame("x = new RegExp(\"foobar\")");
}
