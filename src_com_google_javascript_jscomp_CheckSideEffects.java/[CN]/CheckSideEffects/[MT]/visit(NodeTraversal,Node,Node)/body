{
  if (n.isEmpty() || n.isComma()) {
    return;
  }
  if (parent == null) {
    return;
  }
  if (n.isExprResult() || n.isBlock()) {
    return;
  }
  if (n.isQualifiedName() && n.getJSDocInfo() != null) {
    return;
  }
  boolean isResultUsed=NodeUtil.isExpressionResultUsed(n);
  boolean isSimpleOp=NodeUtil.isSimpleOperator(n);
  if (!isResultUsed) {
    if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n,t.getCompiler())) {
      if (report) {
        String msg="This code lacks side-effects. Is there a bug?";
        if (n.isString() || n.isTemplateLit()) {
          msg="Is there a missing '+' on the previous line?";
        }
 else         if (isSimpleOp) {
          msg="The result of the '" + n.getToken().toString().toLowerCase() + "' operator is not being used.";
        }
        t.report(n,USELESS_CODE_ERROR,msg);
      }
      if (!NodeUtil.isStatement(n)) {
        problemNodes.add(n);
      }
    }
 else     if (n.isCall() && (n.getFirstChild().isGetProp() || n.getFirstChild().isName() || n.getFirstChild().isString())) {
      String qname=n.getFirstChild().getQualifiedName();
      boolean isDefinedInSrc=false;
      if (qname != null) {
        if (n.getFirstChild().isGetProp()) {
          Node rootNameNode=NodeUtil.getRootOfQualifiedName(n.getFirstChild());
          isDefinedInSrc=rootNameNode != null && rootNameNode.isName() && t.getScope().getVar(rootNameNode.getString()) != null;
        }
 else {
          isDefinedInSrc=t.getScope().getVar(qname) != null;
        }
      }
      if (qname != null && noSideEffectExterns.containsKey(qname) && !isDefinedInSrc) {
        problemNodes.add(n);
        if (report) {
          String msg="The result of the extern function call '" + qname + "' is not being used.";
          t.report(n,USELESS_CODE_ERROR,msg);
        }
      }
    }
  }
}
