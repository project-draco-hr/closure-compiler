{
  if (n.isEmpty() || n.isComma()) {
    return;
  }
  if (parent == null) {
    return;
  }
  if (n.isExprResult() || n.isBlock()) {
    return;
  }
  if (n.isQualifiedName() && n.getJSDocInfo() != null) {
    return;
  }
  boolean isResultUsed=NodeUtil.isExpressionResultUsed(n);
  boolean isSimpleOp=NodeUtil.isSimpleOperatorType(n.getType());
  if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n,t.getCompiler()))) {
    String msg="This code lacks side-effects. Is there a bug?";
    if (n.isString()) {
      msg="Is there a missing '+' on the previous line?";
    }
 else     if (isSimpleOp) {
      msg="The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used.";
    }
    t.getCompiler().report(t.makeError(n,level,USELESS_CODE_ERROR,msg));
    if (!NodeUtil.isStatement(n)) {
      problemNodes.add(n);
    }
  }
}
