{
switch (n.getType()) {
case Token.LC:
    return createRecordTypeFromNodes(n.getFirstChild(),sourceName,scope);
case Token.BANG:
  return createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope,forgiving).restrictByNotNullOrUndefined();
case Token.QMARK:
Node firstChild=n.getFirstChild();
if (firstChild == null) {
return getNativeType(UNKNOWN_TYPE);
}
return createDefaultObjectUnion(createFromTypeNodesInternal(firstChild,sourceName,scope,forgiving));
case Token.EQUALS:
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope,false));
case Token.ELLIPSIS:
return createOptionalType(createFromTypeNodesInternal(n.getFirstChild(),sourceName,scope,false));
case Token.STAR:
return getNativeType(ALL_TYPE);
case Token.LB:
return getNativeType(ARRAY_TYPE);
case Token.PIPE:
UnionTypeBuilder builder=new UnionTypeBuilder(this);
for (Node child=n.getFirstChild(); child != null; child=child.getNext()) {
builder.addAlternate(createFromTypeNodesInternal(child,sourceName,scope,false));
}
return builder.build();
case Token.EMPTY:
return getNativeType(UNKNOWN_TYPE);
case Token.VOID:
return getNativeType(VOID_TYPE);
case Token.STRING:
JSType namedType=getType(scope,n.getString(),sourceName,n.getLineno(),n.getCharno());
if (forgiving) {
namedType.forgiveUnknownNames();
}
if (resolveMode != ResolveMode.LAZY_NAMES) {
namedType=namedType.resolveInternal(reporter,scope);
}
if ((namedType instanceof ObjectType) && !(enumTypeNames.contains(n.getString()))) {
Node typeList=n.getFirstChild();
if (typeList != null && ("Array".equals(n.getString()) || "Object".equals(n.getString()))) {
JSType parameterType=createFromTypeNodesInternal(typeList.getLastChild(),sourceName,scope,false);
namedType=new ParameterizedType(this,(ObjectType)namedType,parameterType);
if (typeList.hasMoreThanOneChild()) {
JSType indexType=createFromTypeNodesInternal(typeList.getFirstChild(),sourceName,scope,false);
namedType=new IndexedType(this,(ObjectType)namedType,indexType);
}
}
return createDefaultObjectUnion(namedType);
}
 else {
return namedType;
}
case Token.FUNCTION:
ObjectType thisType=null;
Node current=n.getFirstChild();
if (current.getType() == Token.THIS) {
Node thisNode=current.getFirstChild();
thisType=ObjectType.cast(createFromTypeNodesInternal(thisNode,sourceName,scope,false).restrictByNotNullOrUndefined());
if (thisType == null) {
reporter.warning(ScriptRuntime.getMessage0("msg.jsdoc.function.thisnotobject"),sourceName,thisNode.getLineno(),"",thisNode.getCharno());
}
current=current.getNext();
}
FunctionParamBuilder paramBuilder=new FunctionParamBuilder(this);
if (current.getType() == Token.LP) {
Node args=current.getFirstChild();
for (Node arg=current.getFirstChild(); arg != null; arg=arg.getNext()) {
if (arg.getType() == Token.ELLIPSIS) {
if (arg.getChildCount() == 0) {
paramBuilder.addVarArgs(getNativeType(UNKNOWN_TYPE));
}
 else {
paramBuilder.addVarArgs(createFromTypeNodesInternal(arg.getFirstChild(),sourceName,scope,false));
}
}
 else {
JSType type=createFromTypeNodesInternal(arg,sourceName,scope,false);
if (arg.getType() == Token.EQUALS) {
boolean addSuccess=paramBuilder.addOptionalParams(type);
if (!addSuccess) {
reporter.warning(ScriptRuntime.getMessage0("msg.jsdoc.function.varargs"),sourceName,arg.getLineno(),"",arg.getCharno());
}
}
 else {
paramBuilder.addRequiredParams(type);
}
}
}
current=current.getNext();
}
JSType returnType=createFromTypeNodesInternal(current,sourceName,scope,false);
return new FunctionBuilder(this).withParams(paramBuilder).withReturnType(returnType).withTypeOfThis(thisType).build();
}
throw new IllegalStateException("Unexpected node in type expression: " + n.toString());
}
