{
  TypeIRegistry registry=compiler.getTypeIRegistry();
  invalidatingTypes=new HashSet<>(ImmutableSet.of((JSType)registry.getNativeType(JSTypeNative.ALL_TYPE),(JSType)registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),(JSType)registry.getNativeType(JSTypeNative.NO_TYPE),(JSType)registry.getNativeType(JSTypeNative.NULL_TYPE),(JSType)registry.getNativeType(JSTypeNative.VOID_TYPE),(JSType)registry.getNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE),(JSType)registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),(JSType)registry.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),(JSType)registry.getNativeType(JSTypeNative.GLOBAL_THIS),(JSType)registry.getNativeType(JSTypeNative.OBJECT_TYPE),(JSType)registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),(JSType)registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),(JSType)registry.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE),(JSType)registry.getNativeType(JSTypeNative.UNKNOWN_TYPE)));
  for (  TypeMismatch mis : compiler.getTypeMismatches()) {
    addInvalidatingType(mis.typeA);
    addInvalidatingType(mis.typeB);
  }
}
