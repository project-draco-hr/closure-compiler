{
  final ClassLoader classLoader=(ClassLoader)AccessController.doPrivileged(new PrivilegedAction<Object>(){
    public Object run(){
      return cx.getApplicationClassLoader();
    }
  }
);
  final CodeSource codeSource=(CodeSource)securityDomain;
  Map<ClassLoader,SoftReference<SecureCaller>> classLoaderMap;
synchronized (callers) {
    classLoaderMap=callers.get(codeSource);
    if (classLoaderMap == null) {
      classLoaderMap=new WeakHashMap<ClassLoader,SoftReference<SecureCaller>>();
      callers.put(codeSource,classLoaderMap);
    }
  }
  SecureCaller caller;
synchronized (classLoaderMap) {
    SoftReference<SecureCaller> ref=classLoaderMap.get(classLoader);
    if (ref != null) {
      caller=ref.get();
    }
 else {
      caller=null;
    }
    if (caller == null) {
      try {
        caller=(SecureCaller)AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){
          public Object run() throws Exception {
            Loader loader=new Loader(classLoader,codeSource);
            Class<?> c=loader.defineClass(SecureCaller.class.getName() + "Impl",secureCallerImplBytecode);
            return c.newInstance();
          }
        }
);
        classLoaderMap.put(classLoader,new SoftReference<SecureCaller>(caller));
      }
 catch (      PrivilegedActionException ex) {
        throw new UndeclaredThrowableException(ex.getCause());
      }
    }
  }
  return caller.call(callable,cx,scope,thisObj,args);
}
