{
  builder.recordReturnType(new JSTypeExpression(JsDocInfoParser.parseTypeString("number|string"),""));
  JSDocInfo info=builder.buildAndReset();
  assertEquals("/**\n @return {(number|string)}\n */\n",jsDocInfoPrinter.print(info));
  builder.recordParameter("foo",new JSTypeExpression(new Node(Token.ELLIPSIS,IR.string("number")),""));
  info=builder.buildAndReset();
  assertEquals("/**\n @param {...number} foo\n */\n",jsDocInfoPrinter.print(info));
  builder.recordThrowType(new JSTypeExpression(new Node(Token.STAR),""));
  info=builder.buildAndReset();
  assertEquals("/** @throws {*} */ ",jsDocInfoPrinter.print(info));
  builder.recordTypedef(new JSTypeExpression(new Node(Token.QMARK),""));
  info=builder.buildAndReset();
  assertEquals("/** @typedef {?} */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(new Node(Token.VOID),""));
  info=builder.buildAndReset();
  assertEquals("/** @type {void} */ ",jsDocInfoPrinter.print(info));
  builder.recordEnumParameterType(new JSTypeExpression(JsDocInfoParser.parseTypeString("{foo:number,bar:string}"),""));
  info=builder.buildAndReset();
  assertEquals("/** @enum {{foo:number,bar:string}} */ ",jsDocInfoPrinter.print(info));
  builder.recordEnumParameterType(new JSTypeExpression(JsDocInfoParser.parseTypeString("{foo:(number|string)}"),""));
  info=builder.buildAndReset();
  assertEquals("/** @enum {{foo:(number|string)}} */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("?Object"),""));
  info=builder.buildAndReset();
  assertEquals("/** @type {?Object} */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("!Object"),""));
  info=builder.buildAndReset();
  assertEquals("/** @type {!Object} */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("!Array<(number|string)>"),""));
  info=builder.buildAndReset();
  assertEquals("/** @type {!Array<(number|string)>} */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("Array"),""));
  builder.recordInlineType();
  info=builder.buildAndReset();
  assertEquals("/** Array */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("!Set<number|string>"),""));
  info=builder.buildAndReset();
  assertEquals("/** @type {!Set<(number|string)>} */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("!Map<!Foo, !Bar<!Baz|string>>"),""));
  info=builder.buildAndReset();
  assertEquals("/** @type {!Map<!Foo,!Bar<(!Baz|string)>>} */ ",jsDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("Map"),""));
  builder.recordInlineType();
  info=builder.buildAndReset();
  assertEquals("/** Map */ ",jsDocInfoPrinter.print(info));
}
