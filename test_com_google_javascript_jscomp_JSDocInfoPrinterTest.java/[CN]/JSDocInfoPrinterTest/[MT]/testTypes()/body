{
  builder.recordReturnType(new JSTypeExpression(JsDocInfoParser.parseTypeString("number|string"),""));
  JSDocInfo info=builder.buildAndReset();
  assertEquals("/**@return {(number|string)} */",JSDocInfoPrinter.print(info));
  builder.recordParameter("foo",new JSTypeExpression(new Node(Token.ELLIPSIS,IR.string("number")),""));
  info=builder.buildAndReset();
  assertEquals("/**@param {...number} foo */",JSDocInfoPrinter.print(info));
  builder.recordThrowType(new JSTypeExpression(new Node(Token.STAR),""));
  info=builder.buildAndReset();
  assertEquals("/**@throws {*} */",JSDocInfoPrinter.print(info));
  builder.recordTypedef(new JSTypeExpression(new Node(Token.QMARK),""));
  info=builder.buildAndReset();
  assertEquals("/**@typedef {?} */",JSDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(new Node(Token.VOID),""));
  info=builder.buildAndReset();
  assertEquals("/**@type {void} */",JSDocInfoPrinter.print(info));
  builder.recordEnumParameterType(new JSTypeExpression(JsDocInfoParser.parseTypeString("{foo:number,bar:string}"),""));
  info=builder.buildAndReset();
  assertEquals("/**@enum {{foo:number,bar:string}} */",JSDocInfoPrinter.print(info));
  builder.recordEnumParameterType(new JSTypeExpression(JsDocInfoParser.parseTypeString("{foo:(number|string)}"),""));
  info=builder.buildAndReset();
  assertEquals("/**@enum {{foo:(number|string)}} */",JSDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("!Array.<(number|string)>"),""));
  info=builder.buildAndReset();
  assertEquals("/**@type {!Array.<(number|string)>} */",JSDocInfoPrinter.print(info));
  builder.recordType(new JSTypeExpression(JsDocInfoParser.parseTypeString("Array"),""));
  builder.recordInlineType();
  info=builder.buildAndReset();
  assertEquals("/** Array */",JSDocInfoPrinter.print(info));
}
