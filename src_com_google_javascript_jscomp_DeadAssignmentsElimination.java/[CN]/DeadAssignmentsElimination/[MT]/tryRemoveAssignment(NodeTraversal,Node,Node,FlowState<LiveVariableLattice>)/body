{
  Node parent=n.getParent();
  boolean isDeclarationNode=NodeUtil.isNameDeclaration(parent);
  if (NodeUtil.isAssignmentOp(n) || n.isInc() || n.isDec()|| isDeclarationNode) {
    Node lhs=isDeclarationNode ? n : n.getFirstChild();
    Node rhs=NodeUtil.getRValueOfLValue(lhs);
    if (rhs != null) {
      tryRemoveAssignment(t,rhs,exprRoot,state);
      rhs=NodeUtil.getRValueOfLValue(lhs);
    }
    if (isDeclarationNode && lhs.getNext() != null) {
      tryRemoveAssignment(t,lhs.getNext(),exprRoot,state);
    }
    if (isDeclarationNode && (rhs == null || parent.getParent().isFor())) {
      return;
    }
    Scope scope=t.getScope();
    if (!lhs.isName()) {
      return;
    }
    String name=lhs.getString();
    if (!scope.isDeclared(name,false)) {
      return;
    }
    Var var=scope.getVar(name);
    if (liveness.getEscapedLocals().contains(var)) {
      return;
    }
    if (rhs != null && rhs.isName() && rhs.getString().equals(var.name) && n.isAssign()) {
      n.removeChild(rhs);
      n.getParent().replaceChild(n,rhs);
      compiler.reportCodeChange();
      return;
    }
    if (state.getOut().isLive(var)) {
      return;
    }
    if (state.getIn().isLive(var) && isVariableStillLiveWithinExpression(n,exprRoot,var.name)) {
      return;
    }
    if (n.isAssign()) {
      n.removeChild(rhs);
      n.getParent().replaceChild(n,rhs);
    }
 else     if (NodeUtil.isAssignmentOp(n)) {
      n.removeChild(rhs);
      n.removeChild(lhs);
      Node op=new Node(NodeUtil.getOpFromAssignmentOp(n),lhs,rhs);
      parent.replaceChild(n,op);
    }
 else     if (n.isInc() || n.isDec()) {
      if (parent.isExprResult()) {
        parent.replaceChild(n,IR.voidNode(IR.number(0).srcref(n)));
      }
 else       if (n.isComma() && n != parent.getLastChild()) {
        parent.removeChild(n);
      }
 else       if (parent.isFor() && !NodeUtil.isForIn(parent) && NodeUtil.getConditionExpression(parent) != n) {
        parent.replaceChild(n,IR.empty());
      }
 else {
        return;
      }
    }
 else     if (isDeclarationNode) {
      lhs.removeChild(rhs);
      parent.getParent().addChildAfter(IR.exprResult(rhs),parent);
      rhs.getParent().useSourceInfoFrom(rhs);
    }
 else {
      throw new IllegalStateException("Unknown statement");
    }
    compiler.reportCodeChange();
    return;
  }
 else {
    for (Node c=n.getFirstChild(); c != null; ) {
      Node next=c.getNext();
      if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {
        tryRemoveAssignment(t,c,exprRoot,state);
      }
      c=next;
    }
    return;
  }
}
