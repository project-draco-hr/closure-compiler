{
  int type=node.getType();
  int count;
  Object[] propertyIds=null;
  if (type == Token.ARRAYLIT) {
    count=0;
    for (Node n=child; n != null; n=n.getNext()) {
      ++count;
    }
  }
 else   if (type == Token.OBJECTLIT) {
    propertyIds=(Object[])node.getProp(Node.OBJECT_IDS_PROP);
    count=propertyIds.length;
  }
 else {
    throw badTree(node);
  }
  addIndexOp(Icode_LITERAL_NEW,count);
  stackChange(2);
  while (child != null) {
    int childType=child.getType();
    if (childType == Token.GET) {
      visitExpression(child.getFirstChild(),0);
      addIcode(Icode_LITERAL_GETTER);
    }
 else     if (childType == Token.SET) {
      visitExpression(child.getFirstChild(),0);
      addIcode(Icode_LITERAL_SETTER);
    }
 else {
      visitExpression(child,0);
      addIcode(Icode_LITERAL_SET);
    }
    stackChange(-1);
    child=child.getNext();
  }
  if (type == Token.ARRAYLIT) {
    int[] skipIndexes=(int[])node.getProp(Node.SKIP_INDEXES_PROP);
    if (skipIndexes == null) {
      addToken(Token.ARRAYLIT);
    }
 else {
      int index=literalIds.size();
      literalIds.add(skipIndexes);
      addIndexOp(Icode_SPARE_ARRAYLIT,index);
    }
  }
 else {
    int index=literalIds.size();
    literalIds.add(propertyIds);
    addIndexOp(Token.OBJECTLIT,index);
  }
  stackChange(-1);
}
