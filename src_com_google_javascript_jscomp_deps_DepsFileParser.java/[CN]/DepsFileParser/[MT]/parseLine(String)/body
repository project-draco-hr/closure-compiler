{
  boolean hasDependencies=false;
  if (line.contains("addDependency")) {
    depMatcher.reset(line);
    if (depMatcher.matches()) {
      hasDependencies=true;
      String addDependencyParams=depMatcher.group(1);
      depArgsMatch.reset(addDependencyParams);
      if (!depArgsMatch.matches()) {
        throw new ParseException("Invalid arguments to goog.addDependency(). Found: " + addDependencyParams,true);
      }
      String path=pathTranslator.apply(parseJsString(depArgsMatch.group(1)));
      DependencyInfo depInfo=new SimpleDependencyInfo(path,filePath,parseJsStringArray(depArgsMatch.group(2)),parseJsStringArray(depArgsMatch.group(3)),parseLoadFlags(depArgsMatch.group(4)));
      if (logger.isLoggable(Level.FINE)) {
        logger.fine("Found dep: " + depInfo);
      }
      depInfos.add(depInfo);
    }
  }
  return !shortcutMode || hasDependencies || CharMatcher.WHITESPACE.matchesAllOf(line);
}
