{
  Node callName=callNode.getFirstChild();
  SubclassType type=typeofClassDefiningName(callName);
  if (type != null) {
    Node subclass=null;
    Node superclass=callNode.getLastChild();
    boolean isDeprecatedCall=callNode.getChildCount() == 2 && callName.getType() == Token.GETPROP;
    if (isDeprecatedCall) {
      subclass=callName.getFirstChild();
    }
 else     if (callNode.getChildCount() == 3) {
      subclass=callName.getNext();
    }
 else {
      return null;
    }
    if (type == SubclassType.MIXIN) {
      if (!endsWithPrototype(superclass)) {
        return null;
      }
      if (!isDeprecatedCall) {
        if (!endsWithPrototype(subclass)) {
          return null;
        }
        subclass=subclass.getFirstChild();
      }
      superclass=superclass.getFirstChild();
    }
    if (subclass != null && subclass.isUnscopedQualifiedName() && superclass.isUnscopedQualifiedName()) {
      return new SubclassRelationship(type,subclass,superclass);
    }
  }
  return null;
}
