{
  Method[] methods=discoverAccessibleMethods(cl,includeProtected,includePrivate);
  for (int i=0; i < methods.length; i++) {
    Method method=methods[i];
    int mods=method.getModifiers();
    boolean isStatic=Modifier.isStatic(mods);
    Map<String,Object> ht=isStatic ? staticMembers : members;
    String name=method.getName();
    Object value=ht.get(name);
    if (value == null) {
      ht.put(name,method);
    }
 else {
      ObjArray overloadedMethods;
      if (value instanceof ObjArray) {
        overloadedMethods=(ObjArray)value;
      }
 else {
        if (!(value instanceof Method))         Kit.codeBug();
        overloadedMethods=new ObjArray();
        overloadedMethods.add(value);
        ht.put(name,overloadedMethods);
      }
      overloadedMethods.add(method);
    }
  }
  for (int tableCursor=0; tableCursor != 2; ++tableCursor) {
    boolean isStatic=(tableCursor == 0);
    Map<String,Object> ht=isStatic ? staticMembers : members;
    for (    Map.Entry<String,Object> entry : ht.entrySet()) {
      MemberBox[] methodBoxes;
      Object value=entry.getValue();
      if (value instanceof Method) {
        methodBoxes=new MemberBox[1];
        methodBoxes[0]=new MemberBox((Method)value);
      }
 else {
        ObjArray overloadedMethods=(ObjArray)value;
        int N=overloadedMethods.size();
        if (N < 2)         Kit.codeBug();
        methodBoxes=new MemberBox[N];
        for (int i=0; i != N; ++i) {
          Method method=(Method)overloadedMethods.get(i);
          methodBoxes[i]=new MemberBox(method);
        }
      }
      NativeJavaMethod fun=new NativeJavaMethod(methodBoxes);
      if (scope != null) {
        ScriptRuntime.setFunctionProtoAndParent(fun,scope);
      }
      ht.put(entry.getKey(),fun);
    }
  }
  Field[] fields=getAccessibleFields();
  for (int i=0; i < fields.length; i++) {
    Field field=fields[i];
    String name=field.getName();
    int mods=field.getModifiers();
    if (!includePrivate && !Modifier.isPublic(mods)) {
      continue;
    }
    try {
      boolean isStatic=Modifier.isStatic(mods);
      Map<String,Object> ht=isStatic ? staticMembers : members;
      Object member=ht.get(name);
      if (member == null) {
        ht.put(name,field);
      }
 else       if (member instanceof NativeJavaMethod) {
        NativeJavaMethod method=(NativeJavaMethod)member;
        FieldAndMethods fam=new FieldAndMethods(scope,method.methods,field);
        Map<String,FieldAndMethods> fmht=isStatic ? staticFieldAndMethods : fieldAndMethods;
        if (fmht == null) {
          fmht=new HashMap<String,FieldAndMethods>();
          if (isStatic) {
            staticFieldAndMethods=fmht;
          }
 else {
            fieldAndMethods=fmht;
          }
        }
        fmht.put(name,fam);
        ht.put(name,fam);
      }
 else       if (member instanceof Field) {
        Field oldField=(Field)member;
        if (oldField.getDeclaringClass().isAssignableFrom(field.getDeclaringClass())) {
          ht.put(name,field);
        }
      }
 else {
        Kit.codeBug();
      }
    }
 catch (    SecurityException e) {
      Context.reportWarning("Could not access field " + name + " of class "+ cl.getName()+ " due to lack of privileges.");
    }
  }
  for (int tableCursor=0; tableCursor != 2; ++tableCursor) {
    boolean isStatic=(tableCursor == 0);
    Map<String,Object> ht=isStatic ? staticMembers : members;
    Map<String,BeanProperty> toAdd=new HashMap<String,BeanProperty>();
    for (    String name : ht.keySet()) {
      boolean memberIsGetMethod=name.startsWith("get");
      boolean memberIsSetMethod=name.startsWith("set");
      boolean memberIsIsMethod=name.startsWith("is");
      if (memberIsGetMethod || memberIsIsMethod || memberIsSetMethod) {
        String nameComponent=name.substring(memberIsIsMethod ? 2 : 3);
        if (nameComponent.length() == 0)         continue;
        String beanPropertyName=nameComponent;
        char ch0=nameComponent.charAt(0);
        if (Character.isUpperCase(ch0)) {
          if (nameComponent.length() == 1) {
            beanPropertyName=nameComponent.toLowerCase();
          }
 else {
            char ch1=nameComponent.charAt(1);
            if (!Character.isUpperCase(ch1)) {
              beanPropertyName=Character.toLowerCase(ch0) + nameComponent.substring(1);
            }
          }
        }
        if (toAdd.containsKey(beanPropertyName))         continue;
        Object v=ht.get(beanPropertyName);
        if (v != null) {
          if (!includePrivate || !(v instanceof Member) || !Modifier.isPrivate(((Member)v).getModifiers())) {
            continue;
          }
        }
        MemberBox getter=null;
        getter=findGetter(isStatic,ht,"get",nameComponent);
        if (getter == null) {
          getter=findGetter(isStatic,ht,"is",nameComponent);
        }
        MemberBox setter=null;
        NativeJavaMethod setters=null;
        String setterName="set".concat(nameComponent);
        if (ht.containsKey(setterName)) {
          Object member=ht.get(setterName);
          if (member instanceof NativeJavaMethod) {
            NativeJavaMethod njmSet=(NativeJavaMethod)member;
            if (getter != null) {
              Class<?> type=getter.method().getReturnType();
              setter=extractSetMethod(type,njmSet.methods,isStatic);
            }
 else {
              setter=extractSetMethod(njmSet.methods,isStatic);
            }
            if (njmSet.methods.length > 1) {
              setters=njmSet;
            }
          }
        }
        BeanProperty bp=new BeanProperty(getter,setter,setters);
        toAdd.put(beanPropertyName,bp);
      }
    }
    for (    String key : toAdd.keySet()) {
      Object value=toAdd.get(key);
      ht.put(key,value);
    }
  }
  Constructor<?>[] constructors=getAccessibleConstructors();
  ctors=new MemberBox[constructors.length];
  for (int i=0; i != constructors.length; ++i) {
    ctors[i]=new MemberBox(constructors[i]);
  }
}
