{
  JavaMembers members;
  ClassCache cache=ClassCache.get(scope);
  Map<Class<?>,JavaMembers> ct=cache.getClassCacheMap();
  Class<?> cl=dynamicType;
  for (; ; ) {
    members=ct.get(cl);
    if (members != null) {
      return members;
    }
    try {
      members=new JavaMembers(cache.getAssociatedScope(),cl,includeProtected);
      break;
    }
 catch (    SecurityException e) {
      if (staticType != null && staticType.isInterface()) {
        cl=staticType;
        staticType=null;
      }
 else {
        Class<?> parent=cl.getSuperclass();
        if (parent == null) {
          if (cl.isInterface()) {
            parent=ScriptRuntime.ObjectClass;
          }
 else {
            throw e;
          }
        }
        cl=parent;
      }
    }
  }
  if (cache.isCachingEnabled())   ct.put(cl,members);
  return members;
}
