{
  CompilerOptions options=createCompilerOptions();
  options.checkSymbols=false;
  options.customPasses=ArrayListMultimap.create();
  options.customPasses.put(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS,new CompilerPass(){
    @Override public void process(    Node externs,    Node root){
      Node var=root.getLastChild().getFirstChild();
      assertEquals(Token.VAR,var.getType());
      var.detachFromParent();
    }
  }
);
  try {
    test(options,"var x = 3; function f() { return x + z; }","function f() { return x + z; }");
    fail("Expected run-time exception");
  }
 catch (  RuntimeException e) {
    assertTrue(e.getMessage().contains("Unexpected variable x"));
  }
}
