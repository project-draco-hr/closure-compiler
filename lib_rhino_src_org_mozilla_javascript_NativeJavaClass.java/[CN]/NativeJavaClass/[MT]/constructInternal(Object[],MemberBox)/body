{
  Class<?>[] argTypes=ctor.argTypes;
  if (ctor.vararg) {
    Object[] newArgs=new Object[argTypes.length];
    for (int i=0; i < argTypes.length - 1; i++) {
      newArgs[i]=Context.jsToJava(args[i],argTypes[i]);
    }
    Object varArgs;
    if (args.length == argTypes.length && (args[args.length - 1] == null || args[args.length - 1] instanceof NativeArray || args[args.length - 1] instanceof NativeJavaArray)) {
      varArgs=Context.jsToJava(args[args.length - 1],argTypes[argTypes.length - 1]);
    }
 else {
      Class<?> componentType=argTypes[argTypes.length - 1].getComponentType();
      varArgs=Array.newInstance(componentType,args.length - argTypes.length + 1);
      for (int i=0; i < Array.getLength(varArgs); i++) {
        Object value=Context.jsToJava(args[argTypes.length - 1 + i],componentType);
        Array.set(varArgs,i,value);
      }
    }
    newArgs[argTypes.length - 1]=varArgs;
    args=newArgs;
  }
 else {
    Object[] origArgs=args;
    for (int i=0; i < args.length; i++) {
      Object arg=args[i];
      Object x=Context.jsToJava(arg,argTypes[i]);
      if (x != arg) {
        if (args == origArgs) {
          args=origArgs.clone();
        }
        args[i]=x;
      }
    }
  }
  return ctor.newInstance(args);
}
