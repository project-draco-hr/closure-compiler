{
  Class<?> classObject=getClassObject();
  int modifiers=classObject.getModifiers();
  if (!(Modifier.isInterface(modifiers) || Modifier.isAbstract(modifiers))) {
    NativeJavaMethod ctors=members.ctors;
    int index=ctors.findCachedFunction(cx,args);
    if (index < 0) {
      String sig=NativeJavaMethod.scriptSignature(args);
      throw Context.reportRuntimeError2("msg.no.java.ctor",classObject.getName(),sig);
    }
    return constructSpecific(cx,scope,args,ctors.methods[index]);
  }
 else {
    if (args.length == 0) {
      throw Context.reportRuntimeError0("msg.adapter.zero.args");
    }
    Scriptable topLevel=ScriptableObject.getTopLevelScope(this);
    String msg="";
    try {
      if ("Dalvik".equals(System.getProperty("java.vm.name")) && classObject.isInterface()) {
        Object obj=createInterfaceAdapter(classObject,ScriptableObject.ensureScriptableObject(args[0]));
        return cx.getWrapFactory().wrapAsJavaObject(cx,scope,obj,null);
      }
      Object v=topLevel.get("JavaAdapter",topLevel);
      if (v != NOT_FOUND) {
        Function f=(Function)v;
        Object[] adapterArgs={this,args[0]};
        return f.construct(cx,topLevel,adapterArgs);
      }
    }
 catch (    Exception ex) {
      String m=ex.getMessage();
      if (m != null)       msg=m;
    }
    throw Context.reportRuntimeError2("msg.cant.instantiate",msg,classObject.getName());
  }
}
