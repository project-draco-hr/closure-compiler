{
  Preconditions.checkArgument(budget >= 2);
  Node node=null;
  Node target;
switch (random.nextInt(11)) {
case 0:
    target=generateAssignableExpression(budget - 1);
  node=new Node(Token.INC,target);
node.putBooleanProp(Node.INCRDECR_PROP,true);
break;
case 1:
target=generateAssignableExpression(budget - 1);
node=new Node(Token.DEC,target);
node.putBooleanProp(Node.INCRDECR_PROP,true);
break;
case 2:
target=generateAssignableExpression(budget - 1);
node=new Node(Token.DELPROP,target);
break;
case 3:
target=generateExpression(budget - 1);
node=new Node(Token.VOID,target);
break;
case 4:
target=generateExpression(budget - 1);
node=new Node(Token.TYPEOF,target);
break;
case 5:
target=generateAssignableExpression(budget - 1);
node=new Node(Token.INC,target);
break;
case 6:
target=generateAssignableExpression(budget - 1);
node=new Node(Token.DEC,target);
break;
case 7:
target=generateExpression(budget - 1);
node=new Node(Token.POS,target);
break;
case 8:
target=generateExpression(budget - 1);
node=new Node(Token.NEG,target);
break;
case 9:
target=generateExpression(budget - 1);
node=new Node(Token.BITNOT,target);
break;
case 10:
target=generateExpression(budget - 1);
node=new Node(Token.NOT,target);
break;
}
return node;
}
