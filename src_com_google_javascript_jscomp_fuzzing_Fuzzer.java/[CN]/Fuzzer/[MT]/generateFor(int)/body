{
  Preconditions.checkArgument(budget >= 2);
  int totalHeaderBudget=(budget - 1) / 3;
  int bodyBudget=budget - 1 - totalHeaderBudget;
  int[] headerBudgets=distribute(totalHeaderBudget,3,0);
  Node initializer, condition, increment, body;
  if (headerBudgets[0] == 0) {
    initializer=new Node(Token.EMPTY);
  }
 else {
    initializer=random.nextInt(2) == 0 ? generateVariableStatement(headerBudgets[0]) : generateExpression(headerBudgets[0]);
  }
  condition=headerBudgets[1] == 0 ? new Node(Token.EMPTY) : generateExpression(headerBudgets[1]);
  increment=headerBudgets[2] == 0 ? new Node(Token.EMPTY) : generateExpression(headerBudgets[2]);
  loopNesting++;
  body=generateBlock(bodyBudget);
  loopNesting--;
  return new Node(Token.FOR,initializer,condition,increment,body);
}
