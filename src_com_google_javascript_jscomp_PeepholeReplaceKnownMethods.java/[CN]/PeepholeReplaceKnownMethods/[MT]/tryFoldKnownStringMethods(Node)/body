{
  Preconditions.checkArgument(subtree.isCall());
  Node callTarget=subtree.getFirstChild();
  if (callTarget == null) {
    return subtree;
  }
  if (!NodeUtil.isGet(callTarget)) {
    return subtree;
  }
  Node stringNode=callTarget.getFirstChild();
  Node functionName=stringNode.getNext();
  if ((stringNode.getType() != Token.STRING) || (functionName.getType() != Token.STRING)) {
    return subtree;
  }
  String functionNameString=functionName.getString();
  Node firstArg=callTarget.getNext();
  if (firstArg == null) {
    if (functionNameString.equals("toLowerCase")) {
      subtree=tryFoldStringToLowerCase(subtree,stringNode);
    }
 else     if (functionNameString.equals("toUpperCase")) {
      subtree=tryFoldStringToUpperCase(subtree,stringNode);
    }
    return subtree;
  }
 else   if (NodeUtil.isImmutableValue(firstArg)) {
    if (functionNameString.equals("indexOf") || functionNameString.equals("lastIndexOf")) {
      subtree=tryFoldStringIndexOf(subtree,functionNameString,stringNode,firstArg);
    }
 else     if (functionNameString.equals("substr")) {
      subtree=tryFoldStringSubstr(subtree,stringNode,firstArg);
    }
 else     if (functionNameString.equals("substring")) {
      subtree=tryFoldStringSubstring(subtree,stringNode,firstArg);
    }
 else     if (functionNameString.equals("charAt")) {
      subtree=tryFoldStringCharAt(subtree,stringNode,firstArg);
    }
 else     if (functionNameString.equals("charCodeAt")) {
      subtree=tryFoldStringCharCodeAt(subtree,stringNode,firstArg);
    }
  }
  return subtree;
}
