{
  if (alternate.isNoType()) {
    return this;
  }
  isAllType=isAllType || alternate.isAllType();
  boolean isAlternateUnknown=alternate instanceof UnknownType;
  isNativeUnknownType=isNativeUnknownType || isAlternateUnknown;
  if (isAlternateUnknown) {
    areAllUnknownsChecked=areAllUnknownsChecked && alternate.isCheckedUnknownType();
  }
  if (!isAllType && !isNativeUnknownType) {
    if (alternate.isUnionType()) {
      UnionType union=alternate.toMaybeUnionType();
      for (      JSType unionAlt : union.getAlternates()) {
        addAlternate(unionAlt);
      }
    }
 else {
      if (alternates.size() > maxUnionSize) {
        return this;
      }
      int i=0;
      Iterator<JSType> it=alternates.iterator();
      while (it.hasNext()) {
        JSType current=it.next();
        if (alternate.isUnknownType() || current.isUnknownType() || alternate.isNoResolvedType()|| current.isNoResolvedType()) {
          if (alternate.isEquivalentTo(current)) {
            return this;
          }
        }
 else {
          if (alternate.isSubtype(current)) {
            return this;
          }
 else           if (current.isSubtype(alternate)) {
            it.remove();
            if (i == functionTypePosition) {
              functionTypePosition=-1;
            }
          }
        }
        i++;
      }
      if (alternate.isFunctionType()) {
        if (functionTypePosition == -1) {
          functionTypePosition=alternates.size();
          alternates.add(alternate);
        }
 else {
          JSType supremum=alternate.toMaybeFunctionType().getLeastSupertype(alternates.get(functionTypePosition).toMaybeFunctionType());
          Preconditions.checkState(supremum.isFunctionType());
          alternates.set(functionTypePosition,supremum);
        }
      }
 else {
        alternates.add(alternate);
      }
      result=null;
    }
  }
 else {
    result=null;
  }
  return this;
}
