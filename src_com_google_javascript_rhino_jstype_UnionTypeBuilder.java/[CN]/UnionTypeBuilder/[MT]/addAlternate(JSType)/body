{
  if (alternate.isNoType()) {
    return this;
  }
  isAllType=isAllType || alternate.isAllType();
  boolean isAlternateUnknown=alternate instanceof UnknownType;
  isNativeUnknownType=isNativeUnknownType || isAlternateUnknown;
  if (isAlternateUnknown) {
    areAllUnknownsChecked=areAllUnknownsChecked && alternate.isCheckedUnknownType();
  }
  if (!isAllType && !isNativeUnknownType) {
    if (alternate.isUnionType()) {
      UnionType union=alternate.toMaybeUnionType();
      for (      JSType unionAlt : union.getAlternates()) {
        addAlternate(unionAlt);
      }
    }
 else {
      if (alternates.size() > maxUnionSize) {
        return this;
      }
      if (alternate.isFunctionType() && functionTypePosition != -1) {
        FunctionType other=alternates.get(functionTypePosition).toMaybeFunctionType();
        FunctionType supremum=alternate.toMaybeFunctionType().supAndInfHelper(other,true);
        alternates.set(functionTypePosition,supremum);
        result=null;
        return this;
      }
      int currentIndex=0;
      Iterator<JSType> it=alternates.iterator();
      while (it.hasNext()) {
        boolean removeCurrent=false;
        JSType current=it.next();
        if (alternate.isUnknownType() || current.isUnknownType() || alternate.isNoResolvedType()|| current.isNoResolvedType()|| alternate.hasAnyTemplateTypes()|| current.hasAnyTemplateTypes()) {
          if (alternate.isEquivalentTo(current)) {
            return this;
          }
        }
 else {
          if (alternate.isParameterizedType() || current.isParameterizedType()) {
            if (!current.isParameterizedType()) {
              if (alternate.isSubtype(current)) {
                return this;
              }
            }
 else             if (!alternate.isParameterizedType()) {
              if (current.isSubtype(alternate)) {
                removeCurrent=true;
              }
            }
 else {
              Preconditions.checkState(current.isParameterizedType() && alternate.isParameterizedType());
              ParameterizedType parameterizedAlternate=alternate.toMaybeParameterizedType();
              ParameterizedType parameterizedCurrent=current.toMaybeParameterizedType();
              if (parameterizedCurrent.wrapsSameRawType(parameterizedAlternate)) {
                JSType alternateTypeParameter=parameterizedAlternate.getParameterType();
                JSType currentTypeParameter=parameterizedCurrent.getParameterType();
                if (currentTypeParameter.isEquivalentTo(parameterizedCurrent)) {
                  return this;
                }
 else {
                  JSType merged=parameterizedCurrent.getReferencedObjTypeInternal();
                  return addAlternate(merged);
                }
              }
            }
          }
 else           if (alternate.isSubtype(current)) {
            return this;
          }
 else           if (current.isSubtype(alternate)) {
            removeCurrent=true;
          }
        }
        if (removeCurrent) {
          it.remove();
          if (currentIndex == functionTypePosition) {
            functionTypePosition=-1;
          }
 else           if (currentIndex < functionTypePosition) {
            functionTypePosition--;
            currentIndex--;
          }
        }
        currentIndex++;
      }
      if (alternate.isFunctionType()) {
        Preconditions.checkState(functionTypePosition == -1);
        functionTypePosition=alternates.size();
      }
      alternates.add(alternate);
      result=null;
    }
  }
 else {
    result=null;
  }
  return this;
}
