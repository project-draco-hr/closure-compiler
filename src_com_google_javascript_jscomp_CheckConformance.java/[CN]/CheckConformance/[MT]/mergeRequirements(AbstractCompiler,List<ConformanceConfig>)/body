{
  List<Requirement.Builder> builders=new ArrayList<>();
  Map<String,Requirement.Builder> extendable=new HashMap<>();
  for (  ConformanceConfig config : configs) {
    for (    Requirement requirement : config.getRequirementList()) {
      Requirement.Builder builder=requirement.toBuilder();
      if (requirement.hasRuleId()) {
        if (requirement.getRuleId().isEmpty()) {
          reportInvalidRequirement(compiler,requirement,"empty rule_id");
          continue;
        }
        if (extendable.containsKey(requirement.getRuleId())) {
          reportInvalidRequirement(compiler,requirement,"two requirements with the same rule_id: " + requirement.getRuleId());
          continue;
        }
        extendable.put(requirement.getRuleId(),builder);
      }
      if (!requirement.hasExtends()) {
        builders.add(builder);
      }
    }
  }
  for (  ConformanceConfig config : configs) {
    for (    Requirement requirement : config.getRequirementList()) {
      if (requirement.hasExtends()) {
        Requirement.Builder existing=extendable.get(requirement.getExtends());
        if (existing == null) {
          reportInvalidRequirement(compiler,requirement,"no requirement with rule_id: " + requirement.getExtends());
          continue;
        }
        if (requirement.hasErrorMessage() || requirement.hasType() || requirement.getValueCount() != 0 || requirement.hasJavaClass() || requirement.hasRuleId()) {
          reportInvalidRequirement(compiler,requirement,"extending rules allow only whitelist, whitelist_regexp, only_apply_to and " + "only_apply_to_regexp.");
        }
        existing.addAllWhitelist(requirement.getWhitelistList());
        existing.addAllWhitelistRegexp(requirement.getWhitelistRegexpList());
        existing.addAllOnlyApplyTo(requirement.getOnlyApplyToList());
        existing.addAllOnlyApplyToRegexp(requirement.getOnlyApplyToRegexpList());
      }
    }
  }
  List<Requirement> requirements=new ArrayList<>();
  for (  Requirement.Builder builder : builders) {
    requirements.add(builder.build());
  }
  return requirements;
}
