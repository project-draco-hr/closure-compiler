{
switch (tree.operator.type) {
case EQUAL:
case STAR_EQUAL:
case SLASH_EQUAL:
case PERCENT_EQUAL:
case PLUS_EQUAL:
case MINUS_EQUAL:
case LEFT_SHIFT_EQUAL:
case RIGHT_SHIFT_EQUAL:
case UNSIGNED_RIGHT_SHIFT_EQUAL:
case AMPERSAND_EQUAL:
case CARET_EQUAL:
case BAR_EQUAL:
    check(tree.left.isLeftHandSideExpression() || tree.left.isPattern(),tree.left,"left hand side expression or pattern expected");
  check(tree.right.isAssignmentExpression(),tree.right,"assignment expression expected");
break;
case AND:
case OR:
case BAR:
case CARET:
case AMPERSAND:
case EQUAL_EQUAL:
case NOT_EQUAL:
case EQUAL_EQUAL_EQUAL:
case NOT_EQUAL_EQUAL:
case OPEN_ANGLE:
case CLOSE_ANGLE:
case GREATER_EQUAL:
case LESS_EQUAL:
case INSTANCEOF:
case IN:
case LEFT_SHIFT:
case RIGHT_SHIFT:
case UNSIGNED_RIGHT_SHIFT:
case PLUS:
case MINUS:
case STAR:
case SLASH:
case PERCENT:
check(tree.left.isAssignmentExpression(),tree.left,"assignment expression expected");
check(tree.right.isAssignmentExpression(),tree.right,"assignment expression expected");
break;
default :
fail(tree,"unexpected binary operator");
}
visitAny(tree.left);
visitAny(tree.right);
}
