{
  if (currentStatement.isVar()) {
    visitVar();
    return false;
  }
 else   if (currentStatement.isGeneratorMarker()) {
    visitGeneratorMarker();
    return true;
  }
 else   if (controlCanExit(currentStatement)) {
switch (currentStatement.getType()) {
case Token.WHILE:
case Token.DO:
case Token.FOR:
      if (NodeUtil.isForIn(currentStatement)) {
        compiler.report(JSError.make(currentStatement,Es6ToEs3Converter.CANNOT_CONVERT_YET,"For...in loops containing yield or return"));
        return false;
      }
    visitLoop();
  return false;
case Token.SWITCH:
visitSwitch();
return false;
case Token.IF:
if (!currentStatement.isGeneratorSafe()) {
visitIf();
return false;
}
break;
case Token.EXPR_RESULT:
if (currentStatement.getFirstChild().isYield()) {
visitYieldExprResult();
return true;
}
break;
case Token.BLOCK:
visitBlock();
return false;
case Token.RETURN:
visitReturn();
return false;
case Token.CONTINUE:
visitContinue();
return false;
case Token.BREAK:
if (!currentStatement.isGeneratorSafe()) {
visitBreak();
return false;
}
break;
case Token.THROW:
visitThrow();
return false;
}
}
enclosingBlock.addChildToBack(currentStatement);
return false;
}
