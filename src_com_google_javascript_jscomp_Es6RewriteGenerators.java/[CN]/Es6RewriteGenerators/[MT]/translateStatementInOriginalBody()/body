{
  if (currentStatement.isVar()) {
    visitVar();
    return false;
  }
 else   if (currentStatement.isGeneratorMarker()) {
    visitGeneratorMarker();
    return true;
  }
 else   if (currentStatement.isFunction()) {
    visitFunctionStatement();
    return false;
  }
 else   if (currentStatement.isBlock()) {
    visitBlock();
    return false;
  }
 else   if (controlCanExit(currentStatement)) {
switch (currentStatement.getType()) {
case WHILE:
case DO:
case FOR:
      if (NodeUtil.isForIn(currentStatement)) {
        visitForIn();
        return false;
      }
    visitLoop(null);
  return false;
case LABEL:
visitLabel();
return false;
case SWITCH:
visitSwitch();
return false;
case IF:
if (!currentStatement.isGeneratorSafe()) {
visitIf();
return false;
}
break;
case TRY:
visitTry();
return false;
case EXPR_RESULT:
if (currentStatement.getFirstChild().isYield()) {
visitYieldExprResult();
return true;
}
break;
case RETURN:
visitReturn();
return false;
case CONTINUE:
visitContinue();
return false;
case BREAK:
if (!currentStatement.isGeneratorSafe()) {
visitBreak();
return false;
}
break;
case THROW:
visitThrow();
return false;
default :
throw new RuntimeException("Untranslatable control-exiting statement in generator function: " + currentStatement.getType());
}
}
enclosingBlock.addChildToBack(currentStatement);
return false;
}
