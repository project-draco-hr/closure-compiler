{
  Node initializer;
  Node guard;
  Node incr;
  Node body;
  Node firstEntry;
  if (currentStatement.isWhile()) {
    guard=currentStatement.removeFirstChild();
    firstEntry=null;
    body=currentStatement.removeFirstChild();
    initializer=IR.empty();
    incr=IR.empty();
  }
 else   if (currentStatement.isFor()) {
    initializer=currentStatement.removeFirstChild();
    if (initializer.isAssign()) {
      initializer=IR.exprResult(initializer);
    }
    guard=currentStatement.removeFirstChild();
    firstEntry=null;
    incr=currentStatement.removeFirstChild();
    body=currentStatement.removeFirstChild();
  }
 else {
    Preconditions.checkState(currentStatement.isDo());
    firstEntry=IR.name(GENERATOR_DO_WHILE_INITIAL);
    initializer=IR.var(firstEntry.cloneTree(),IR.trueNode());
    incr=IR.assign(firstEntry.cloneTree(),IR.falseNode());
    body=currentStatement.removeFirstChild();
    guard=currentStatement.removeFirstChild();
  }
  Node condition, prestatement;
  if (guard.isBlock()) {
    prestatement=guard.removeFirstChild();
    condition=guard.removeFirstChild();
  }
 else {
    prestatement=IR.block();
    condition=guard;
  }
  if (currentStatement.isDo()) {
    condition=IR.or(firstEntry,condition);
  }
  int loopBeginState=generatorCaseCount++;
  int continueState=loopBeginState;
  if (!incr.isEmpty()) {
    continueState=generatorCaseCount++;
    Node continueCase=IR.number(continueState);
    continueCase.setGeneratorMarker(true);
    body.addChildToBack(continueCase);
    body.addChildToBack(incr.isBlock() ? incr : IR.exprResult(incr));
  }
  currentLoopContext.add(0,new LoopContext(generatorCaseCount,continueState,label));
  Node beginCase=IR.number(loopBeginState);
  beginCase.setGeneratorMarker(true);
  Node conditionalBranch=IR.ifNode(condition.isEmpty() ? IR.trueNode() : condition,body);
  Node setStateLoopStart=createStateUpdate(loopBeginState);
  Node breakToStart=createSafeBreak();
  originalGeneratorBody.addChildToFront(conditionalBranch);
  if (!prestatement.isEmpty()) {
    originalGeneratorBody.addChildToFront(prestatement);
  }
  originalGeneratorBody.addChildToFront(beginCase);
  if (!initializer.isEmpty()) {
    originalGeneratorBody.addChildToFront(initializer);
  }
  body.addChildToBack(setStateLoopStart);
  body.addChildToBack(breakToStart);
}
