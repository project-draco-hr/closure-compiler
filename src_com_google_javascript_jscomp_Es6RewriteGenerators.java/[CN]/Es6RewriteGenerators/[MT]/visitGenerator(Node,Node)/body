{
  Node genBlock=compiler.parseSyntheticCode(Joiner.on('\n').join("{","  var " + GENERATOR_STATE + " = "+ generatorCaseCount+ ";","  return {","    " + ITER_KEY + ": function() { return this; },","    next: function(" + GENERATOR_NEXT_ARG + ") {","      while (1) switch (" + GENERATOR_STATE + ") {","        case " + generatorCaseCount + ":","        default:","          return {value: undefined, done: true};","      }","    }","  }","}")).removeFirstChild();
  generatorCaseCount++;
  originalGeneratorBody=n.getLastChild();
  Node suppressionInsertSpot=null;
  if (NodeUtil.isFunctionExpression(n)) {
    n.replaceChild(n.getLastChild(),genBlock);
    n.setIsGeneratorFunction(false);
    suppressionInsertSpot=n;
  }
 else {
    suppressionInsertSpot=IR.var(n.removeFirstChild(),IR.function(IR.name(""),n.removeFirstChild(),genBlock));
    parent.replaceChild(n,suppressionInsertSpot);
  }
  JSDocInfoBuilder builder;
  if (n.getJSDocInfo() == null) {
    builder=new JSDocInfoBuilder(true);
  }
 else {
    builder=JSDocInfoBuilder.copyFrom(n.getJSDocInfo());
  }
  builder.recordSuppressions(ImmutableSet.of("uselessCode"));
  JSDocInfo info=builder.build(suppressionInsertSpot);
  suppressionInsertSpot.setJSDocInfo(info);
  originalGeneratorBody.addChildToBack(IR.exprResult(IR.assign(IR.name(GENERATOR_STATE),IR.number(-1))));
  enclosingCase=getUnique(genBlock,Token.CASE);
  hoistRoot=getUnique(genBlock,Token.VAR);
  if (NodeUtil.isNameReferenced(n,GENERATOR_ARGUMENTS)) {
    hoistRoot.getParent().addChildAfter(IR.var(IR.name(GENERATOR_ARGUMENTS),IR.name("arguments")),hoistRoot);
  }
  while (originalGeneratorBody.hasChildren()) {
    currentStatement=originalGeneratorBody.removeFirstChild();
    boolean advanceCase=translateStatementInOriginalBody();
    if (advanceCase) {
      int caseNumber;
      if (currentStatement.isGeneratorMarker()) {
        caseNumber=(int)currentStatement.getDouble();
      }
 else {
        caseNumber=generatorCaseCount;
        generatorCaseCount++;
      }
      Node newCase=IR.caseNode(IR.number(caseNumber),IR.block());
      enclosingCase.getParent().addChildAfter(newCase,enclosingCase);
      enclosingCase=newCase;
    }
  }
  parent.useSourceInfoIfMissingFromForTree(parent);
  compiler.reportCodeChange();
}
