{
  compiler.needsEs6Runtime=true;
  hasTranslatedTry=false;
  Node genBlock=compiler.parseSyntheticCode(Joiner.on('\n').join("function generatorBody() {","  var " + GENERATOR_STATE + " = "+ generatorCaseCount+ ";","  function $jscomp$generator$impl(" + GENERATOR_NEXT_ARG + ", ","      " + GENERATOR_THROW_ARG + ") {","    while (1) switch (" + GENERATOR_STATE + ") {","      case " + generatorCaseCount + ":","      default:","        return {value: undefined, done: true};","    }","  }","  var iterator = {","    next: function(arg) { return $jscomp$generator$impl(arg, undefined); },","    throw: function(arg) { return $jscomp$generator$impl(undefined, arg); },","  };","  $jscomp.initSymbolIterator();","  iterator[Symbol.iterator] = function() { return this; };","  return iterator;","}")).getFirstChild().getLastChild().detachFromParent();
  generatorCaseCount++;
  originalGeneratorBody=n.getLastChild();
  n.replaceChild(originalGeneratorBody,genBlock);
  n.setIsGeneratorFunction(false);
  JSDocInfoBuilder builder=JSDocInfoBuilder.maybeCopyFrom(n.getJSDocInfo());
  builder.recordSuppressions(ImmutableSet.of("uselessCode"));
  JSDocInfo info=builder.build();
  n.setJSDocInfo(info);
  originalGeneratorBody.addChildToBack(IR.exprResult(IR.assign(IR.name(GENERATOR_STATE),IR.number(-1))));
  enclosingBlock=getUnique(genBlock,Token.CASE).getLastChild();
  hoistRoot=genBlock.getFirstChild();
  if (NodeUtil.isNameReferenced(originalGeneratorBody,GENERATOR_ARGUMENTS)) {
    hoistRoot.getParent().addChildAfter(IR.var(IR.name(GENERATOR_ARGUMENTS),IR.name("arguments")),hoistRoot);
  }
  if (NodeUtil.isNameReferenced(originalGeneratorBody,GENERATOR_THIS)) {
    hoistRoot.getParent().addChildAfter(IR.var(IR.name(GENERATOR_THIS),IR.thisNode()),hoistRoot);
  }
  while (originalGeneratorBody.hasChildren()) {
    currentStatement=originalGeneratorBody.removeFirstChild();
    boolean advanceCase=translateStatementInOriginalBody();
    if (advanceCase) {
      int caseNumber;
      if (currentStatement.isGeneratorMarker()) {
        caseNumber=(int)currentStatement.getFirstChild().getDouble();
      }
 else {
        caseNumber=generatorCaseCount;
        generatorCaseCount++;
      }
      Node oldCase=enclosingBlock.getParent();
      Node newCase=IR.caseNode(IR.number(caseNumber),IR.block());
      enclosingBlock=newCase.getLastChild();
      if (oldCase.isTry()) {
        oldCase=oldCase.getParent().getParent();
        if (!currentExceptionContext.isEmpty()) {
          Node newTry=IR.tryCatch(IR.block(),currentExceptionContext.get(0).catchBlock.cloneTree());
          newCase.getLastChild().addChildToBack(newTry);
          enclosingBlock=newCase.getLastChild().getLastChild().getFirstChild();
        }
      }
      oldCase.getParent().addChildAfter(newCase,oldCase);
    }
  }
  parent.useSourceInfoIfMissingFromForTree(parent);
  compiler.reportCodeChange();
}
