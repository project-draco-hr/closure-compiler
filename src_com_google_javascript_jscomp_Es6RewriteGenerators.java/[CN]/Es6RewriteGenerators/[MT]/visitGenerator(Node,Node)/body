{
  Node genBlock=compiler.parseSyntheticCode(Joiner.on('\n').join("{","  return {" + ITER_KEY + ": function() {","    var " + GENERATOR_STATE + " = "+ generatorCaseCount+ ";","    return { next: function() {","      while (1) switch (" + GENERATOR_STATE + ") {","        case " + generatorCaseCount + ":","        default:","          return {value: undefined, done: true};","      }","    }}","  }}","}")).removeFirstChild();
  generatorCaseCount++;
  Node genFunc=IR.function(n.removeFirstChild(),n.removeFirstChild(),genBlock);
  JSDocInfoBuilder genDoc;
  if (n.getJSDocInfo() == null) {
    genDoc=new JSDocInfoBuilder(true);
  }
 else {
    genDoc=JSDocInfoBuilder.copyFrom(n.getJSDocInfo());
  }
  genDoc.recordSuppressions(ImmutableSet.of("uselessCode"));
  JSDocInfo genInfo=genDoc.build(genFunc);
  genFunc.setJSDocInfo(genInfo);
  originalGeneratorBody=n.getFirstChild();
  originalGeneratorBody.addChildToBack(IR.exprResult(IR.assign(IR.name(GENERATOR_STATE),IR.number(-1))));
  enclosingCase=getUnique(genBlock,Token.CASE);
  hoistRoot=getUnique(genBlock,Token.VAR);
  while (originalGeneratorBody.hasChildren()) {
    currentStatement=originalGeneratorBody.removeFirstChild();
    boolean advanceCase=translateStatementInOriginalBody();
    if (advanceCase) {
      int caseNumber;
      if (currentStatement.isGeneratorMarker()) {
        caseNumber=(int)currentStatement.getDouble();
      }
 else {
        caseNumber=generatorCaseCount;
        generatorCaseCount++;
      }
      Node newCase=IR.caseNode(IR.number(caseNumber),IR.block());
      enclosingCase.getParent().addChildAfter(newCase,enclosingCase);
      enclosingCase=newCase;
    }
  }
  parent.replaceChild(n,genFunc);
  parent.useSourceInfoIfMissingFromForTree(parent);
  compiler.reportCodeChange();
}
