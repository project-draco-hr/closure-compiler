{
switch (n.getType()) {
case Token.FUNCTION:
    if (n.isGeneratorFunction()) {
      generatorCaseCount=0;
      visitGenerator(n,parent);
    }
  break;
case Token.NAME:
Node enclosing=NodeUtil.getEnclosingFunction(n);
if (enclosing != null && enclosing.isGeneratorFunction() && n.matchesQualifiedName("arguments")) {
n.setString(GENERATOR_ARGUMENTS);
}
break;
case Token.YIELD:
if (n.isYieldFor()) {
visitYieldFor(n,parent);
}
 else if (!parent.isExprResult()) {
visitYieldExpr(n,parent);
}
break;
case Token.LABEL:
enclosing=NodeUtil.getEnclosingFunction(n);
if (enclosing != null && enclosing.isGeneratorFunction()) {
compiler.report(JSError.make(n,Es6ToEs3Converter.CANNOT_CONVERT_YET,"Labels in generator functions"));
}
break;
}
}
