{
  Node enclosingFunc=NodeUtil.getEnclosingFunction(n);
  if (enclosingFunc == null || !enclosingFunc.isGeneratorFunction() || NodeUtil.isForIn(n)) {
    return;
  }
  Node enclosingBlock=NodeUtil.getEnclosingBlock(n);
  Node guard=null;
  Node incr=null;
switch (n.getToken()) {
case FOR:
    guard=n.getSecondChild();
  incr=guard.getNext();
break;
case WHILE:
guard=n.getFirstChild();
incr=IR.empty();
break;
case DO:
guard=n.getLastChild();
if (!guard.isEmpty()) {
Node firstEntry=IR.name(GENERATOR_DO_WHILE_INITIAL);
enclosingBlock.addChildToFront(IR.var(firstEntry.cloneTree(),IR.trueNode()));
guard=IR.or(firstEntry,n.getLastChild().detachFromParent());
n.addChildToBack(guard);
}
incr=IR.empty();
break;
default :
break;
}
if (!controlCanExit(guard) && !controlCanExit(incr)) {
return;
}
Node guardName=IR.name(GENERATOR_LOOP_GUARD + generatorCounter.get());
if (!guard.isEmpty()) {
Node container=new Node(Token.BLOCK);
n.replaceChild(guard,container);
container.addChildToFront(IR.block(IR.exprResult(IR.assign(guardName.cloneTree(),guard.cloneTree()))));
container.addChildToBack(guardName.cloneTree());
}
if (!incr.isEmpty()) {
n.addChildBefore(IR.block(IR.exprResult(incr.detachFromParent())),n.getLastChild());
}
enclosingBlock.addChildToFront(IR.var(guardName));
compiler.reportCodeChange();
}
