{
switch (n.getToken()) {
case FUNCTION:
    return false;
case LABEL:
  labels.add(0,n.getFirstChild().getString());
break;
case DO:
case WHILE:
case FOR:
continueCatchers++;
breakCatchers++;
break;
case SWITCH:
breakCatchers++;
break;
case BLOCK:
parent=n.getParent();
if (parent != null && parent.isTry() && parent.getFirstChild() == n && n.getNext().hasChildren()) {
throwCatchers++;
}
break;
case BREAK:
if (!n.isGeneratorSafe() && ((breakCatchers == 0 && !n.hasChildren()) || (n.hasChildren() && !labels.contains(n.getFirstChild().getString())))) {
exited=true;
if (addJumps) {
parent.addChildBefore(createFinallyJumpBlock(finallyName,finallyStartState),n);
}
}
break;
case CONTINUE:
if (continueCatchers == 0 || (n.hasChildren() && !labels.contains(n.getFirstChild().getString()))) {
exited=true;
if (addJumps) {
parent.addChildBefore(createFinallyJumpBlock(finallyName,finallyStartState),n);
}
}
break;
case THROW:
if (throwCatchers == 0) {
exited=true;
if (addJumps && !n.isGeneratorSafe()) {
parent.addChildBefore(createFinallyJumpBlock(finallyName,finallyStartState),n);
}
}
break;
case RETURN:
exited=true;
if (addJumps) {
parent.addChildBefore(createFinallyJumpBlock(finallyName,finallyStartState),n);
}
break;
case YIELD:
exited=true;
break;
default :
break;
}
return true;
}
