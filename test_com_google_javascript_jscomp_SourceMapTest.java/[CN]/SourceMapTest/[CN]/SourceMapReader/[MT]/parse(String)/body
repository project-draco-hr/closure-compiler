{
  ParseState parser=new ParseState(contents);
  characterMap=LinkedListMultimap.create();
  mappings=Maps.newHashMap();
  try {
    parser.consume(LINEMAP_HEADER);
    String countJSON=parser.consumeUntilEOL();
    JSONObject countObject=new JSONObject(countJSON);
    if (!countObject.has("count")) {
      parser.fail("Missing 'count'");
    }
    int lineCount=countObject.getInt("count");
    if (lineCount <= 0) {
      parser.fail("Count must be >= 1");
    }
    for (int i=0; i < lineCount; ++i) {
      String currentLine=parser.consumeUntilEOL();
      if (currentLine.isEmpty()) {
        continue;
      }
      JSONArray charArray=new JSONArray(currentLine);
      int lastID=-1;
      for (int j=0; j < charArray.length(); ++j) {
        int mappingID=lastID;
        if (!charArray.isNull(j)) {
          mappingID=charArray.optInt(j);
        }
        characterMap.put(i,mappingID);
        lastID=mappingID;
      }
    }
    parser.consume(FILEINFO_HEADER);
    if (parser.consumeUntilEOL().length() > 0) {
      parser.fail("Unexpected token after file information header");
    }
    for (int i=0; i < lineCount; ++i) {
      parser.consumeUntilEOL();
    }
    parser.consume(DEFINITION_HEADER);
    if (parser.consumeUntilEOL().length() > 0) {
      parser.fail("Unexpected token after definition header");
    }
    String currentLine=null;
    for (int mappingID=0; (currentLine=parser.consumeUntilEOL()).length() > 0; ++mappingID) {
      JSONArray mapArray=new JSONArray(currentLine);
      if (mapArray.length() < 3) {
        parser.fail("Invalid mapping array");
      }
      OriginalMapping mapping=new OriginalMapping(mapArray.getString(0),mapArray.getInt(1),mapArray.getInt(2),mapArray.optString(3,""));
      mappings.put(mappingID,mapping);
    }
  }
 catch (  JSONException ex) {
    parser.fail("JSON parse exception: " + ex);
  }
}
