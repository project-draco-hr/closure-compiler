{
  ExecutorService executor=Executors.newCachedThreadPool();
  NodeRunner node1=new NodeRunner(js1);
  NodeRunner node2=new NodeRunner(js2);
  String[] output1=null, output2=null;
  try {
    List<Future<String[]>> futures=executor.invokeAll(Lists.newArrayList(node1,node2),maxASTSize,TimeUnit.MILLISECONDS);
    Future<String[]> future1=futures.get(0);
    if (!future1.isCancelled()) {
      output1=future1.get();
    }
    Future<String[]> future2=futures.get(1);
    if (!future2.isCancelled()) {
      output2=future2.get();
    }
  }
 catch (  InterruptedException e) {
    getLogger().log(Level.INFO,"Timeout in executing JavaScript",e);
  }
catch (  ExecutionException e) {
    getLogger().log(Level.SEVERE,"Error in executing JavaScript",e);
  }
 finally {
    node1.process.destroy();
    node2.process.destroy();
  }
  if (output1 == null && output2 == null) {
    getLogger().info("Infinite loop!");
    return true;
  }
 else   if (NodeRunner.isSame(output1,output2)) {
    boolean hasError=false;
    if (output1 != null && output1[1].length() > 0) {
      getLogger().warning("First JavaScript has a runtime error: " + output1[1]);
      hasError=true;
    }
    if (output2 != null && output2[1].length() > 0) {
      getLogger().warning("Second JavaScript has a runtime error: " + output2[1]);
      hasError=true;
    }
    return !(hasError && getLogger().getLevel().intValue() < Level.WARNING.intValue());
  }
 else {
    StringBuilder sb=new StringBuilder("Different outputs!");
    sb.append("\nOutput 1:");
    if (output1 != null) {
      sb.append(output1[0]).append(output1[1]);
    }
 else {
      sb.append("null");
    }
    sb.append("\nOutput 2:");
    if (output2 != null) {
      sb.append(output2[0]).append(output2[1]);
    }
 else {
      sb.append("null");
    }
    getLogger().severe(sb.toString());
    return false;
  }
}
