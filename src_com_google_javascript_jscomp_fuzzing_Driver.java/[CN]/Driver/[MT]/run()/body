{
  if (seed != -1) {
    numberOfRuns=1;
  }
  long currentSeed;
  for (int i=0; numberOfRuns == -1 || i < numberOfRuns; i++) {
    currentSeed=seed == -1 ? System.currentTimeMillis() : seed;
    getLogger().info("Running fuzzer [" + i + " of "+ numberOfRuns+ "]");
    Random random=currentSeed == -1 ? new Random(currentSeed) : new Random(currentSeed);
    Node script=fuzz(random);
    if (script == null) {
      if (stopOnError) {
        break;
      }
    }
    String code1=ScriptFuzzer.getPrettyCode(script);
    StringBuffer debugInfo=new StringBuffer("Seed: ").append(currentSeed);
    debugInfo.append("\nJavaScript: ").append(code1);
    try {
      Result result=compile(script);
      if (result.success) {
        if (result.warnings.length == 0) {
          getLogger().info(debugInfo.toString());
        }
 else {
          getLogger().warning(debugInfo.toString());
        }
      }
 else {
        getLogger().severe(debugInfo.toString());
        if (stopOnError) {
          break;
        }
      }
    }
 catch (    Exception e) {
      getLogger().log(Level.SEVERE,"Compiler Crashed!",e);
      getLogger().severe(debugInfo.toString());
      if (stopOnError) {
        break;
      }
    }
    String code2=ScriptFuzzer.getPrettyCode(script);
    debugInfo.append("\nCompiled Code: " + code2);
    if (execute) {
      if (!executeJS(code1,code2)) {
        getLogger().severe(debugInfo.toString());
        if (stopOnError) {
          break;
        }
      }
    }
  }
}
