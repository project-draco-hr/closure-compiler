{
  if (getsTypeInfoFromParentMethod) {
    return new DeclaredFunctionType(superType.requiredFormals,superType.optionalFormals,superType.restFormals,superType.returnType,superType.nominalType,this.receiverType,superType.typeParameters);
  }
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  int i=0;
  for (  JSType formal : requiredFormals) {
    builder.addReqFormal(formal != null ? formal : superType.getFormalType(i));
    i++;
  }
  for (  JSType formal : optionalFormals) {
    builder.addOptFormal(formal != null ? formal : superType.getFormalType(i));
    i++;
  }
  if (restFormals != null) {
    builder.addRestFormals(restFormals);
  }
 else   if (superType.hasRestFormals()) {
    builder.addRestFormals(superType.restFormals);
  }
  builder.addRetType(returnType != null ? returnType : superType.returnType);
  builder.addNominalType(nominalType);
  builder.addReceiverType(receiverType);
  if (!typeParameters.isEmpty()) {
    builder.addTypeParameters(typeParameters);
  }
 else   if (!superType.typeParameters.isEmpty()) {
    builder.addTypeParameters(superType.typeParameters);
  }
  return builder.buildDeclaration();
}
