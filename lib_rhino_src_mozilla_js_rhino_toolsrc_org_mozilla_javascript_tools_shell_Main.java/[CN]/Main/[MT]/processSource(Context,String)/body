{
  if (filename == null || filename.equals("-")) {
    PrintStream ps=global.getErr();
    if (filename == null) {
      ps.println(cx.getImplementationVersion());
    }
    cx.setOptimizationLevel(-1);
    String charEnc=shellContextFactory.getCharacterEncoding();
    if (charEnc == null) {
      charEnc=System.getProperty("file.encoding");
    }
    BufferedReader in;
    try {
      in=new BufferedReader(new InputStreamReader(global.getIn(),charEnc));
    }
 catch (    UnsupportedEncodingException e) {
      throw new UndeclaredThrowableException(e);
    }
    int lineno=1;
    boolean hitEOF=false;
    while (!hitEOF) {
      String[] prompts=global.getPrompts(cx);
      if (filename == null)       ps.print(prompts[0]);
      ps.flush();
      String source="";
      while (true) {
        String newline;
        try {
          newline=in.readLine();
        }
 catch (        IOException ioe) {
          ps.println(ioe.toString());
          break;
        }
        if (newline == null) {
          hitEOF=true;
          break;
        }
        source=source + newline + "\n";
        lineno++;
        if (cx.stringIsCompilableUnit(source))         break;
        ps.print(prompts[1]);
      }
      Script script=loadScriptFromSource(cx,source,"<stdin>",lineno,null);
      if (script != null) {
        Object result=evaluateScript(script,cx,global);
        if (result != Context.getUndefinedValue() && !(result instanceof Function && source.trim().startsWith("function"))) {
          try {
            ps.println(Context.toString(result));
          }
 catch (          RhinoException rex) {
            ToolErrorReporter.reportException(cx.getErrorReporter(),rex);
          }
        }
        NativeArray h=global.history;
        h.put((int)h.getLength(),h,source);
      }
    }
    ps.println();
  }
 else {
    processFile(cx,global,filename);
  }
}
