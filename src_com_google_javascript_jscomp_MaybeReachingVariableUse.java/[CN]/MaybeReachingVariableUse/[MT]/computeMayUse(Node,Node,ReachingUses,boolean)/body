{
switch (n.getType()) {
case Token.BLOCK:
case Token.FUNCTION:
    return;
case Token.NAME:
  addToUseIfLocal(n.getString(),cfgNode,output);
return;
case Token.WHILE:
case Token.DO:
case Token.IF:
computeMayUse(NodeUtil.getConditionExpression(n),cfgNode,output,conditional);
return;
case Token.FOR:
if (!NodeUtil.isForIn(n)) {
computeMayUse(NodeUtil.getConditionExpression(n),cfgNode,output,conditional);
}
 else {
Node lhs=n.getFirstChild();
Node rhs=lhs.getNext();
if (NodeUtil.isVar(lhs)) {
lhs=lhs.getLastChild();
}
if (NodeUtil.isName(lhs) && !conditional) {
removeFromUseIfLocal(lhs.getString(),output);
}
computeMayUse(rhs,cfgNode,output,conditional);
}
return;
case Token.AND:
case Token.OR:
computeMayUse(n.getLastChild(),cfgNode,output,true);
computeMayUse(n.getFirstChild(),cfgNode,output,conditional);
return;
case Token.HOOK:
computeMayUse(n.getLastChild(),cfgNode,output,true);
computeMayUse(n.getFirstChild().getNext(),cfgNode,output,true);
computeMayUse(n.getFirstChild(),cfgNode,output,conditional);
return;
case Token.VAR:
Node varName=n.getFirstChild();
Preconditions.checkState(n.hasChildren(),"AST should be normalized");
if (varName.hasChildren()) {
computeMayUse(varName.getFirstChild(),cfgNode,output,conditional);
if (!conditional) {
removeFromUseIfLocal(varName.getString(),output);
}
}
return;
default :
if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {
Node name=n.getFirstChild();
if (!conditional) {
removeFromUseIfLocal(name.getString(),output);
}
if (!NodeUtil.isAssign(n)) {
addToUseIfLocal(name.getString(),cfgNode,output);
}
computeMayUse(name.getNext(),cfgNode,output,conditional);
}
 else {
for (Node c=n.getLastChild(); c != null; c=n.getChildBefore(c)) {
computeMayUse(c,cfgNode,output,conditional);
}
}
}
}
