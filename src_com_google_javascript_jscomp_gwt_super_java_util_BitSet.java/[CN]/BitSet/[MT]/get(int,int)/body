{
  checkRange(fromIndex,toIndex);
  toIndex=Math.min(toIndex,length());
  int rightShift=bitOffset(fromIndex);
  if (rightShift == 0) {
    int subFrom=wordIndex(fromIndex);
    int subTo=wordIndex(toIndex + 31);
    JsArrayInteger subSet=slice(array,subFrom,subTo);
    int leftOvers=bitOffset(toIndex);
    if (leftOvers != 0) {
      maskOutWord(subSet,subTo - subFrom - 1,leftOvers,32);
    }
    return new BitSet(subSet);
  }
  BitSet subSet=new BitSet();
  int first=wordIndex(fromIndex);
  int last=wordIndex(toIndex);
  if (first == last) {
    int end=32 - (bitOffset(toIndex));
    int word=getWord(array,first);
    word=((word << end) >>> end) >>> rightShift;
    if (word != 0) {
      subSet.set(0,word);
    }
  }
 else {
    int current=0;
    int subIndex=0;
    int word=getWord(array,first++);
    current=word >>> rightShift;
    int leftShift=32 - rightShift;
    for (int i=first; i <= last; i++) {
      word=getWord(array,i);
      current|=word << leftShift;
      if (current != 0) {
        subSet.array.set(subIndex,current);
      }
      subIndex++;
      current=word >>> rightShift;
    }
    int end=32 - (bitOffset(toIndex));
    current=(current << (rightShift + end)) >>> (rightShift + end);
    if (current != 0) {
      subSet.array.set(subIndex,current);
    }
  }
  return subSet;
}
