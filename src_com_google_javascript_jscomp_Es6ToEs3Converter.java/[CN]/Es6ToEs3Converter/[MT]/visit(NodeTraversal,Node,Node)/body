{
switch (n.getType()) {
case Token.OBJECTLIT:
    for (    Node child : n.children()) {
      if (child.isComputedProp()) {
        visitObjectWithComputedProperty(n,parent);
        break;
      }
    }
  break;
case Token.MEMBER_DEF:
if (parent.isObjectLit()) {
  visitMemberDefInObjectLit(n,parent);
}
break;
case Token.FOR_OF:
visitForOf(n,parent);
break;
case Token.SUPER:
visitSuper(n,parent);
break;
case Token.STRING_KEY:
visitStringKey(n);
break;
case Token.CLASS:
for (Node member=n.getLastChild().getFirstChild(); member != null; member=member.getNext()) {
if (member.isGetterDef() || member.isSetterDef() || member.getBooleanProp(Node.COMPUTED_PROP_GETTER)|| member.getBooleanProp(Node.COMPUTED_PROP_SETTER)) {
cannotConvert(member,"getters or setters in class definitions");
return;
}
}
visitClass(n,parent);
break;
case Token.ARRAYLIT:
case Token.NEW:
case Token.CALL:
for (Node child : n.children()) {
if (child.isSpread()) {
visitArrayLitOrCallWithSpread(n,parent);
break;
}
}
break;
case Token.TEMPLATELIT:
Es6TemplateLiterals.visitTemplateLiteral(t,n);
break;
case Token.ARRAY_PATTERN:
visitArrayPattern(t,n,parent);
break;
case Token.OBJECT_PATTERN:
visitObjectPattern(t,n,parent);
break;
}
}
