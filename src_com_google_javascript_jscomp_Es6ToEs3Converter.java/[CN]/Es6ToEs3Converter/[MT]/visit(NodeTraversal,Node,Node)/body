{
switch (n.getToken()) {
case NAME:
    if (!n.isFromExterns() && isGlobalSymbol(t,n)) {
      initSymbolBefore(n);
    }
  break;
case GETPROP:
if (!n.isFromExterns()) {
  visitGetprop(t,n);
}
break;
case OBJECTLIT:
visitObject(n);
break;
case MEMBER_FUNCTION_DEF:
if (parent.isObjectLit()) {
visitMemberFunctionDefInObjectLit(n,parent);
}
break;
case FOR_OF:
visitForOf(n,parent);
break;
case STRING_KEY:
visitStringKey(n);
break;
case CLASS:
visitClass(n,parent);
break;
case ARRAYLIT:
case NEW:
case CALL:
for (Node child : n.children()) {
if (child.isSpread()) {
visitArrayLitOrCallWithSpread(n,parent);
break;
}
}
break;
case TAGGED_TEMPLATELIT:
Es6TemplateLiterals.visitTaggedTemplateLiteral(t,n);
break;
case TEMPLATELIT:
if (!parent.isTaggedTemplateLit()) {
Es6TemplateLiterals.visitTemplateLiteral(t,n);
}
break;
case EXPONENT:
visitExponentiationExpression(n,parent);
break;
case ASSIGN_EXPONENT:
visitExponentiationAssignmentExpression(n,parent);
break;
default :
break;
}
}
