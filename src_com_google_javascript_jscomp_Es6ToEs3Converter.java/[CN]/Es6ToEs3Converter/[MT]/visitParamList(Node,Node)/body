{
  Node insertSpot=null;
  Node block=function.getLastChild();
  for (int i=0; i < paramList.getChildCount(); i++) {
    Node param=paramList.getChildAtIndex(i);
    if (param.isDefaultValue()) {
      Node nameOrPattern=param.removeFirstChild();
      Node defaultValue=param.removeFirstChild();
      Node newParam;
      boolean isNoop=false;
      if (!nameOrPattern.isName()) {
      }
 else       if (defaultValue.isName()) {
        isNoop="undefined".equals(defaultValue.getString());
      }
 else       if (defaultValue.isVoid()) {
        isNoop=NodeUtil.isImmutableValue(defaultValue.getFirstChild());
      }
      if (isNoop) {
        newParam=nameOrPattern.cloneTree();
      }
 else {
        newParam=nameOrPattern.isName() ? nameOrPattern : IR.name(DESTRUCTURING_TEMP_VAR + (destructuringVarCounter++));
        Node lhs=nameOrPattern.cloneTree();
        Node rhs=defaultValueHook(newParam.cloneTree(),defaultValue);
        Node newStatement=nameOrPattern.isName() ? IR.exprResult(IR.assign(lhs,rhs)) : IR.var(lhs,rhs);
        newStatement.useSourceInfoIfMissingFromForTree(param);
        block.addChildAfter(newStatement,insertSpot);
        insertSpot=newStatement;
      }
      paramList.replaceChild(param,newParam);
      newParam.setOptionalArg(true);
      compiler.reportCodeChange();
    }
 else     if (param.isRest()) {
      param.setType(Token.NAME);
      param.setVarArgs(true);
      String paramName=param.getString();
      Node newBlock=IR.block().useSourceInfoFrom(block);
      Node name=IR.name(paramName);
      Node let=IR.let(name,IR.name(REST_PARAMS)).useSourceInfoIfMissingFromForTree(block);
      newBlock.addChildToFront(let);
      if (insertSpot != null) {
        for (Node statement=insertSpot.getNext(); statement != null; statement=statement.getNext()) {
          newBlock.addChildToBack(statement.detachFromParent());
        }
      }
 else {
        for (        Node child : block.children()) {
          newBlock.addChildToBack(child.detachFromParent());
        }
      }
      JSTypeExpression type=null;
      JSDocInfo info=param.getJSDocInfo();
      if (info != null) {
        type=info.getType();
      }
 else {
        JSDocInfo functionInfo=function.getJSDocInfo();
        if (functionInfo != null) {
          type=functionInfo.getParameterType(paramName);
        }
      }
      if (type != null) {
        Node arrayType=IR.string("Array");
        Node typeNode=type.getRoot();
        if (typeNode.getType() != Token.ELLIPSIS) {
          compiler.report(JSError.make(typeNode,BAD_REST_PARAMETER_ANNOTATION));
        }
        Node memberType=typeNode.getType() == Token.ELLIPSIS ? typeNode.getFirstChild().cloneNode() : typeNode.cloneNode();
        arrayType.addChildToFront(new Node(Token.BLOCK,memberType).copyInformationFrom(typeNode));
        JSDocInfoBuilder builder=new JSDocInfoBuilder(false);
        builder.recordType(new JSTypeExpression(new Node(Token.BANG,arrayType),param.getSourceFileName()));
        name.setJSDocInfo(builder.build());
      }
      Node newArr=IR.var(IR.name(REST_PARAMS),IR.arraylit());
      block.addChildAfter(newArr.useSourceInfoIfMissingFromForTree(param),insertSpot);
      Node init=IR.var(IR.name(REST_INDEX),IR.number(i));
      Node cond=IR.lt(IR.name(REST_INDEX),IR.getprop(IR.name("arguments"),IR.string("length")));
      Node incr=IR.inc(IR.name(REST_INDEX),false);
      Node body=IR.block(IR.exprResult(IR.assign(IR.getelem(IR.name(REST_PARAMS),IR.sub(IR.name(REST_INDEX),IR.number(i))),IR.getelem(IR.name("arguments"),IR.name(REST_INDEX)))));
      block.addChildAfter(IR.forNode(init,cond,incr,body).useSourceInfoIfMissingFromForTree(param),newArr);
      block.addChildToBack(newBlock);
      compiler.reportCodeChange();
    }
 else     if (param.isDestructuringPattern()) {
      String tempVarName=DESTRUCTURING_TEMP_VAR + (destructuringVarCounter++);
      paramList.replaceChild(param,IR.name(tempVarName));
      Node newDecl=IR.var(param,IR.name(tempVarName));
      block.addChildAfter(newDecl,insertSpot);
      insertSpot=newDecl;
    }
  }
}
