{
  Node insertSpot=null;
  Node block=function.getLastChild();
  for (int i=0; i < paramList.getChildCount(); i++) {
    Node param=paramList.getChildAtIndex(i);
    if (param.isDefaultValue()) {
      Node nameOrPattern=param.removeFirstChild();
      Node defaultValue=param.removeFirstChild();
      Node newParam;
      boolean isNoop=false;
      if (!nameOrPattern.isName()) {
      }
 else       if (defaultValue.isName()) {
        isNoop="undefined".equals(defaultValue.getString());
      }
 else       if (defaultValue.isVoid()) {
        isNoop=NodeUtil.isImmutableValue(defaultValue.getFirstChild());
      }
      if (isNoop) {
        newParam=nameOrPattern.cloneTree();
      }
 else {
        newParam=nameOrPattern.isName() ? nameOrPattern : IR.name(DESTRUCTURING_TEMP_VAR + (destructuringVarCounter++));
        Node lhs=nameOrPattern.cloneTree();
        Node rhs=defaultValueHook(newParam.cloneTree(),defaultValue);
        Node newStatement=nameOrPattern.isName() ? IR.exprResult(IR.assign(lhs,rhs)) : IR.var(lhs,rhs);
        newStatement.useSourceInfoIfMissingFromForTree(param);
        block.addChildAfter(newStatement,insertSpot);
        insertSpot=newStatement;
      }
      paramList.replaceChild(param,newParam);
      newParam.setOptionalArg(true);
      compiler.reportCodeChange();
    }
 else     if (param.isRest()) {
      param.setType(Token.NAME);
      param.setVarArgs(true);
      Node newArr=IR.exprResult(IR.assign(IR.name(param.getString()),IR.call(IR.getprop(IR.getprop(IR.arraylit(),IR.string("slice")),IR.string("call")),IR.name("arguments"),IR.number(i))));
      block.addChildAfter(newArr.useSourceInfoIfMissingFromForTree(param),insertSpot);
      compiler.reportCodeChange();
    }
 else     if (param.isDestructuringPattern()) {
      String tempVarName=DESTRUCTURING_TEMP_VAR + (destructuringVarCounter++);
      paramList.replaceChild(param,IR.name(tempVarName));
      Node newDecl=IR.var(param,IR.name(tempVarName));
      block.addChildAfter(newDecl,insertSpot);
      insertSpot=newDecl;
    }
  }
}
