{
  checkClassReassignment(classNode);
  ClassDeclarationMetadata metadata=ClassDeclarationMetadata.create(classNode,parent);
  if (metadata == null || metadata.fullClassName == null) {
    cannotConvert(parent,"Can only convert classes that are declarations or the right hand" + " side of a simple assignment.");
    return;
  }
  if (metadata.hasSuperClass() && !metadata.superClassNameNode.isQualifiedName()) {
    compiler.report(JSError.make(metadata.superClassNameNode,DYNAMIC_EXTENDS_TYPE));
    return;
  }
  Preconditions.checkState(NodeUtil.isStatement(metadata.insertionPoint),"insertion point must be a statement: %s",metadata.insertionPoint);
  Node constructor=null;
  JSDocInfo ctorJSDocInfo=null;
  Node classMembers=classNode.getLastChild();
  for (  Node member : classMembers.children()) {
    if ((member.isComputedProp() && (member.getBooleanProp(Node.COMPUTED_PROP_GETTER) || member.getBooleanProp(Node.COMPUTED_PROP_SETTER))) || (member.isGetterDef() || member.isSetterDef())) {
      visitComputedPropInClass(member,metadata);
    }
 else     if (member.isMemberFunctionDef() && member.getString().equals("constructor")) {
      ctorJSDocInfo=member.getJSDocInfo();
      constructor=member.getFirstChild().detachFromParent();
      if (!metadata.anonymous) {
        constructor.replaceChild(constructor.getFirstChild(),metadata.classNameNode.cloneNode());
      }
    }
 else     if (member.isEmpty()) {
    }
 else {
      Preconditions.checkState(member.isMemberFunctionDef() || member.isComputedProp(),"Unexpected class member:",member);
      Preconditions.checkState(!member.getBooleanProp(Node.COMPUTED_PROP_VARIABLE),"Member variables should have been transpiled earlier:",member);
      visitClassMember(member,metadata);
    }
  }
  addDeclarations(metadata);
  if (metadata.definePropertiesObjForPrototype.hasChildren()) {
    Node definePropsCall=IR.exprResult(IR.call(NodeUtil.newQName(compiler,"Object.defineProperties"),NodeUtil.newQName(compiler,metadata.fullClassName + ".prototype"),metadata.definePropertiesObjForPrototype));
    definePropsCall.useSourceInfoIfMissingFromForTree(classNode);
    metadata.insertNodeAndAdvance(definePropsCall);
    visitObject(metadata.definePropertiesObjForPrototype);
  }
  if (metadata.definePropertiesObjForClass.hasChildren()) {
    Node definePropsCall=IR.exprResult(IR.call(NodeUtil.newQName(compiler,"Object.defineProperties"),NodeUtil.newQName(compiler,metadata.fullClassName),metadata.definePropertiesObjForClass));
    definePropsCall.useSourceInfoIfMissingFromForTree(classNode);
    metadata.insertNodeAndAdvance(definePropsCall);
    visitObject(metadata.definePropertiesObjForClass);
  }
  Preconditions.checkNotNull(constructor);
  JSDocInfo classJSDoc=NodeUtil.getBestJSDocInfo(classNode);
  JSDocInfoBuilder newInfo=JSDocInfoBuilder.maybeCopyFrom(classJSDoc);
  newInfo.recordConstructor();
  if (metadata.hasSuperClass()) {
    String superClassString=metadata.superClassNameNode.getQualifiedName();
    if (newInfo.isInterfaceRecorded()) {
      newInfo.recordExtendedInterface(new JSTypeExpression(new Node(Token.BANG,IR.string(superClassString)),metadata.superClassNameNode.getSourceFileName()));
    }
 else {
      if (!classNode.isFromExterns()) {
        Node inherits=IR.call(NodeUtil.newQName(compiler,INHERITS),NodeUtil.newQName(compiler,metadata.fullClassName),NodeUtil.newQName(compiler,superClassString));
        Node inheritsCall=IR.exprResult(inherits);
        compiler.needsEs6Runtime=true;
        inheritsCall.useSourceInfoIfMissingFromForTree(classNode);
        Node enclosingStatement=NodeUtil.getEnclosingStatement(classNode);
        enclosingStatement.getParent().addChildAfter(inheritsCall,enclosingStatement);
      }
      newInfo.recordBaseType(new JSTypeExpression(new Node(Token.BANG,IR.string(superClassString)),metadata.superClassNameNode.getSourceFileName()));
    }
  }
  if (!newInfo.isUnrestrictedRecorded() && !newInfo.isDictRecorded() && !newInfo.isStructRecorded()) {
    newInfo.recordStruct();
  }
  if (ctorJSDocInfo != null) {
    if (!ctorJSDocInfo.getSuppressions().isEmpty()) {
      newInfo.recordSuppressions(ctorJSDocInfo.getSuppressions());
    }
    for (    String param : ctorJSDocInfo.getParameterNames()) {
      newInfo.recordParameter(param,ctorJSDocInfo.getParameterType(param));
      newInfo.recordParameterDescription(param,ctorJSDocInfo.getDescriptionForParameter(param));
    }
    for (    JSTypeExpression thrown : ctorJSDocInfo.getThrownTypes()) {
      newInfo.recordThrowType(thrown);
      newInfo.recordThrowDescription(thrown,ctorJSDocInfo.getThrowsDescriptionForType(thrown));
    }
    JSDocInfo.Visibility visibility=ctorJSDocInfo.getVisibility();
    if (visibility != null && visibility != JSDocInfo.Visibility.INHERITED) {
      newInfo.recordVisibility(visibility);
    }
    if (ctorJSDocInfo.isDeprecated()) {
      newInfo.recordDeprecated();
    }
    if (ctorJSDocInfo.getDeprecationReason() != null && !newInfo.isDeprecationReasonRecorded()) {
      newInfo.recordDeprecationReason(ctorJSDocInfo.getDeprecationReason());
    }
    newInfo.mergePropertyBitfieldFrom(ctorJSDocInfo);
    for (    String templateType : ctorJSDocInfo.getTemplateTypeNames()) {
      newInfo.recordTemplateTypeName(templateType);
    }
  }
  if (NodeUtil.isStatement(classNode)) {
    constructor.getFirstChild().setString("");
    Node ctorVar=IR.let(metadata.classNameNode.cloneNode(),constructor);
    ctorVar.useSourceInfoIfMissingFromForTree(classNode);
    parent.replaceChild(classNode,ctorVar);
  }
 else {
    parent.replaceChild(classNode,constructor);
  }
  if (NodeUtil.isStatement(constructor)) {
    constructor.setJSDocInfo(newInfo.build());
  }
 else   if (parent.isName()) {
    Node var=parent.getParent();
    var.setJSDocInfo(newInfo.build());
  }
 else   if (constructor.getParent().isName()) {
    Node var=constructor.getParent().getParent();
    var.setJSDocInfo(newInfo.build());
  }
 else   if (parent.isAssign()) {
    parent.setJSDocInfo(newInfo.build());
  }
 else {
    throw new IllegalStateException("Unexpected parent node " + parent);
  }
  compiler.reportCodeChange();
}
