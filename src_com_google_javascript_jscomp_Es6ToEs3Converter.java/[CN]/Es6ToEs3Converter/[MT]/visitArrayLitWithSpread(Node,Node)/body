{
  List<Node> groups=new ArrayList<>();
  Node currGroup=null;
  Node currElement=array.removeFirstChild();
  while (currElement != null) {
    if (currElement.isSpread()) {
      if (currGroup != null) {
        groups.add(currGroup);
        currGroup=null;
      }
      groups.add(currElement.removeFirstChild());
    }
 else {
      if (currGroup == null) {
        currGroup=IR.arraylit();
      }
      currGroup.addChildToBack(currElement);
    }
    currElement=array.removeFirstChild();
  }
  if (currGroup != null) {
    groups.add(currGroup);
  }
  Node result=null;
  if (groups.size() == 1) {
    result=IR.call(IR.getprop(groups.get(0),IR.string("slice")),IR.number(0));
  }
 else {
    result=IR.call(IR.getprop(groups.get(0),IR.string("concat")),groups.subList(1,groups.size()).toArray(new Node[groups.size() - 1]));
  }
  result.useSourceInfoIfMissingFromForTree(array);
  parent.replaceChild(array,result);
  compiler.reportCodeChange();
}
