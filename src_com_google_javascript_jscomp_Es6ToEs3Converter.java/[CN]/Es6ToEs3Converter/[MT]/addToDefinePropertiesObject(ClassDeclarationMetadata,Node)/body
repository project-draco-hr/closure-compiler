{
  Node obj=member.isStaticMember() ? metadata.definePropertiesObjForClass : metadata.definePropertiesObjForPrototype;
  Node prop=member.isComputedProp() ? NodeUtil.getFirstComputedPropMatchingKey(obj,member.getFirstChild()) : NodeUtil.getFirstPropMatchingKey(obj,member.getString());
  if (prop == null) {
    prop=IR.objectlit(IR.stringKey("configurable",IR.trueNode()),IR.stringKey("enumerable",IR.trueNode()));
    if (member.isComputedProp()) {
      obj.addChildToBack(IR.computedProp(member.getFirstChild().cloneTree(),prop));
    }
 else {
      obj.addChildToBack(IR.stringKey(member.getString(),prop));
    }
  }
  Node function=member.getLastChild();
  JSDocInfoBuilder info=JSDocInfoBuilder.maybeCopyFrom(NodeUtil.getBestJSDocInfo(function));
  info.recordThisType(new JSTypeExpression(new Node(Token.BANG,IR.string(metadata.fullClassName)),member.getSourceFileName()));
  Node stringKey=IR.stringKey((member.isGetterDef() || member.getBooleanProp(Node.COMPUTED_PROP_GETTER)) ? "get" : "set",function.detach());
  stringKey.setJSDocInfo(info.build());
  prop.addChildToBack(stringKey);
  prop.useSourceInfoIfMissingFromForTree(member);
}
