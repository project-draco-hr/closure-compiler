{
  Node variable=node.removeFirstChild();
  Node iterable=node.removeFirstChild();
  Node body=node.removeFirstChild();
  Node iterName=IR.name(ITER_BASE + compiler.getUniqueNameIdSupplier().get());
  iterName.makeNonIndexable();
  Node getNext=IR.call(IR.getprop(iterName.cloneTree(),IR.string("next")));
  String variableName;
  Token declType;
  if (variable.isName()) {
    declType=Token.NAME;
    variableName=variable.getQualifiedName();
  }
 else {
    Preconditions.checkState(NodeUtil.isNameDeclaration(variable),"Expected var, let, or const. Got %s",variable);
    declType=variable.getType();
    variableName=variable.getFirstChild().getQualifiedName();
  }
  Node iterResult=IR.name(ITER_RESULT + variableName);
  iterResult.makeNonIndexable();
  Node init=IR.var(iterName.cloneTree(),makeIterator(compiler,iterable));
  Node initIterResult=iterResult.cloneTree();
  initIterResult.addChildToFront(getNext.cloneTree());
  init.addChildToBack(initIterResult);
  Node cond=IR.not(IR.getprop(iterResult.cloneTree(),IR.string("done")));
  Node incr=IR.assign(iterResult.cloneTree(),getNext.cloneTree());
  Node declarationOrAssign;
  if (declType == Token.NAME) {
    declarationOrAssign=IR.exprResult(IR.assign(IR.name(variableName).useSourceInfoFrom(variable),IR.getprop(iterResult.cloneTree(),IR.string("value"))));
  }
 else {
    declarationOrAssign=new Node(declType,IR.name(variableName).useSourceInfoFrom(variable.getFirstChild()));
    declarationOrAssign.getFirstChild().addChildToBack(IR.getprop(iterResult.cloneTree(),IR.string("value")));
  }
  body.addChildToFront(declarationOrAssign);
  Node newFor=IR.forNode(init,cond,incr,body);
  newFor.useSourceInfoIfMissingFromForTree(node);
  parent.replaceChild(node,newFor);
  compiler.reportCodeChange();
}
