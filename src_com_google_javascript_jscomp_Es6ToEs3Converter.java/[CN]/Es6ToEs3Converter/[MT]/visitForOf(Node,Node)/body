{
  Node variable=node.removeFirstChild();
  Node iterable=node.removeFirstChild();
  Node body=node.removeFirstChild();
  Node iterName=IR.name(ITER_BASE + compiler.getUniqueNameIdSupplier().get());
  Node getNext=IR.call(IR.getprop(iterName.cloneTree(),IR.string("next")));
  String variableName=variable.isName() ? variable.getQualifiedName() : variable.getFirstChild().getQualifiedName();
  Node iterResult=IR.name(ITER_RESULT + variableName);
  Node makeIter=IR.call(NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(),MAKE_ITER),iterable);
  Node init=IR.var(iterName.cloneTree(),makeIter);
  Node initIterResult=iterResult.cloneTree();
  initIterResult.addChildToFront(getNext.cloneTree());
  init.addChildToBack(initIterResult);
  Node cond=IR.not(IR.getprop(iterResult.cloneTree(),IR.string("done")));
  Node incr=IR.assign(iterResult.cloneTree(),getNext.cloneTree());
  body.addChildToFront(IR.var(IR.name(variableName),IR.getprop(iterResult.cloneTree(),IR.string("value"))));
  Node newFor=IR.forNode(init,cond,incr,body);
  newFor.useSourceInfoIfMissingFromForTree(node);
  parent.replaceChild(node,newFor);
  compiler.reportCodeChange();
}
