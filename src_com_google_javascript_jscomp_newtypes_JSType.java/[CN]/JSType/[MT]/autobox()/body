{
  if (isTop() || isUnknown()) {
    return this;
  }
  int mask=getMask();
  if ((mask & (NUMBER_MASK | STRING_MASK | BOOLEAN_MASK| ENUM_MASK)) == BOTTOM_MASK) {
    return this;
  }
switch (mask) {
case NUMBER_MASK:
    return this.commonTypes.getNumberInstance();
case BOOLEAN_MASK:
case TRUE_MASK:
case FALSE_MASK:
  return this.commonTypes.getBooleanInstance();
case STRING_MASK:
return this.commonTypes.getStringInstance();
}
ImmutableSet.Builder<ObjectType> builder=ImmutableSet.builder();
builder.addAll(getObjs());
if ((mask & NUMBER_MASK) != 0) {
builder.add(this.commonTypes.getNumberInstanceObjType());
}
if ((mask & STRING_MASK) != 0) {
builder.add(this.commonTypes.getStringInstanceObjType());
}
if ((mask & BOOLEAN_MASK) != 0) {
builder.add(this.commonTypes.getBooleanInstanceObjType());
}
JSType result=makeType(this.commonTypes,mask & ~(NUMBER_MASK | STRING_MASK | BOOLEAN_MASK),builder.build(),getTypeVar(),NO_ENUMS);
for (EnumType e : getEnums()) {
result=join(result,e.getEnumeratedType().autobox());
}
return result;
}
