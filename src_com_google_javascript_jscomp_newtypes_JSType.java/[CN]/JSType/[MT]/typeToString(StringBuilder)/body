{
switch (getMask()) {
case BOTTOM_MASK:
    return builder.append("bottom");
case TOP_MASK:
  return builder.append("*");
case UNKNOWN_MASK:
return builder.append("?");
default :
int tags=getMask();
boolean firstIteration=true;
for (int tag=1; tag != END_MASK; tag<<=1) {
if ((tags & tag) != 0) {
if (!firstIteration) {
builder.append('|');
}
firstIteration=false;
switch (tag) {
case TRUE_MASK:
case FALSE_MASK:
builder.append("boolean");
tags&=~BOOLEAN_MASK;
continue;
case NULL_MASK:
builder.append("null");
tags&=~NULL_MASK;
continue;
case NUMBER_MASK:
builder.append("number");
tags&=~NUMBER_MASK;
continue;
case STRING_MASK:
builder.append("string");
tags&=~STRING_MASK;
continue;
case UNDEFINED_MASK:
builder.append("undefined");
tags&=~UNDEFINED_MASK;
continue;
case TYPEVAR_MASK:
builder.append(getTypeVar().substring(0,getTypeVar().indexOf('#')));
tags&=~TYPEVAR_MASK;
continue;
case NON_SCALAR_MASK:
{
if (getObjs().size() == 1) {
Iterables.getOnlyElement(getObjs()).appendTo(builder);
}
 else {
Set<String> strReps=new TreeSet<>();
for (ObjectType obj : getObjs()) {
strReps.add(obj.toString());
}
PIPE_JOINER.appendTo(builder,strReps);
}
tags&=~NON_SCALAR_MASK;
continue;
}
case ENUM_MASK:
{
if (getEnums().size() == 1) {
builder.append(Iterables.getOnlyElement(getEnums()));
}
 else {
Set<String> strReps=new TreeSet<>();
for (EnumType e : getEnums()) {
strReps.add(e.toString());
}
PIPE_JOINER.appendTo(builder,strReps);
}
tags&=~ENUM_MASK;
continue;
}
}
}
}
if (tags == 0) {
return builder;
}
 else if (tags == TRUTHY_MASK) {
return builder.append("truthy");
}
 else if (tags == FALSY_MASK) {
return builder.append("falsy");
}
 else {
return builder.append("Unrecognized type: " + tags);
}
}
}
