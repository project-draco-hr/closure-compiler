{
  Preconditions.checkNotNull(type);
  Set<JSType> typesToRemove=new LinkedHashSet<>();
  for (  JSType other : typeMultimap.get(typeParam)) {
    if (type.isUnknown()) {
      typesToRemove.add(other);
      continue;
    }
    if (other.isUnknown()) {
      type=null;
      break;
    }
    if (type.isLoose()) {
      type=null;
      break;
    }
 else     if (other.isLoose()) {
      typesToRemove.add(other);
      continue;
    }
    JSType unified=unifyUnknowns(type,other);
    if (unified != null) {
      typesToRemove.add(other);
      type=unified;
    }
 else     if (other.isSubtypeOf(type,SubtypeCache.create())) {
      typesToRemove.add(other);
    }
 else     if (type.isSubtypeOf(other,SubtypeCache.create())) {
      type=null;
      break;
    }
  }
  for (  JSType typeToRemove : typesToRemove) {
    typeMultimap.remove(typeParam,typeToRemove);
  }
  if (type != null) {
    typeMultimap.put(typeParam,type);
  }
}
