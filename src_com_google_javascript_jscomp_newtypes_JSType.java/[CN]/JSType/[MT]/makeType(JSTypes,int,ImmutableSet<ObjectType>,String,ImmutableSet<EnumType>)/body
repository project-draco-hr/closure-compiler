{
  if (Preconditions.checkNotNull(enums).isEmpty()) {
    mask&=~ENUM_MASK;
  }
 else {
    mask|=ENUM_MASK;
  }
  if (Preconditions.checkNotNull(objs).isEmpty()) {
    mask&=~NON_SCALAR_MASK;
  }
 else {
    mask|=NON_SCALAR_MASK;
  }
  if (objs.isEmpty() && enums.isEmpty() && typeVar == null && (mask & TYPEVAR_MASK) == 0) {
    return makeMaskType(commonTypes,mask);
  }
  if (!JSType.isInhabitable(objs)) {
    return commonTypes.BOTTOM;
  }
  if (mask == NON_SCALAR_MASK) {
    return new ObjsType(commonTypes,objs);
  }
  if (mask == (NON_SCALAR_MASK | NULL_MASK)) {
    return new NullableObjsType(commonTypes,objs);
  }
  return new UnionType(commonTypes,mask,objs,typeVar,enums);
}
