{
  if (this.isUnknown() || this.isTop()) {
    return true;
  }
 else   if (getMask() == TYPEVAR_MASK && typeParameters.contains(getTypeVar())) {
    updateTypemap(typeMultimap,getTypeVar(),other);
    return true;
  }
 else   if (other.isUnknown()) {
    return true;
  }
 else   if (other.isTop()) {
    return false;
  }
  Set<EnumType> ununifiedEnums=ImmutableSet.of();
  if (getEnums().isEmpty()) {
    ununifiedEnums=other.getEnums();
  }
 else   if (other.getEnums().isEmpty()) {
    ununifiedEnums=new LinkedHashSet<>();
    for (    EnumType e : other.getEnums()) {
      if (!getEnums().contains(e)) {
        ununifiedEnums.add(e);
      }
    }
  }
  Set<ObjectType> ununifiedObjs=new LinkedHashSet<>(other.getObjs());
  for (  ObjectType targetObj : getObjs()) {
    for (    ObjectType sourceObj : other.getObjs()) {
      if (targetObj.unifyWithSubtype(sourceObj,typeParameters,typeMultimap)) {
        ununifiedObjs.remove(sourceObj);
      }
    }
  }
  String thisTypevar=getTypeVar();
  String otherTypevar=other.getTypeVar();
  if (thisTypevar == null || !typeParameters.contains(thisTypevar)) {
    return ununifiedObjs.isEmpty() && ununifiedEnums.isEmpty() && (otherTypevar == null || otherTypevar.equals(thisTypevar))&& getMask() == (getMask() | other.getMask());
  }
 else {
    int templateMask=BOTTOM_MASK;
    int thisScalarBits=getMask() & ~NON_SCALAR_MASK & ~TYPEVAR_MASK;
    int otherScalarBits=other.getMask() & ~NON_SCALAR_MASK;
    templateMask|=otherScalarBits & ~thisScalarBits;
    if (templateMask == BOTTOM_MASK) {
      return ununifiedObjs.isEmpty() && ununifiedEnums.isEmpty();
    }
    JSType templateType=makeType(promoteBoolean(templateMask),ImmutableSet.copyOf(ununifiedObjs),otherTypevar,ImmutableSet.copyOf(ununifiedEnums));
    updateTypemap(typeMultimap,getTypeVar(),templateType);
    return true;
  }
}
