{
  if (this.isUnknown()) {
    return true;
  }
 else   if (this.isTop()) {
    return other.isTop();
  }
 else   if (this.mask == TYPEVAR_MASK && typeParameters.contains(typeVar)) {
    updateTypemap(typeMultimap,typeVar,new JSType(promoteBoolean(other.mask),null,other.objs,other.typeVar,other.enums));
    return true;
  }
 else   if (other.isTop()) {
    return false;
  }
 else   if (other.isUnknown()) {
    return true;
  }
  Set<EnumType> ununifiedEnums=null;
  if (this.enums == null) {
    ununifiedEnums=other.enums;
  }
 else   if (other.enums == null) {
    return false;
  }
 else {
    ununifiedEnums=Sets.newHashSet();
    for (    EnumType e : this.enums) {
      if (!other.enums.contains(e)) {
        return false;
      }
    }
    for (    EnumType e : other.enums) {
      if (!this.enums.contains(e)) {
        ununifiedEnums.add(e);
      }
    }
    if (ununifiedEnums.isEmpty()) {
      ununifiedEnums=null;
    }
  }
  Set<ObjectType> ununified=ImmutableSet.of();
  if (other.objs != null) {
    ununified=Sets.newHashSet(other.objs);
  }
  if (this.objs != null) {
    if (other.objs == null) {
      return false;
    }
    for (    ObjectType targetObj : this.objs) {
      boolean hasUnified=false;
      for (      ObjectType sourceObj : other.objs) {
        if (targetObj.unifyWith(sourceObj,typeParameters,typeMultimap)) {
          ununified.remove(sourceObj);
          hasUnified=true;
        }
      }
      if (!hasUnified) {
        return false;
      }
    }
  }
  String thisTypevar=this.typeVar;
  String otherTypevar=other.typeVar;
  if (thisTypevar == null) {
    return otherTypevar == null && mask == other.mask;
  }
 else   if (!typeParameters.contains(thisTypevar)) {
    return thisTypevar.equals(otherTypevar) && mask == other.mask;
  }
 else {
    int templateMask=0;
    int thisScalarBits=this.mask & ~NON_SCALAR_MASK & ~TYPEVAR_MASK;
    int otherScalarBits=other.mask & ~NON_SCALAR_MASK & ~TYPEVAR_MASK;
    templateMask|=otherScalarBits & ~thisScalarBits;
    if (templateMask == BOTTOM_MASK) {
      return false;
    }
    JSType templateType=new JSType(promoteBoolean(templateMask),null,ImmutableSet.copyOf(ununified),otherTypevar,ununifiedEnums == null ? null : ImmutableSet.copyOf(ununifiedEnums));
    updateTypemap(typeMultimap,typeVar,templateType);
    return true;
  }
}
