{
  if (isUnknown()) {
    return this;
  }
  int otherMask=other.mask;
  if (isTop()) {
    if ((otherMask & NON_SCALAR_MASK) == 0 && (otherMask & TYPEVAR_MASK) == 0 && (otherMask & ENUM_MASK) == 0) {
      return ALMOST_TOP.removeType(other);
    }
    return this;
  }
  if ((otherMask & NON_SCALAR_MASK) == 0 && (otherMask & TYPEVAR_MASK) == 0 && (otherMask & ENUM_MASK) == 0) {
    return new JSType(mask & ~otherMask,location,objs,typeVar,enums);
  }
  if (objs == null || (otherMask & ~NON_SCALAR_MASK) != 0) {
    return this;
  }
  Preconditions.checkState(otherMask == NON_SCALAR_MASK && other.objs.size() == 1,"Invalid type to remove: " + other);
  NominalType otherKlass=Iterables.getOnlyElement(other.objs).getNominalType();
  ImmutableSet.Builder<ObjectType> newObjs=ImmutableSet.builder();
  for (  ObjectType obj : objs) {
    if (!Objects.equal(obj.getNominalType(),otherKlass)) {
      newObjs.add(obj);
    }
  }
  return new JSType(mask,location,newObjs.build(),typeVar,enums);
}
