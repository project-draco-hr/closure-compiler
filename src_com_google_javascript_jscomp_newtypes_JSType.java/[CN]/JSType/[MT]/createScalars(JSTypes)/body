{
  LinkedHashMap<String,JSType> types=new LinkedHashMap<>();
  types.put("BOOLEAN",new MaskType(commonTypes,TRUE_MASK | FALSE_MASK));
  types.put("BOTTOM",new MaskType(commonTypes,BOTTOM_MASK));
  types.put("FALSE_TYPE",new MaskType(commonTypes,FALSE_MASK));
  types.put("FALSY",new MaskType(commonTypes,FALSY_MASK));
  types.put("NULL",new MaskType(commonTypes,NULL_MASK));
  types.put("NUMBER",new MaskType(commonTypes,NUMBER_MASK));
  types.put("STRING",new MaskType(commonTypes,STRING_MASK));
  types.put("TOP",new MaskType(commonTypes,TOP_MASK));
  types.put("TOP_SCALAR",new MaskType(commonTypes,TOP_SCALAR_MASK));
  types.put("TRUE_TYPE",new MaskType(commonTypes,TRUE_MASK));
  types.put("TRUTHY",new MaskType(commonTypes,TRUTHY_MASK));
  types.put("UNDEFINED",new MaskType(commonTypes,UNDEFINED_MASK));
  types.put("UNKNOWN",new MaskType(commonTypes,UNKNOWN_MASK));
  types.put("UNDEFINED_OR_BOOLEAN",new MaskType(commonTypes,UNDEFINED_OR_BOOLEAN_MASK));
  types.put("UNDEFINED_OR_NUMBER",new MaskType(commonTypes,UNDEFINED_OR_NUMBER_MASK));
  types.put("UNDEFINED_OR_STRING",new MaskType(commonTypes,UNDEFINED_OR_STRING_MASK));
  types.put("NULL_OR_BOOLEAN",new MaskType(commonTypes,NULL_OR_BOOLEAN_MASK));
  types.put("NULL_OR_NUMBER",new MaskType(commonTypes,NULL_OR_NUMBER_MASK));
  types.put("NULL_OR_STRING",new MaskType(commonTypes,NULL_OR_STRING_MASK));
  types.put("NULL_OR_UNDEFINED",new MaskType(commonTypes,NULL_MASK | UNDEFINED_MASK));
  types.put("NUMBER_OR_STRING",new MaskType(commonTypes,NUMBER_MASK | STRING_MASK));
  return types;
}
