{
  mode=LanguageMode.ECMASCRIPT6;
  parse("for ({a} in b) c;");
  parse("for (var {a} in b) c;");
  parse("for (let {a} in b) c;");
  parse("for (const {a} in b) c;");
  parse("for ({a: b} in c) d;");
  parse("for (var {a: b} in c) d;");
  parse("for (let {a: b} in c) d;");
  parse("for (const {a: b} in c) d;");
  parse("for ([a] in b) c;");
  parse("for (var [a] in b) c;");
  parse("for (let [a] in b) c;");
  parse("for (const [a] in b) c;");
  parseError("for ({a: b} = foo() in c) d;","';' expected");
  parseError("for (let {a: b} = foo() in c) d;","let/const in for-in statement may not have initializer");
  parseError("for (const {a: b} = foo() in c) d;","let/const in for-in statement may not have initializer");
  parse("for (var {a: b} = foo() in c) d;");
  parseError("for ([a] = foo() in b) c;","';' expected");
  parseError("for (let [a] = foo() in b) c;","let/const in for-in statement may not have initializer");
  parseError("for (const [a] = foo() in b) c;","let/const in for-in statement may not have initializer");
  parse("for (var [a] = foo() in b) c;");
}
