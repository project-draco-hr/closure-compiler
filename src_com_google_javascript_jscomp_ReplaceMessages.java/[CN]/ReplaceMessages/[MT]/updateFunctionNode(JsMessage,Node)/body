{
  checkNode(functionNode,Token.FUNCTION);
  Node nameNode=functionNode.getFirstChild();
  checkNode(nameNode,Token.NAME);
  Node argListNode=nameNode.getNext();
  checkNode(argListNode,Token.PARAM_LIST);
  Node oldBlockNode=argListNode.getNext();
  checkNode(oldBlockNode,Token.BLOCK);
  Iterator<CharSequence> iterator=message.parts().iterator();
  Node valueNode=iterator.hasNext() ? constructAddOrStringNode(iterator,argListNode) : IR.string("");
  Node newBlockNode=IR.block(IR.returnNode(valueNode));
  if (newBlockNode.checkTreeEquals(oldBlockNode) != null) {
    newBlockNode.useSourceInfoIfMissingFromForTree(oldBlockNode);
    functionNode.replaceChild(oldBlockNode,newBlockNode);
    compiler.reportCodeChange();
  }
}
