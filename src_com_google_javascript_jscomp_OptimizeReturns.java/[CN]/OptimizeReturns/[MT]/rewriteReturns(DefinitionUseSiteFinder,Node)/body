{
  Preconditions.checkState(fnNode.isFunction());
  NodeUtil.visitPostOrder(fnNode.getLastChild(),new NodeUtil.Visitor(){
    @Override public void visit(    Node node){
      if (node.isReturn() && node.hasOneChild()) {
        boolean keepValue=NodeUtil.mayHaveSideEffects(node.getFirstChild(),compiler);
        if (!keepValue) {
          defFinder.removeReferences(node.getFirstChild());
        }
        Node result=node.removeFirstChild();
        if (keepValue) {
          node.getParent().addChildBefore(IR.exprResult(result).srcref(result),node);
        }
        compiler.reportCodeChange();
      }
    }
  }
,new NodeUtil.MatchShallowStatement());
}
