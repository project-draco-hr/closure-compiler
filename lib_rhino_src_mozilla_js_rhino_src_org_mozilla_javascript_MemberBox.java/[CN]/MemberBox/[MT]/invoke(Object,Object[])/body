{
  Method method=method();
  try {
    try {
      return method.invoke(target,args);
    }
 catch (    IllegalAccessException ex) {
      Method accessible=searchAccessibleMethod(method,argTypes);
      if (accessible != null) {
        memberObject=accessible;
        method=accessible;
      }
 else {
        if (!VMBridge.instance.tryToMakeAccessible(method)) {
          throw Context.throwAsScriptRuntimeEx(ex);
        }
      }
      return method.invoke(target,args);
    }
  }
 catch (  InvocationTargetException ite) {
    Throwable e=ite;
    do {
      e=((InvocationTargetException)e).getTargetException();
    }
 while ((e instanceof InvocationTargetException));
    if (e instanceof ContinuationPending)     throw (ContinuationPending)e;
    throw Context.throwAsScriptRuntimeEx(e);
  }
catch (  Exception ex) {
    throw Context.throwAsScriptRuntimeEx(ex);
  }
}
