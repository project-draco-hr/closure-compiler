{
  Object obj;
  boolean cacheObj;
  getObj:   if (t instanceof JavaScriptException) {
    cacheObj=false;
    obj=((JavaScriptException)t).getValue();
  }
 else {
    cacheObj=true;
    if (lastCatchScope != null) {
      NativeObject last=(NativeObject)lastCatchScope;
      obj=last.getAssociatedValue(t);
      if (obj == null)       Kit.codeBug();
      break getObj;
    }
    RhinoException re;
    String errorName;
    String errorMsg;
    Throwable javaException=null;
    if (t instanceof EcmaError) {
      EcmaError ee=(EcmaError)t;
      re=ee;
      errorName=ee.getName();
      errorMsg=ee.getErrorMessage();
    }
 else     if (t instanceof WrappedException) {
      WrappedException we=(WrappedException)t;
      re=we;
      javaException=we.getWrappedException();
      errorName="JavaException";
      errorMsg=javaException.getClass().getName() + ": " + javaException.getMessage();
    }
 else     if (t instanceof EvaluatorException) {
      EvaluatorException ee=(EvaluatorException)t;
      re=ee;
      errorName="InternalError";
      errorMsg=ee.getMessage();
    }
 else     if (cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS)) {
      re=new WrappedException(t);
      errorName="JavaException";
      errorMsg=t.toString();
    }
 else {
      throw Kit.codeBug();
    }
    String sourceUri=re.sourceName();
    if (sourceUri == null) {
      sourceUri="";
    }
    int line=re.lineNumber();
    Object args[];
    if (line > 0) {
      args=new Object[]{errorMsg,sourceUri,Integer.valueOf(line)};
    }
 else {
      args=new Object[]{errorMsg,sourceUri};
    }
    Scriptable errorObject=cx.newObject(scope,errorName,args);
    ScriptableObject.putProperty(errorObject,"name",errorName);
    if (javaException != null && isVisible(cx,javaException)) {
      Object wrap=cx.getWrapFactory().wrap(cx,scope,javaException,null);
      ScriptableObject.defineProperty(errorObject,"javaException",wrap,ScriptableObject.PERMANENT | ScriptableObject.READONLY);
    }
    if (isVisible(cx,re)) {
      Object wrap=cx.getWrapFactory().wrap(cx,scope,re,null);
      ScriptableObject.defineProperty(errorObject,"rhinoException",wrap,ScriptableObject.PERMANENT | ScriptableObject.READONLY);
    }
    obj=errorObject;
  }
  NativeObject catchScopeObject=new NativeObject();
  catchScopeObject.defineProperty(exceptionName,obj,ScriptableObject.PERMANENT);
  if (isVisible(cx,t)) {
    catchScopeObject.defineProperty("__exception__",Context.javaToJS(t,scope),ScriptableObject.PERMANENT | ScriptableObject.DONTENUM);
  }
  if (cacheObj) {
    catchScopeObject.associateValue(t,obj);
  }
  return catchScopeObject;
}
