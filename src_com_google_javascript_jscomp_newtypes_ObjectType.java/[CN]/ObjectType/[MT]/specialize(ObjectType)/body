{
  Preconditions.checkState(areRelatedClasses(this.nominalType,other.nominalType));
  if (this == TOP_OBJECT) {
    return other;
  }
  NominalType resultNominalType=NominalType.pickSubclass(this.nominalType,other.nominalType);
  if (resultNominalType != null && resultNominalType.isClassy()) {
    Preconditions.checkState(this.fn == null && other.fn == null);
    PersistentMap<String,Property> newProps=meetPropsHelper(true,resultNominalType,this.props,other.props);
    if (newProps == BOTTOM_MAP) {
      return BOTTOM_OBJECT;
    }
    return new ObjectType(resultNominalType,newProps,null,false,ObjectKind.meet(this.objectKind,other.objectKind));
  }
  FunctionType thisFn=this.fn;
  boolean isLoose=this.isLoose;
  if (resultNominalType != null && resultNominalType.isFunction() && this.fn == null) {
    thisFn=other.fn;
    isLoose=other.fn.isLoose();
  }
  PersistentMap<String,Property> newProps=meetPropsHelper(true,resultNominalType,this.props,other.props);
  if (newProps == BOTTOM_MAP) {
    return BOTTOM_OBJECT;
  }
  return new ObjectType(resultNominalType,newProps,thisFn == null ? null : thisFn.specialize(other.fn),isLoose,ObjectKind.meet(this.objectKind,other.objectKind));
}
