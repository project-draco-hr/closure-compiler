{
  Preconditions.checkState(areRelatedClasses(this.nominalType,other.nominalType));
  NominalType resultNominalType=NominalType.pickSubclass(this.nominalType,other.nominalType);
  if (resultNominalType != null) {
    if (fn != null || other.fn != null) {
      return null;
    }
    PersistentMap<String,Property> newProps=meetPropsHelper(true,resultNominalType,this.props,other.props);
    if (newProps == BOTTOM_MAP) {
      return BOTTOM_OBJECT;
    }
    return new ObjectType(resultNominalType,newProps,null,false,ObjectKind.meet(this.objectKind,other.objectKind));
  }
  PersistentMap<String,Property> newProps=meetPropsHelper(true,null,this.props,other.props);
  if (newProps == BOTTOM_MAP) {
    return BOTTOM_OBJECT;
  }
  return new ObjectType(null,newProps,this.fn == null ? null : this.fn.specialize(other.fn),this.isLoose,ObjectKind.meet(this.objectKind,other.objectKind));
}
