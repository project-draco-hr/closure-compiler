{
  PersistentMap<String,Property> newProps=this.props;
  String objName=qname.getLeftmostName();
  if (qname.isIdentifier()) {
    if (type == null) {
      newProps=newProps.without(objName);
    }
 else {
      JSType declType=getDeclaredProp(qname);
      Preconditions.checkState(declType == null || type.isSubtypeOf(declType));
      if (isDeclared) {
        declType=type;
      }
 else       if (declType != null) {
        isDeclared=true;
      }
      newProps=newProps.with(objName,new Property(type,isDeclared ? declType : null,false));
    }
  }
 else {
    QualifiedName objQname=new QualifiedName(objName);
    QualifiedName innerProps=qname.getAllButLeftmost();
    if (!this.props.containsKey(objName)) {
      Preconditions.checkState(mayHaveProp(objQname));
      newProps=newProps.with(objName,getLeftmostProp(objQname));
    }
    Property objProp=newProps.get(objName);
    newProps=newProps.with(objName,new Property(objProp.getType().withProperty(innerProps,type),objProp.getDeclaredType(),objProp.isOptional()));
  }
  return ObjectType.makeObjectType(nominalType,newProps,fn,isLoose,objectKind);
}
