{
  Preconditions.checkState(areRelatedClasses(obj1.nominalType,obj2.nominalType));
  if (obj1.equals(obj2)) {
    return obj1;
  }
  boolean isLoose=obj1.isLoose || obj2.isLoose;
  FunctionType fn=FunctionType.join(obj1.fn,obj2.fn);
  PersistentMap<String,Property> props;
  if (isLoose) {
    fn=fn == null ? null : fn.withLoose();
    props=joinPropsLoosely(obj1.props,obj2.props);
  }
 else {
    props=joinProps(obj1.props,obj2.props);
  }
  NominalType nominal=NominalType.pickSuperclass(obj1.nominalType,obj2.nominalType);
  if (nominal == null || !nominal.isFunction()) {
    fn=null;
  }
  return ObjectType.makeObjectType(nominal,props,fn,isLoose,ObjectKind.join(obj1.objectKind,obj2.objectKind));
}
