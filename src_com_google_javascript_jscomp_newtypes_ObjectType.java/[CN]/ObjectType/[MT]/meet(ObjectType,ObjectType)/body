{
  Preconditions.checkState(areRelatedClasses(obj1.nominalType,obj2.nominalType));
  NominalType resultNominalType=NominalType.pickSubclass(obj1.nominalType,obj2.nominalType);
  FunctionType fn=FunctionType.meet(obj1.fn,obj2.fn);
  boolean isLoose=obj1.isLoose && obj2.isLoose || fn != null && fn.isLoose();
  PersistentMap<String,Property> props;
  if (isLoose) {
    props=joinPropsLoosely(obj1.props,obj2.props);
  }
 else {
    props=meetPropsHelper(false,resultNominalType,obj1.props,obj2.props);
  }
  return ObjectType.makeObjectType(resultNominalType,props,fn,isLoose,ObjectKind.meet(obj1.objectKind,obj2.objectKind));
}
