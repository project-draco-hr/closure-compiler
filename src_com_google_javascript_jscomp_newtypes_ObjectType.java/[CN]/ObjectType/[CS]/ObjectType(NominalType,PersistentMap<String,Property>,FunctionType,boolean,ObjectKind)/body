{
  Preconditions.checkArgument(fn == null || fn.isQmarkFunction() || fn.isLoose() == isLoose,"isLoose: %s, fn: %s",isLoose,fn);
  Preconditions.checkArgument(FunctionType.isInhabitable(fn));
  Preconditions.checkArgument(fn == null || nominalType != null,"Cannot create function %s without nominal type",fn);
  if (nominalType != null) {
    Preconditions.checkArgument(!nominalType.isClassy() || !isLoose,"Cannot create loose objectType with nominal type %s",nominalType);
    Preconditions.checkArgument(fn == null || nominalType.isFunction(),"Cannot create objectType of nominal type %s with function (%s)",nominalType,fn);
    Preconditions.checkArgument(!nominalType.isFunction() || fn != null,"Cannot create Function instance without a FunctionType");
  }
  this.nominalType=nominalType;
  this.props=isLoose ? loosenProps(props) : props;
  this.fn=fn;
  this.isLoose=isLoose;
  this.objectKind=isLoose ? ObjectKind.UNRESTRICTED : objectKind;
}
