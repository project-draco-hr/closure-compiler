{
  if (parent == null || !NodeUtil.isStatementBlock(parent)) {
    return;
  }
  if (!NodeUtil.isExpressionNode(n) && !NodeUtil.isVar(n)) {
    return;
  }
  Node nextSibling=n.getNext();
  if (nextSibling == null) {
    return;
  }
 else   if (NodeUtil.isForIn(nextSibling)) {
    Node forNode=nextSibling;
    Node forVar=forNode.getFirstChild();
    if (NodeUtil.isName(forVar) && NodeUtil.isVar(n) && n.hasOneChild()) {
      Node name=n.getFirstChild();
      if (!name.hasChildren() && forVar.getString().equals(name.getString())) {
        parent.removeChild(n);
        forNode.replaceChild(forVar,n);
        compiler.reportCodeChange();
      }
    }
  }
 else   if (nextSibling.getType() == Token.FOR && nextSibling.getFirstChild().getType() == Token.EMPTY) {
    if (NodeUtil.containsType(n,Token.IN)) {
      return;
    }
    Node forNode=nextSibling;
    Node oldInitializer=forNode.getFirstChild();
    parent.removeChild(n);
    Node newInitializer;
    if (NodeUtil.isVar(n)) {
      newInitializer=n;
    }
 else {
      Preconditions.checkState(n.hasOneChild());
      newInitializer=n.getFirstChild();
      n.removeChild(newInitializer);
    }
    forNode.replaceChild(oldInitializer,newInitializer);
    compiler.reportCodeChange();
  }
}
