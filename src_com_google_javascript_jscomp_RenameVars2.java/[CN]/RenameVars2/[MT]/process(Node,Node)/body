{
  assignmentLog=new StringBuilder();
  NodeTraversal.traverse(compiler,externs,new ProcessVars(true));
  NodeTraversal.traverse(compiler,root,new ProcessVars(false));
  reservedNames.addAll(externNames);
  SortedSet<Assignment> varsByFrequency=new TreeSet<Assignment>(FREQUENCY_COMPARATOR);
  varsByFrequency.addAll(assignments.values());
  if (shouldShadow) {
    new ShadowVariables2(compiler,assignments,varsByFrequency,pseudoNameMap).process(externs,root);
  }
  if (prevUsedRenameMap != null) {
    reusePreviouslyUsedVariableMap();
  }
  assignNames(varsByFrequency);
  boolean changed=false;
  for (  Node n : globalNameNodes) {
    String newName=getNewGlobalName(n);
    if (newName != null) {
      n.setString(newName);
      changed=true;
    }
  }
  for (  Node n : localNameNodes) {
    String newName=getNewLocalName(n);
    if (newName != null) {
      n.setString(newName);
      changed=true;
    }
  }
  if (changed) {
    compiler.reportCodeChange();
  }
  compiler.addToDebugLog("JS var assignments:\n" + assignmentLog);
  assignmentLog=null;
}
