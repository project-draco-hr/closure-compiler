{
  JSType type=n.getJSType();
  Preconditions.checkNotNull(type);
  for (Node name=n.getFirstChild(); name != null; name=name.getNext()) {
    scope=traverse(name.getFirstChild(),scope);
  }
  ObjectType objectType=ObjectType.cast(type);
  if (objectType == null) {
    return scope;
  }
  boolean hasLendsName=n.getJSDocInfo() != null && n.getJSDocInfo().getLendsName() != null;
  if (objectType.hasReferenceName() && !hasLendsName) {
    return scope;
  }
  for (Node name=n.getFirstChild(); name != null; name=name.getNext()) {
    Node value=name.getFirstChild();
    String memberName=NodeUtil.getObjectLitKeyName(name);
    if (memberName != null) {
      JSType rawValueType=name.getFirstChild().getJSType();
      JSType valueType=NodeUtil.getObjectLitKeyTypeFromValueType(name,rawValueType);
      if (valueType == null) {
        valueType=getNativeType(UNKNOWN_TYPE);
      }
      objectType.defineInferredProperty(memberName,valueType,false,name);
    }
 else {
      n.setJSType(getNativeType(UNKNOWN_TYPE));
    }
  }
  return scope;
}
