{
  int i=0;
  int childCount=n.getChildCount();
  Node iArgument=n.getFirstChild();
  for (  Node iParameter : fnType.getParameters()) {
    if (i + 1 >= childCount) {
      return;
    }
    iArgument=iArgument.getNext();
    JSType iArgumentType=getJSType(iArgument);
    JSType iParameterType=getJSType(iParameter);
    inferPropertyTypesToMatchConstraint(iArgumentType,iParameterType);
    FunctionType restrictedParameter=null;
    if (iParameterType.isUnionType()) {
      UnionType union=iParameterType.toMaybeUnionType();
      for (      JSType alternative : union.getAlternates()) {
        if (alternative.isFunctionType()) {
          restrictedParameter=alternative.toMaybeFunctionType();
          break;
        }
      }
    }
 else {
      restrictedParameter=iParameterType.toMaybeFunctionType();
    }
    if (restrictedParameter != null && iArgument.isFunction() && iArgumentType.isFunctionType()) {
      FunctionType argFnType=iArgumentType.toMaybeFunctionType();
      boolean declared=iArgument.getJSDocInfo() != null;
      iArgument.setJSType(matchFunction(restrictedParameter,argFnType,declared));
    }
    i++;
  }
}
