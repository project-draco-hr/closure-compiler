{
  scope=traverseChildren(n,scope);
  Node constructor=n.getFirstChild();
  JSType constructorType=constructor.getJSType();
  JSType type=null;
  if (constructorType != null) {
    constructorType=constructorType.restrictByNotNullOrUndefined();
    if (constructorType.isUnknownType()) {
      type=unknownType;
    }
 else {
      FunctionType ct=constructorType.toMaybeFunctionType();
      if (ct == null && constructorType instanceof FunctionType) {
        ct=(FunctionType)constructorType;
      }
      if (ct != null && ct.isConstructor()) {
        backwardsInferenceFromCallSite(n,ct);
        ObjectType instanceType=ct.getInstanceType();
        Map<TemplateType,JSType> inferredTypes=inferTemplateTypesFromParameters(ct,n);
        if (inferredTypes.isEmpty()) {
          type=instanceType;
        }
 else {
          type=registry.createTemplatizedType(instanceType,inferredTypes);
        }
      }
    }
  }
  n.setJSType(type);
  return scope;
}
