{
  if (paramType.isTemplateType()) {
    resolvedTemplateType(resolvedTypes,paramType.toMaybeTemplateType(),argType);
  }
 else   if (paramType.isUnionType()) {
    UnionType unionType=paramType.toMaybeUnionType();
    for (    JSType alernative : unionType.getAlternates()) {
      maybeResolveTemplatedType(alernative,argType,resolvedTypes);
    }
  }
 else   if (paramType.isFunctionType()) {
    FunctionType paramFunctionType=paramType.toMaybeFunctionType();
    FunctionType argFunctionType=argType.restrictByNotNullOrUndefined().collapseUnion().toMaybeFunctionType();
    if (argFunctionType != null && argFunctionType.isSubtype(paramType)) {
      maybeResolveTemplatedType(paramFunctionType.getTypeOfThis(),argFunctionType.getTypeOfThis(),resolvedTypes);
      maybeResolveTemplatedType(paramFunctionType.getReturnType(),argFunctionType.getReturnType(),resolvedTypes);
      maybeResolveTemplateTypeFromNodes(paramFunctionType.getParameters(),argFunctionType.getParameters(),resolvedTypes);
    }
  }
 else   if (paramType.isParameterizedType()) {
    ParameterizedType paramObjectType=paramType.toMaybeParameterizedType();
    JSType typeParameter=paramObjectType.getParameterType();
    Preconditions.checkNotNull(typeParameter);
    if (typeParameter != null) {
      ObjectType argObjectType=argType.restrictByNotNullOrUndefined().collapseUnion().toMaybeParameterizedType();
      if (argObjectType != null && argObjectType.isSubtype(paramType)) {
        JSType argTypeParameter=argObjectType.getParameterType();
        Preconditions.checkNotNull(argTypeParameter);
        maybeResolveTemplatedType(typeParameter,argTypeParameter,resolvedTypes);
      }
    }
  }
}
