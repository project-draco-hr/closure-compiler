{
switch (n.getType()) {
case Token.ASSIGN:
    scope=traverseAssign(n,scope);
  break;
case Token.NAME:
scope=traverseName(n,scope);
break;
case Token.GETPROP:
scope=traverseGetProp(n,scope);
break;
case Token.AND:
scope=traverseAnd(n,scope).getJoinedFlowScope().createChildFlowScope();
break;
case Token.OR:
scope=traverseOr(n,scope).getJoinedFlowScope().createChildFlowScope();
break;
case Token.HOOK:
scope=traverseHook(n,scope);
break;
case Token.OBJECTLIT:
scope=traverseObjectLiteral(n,scope);
break;
case Token.CALL:
scope=traverseCall(n,scope);
break;
case Token.NEW:
scope=traverseNew(n,scope);
break;
case Token.ASSIGN_ADD:
case Token.ADD:
scope=traverseAdd(n,scope);
break;
case Token.POS:
case Token.NEG:
scope=traverse(n.getFirstChild(),scope);
n.setJSType(getNativeType(NUMBER_TYPE));
break;
case Token.NULL:
n.setJSType(getNativeType(NULL_TYPE));
break;
case Token.VOID:
n.setJSType(getNativeType(VOID_TYPE));
break;
case Token.ARRAYLIT:
scope=traverseArrayLiteral(n,scope);
break;
case Token.REF_SPECIAL:
n.setJSType(getNativeType(UNKNOWN_TYPE));
break;
case Token.REGEXP:
n.setJSType(getNativeType(REGEXP_TYPE));
break;
case Token.THIS:
n.setJSType(scope.getTypeOfThis());
break;
case Token.ASSIGN_LSH:
case Token.ASSIGN_RSH:
case Token.LSH:
case Token.RSH:
case Token.ASSIGN_URSH:
case Token.URSH:
case Token.ASSIGN_DIV:
case Token.ASSIGN_MOD:
case Token.ASSIGN_BITAND:
case Token.ASSIGN_BITXOR:
case Token.ASSIGN_BITOR:
case Token.ASSIGN_MUL:
case Token.ASSIGN_SUB:
case Token.DIV:
case Token.MOD:
case Token.BITAND:
case Token.BITXOR:
case Token.BITOR:
case Token.MUL:
case Token.SUB:
case Token.DEC:
case Token.INC:
case Token.BITNOT:
case Token.NUMBER:
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(NUMBER_TYPE));
break;
case Token.LP:
case Token.GET_REF:
scope=traverse(n.getFirstChild(),scope);
n.setJSType(getJSType(n.getFirstChild()));
break;
case Token.COMMA:
scope=traverseChildren(n,scope);
n.setJSType(getJSType(n.getLastChild()));
break;
case Token.STRING:
case Token.TYPEOF:
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(STRING_TYPE));
break;
case Token.LT:
case Token.LE:
case Token.GT:
case Token.GE:
case Token.NOT:
case Token.EQ:
case Token.NE:
case Token.SHEQ:
case Token.SHNE:
case Token.INSTANCEOF:
case Token.TRUE:
case Token.FALSE:
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;
case Token.GETELEM:
scope=traverseGetElem(n,scope);
break;
case Token.EXPR_RESULT:
scope=traverseChildren(n,scope);
if (n.getFirstChild().getType() == Token.GETPROP) {
ensurePropertyDeclared(n.getFirstChild());
}
break;
case Token.SWITCH:
scope=traverse(n.getFirstChild(),scope);
break;
case Token.VAR:
case Token.RETURN:
case Token.THROW:
scope=traverseChildren(n,scope);
break;
case Token.CATCH:
scope=traverseCatch(n,scope);
break;
}
if (n.getType() != Token.FUNCTION) {
JSDocInfo info=n.getJSDocInfo();
if (info != null && info.hasType()) {
JSType castType=info.getType().evaluate(syntacticScope);
if (n.isQualifiedName() && n.getParent().getType() == Token.EXPR_RESULT) {
updateScopeForTypeChange(scope,n,n.getJSType(),castType);
}
n.setJSType(castType);
}
}
return scope;
}
