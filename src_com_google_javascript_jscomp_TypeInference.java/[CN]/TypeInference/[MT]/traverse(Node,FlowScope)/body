{
switch (n.getType()) {
case ASSIGN:
    scope=traverseAssign(n,scope);
  break;
case NAME:
scope=traverseName(n,scope);
break;
case GETPROP:
scope=traverseGetProp(n,scope);
break;
case AND:
scope=traverseAnd(n,scope).getJoinedFlowScope().createChildFlowScope();
break;
case OR:
scope=traverseOr(n,scope).getJoinedFlowScope().createChildFlowScope();
break;
case HOOK:
scope=traverseHook(n,scope);
break;
case OBJECTLIT:
scope=traverseObjectLiteral(n,scope);
break;
case CALL:
scope=traverseCall(n,scope);
break;
case NEW:
scope=traverseNew(n,scope);
break;
case ASSIGN_ADD:
case ADD:
scope=traverseAdd(n,scope);
break;
case POS:
case NEG:
scope=traverse(n.getFirstChild(),scope);
n.setJSType(getNativeType(NUMBER_TYPE));
break;
case ARRAYLIT:
scope=traverseArrayLiteral(n,scope);
break;
case THIS:
n.setJSType(scope.getTypeOfThis());
break;
case ASSIGN_LSH:
case ASSIGN_RSH:
case LSH:
case RSH:
case ASSIGN_URSH:
case URSH:
case ASSIGN_DIV:
case ASSIGN_MOD:
case ASSIGN_BITAND:
case ASSIGN_BITXOR:
case ASSIGN_BITOR:
case ASSIGN_MUL:
case ASSIGN_SUB:
case DIV:
case MOD:
case BITAND:
case BITXOR:
case BITOR:
case MUL:
case SUB:
case DEC:
case INC:
case BITNOT:
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(NUMBER_TYPE));
break;
case PARAM_LIST:
scope=traverse(n.getFirstChild(),scope);
n.setJSType(getJSType(n.getFirstChild()));
break;
case COMMA:
scope=traverseChildren(n,scope);
n.setJSType(getJSType(n.getLastChild()));
break;
case TYPEOF:
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(STRING_TYPE));
break;
case DELPROP:
case LT:
case LE:
case GT:
case GE:
case NOT:
case EQ:
case NE:
case SHEQ:
case SHNE:
case INSTANCEOF:
case IN:
scope=traverseChildren(n,scope);
n.setJSType(getNativeType(BOOLEAN_TYPE));
break;
case GETELEM:
scope=traverseGetElem(n,scope);
break;
case EXPR_RESULT:
scope=traverseChildren(n,scope);
if (n.getFirstChild().isGetProp()) {
ensurePropertyDeclared(n.getFirstChild());
}
break;
case SWITCH:
scope=traverse(n.getFirstChild(),scope);
break;
case RETURN:
scope=traverseReturn(n,scope);
break;
case VAR:
case THROW:
scope=traverseChildren(n,scope);
break;
case CATCH:
scope=traverseCatch(n,scope);
break;
case CAST:
scope=traverseChildren(n,scope);
JSDocInfo info=n.getJSDocInfo();
if (info != null && info.hasType()) {
n.setJSType(info.getType().evaluate(syntacticScope,registry));
}
break;
default :
break;
}
return scope;
}
