{
  Preconditions.checkNotNull(resultType);
switch (left.getType()) {
case Token.NAME:
    String varName=left.getString();
  Var var=syntacticScope.getVar(varName);
if (var != null && var.isLocal() && var.getScope() != syntacticScope) {
  assignedOuterLocalVars.put(var.getScope(),var);
}
boolean isVarDeclaration=left.hasChildren();
if (!isVarDeclaration || var == null || var.isTypeInferred()) {
redeclareSimpleVar(scope,left,resultType);
}
left.setJSType(isVarDeclaration || leftType == null ? resultType : null);
if (var != null && var.isTypeInferred()) {
JSType oldType=var.getType();
var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));
}
break;
case Token.GETPROP:
String qualifiedName=left.getQualifiedName();
if (qualifiedName != null) {
scope.inferQualifiedSlot(qualifiedName,leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,resultType);
}
left.setJSType(resultType);
ensurePropertyDefined(left,resultType);
break;
}
}
