{
  Preconditions.checkNotNull(resultType);
switch (left.getType()) {
case Token.NAME:
    String varName=left.getString();
  TypedVar var=syntacticScope.getVar(varName);
JSType varType=var == null ? null : var.getType();
boolean isVarDeclaration=left.hasChildren() && varType != null && !var.isTypeInferred();
boolean isTypelessConstDecl=isVarDeclaration && NodeUtil.isConstantDeclaration(compiler.getCodingConvention(),var.getJSDocInfo(),var.getNameNode()) && !(var.getJSDocInfo() != null && var.getJSDocInfo().hasType());
boolean isVarTypeBetter=isVarDeclaration && !resultType.isNullType() && !resultType.isVoidType()&& !isTypelessConstDecl;
if (isVarTypeBetter) {
redeclareSimpleVar(scope,left,varType);
}
 else {
redeclareSimpleVar(scope,left,resultType);
}
left.setJSType(resultType);
if (var != null && var.isTypeInferred()) {
JSType oldType=var.getType();
var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));
}
 else if (isTypelessConstDecl) {
var.setType(resultType);
}
break;
case Token.GETPROP:
String qualifiedName=left.getQualifiedName();
if (qualifiedName != null) {
scope.inferQualifiedSlot(left,qualifiedName,leftType == null ? unknownType : leftType,resultType);
}
left.setJSType(resultType);
ensurePropertyDefined(left,resultType);
break;
}
}
