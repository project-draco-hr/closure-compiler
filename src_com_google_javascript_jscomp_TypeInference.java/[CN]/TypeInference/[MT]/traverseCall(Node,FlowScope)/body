{
  scope=traverseChildren(n,scope);
  Node left=n.getFirstChild();
  JSType functionType=getJSType(left).restrictByNotNullOrUndefined();
  if (functionType != null) {
    if (functionType.isFunctionType()) {
      FunctionType fnType=functionType.toMaybeFunctionType();
      n.setJSType(fnType.getReturnType());
      updateTypeOfParameters(n,fnType);
      updateTypeOfThisOnClosure(n,fnType);
    }
 else     if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))) {
      n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));
    }
  }
  scope=tightenTypesAfterAssertions(scope,n);
  return scope;
}
