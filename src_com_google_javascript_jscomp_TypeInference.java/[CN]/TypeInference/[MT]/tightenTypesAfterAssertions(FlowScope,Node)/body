{
  Node left=callNode.getFirstChild();
  Node firstParam=left.getNext();
  AssertionFunctionSpec assertionFunctionSpec=assertionFunctionsMap.get(left.getQualifiedName());
  if (assertionFunctionSpec == null || firstParam == null) {
    return scope;
  }
  Node assertedNode=assertionFunctionSpec.getAssertedParam(firstParam);
  if (assertedNode == null) {
    return scope;
  }
  JSTypeNative assertedType=assertionFunctionSpec.getAssertedType();
  String assertedNodeName=assertedNode.getQualifiedName();
  if (assertedType == null) {
    if (assertedNodeName != null) {
      JSType type=getJSType(assertedNode);
      JSType narrowed=type.restrictByNotNullOrUndefined();
      if (type != narrowed) {
        scope=narrowScope(scope,assertedNode,narrowed);
        callNode.setJSType(narrowed);
      }
    }
 else     if (assertedNode.getType() == Token.AND || assertedNode.getType() == Token.OR) {
      BooleanOutcomePair conditionOutcomes=traverseWithinShortCircuitingBinOp(assertedNode,scope);
      scope=reverseInterpreter.getPreciserScopeKnowingConditionOutcome(assertedNode,conditionOutcomes.getOutcomeFlowScope(assertedNode.getType(),true),true);
    }
  }
 else   if (assertedNodeName != null) {
    JSType type=getJSType(assertedNode);
    JSType narrowed=type.getGreatestSubtype(getNativeType(assertedType));
    if (type != narrowed) {
      scope=narrowScope(scope,assertedNode,narrowed);
      callNode.setJSType(narrowed);
    }
  }
  return scope;
}
