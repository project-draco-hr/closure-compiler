{
  String propName=getprop.getLastChild().getString();
  Node obj=getprop.getFirstChild();
  JSType nodeType=getJSType(obj);
  ObjectType objectType=ObjectType.cast(nodeType.restrictByNotNullOrUndefined());
  boolean propCreationInConstructor=obj.isThis() && getJSType(syntacticScope.getRootNode()).isConstructor();
  if (objectType == null) {
    registry.registerPropertyOnType(propName,nodeType);
  }
 else {
    if (nodeType.isStruct() && !objectType.hasProperty(propName)) {
      boolean staticPropCreation=false;
      Node maybeAssignStm=getprop.getGrandparent();
      if (syntacticScope.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)) {
        String propCreationFilename=maybeAssignStm.getSourceFileName();
        Node ctor=objectType.getOwnerFunction().getSource();
        if (ctor != null && ctor.getSourceFileName().equals(propCreationFilename)) {
          staticPropCreation=true;
        }
      }
      if (!propCreationInConstructor && !staticPropCreation) {
        return;
      }
    }
    if (ensurePropertyDeclaredHelper(getprop,objectType)) {
      return;
    }
    if (!objectType.isPropertyTypeDeclared(propName)) {
      if (objectType.hasProperty(propName) || !objectType.isInstanceType()) {
        if ("prototype".equals(propName)) {
          objectType.defineDeclaredProperty(propName,rightType,getprop);
        }
 else {
          objectType.defineInferredProperty(propName,rightType,getprop);
        }
      }
 else       if (propCreationInConstructor) {
        objectType.defineInferredProperty(propName,rightType,getprop);
      }
 else {
        registry.registerPropertyOnType(propName,objectType);
      }
    }
  }
}
