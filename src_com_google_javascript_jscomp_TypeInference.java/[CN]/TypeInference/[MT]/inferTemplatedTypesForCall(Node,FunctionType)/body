{
  if (fnType.getTemplateTypeNames().isEmpty()) {
    return false;
  }
  Map<TemplateType,JSType> inferred=inferTemplateTypesFromParameters(fnType,n);
  if (inferred.size() > 0) {
    TemplateTypeReplacer replacer=new TemplateTypeReplacer(registry,inferred);
    Node callTarget=n.getFirstChild();
    FunctionType replacementFnType=fnType.visit(replacer).toMaybeFunctionType();
    Preconditions.checkNotNull(replacementFnType);
    callTarget.setJSType(replacementFnType);
    n.setJSType(replacementFnType.getReturnType());
    return true;
  }
  return false;
}
