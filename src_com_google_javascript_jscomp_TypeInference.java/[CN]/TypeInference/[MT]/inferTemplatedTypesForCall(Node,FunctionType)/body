{
  final ImmutableList<TemplateType> keys=fnType.getTemplateTypeMap().getTemplateKeys();
  if (keys.isEmpty()) {
    return false;
  }
  Map<TemplateType,JSType> rawInferrence=inferTemplateTypesFromParameters(fnType,n);
  Map<TemplateType,JSType> inferred=Maps.newIdentityHashMap();
  for (  TemplateType key : keys) {
    JSType type=rawInferrence.get(key);
    if (type == null) {
      type=unknownType;
    }
    inferred.put(key,type);
  }
  Map<TemplateType,JSType> typeTransformations=evaluateTypeTransformations(keys,inferred);
  if (typeTransformations != null) {
    inferred.putAll(typeTransformations);
  }
  TemplateTypeReplacer replacer=new TemplateTypeReplacer(registry,inferred);
  Node callTarget=n.getFirstChild();
  FunctionType replacementFnType=fnType.visit(replacer).toMaybeFunctionType();
  Preconditions.checkNotNull(replacementFnType);
  callTarget.setJSType(replacementFnType);
  n.setJSType(replacementFnType.getReturnType());
  return replacer.madeChanges;
}
