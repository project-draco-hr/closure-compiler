{
  final ImmutableList<TemplateType> keys=fnType.getTemplateTypeMap().getTemplateKeys();
  if (keys.isEmpty()) {
    return false;
  }
  Map<TemplateType,JSType> inferred=Maps.filterKeys(inferTemplateTypesFromParameters(fnType,n),new Predicate<TemplateType>(){
    @Override public boolean apply(    TemplateType key){
      return keys.contains(key);
    }
  }
);
  TemplateTypeReplacer replacer=new TemplateTypeReplacer(registry,inferred);
  Node callTarget=n.getFirstChild();
  FunctionType replacementFnType=fnType.visit(replacer).toMaybeFunctionType();
  Preconditions.checkNotNull(replacementFnType);
  callTarget.setJSType(replacementFnType);
  n.setJSType(replacementFnType.getReturnType());
  return replacer.madeChanges;
}
