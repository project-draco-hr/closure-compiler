{
  String varName=n.getString();
  Node value=n.getFirstChild();
  JSType type=n.getJSType();
  if (value != null) {
    scope=traverse(value,scope);
    updateScopeForTypeChange(scope,n,n.getJSType(),getJSType(value));
    return scope;
  }
 else {
    StaticTypedSlot<JSType> var=scope.getSlot(varName);
    if (var != null) {
      boolean isInferred=var.isTypeInferred();
      boolean unflowable=isInferred && isUnflowable(syntacticScope.getVar(varName));
      boolean nonLocalInferredSlot=false;
      if (isInferred && syntacticScope.isLocal()) {
        TypedVar maybeOuterVar=syntacticScope.getParent().getVar(varName);
        if (var == maybeOuterVar && !maybeOuterVar.isMarkedAssignedExactlyOnce()) {
          nonLocalInferredSlot=true;
        }
      }
      if (!unflowable && !nonLocalInferredSlot) {
        type=var.getType();
        if (type == null) {
          type=unknownType;
        }
      }
    }
  }
  n.setJSType(type);
  return scope;
}
