{
  Node containingNode=parent.getParent();
switch (parent.getType()) {
case Token.VAR:
    Preconditions.checkState(parent.hasOneChild());
  replaceWithRhs(containingNode,parent);
break;
case Token.FUNCTION:
replaceWithRhs(containingNode,parent);
break;
case Token.ASSIGN:
if (containingNode.isExprResult()) {
replaceWithRhs(containingNode.getParent(),containingNode);
}
 else {
replaceWithRhs(containingNode,parent);
}
break;
case Token.OBJECTLIT:
break;
case Token.EXPR_RESULT:
Preconditions.checkState(isAnalyzableObjectDefinePropertiesDefinition(parent.getFirstChild()));
replaceWithRhs(containingNode,parent);
break;
default :
throw new IllegalArgumentException("Unsupported parent node type in JsNameRefNode.remove: " + Token.name(parent.getType()));
}
}
