{
  if (!(n.isName() || NodeUtil.isGet(n) && !parent.isGetProp())) {
    return;
  }
  NameInformation nameInfo=createNameInformation(t,n,parent);
  if (nameInfo == null) {
    return;
  }
  if (nameInfo.onlyAffectsClassDef) {
    if (nameInfo.superclass != null) {
      recordReference(nameInfo.name,nameInfo.superclass,RefType.INHERITANCE);
    }
    String nodeName=n.getQualifiedName();
    if (nodeName != null) {
      recordReference(nameInfo.name,nodeName,RefType.REGULAR);
    }
    return;
  }
  if (parent.isInstanceOf() && parent.getLastChild() == n && n.isQualifiedName()) {
    JsName checkedClass=getName(nameInfo.name,true);
    refNodes.add(new InstanceOfCheckNode(checkedClass,n,parent,parent.getParent()));
    checkedClass.hasInstanceOfReference=true;
    return;
  }
  NameInformation referring=getDependencyScope(n);
  String referringName="";
  if (referring != null) {
    referringName=referring.isPrototype ? referring.prototypeClass : referring.name;
  }
  String name=nameInfo.name;
  if (maybeHiddenAlias(name,n)) {
    recordAlias(name,WINDOW);
  }
  if (nameInfo.isExternallyReferenceable) {
    recordReference(WINDOW,name,RefType.REGULAR);
    maybeRecordAlias(name,parent,referring,referringName);
    return;
  }
  if (NodeUtil.isVarOrSimpleAssignLhs(n,parent)) {
    if (referring != null) {
      recordReference(referringName,name,RefType.REGULAR);
    }
    return;
  }
  if (nodesToKeep.contains(n)) {
    NameInformation functionScope=getEnclosingFunctionDependencyScope(t);
    if (functionScope != null) {
      recordReference(functionScope.name,name,RefType.REGULAR);
    }
 else {
      recordReference(WINDOW,name,RefType.REGULAR);
    }
  }
 else   if (referring != null) {
    if (!maybeRecordAlias(name,parent,referring,referringName)) {
      RefType depType=referring.onlyAffectsClassDef ? RefType.INHERITANCE : RefType.REGULAR;
      recordReference(referringName,name,depType);
    }
  }
 else {
    for (    Node ancestor : n.getAncestors()) {
      if (NodeUtil.isAssignmentOp(ancestor) || ancestor.isFunction()) {
        recordReference(WINDOW,name,RefType.REGULAR);
        break;
      }
    }
  }
}
