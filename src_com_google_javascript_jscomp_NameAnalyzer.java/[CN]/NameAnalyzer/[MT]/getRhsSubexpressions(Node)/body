{
switch (n.getType()) {
case Token.EXPR_RESULT:
    return getRhsSubexpressions(n.getFirstChild());
case Token.FUNCTION:
  return ImmutableList.of();
case Token.CALL:
{
  Preconditions.checkState(isAnalyzableObjectDefinePropertiesDefinition(n));
  return ImmutableList.of(n.getLastChild());
}
case Token.NAME:
{
Node rhs=n.getFirstChild();
if (rhs != null) {
  return ImmutableList.of(rhs);
}
 else {
  return ImmutableList.of();
}
}
case Token.ASSIGN:
{
Node lhs=n.getFirstChild();
Node rhs=lhs.getNext();
return ImmutableList.of(lhs,rhs);
}
case Token.VAR:
{
ImmutableList.Builder<Node> nodes=ImmutableList.builder();
for (Node child : n.children()) {
nodes.addAll(getRhsSubexpressions(child));
}
return nodes.build();
}
default :
throw new IllegalArgumentException("AstChangeProxy::getRhs " + n);
}
}
