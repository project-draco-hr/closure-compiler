{
  String name="";
  Node rootNameNode=n;
  boolean bNameWasShortened=false;
  while (true) {
    if (NodeUtil.isGet(rootNameNode)) {
      Node prop=rootNameNode.getLastChild();
      if (rootNameNode.isGetProp()) {
        name="." + prop.getString() + name;
      }
 else {
        bNameWasShortened=true;
        name="";
      }
      rootNameNode=rootNameNode.getFirstChild();
    }
 else     if (NodeUtil.isObjectLitKey(rootNameNode,rootNameNode.getParent())) {
      name="." + rootNameNode.getString() + name;
      Node objLit=rootNameNode.getParent();
      Node objLitParent=objLit.getParent();
      if (objLitParent.isAssign()) {
        rootNameNode=objLitParent.getFirstChild();
      }
 else       if (objLitParent.isName()) {
        rootNameNode=objLitParent;
      }
 else       if (objLitParent.isString()) {
        rootNameNode=objLitParent;
      }
 else {
        return null;
      }
    }
 else {
      break;
    }
  }
  if (parent.isCall() && t.inGlobalScope()) {
    CodingConvention convention=compiler.getCodingConvention();
    SubclassRelationship classes=convention.getClassesDefinedByCall(parent);
    if (classes != null) {
      NameInformation nameInfo=new NameInformation();
      nameInfo.name=classes.subclassName;
      nameInfo.onlyAffectsClassDef=true;
      nameInfo.superclass=classes.superclassName;
      return nameInfo;
    }
    String singletonGetterClass=convention.getSingletonGetterClassName(parent);
    if (singletonGetterClass != null) {
      NameInformation nameInfo=new NameInformation();
      nameInfo.name=singletonGetterClass;
      nameInfo.onlyAffectsClassDef=true;
      return nameInfo;
    }
  }
switch (rootNameNode.getType()) {
case Token.NAME:
    if (!bNameWasShortened && n.isGetProp() && parent.isAssign()&& "prototype".equals(n.getLastChild().getString())) {
      if (createNameInformation(t,n.getFirstChild(),n) != null) {
        name=rootNameNode.getString() + name;
        name=name.substring(0,name.length() - PROTOTYPE_SUFFIX_LEN);
        NameInformation nameInfo=new NameInformation();
        nameInfo.name=name;
        return nameInfo;
      }
 else {
        return null;
      }
    }
  return createNameInformation(rootNameNode.getString() + name,t.getScope(),rootNameNode);
case Token.THIS:
if (t.inGlobalScope()) {
  NameInformation nameInfo=new NameInformation();
  if (name.indexOf('.') == 0) {
    nameInfo.name=name.substring(1);
  }
 else {
    nameInfo.name=name;
  }
  nameInfo.isExternallyReferenceable=true;
  return nameInfo;
}
return null;
default :
return null;
}
}
