{
  String name="";
  Node rootNameNode=n;
  boolean bNameWasShortened=false;
  while (NodeUtil.isGet(rootNameNode)) {
    Node prop=rootNameNode.getLastChild();
    if (rootNameNode.getType() == Token.GETPROP) {
      name="." + prop.getString() + name;
    }
 else {
      bNameWasShortened=true;
      name="";
    }
    rootNameNode=rootNameNode.getFirstChild();
  }
  if (NodeUtil.isCall(parent) && t.inGlobalScope()) {
    SubclassRelationship classes=compiler.getCodingConvention().getClassesDefinedByCall(parent);
    if (classes != null) {
      NameInformation nameInfo=new NameInformation();
      nameInfo.name=classes.subclassName;
      nameInfo.onlyAffectsClassDef=true;
      nameInfo.superclass=classes.superclassName;
      return nameInfo;
    }
  }
switch (rootNameNode.getType()) {
case Token.NAME:
    if (!bNameWasShortened && n.getType() == Token.GETPROP && parent.getType() == Token.ASSIGN && "prototype".equals(n.getLastChild().getString())) {
      if (createNameInformation(t,n.getFirstChild(),n) != null) {
        name=rootNameNode.getString() + name;
        name=name.substring(0,name.length() - PROTOTYPE_SUFFIX_LEN);
        NameInformation nameInfo=new NameInformation();
        nameInfo.name=name;
        return nameInfo;
      }
 else {
        return null;
      }
    }
  return createNameInformation(rootNameNode.getString() + name,t.getScope(),rootNameNode);
case Token.THIS:
if (t.inGlobalScope()) {
  NameInformation nameInfo=new NameInformation();
  if (name.indexOf('.') == 0) {
    nameInfo.name=name.substring(1);
  }
 else {
    nameInfo.name=name;
  }
  nameInfo.isExternallyReferenceable=true;
  return nameInfo;
}
return null;
default :
return null;
}
}
