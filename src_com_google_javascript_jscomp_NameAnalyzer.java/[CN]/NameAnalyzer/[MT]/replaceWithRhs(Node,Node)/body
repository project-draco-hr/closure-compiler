{
  if (valueConsumedByParent(n,parent)) {
    List<Node> replacements=getRhsSubexpressions(n);
    List<Node> newReplacements=new ArrayList<>();
    for (int i=0; i < replacements.size() - 1; i++) {
      newReplacements.addAll(getSideEffectNodes(replacements.get(i)));
    }
    Node valueExpr=replacements.get(replacements.size() - 1);
    valueExpr.detachFromParent();
    newReplacements.add(valueExpr);
    changeProxy.replaceWith(parent,n,collapseReplacements(newReplacements));
  }
 else   if (n.isAssign() && !parent.isFor()) {
    Node replacement=n.getLastChild();
    replacement.detachFromParent();
    changeProxy.replaceWith(parent,n,replacement);
  }
 else {
    replaceTopLevelExpressionWithRhs(parent,n);
  }
}
