{
switch (parent.getToken()) {
case BLOCK:
case SCRIPT:
case FOR:
case LABEL:
    break;
default :
  throw new IllegalArgumentException("Unsupported parent node type in replaceWithRhs " + parent.getToken());
}
switch (n.getToken()) {
case EXPR_RESULT:
case FUNCTION:
case VAR:
break;
case ASSIGN:
Preconditions.checkArgument(parent.isFor(),"Unsupported assignment in replaceWithRhs. parent: %s",parent.getToken());
break;
default :
throw new IllegalArgumentException("Unsupported node type in replaceWithRhs " + n.getToken());
}
List<Node> replacements=new ArrayList<>();
for (Node rhs : getRhsSubexpressions(n)) {
replacements.addAll(getSideEffectNodes(rhs));
}
if (parent.isFor()) {
if (replacements.isEmpty()) {
replacements.add(IR.empty());
}
 else {
Node expr=collapseReplacements(replacements);
replacements.clear();
replacements.add(expr);
}
}
changeProxy.replaceWith(parent,n,replacements);
}
