{
  Var newVar=var;
  boolean allowDupe=false;
  if (n.isGetProp() || NodeUtil.isObjectLitKey(n)) {
    JSDocInfo info=n.getJSDocInfo();
    if (info == null) {
      info=parent.getJSDocInfo();
    }
    allowDupe=info != null && info.getSuppressions().contains("duplicate");
  }
  JSType varType=var.getType();
  if (varType != null && varType != typeRegistry.getNativeType(UNKNOWN_TYPE) && newType != null && newType != typeRegistry.getNativeType(UNKNOWN_TYPE)) {
    if (var.input == null) {
      Scope s=var.getScope();
      s.undeclare(var);
      newVar=s.declare(variableName,n,varType,input,false);
      n.setJSType(varType);
      if (parent.isVar()) {
        if (n.getFirstChild() != null) {
          n.getFirstChild().setJSType(varType);
        }
      }
 else {
        Preconditions.checkState(parent.isFunction());
        parent.setJSType(varType);
      }
    }
 else {
      if (!(allowDupe || var.getParentNode().isExprResult()) || !newType.isEquivalentTo(varType)) {
        report(JSError.make(sourceName,n,DUP_VAR_DECLARATION,variableName,newType.toString(),var.getInputName(),String.valueOf(var.nameNode.getLineno()),varType.toString()));
      }
    }
  }
  return newVar;
}
