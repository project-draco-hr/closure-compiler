{
  found=found.restrictByNotNullOrUndefined();
  required=required.restrictByNotNullOrUndefined();
  if (found.isSubtype(required) || required.isSubtype(found)) {
    boolean strictMismatch=!found.isSubtypeWithoutStructuralTyping(required) && !required.isSubtypeWithoutStructuralTyping(found);
    if (strictMismatch) {
      implicitStructuralInterfaceUses.add(new TypeMismatch(found,required,error));
    }
    return;
  }
  mismatches.add(new TypeMismatch(found,required,error));
  if (found.isFunctionType() && required.isFunctionType()) {
    FunctionType fnTypeA=found.toMaybeFunctionType();
    FunctionType fnTypeB=required.toMaybeFunctionType();
    Iterator<Node> paramItA=fnTypeA.getParameters().iterator();
    Iterator<Node> paramItB=fnTypeB.getParameters().iterator();
    while (paramItA.hasNext() && paramItB.hasNext()) {
      registerIfMismatch(paramItA.next().getJSType(),paramItB.next().getJSType(),error);
    }
    registerIfMismatch(fnTypeA.getReturnType(),fnTypeB.getReturnType(),error);
  }
}
