{
  StaticTypedSlot<JSType> propSlot=instance.getSlot(prop);
  if (propSlot == null) {
    String sourceName=n.getSourceFileName();
    sourceName=nullToEmpty(sourceName);
    registerMismatch(instance,implementedInterface,report(JSError.make(n,INTERFACE_METHOD_NOT_IMPLEMENTED,prop,implementedInterface.toString(),instance.toString())));
  }
 else {
    Node propNode=propSlot.getDeclaration() == null ? null : propSlot.getDeclaration().getNode();
    propNode=propNode == null ? n : propNode;
    JSType found=propSlot.getType();
    found=found.restrictByNotNullOrUndefined();
    JSType required=implementedInterface.getImplicitPrototype().getPropertyType(prop);
    TemplateTypeMap typeMap=implementedInterface.getTemplateTypeMap();
    if (!typeMap.isEmpty()) {
      TemplateTypeMapReplacer replacer=new TemplateTypeMapReplacer(typeRegistry,typeMap);
      required=required.visit(replacer);
    }
    required=required.restrictByNotNullOrUndefined();
    if (!found.isSubtype(required)) {
      FunctionType constructor=implementedInterface.toObjectType().getConstructor();
      JSError err=t.makeError(propNode,HIDDEN_INTERFACE_PROPERTY_MISMATCH,prop,constructor.getTopMostDefiningType(prop).toString(),required.toString(),found.toString());
      registerMismatch(found,required,err);
      if (this.subtypingMode == SubtypingMode.NORMAL || !found.isSubtypeModuloNullUndefined(required)) {
        report(err);
      }
    }
  }
}
