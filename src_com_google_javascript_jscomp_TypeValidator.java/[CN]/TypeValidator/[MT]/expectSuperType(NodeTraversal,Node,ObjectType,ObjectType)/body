{
  FunctionType subCtor=subObject.getConstructor();
  ObjectType declaredSuper=subObject.getImplicitPrototype().getImplicitPrototype();
  if (!declaredSuper.isEquivalentTo(superObject)) {
    if (declaredSuper.isEquivalentTo(getNativeType(OBJECT_TYPE))) {
      registerMismatch(superObject,declaredSuper,report(t.makeError(n,MISSING_EXTENDS_TAG_WARNING,subObject.toString())));
    }
 else {
      mismatch(t.getSourceName(),n,"mismatch in declaration of superclass type",superObject,declaredSuper);
    }
    if (!subCtor.hasCachedValues()) {
      subCtor.setPrototypeBasedOn(superObject);
    }
  }
}
