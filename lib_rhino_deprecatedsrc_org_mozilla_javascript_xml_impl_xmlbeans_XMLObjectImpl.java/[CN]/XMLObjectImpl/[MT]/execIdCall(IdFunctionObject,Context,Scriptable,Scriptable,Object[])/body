{
  if (!f.hasTag(XMLOBJECT_TAG)) {
    return super.execIdCall(f,cx,scope,thisObj,args);
  }
  int id=f.methodId();
  if (id == Id_constructor) {
    return jsConstructor(cx,thisObj == null,args);
  }
  if (!(thisObj instanceof XMLObjectImpl))   throw incompatibleCallError(f);
  XMLObjectImpl realThis=(XMLObjectImpl)thisObj;
switch (id) {
case Id_addNamespace:
{
      Namespace ns=lib.castToNamespace(cx,arg(args,0));
      return realThis.addNamespace(ns);
    }
case Id_appendChild:
  return realThis.appendChild(arg(args,0));
case Id_attribute:
{
  XMLName xmlName=lib.toAttributeName(cx,arg(args,0));
  return realThis.attribute(xmlName);
}
case Id_attributes:
return realThis.attributes();
case Id_child:
{
XMLName xmlName=lib.toXMLNameOrIndex(cx,arg(args,0));
if (xmlName == null) {
long index=ScriptRuntime.lastUint32Result(cx);
return realThis.child(index);
}
 else {
return realThis.child(xmlName);
}
}
case Id_childIndex:
return ScriptRuntime.wrapInt(realThis.childIndex());
case Id_children:
return realThis.children();
case Id_comments:
return realThis.comments();
case Id_contains:
return ScriptRuntime.wrapBoolean(realThis.contains(arg(args,0)));
case Id_copy:
return realThis.copy();
case Id_descendants:
{
XMLName xmlName=(args.length == 0) ? XMLName.formStar() : lib.toXMLName(cx,args[0]);
return realThis.descendants(xmlName);
}
case Id_inScopeNamespaces:
{
Object[] array=realThis.inScopeNamespaces();
return cx.newArray(scope,array);
}
case Id_insertChildAfter:
return realThis.insertChildAfter(arg(args,0),arg(args,1));
case Id_insertChildBefore:
return realThis.insertChildBefore(arg(args,0),arg(args,1));
case Id_hasOwnProperty:
{
XMLName xmlName=lib.toXMLName(cx,arg(args,0));
return ScriptRuntime.wrapBoolean(realThis.hasOwnProperty(xmlName));
}
case Id_hasComplexContent:
return ScriptRuntime.wrapBoolean(realThis.hasComplexContent());
case Id_hasSimpleContent:
return ScriptRuntime.wrapBoolean(realThis.hasSimpleContent());
case Id_length:
return ScriptRuntime.wrapInt(realThis.length());
case Id_localName:
return realThis.localName();
case Id_name:
return realThis.name();
case Id_namespace:
{
String prefix=(args.length > 0) ? ScriptRuntime.toString(args[0]) : null;
return realThis.namespace(prefix);
}
case Id_namespaceDeclarations:
{
Object[] array=realThis.namespaceDeclarations();
return cx.newArray(scope,array);
}
case Id_nodeKind:
return realThis.nodeKind();
case Id_normalize:
realThis.normalize();
return Undefined.instance;
case Id_parent:
return realThis.parent();
case Id_prependChild:
return realThis.prependChild(arg(args,0));
case Id_processingInstructions:
{
XMLName xmlName=(args.length > 0) ? lib.toXMLName(cx,args[0]) : XMLName.formStar();
return realThis.processingInstructions(xmlName);
}
case Id_propertyIsEnumerable:
{
return ScriptRuntime.wrapBoolean(realThis.propertyIsEnumerable(arg(args,0)));
}
case Id_removeNamespace:
{
Namespace ns=lib.castToNamespace(cx,arg(args,0));
return realThis.removeNamespace(ns);
}
case Id_replace:
{
XMLName xmlName=lib.toXMLNameOrIndex(cx,arg(args,0));
Object arg1=arg(args,1);
if (xmlName == null) {
long index=ScriptRuntime.lastUint32Result(cx);
return realThis.replace(index,arg1);
}
 else {
return realThis.replace(xmlName,arg1);
}
}
case Id_setChildren:
return realThis.setChildren(arg(args,0));
case Id_setLocalName:
{
String localName;
Object arg=arg(args,0);
if (arg instanceof QName) {
localName=((QName)arg).localName();
}
 else {
localName=ScriptRuntime.toString(arg);
}
realThis.setLocalName(localName);
return Undefined.instance;
}
case Id_setName:
{
Object arg=(args.length != 0) ? args[0] : Undefined.instance;
QName qname;
if (arg instanceof QName) {
qname=(QName)arg;
if (qname.uri() == null) {
qname=lib.constructQNameFromString(cx,qname.localName());
}
 else {
qname=lib.constructQName(cx,qname);
}
}
 else {
qname=lib.constructQName(cx,arg);
}
realThis.setName(qname);
return Undefined.instance;
}
case Id_setNamespace:
{
Namespace ns=lib.castToNamespace(cx,arg(args,0));
realThis.setNamespace(ns);
return Undefined.instance;
}
case Id_text:
return realThis.text();
case Id_toString:
return realThis.toString();
case Id_toSource:
{
int indent=ScriptRuntime.toInt32(args,0);
return realThis.toSource(indent);
}
case Id_toXMLString:
{
int indent=ScriptRuntime.toInt32(args,0);
return realThis.toXMLString(indent);
}
case Id_valueOf:
return realThis.valueOf();
case Id_getXmlObject:
{
org.apache.xmlbeans.XmlObject xmlObject=realThis.getXmlObject();
return Context.javaToJS(xmlObject,scope);
}
}
throw new IllegalArgumentException(String.valueOf(id));
}
