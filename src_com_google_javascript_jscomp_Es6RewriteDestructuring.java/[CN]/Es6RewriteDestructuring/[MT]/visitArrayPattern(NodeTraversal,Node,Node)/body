{
  Node rhs, nodeToDetach;
  if (NodeUtil.isNameDeclaration(parent) && !NodeUtil.isEnhancedFor(parent.getParent())) {
    rhs=arrayPattern.getNext();
    nodeToDetach=parent;
  }
 else   if (parent.isAssign()) {
    rhs=arrayPattern.getNext();
    nodeToDetach=parent.getParent();
    Preconditions.checkState(nodeToDetach.isExprResult());
  }
 else   if (parent.isArrayPattern() || parent.isDefaultValue() || parent.isStringKey()) {
    return;
  }
 else   if (NodeUtil.isEnhancedFor(parent) || NodeUtil.isEnhancedFor(parent.getParent())) {
    visitDestructuringPatternInEnhancedFor(arrayPattern);
    return;
  }
 else   if (parent.isCatch()) {
    visitDestructuringPatternInCatch(arrayPattern);
    return;
  }
 else {
    throw new IllegalStateException("Unexpected ARRAY_PATTERN parent: " + parent);
  }
  String tempVarName=DESTRUCTURING_TEMP_VAR + (destructuringVarCounter++);
  Node tempDecl=IR.var(IR.name(tempVarName),makeIterator(compiler,rhs.detachFromParent()));
  tempDecl.useSourceInfoIfMissingFromForTree(arrayPattern);
  nodeToDetach.getParent().addChildBefore(tempDecl,nodeToDetach);
  for (Node child=arrayPattern.getFirstChild(), next; child != null; child=next) {
    next=child.getNext();
    if (child.isEmpty()) {
      Node nextCall=IR.exprResult(IR.call(IR.getprop(IR.name(tempVarName),IR.string("next"))));
      nextCall.useSourceInfoIfMissingFromForTree(child);
      nodeToDetach.getParent().addChildBefore(nextCall,nodeToDetach);
      continue;
    }
    Node newLHS, newRHS;
    if (child.isDefaultValue()) {
      String nextVarName=DESTRUCTURING_TEMP_VAR + (destructuringVarCounter++);
      Node var=IR.var(IR.name(nextVarName),IR.getprop(IR.call(IR.getprop(IR.name(tempVarName),IR.string("next"))),IR.string("value")));
      var.useSourceInfoIfMissingFromForTree(child);
      nodeToDetach.getParent().addChildBefore(var,nodeToDetach);
      newLHS=child.getFirstChild().detachFromParent();
      newRHS=defaultValueHook(IR.name(nextVarName),child.getLastChild().detachFromParent());
    }
 else     if (child.isRest()) {
      newLHS=child.getFirstChild().detachFromParent();
      newRHS=IR.call(NodeUtil.newQName(compiler,"$jscomp.arrayFromIterator"),IR.name(tempVarName));
    }
 else {
      newLHS=child.detachFromParent();
      newRHS=IR.getprop(IR.call(IR.getprop(IR.name(tempVarName),IR.string("next"))),IR.string("value"));
    }
    Node newNode;
    if (parent.isAssign()) {
      Node assignment=IR.assign(newLHS,newRHS);
      newNode=IR.exprResult(assignment);
    }
 else {
      newNode=IR.declaration(newLHS,newRHS,parent.getType());
    }
    newNode.useSourceInfoIfMissingFromForTree(arrayPattern);
    nodeToDetach.getParent().addChildBefore(newNode,nodeToDetach);
    visit(t,newLHS,newLHS.getParent());
  }
  nodeToDetach.detachFromParent();
  compiler.reportCodeChange();
}
