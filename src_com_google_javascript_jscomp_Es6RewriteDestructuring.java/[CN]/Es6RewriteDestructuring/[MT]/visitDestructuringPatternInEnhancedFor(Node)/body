{
  Preconditions.checkArgument(pattern.isDestructuringPattern());
  String tempVarName=DESTRUCTURING_TEMP_VAR + (destructuringVarCounter++);
  if (NodeUtil.isEnhancedFor(pattern.getParent())) {
    Node forNode=pattern.getParent();
    Node block=forNode.getLastChild();
    Node decl=IR.var(IR.name(tempVarName));
    decl.useSourceInfoIfMissingFromForTree(pattern);
    forNode.replaceChild(pattern,decl);
    Node exprResult=IR.exprResult(IR.assign(pattern,IR.name(tempVarName)));
    exprResult.useSourceInfoIfMissingFromForTree(pattern);
    block.addChildToFront(exprResult);
  }
 else {
    Node destructuringLhs=pattern.getParent();
    Preconditions.checkState(destructuringLhs.isDestructuringLhs());
    Node declarationNode=destructuringLhs.getParent();
    Node forNode=declarationNode.getParent();
    Preconditions.checkState(NodeUtil.isEnhancedFor(forNode));
    Node block=forNode.getLastChild();
    declarationNode.replaceChild(destructuringLhs,IR.name(tempVarName).useSourceInfoFrom(pattern));
    Token.Kind declarationType=declarationNode.getType();
    Node decl=IR.declaration(pattern.detachFromParent(),IR.name(tempVarName),declarationType);
    decl.useSourceInfoIfMissingFromForTree(pattern);
    block.addChildToFront(decl);
  }
}
