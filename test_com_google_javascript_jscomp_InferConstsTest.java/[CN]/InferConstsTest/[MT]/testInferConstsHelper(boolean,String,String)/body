{
  Compiler compiler=new Compiler();
  SourceFile extern=SourceFile.fromCode("extern","");
  SourceFile input=SourceFile.fromCode("js",js);
  compiler.init(ImmutableList.<SourceFile>of(),ImmutableList.of(input),new CompilerOptions());
  compiler.options.setLanguageIn(LanguageMode.ECMASCRIPT6);
  compiler.setLanguageMode(LanguageMode.ECMASCRIPT6);
  Node root=compiler.parseInputs();
  assertNotNull("Unexpected parse error(s): " + Joiner.on('\n').join(compiler.getErrors()),root);
  CompilerPass inferConsts=new InferConsts(compiler);
  inferConsts.process(compiler.getRoot().getFirstChild(),compiler.getRoot().getLastChild());
  Node n=compiler.getRoot().getLastChild();
  FindConstants constFinder=new FindConstants(constants);
  NodeTraversal.traverse(compiler,n,constFinder);
  for (  String name : constants) {
    if (constExpected) {
      assertTrue("Expect constant: " + name,constFinder.foundNodes.containsKey(name));
    }
 else {
      assertTrue("Unexpected constant: " + name,!constFinder.foundNodes.containsKey(name));
    }
  }
}
