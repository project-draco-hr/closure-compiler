{
  assertImpureBooleanTrue("a=true");
  assertImpureBooleanFalse("a=false");
  assertImpureBooleanTrue("a=(false,true)");
  assertImpureBooleanFalse("a=(true,false)");
  assertImpureBooleanTrue("a=(false || true)");
  assertImpureBooleanFalse("a=(true && false)");
  assertImpureBooleanTrue("a=!(true && false)");
  assertImpureBooleanTrue("a,true");
  assertImpureBooleanFalse("a,false");
  assertImpureBooleanTrue("true||false");
  assertImpureBooleanFalse("false||false");
  assertImpureBooleanTrue("true&&true");
  assertImpureBooleanFalse("true&&false");
  assertImpureBooleanFalse("!true");
  assertImpureBooleanTrue("!false");
  assertImpureBooleanTrue("!''");
  assertImpureBooleanUnknown("a *= 2");
  assertImpureBooleanUnknown("2 + 2");
  assertImpureBooleanTrue("a=1");
  assertImpureBooleanTrue("a=/a/");
  assertImpureBooleanTrue("a={}");
  assertImpureBooleanTrue("true");
  assertImpureBooleanTrue("10");
  assertImpureBooleanTrue("'0'");
  assertImpureBooleanTrue("/a/");
  assertImpureBooleanTrue("{}");
  assertImpureBooleanTrue("[]");
  assertImpureBooleanFalse("false");
  assertImpureBooleanFalse("null");
  assertImpureBooleanFalse("0");
  assertImpureBooleanFalse("''");
  assertImpureBooleanFalse("undefined");
  assertImpureBooleanFalse("void 0");
  assertImpureBooleanFalse("void foo()");
  assertImpureBooleanTrue("a?true:true");
  assertImpureBooleanFalse("a?false:false");
  assertImpureBooleanUnknown("a?true:false");
  assertImpureBooleanUnknown("a?true:foo()");
  assertImpureBooleanUnknown("b");
  assertImpureBooleanUnknown("-'0.0'");
  assertImpureBooleanTrue("{a:foo()}");
  assertImpureBooleanTrue("[foo()]");
  assertImpureBooleanTrue("new Date()");
}
