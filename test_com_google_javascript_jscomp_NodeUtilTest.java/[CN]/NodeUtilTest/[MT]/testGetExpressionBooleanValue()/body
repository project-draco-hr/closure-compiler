{
  assertExpressionBooleanTrue("a=true");
  assertExpressionBooleanFalse("a=false");
  assertExpressionBooleanTrue("a=(false,true)");
  assertExpressionBooleanFalse("a=(true,false)");
  assertExpressionBooleanTrue("a=(false || true)");
  assertExpressionBooleanFalse("a=(true && false)");
  assertExpressionBooleanTrue("a=!(true && false)");
  assertExpressionBooleanTrue("a,true");
  assertExpressionBooleanFalse("a,false");
  assertExpressionBooleanTrue("true||false");
  assertExpressionBooleanFalse("false||false");
  assertExpressionBooleanTrue("true&&true");
  assertExpressionBooleanFalse("true&&false");
  assertExpressionBooleanFalse("!true");
  assertExpressionBooleanTrue("!false");
  assertExpressionBooleanTrue("!''");
  assertExpressionBooleanUnknown("a *= 2");
  assertExpressionBooleanUnknown("2 + 2");
  assertExpressionBooleanTrue("a=1");
  assertExpressionBooleanTrue("a=/a/");
  assertExpressionBooleanTrue("a={}");
  assertExpressionBooleanTrue("true");
  assertExpressionBooleanTrue("10");
  assertExpressionBooleanTrue("'0'");
  assertExpressionBooleanTrue("/a/");
  assertExpressionBooleanTrue("{}");
  assertExpressionBooleanTrue("[]");
  assertExpressionBooleanFalse("false");
  assertExpressionBooleanFalse("null");
  assertExpressionBooleanFalse("0");
  assertExpressionBooleanFalse("''");
  assertExpressionBooleanFalse("undefined");
  assertExpressionBooleanFalse("void 0");
  assertExpressionBooleanFalse("void foo()");
  assertExpressionBooleanTrue("a?true:true");
  assertExpressionBooleanFalse("a?false:false");
  assertExpressionBooleanUnknown("a?true:false");
  assertExpressionBooleanUnknown("a?true:foo()");
  assertExpressionBooleanUnknown("b");
  assertExpressionBooleanUnknown("-'0.0'");
}
