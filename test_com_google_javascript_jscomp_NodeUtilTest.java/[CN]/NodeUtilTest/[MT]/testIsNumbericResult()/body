{
  assertTrue(NodeUtil.isNumericResult(getNode("1")));
  assertFalse(NodeUtil.isNumericResult(getNode("true")));
  assertTrue(NodeUtil.isNumericResult(getNode("+true")));
  assertTrue(NodeUtil.isNumericResult(getNode("+1")));
  assertTrue(NodeUtil.isNumericResult(getNode("-1")));
  assertTrue(NodeUtil.isNumericResult(getNode("-Infinity")));
  assertTrue(NodeUtil.isNumericResult(getNode("Infinity")));
  assertTrue(NodeUtil.isNumericResult(getNode("NaN")));
  assertFalse(NodeUtil.isNumericResult(getNode("undefined")));
  assertFalse(NodeUtil.isNumericResult(getNode("void 0")));
  assertTrue(NodeUtil.isNumericResult(getNode("a << b")));
  assertTrue(NodeUtil.isNumericResult(getNode("a >> b")));
  assertTrue(NodeUtil.isNumericResult(getNode("a >>> b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a == b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a != b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a === b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a !== b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a < b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a > b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a <= b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a >= b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a in b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a instanceof b")));
  assertFalse(NodeUtil.isNumericResult(getNode("'a'")));
  assertFalse(NodeUtil.isNumericResult(getNode("'a'+b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a+'b'")));
  assertFalse(NodeUtil.isNumericResult(getNode("a+b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a()")));
  assertFalse(NodeUtil.isNumericResult(getNode("''.a")));
  assertFalse(NodeUtil.isNumericResult(getNode("a.b")));
  assertFalse(NodeUtil.isNumericResult(getNode("a.b()")));
  assertFalse(NodeUtil.isNumericResult(getNode("a().b()")));
  assertFalse(NodeUtil.isNumericResult(getNode("new a()")));
  assertFalse(NodeUtil.isNumericResult(getNode("([1,2])")));
  assertFalse(NodeUtil.isNumericResult(getNode("({a:1})")));
  assertTrue(NodeUtil.isNumericResult(getNode("1 && 2")));
  assertTrue(NodeUtil.isNumericResult(getNode("1 || 2")));
  assertTrue(NodeUtil.isNumericResult(getNode("a ? 2 : 3")));
  assertTrue(NodeUtil.isNumericResult(getNode("a,1")));
  assertTrue(NodeUtil.isNumericResult(getNode("a=1")));
}
