{
  assertFalse(testLocalValue("x"));
  assertFalse(testLocalValue("x()"));
  assertFalse(testLocalValue("this"));
  assertFalse(testLocalValue("arguments"));
  assertFalse(testLocalValue("new x()"));
  assertFalse(testLocalValue("(new x()).y"));
  assertFalse(testLocalValue("(new x())['y']"));
  assertTrue(testLocalValue("null"));
  assertTrue(testLocalValue("undefined"));
  assertTrue(testLocalValue("Infinity"));
  assertTrue(testLocalValue("NaN"));
  assertTrue(testLocalValue("1"));
  assertTrue(testLocalValue("'a'"));
  assertTrue(testLocalValue("true"));
  assertTrue(testLocalValue("false"));
  assertTrue(testLocalValue("[]"));
  assertTrue(testLocalValue("{}"));
  assertTrue(testLocalValue("[x]"));
  assertTrue(testLocalValue("{'a':x}"));
  assertTrue(testLocalValue("++x"));
  assertTrue(testLocalValue("--x"));
  assertFalse(testLocalValue("x++"));
  assertFalse(testLocalValue("x--"));
  assertTrue(testLocalValue("x=1"));
  assertFalse(testLocalValue("x=[]"));
  assertFalse(testLocalValue("x=y"));
  assertTrue(testLocalValue("x+=y"));
  assertTrue(testLocalValue("x*=y"));
  assertTrue(testLocalValue("x==y"));
  assertTrue(testLocalValue("x!=y"));
  assertTrue(testLocalValue("x>y"));
  assertTrue(testLocalValue("(1,2)"));
  assertTrue(testLocalValue("(x,1)"));
  assertFalse(testLocalValue("(x,y)"));
  assertTrue(testLocalValue("1||2"));
  assertFalse(testLocalValue("x||1"));
  assertFalse(testLocalValue("x||y"));
  assertFalse(testLocalValue("1||y"));
  assertTrue(testLocalValue("1&&2"));
  assertFalse(testLocalValue("x&&1"));
  assertFalse(testLocalValue("x&&y"));
  assertFalse(testLocalValue("1&&y"));
  assertTrue(testLocalValue("x?1:2"));
  assertFalse(testLocalValue("x?x:2"));
  assertFalse(testLocalValue("x?1:x"));
  assertFalse(testLocalValue("x?x:y"));
  assertTrue(testLocalValue("!y"));
  assertTrue(testLocalValue("~y"));
  assertTrue(testLocalValue("y + 1"));
  assertTrue(testLocalValue("y + z"));
  assertTrue(testLocalValue("y * z"));
  assertTrue(testLocalValue("'a' in x"));
  assertTrue(testLocalValue("typeof x"));
  assertTrue(testLocalValue("x instanceof y"));
  assertTrue(testLocalValue("void x"));
  assertTrue(testLocalValue("void 0"));
  assertFalse(testLocalValue("{}.x"));
  assertTrue(testLocalValue("{}.toString()"));
  assertTrue(testLocalValue("o.toString()"));
  assertFalse(testLocalValue("o.valueOf()"));
  assertTrue(testLocalValue("delete a.b"));
}
