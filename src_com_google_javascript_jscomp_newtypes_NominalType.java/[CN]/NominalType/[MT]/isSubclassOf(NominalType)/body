{
  RawNominalType otherRawType=other.rawType;
  if (rawType.isInterface && !otherRawType.isInterface) {
    return false;
  }
  if (!rawType.isInterface && otherRawType.isInterface) {
    if (rawType.interfaces == null) {
      return false;
    }
    for (    NominalType i : rawType.interfaces) {
      if (i.instantiateGenerics(typeMap).isSubclassOf(other)) {
        return true;
      }
    }
    return false;
  }
  if (rawType.isInterface && otherRawType.isInterface) {
    if (rawType.equals(otherRawType)) {
      if (!typeMap.isEmpty()) {
        for (        String typeVar : rawType.getTypeParameters()) {
          Preconditions.checkState(other.typeMap.containsKey(typeVar),"Other (%s) doesn't contain mapping (%s->%s) from this (%s)",other,typeVar,typeMap.get(typeVar),this);
          if (!typeMap.get(typeVar).isSubtypeOf(other.typeMap.get(typeVar))) {
            return false;
          }
        }
      }
 else       if (!other.typeMap.isEmpty()) {
        return false;
      }
      return true;
    }
 else     if (rawType.interfaces == null) {
      return false;
    }
 else {
      for (      NominalType i : rawType.interfaces) {
        if (i.instantiateGenerics(typeMap).isSubclassOf(other)) {
          return true;
        }
      }
      return false;
    }
  }
  if (rawType.equals(otherRawType)) {
    if (typeMap.isEmpty()) {
      return instantiationIsUnknownOrIdentity(other);
    }
    if (other.typeMap.isEmpty()) {
      return instantiationIsUnknownOrIdentity(this);
    }
    for (    String typeVar : rawType.getTypeParameters()) {
      Preconditions.checkState(typeMap.containsKey(typeVar),"Type variable %s not in the domain: %s",typeVar,typeMap.keySet());
      Preconditions.checkState(other.typeMap.containsKey(typeVar),"Other (%s) doesn't contain mapping (%s->%s) from this (%s)",other,typeVar,typeMap.get(typeVar),this);
      if (!typeMap.get(typeVar).isSubtypeOf(other.typeMap.get(typeVar))) {
        return false;
      }
    }
    return true;
  }
 else   if (rawType.superClass == null) {
    return false;
  }
 else {
    return rawType.superClass.instantiateGenerics(typeMap).isSubclassOf(other);
  }
}
