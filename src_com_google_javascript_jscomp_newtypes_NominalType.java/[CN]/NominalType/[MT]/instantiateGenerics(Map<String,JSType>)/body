{
  if (newTypeMap.isEmpty()) {
    return this;
  }
  if (!this.rawType.isGeneric()) {
    return this.rawType.getAsNominalType();
  }
  ImmutableMap.Builder<String,JSType> builder=ImmutableMap.builder();
  ImmutableMap<String,JSType> resultMap;
  if (!typeMap.isEmpty()) {
    for (    String oldKey : typeMap.keySet()) {
      builder.put(oldKey,typeMap.get(oldKey).substituteGenerics(newTypeMap));
    }
    resultMap=builder.build();
  }
 else {
    ImmutableList<String> typeParams=this.rawType.getTypeParameters();
    for (    String newKey : typeParams) {
      if (newTypeMap.containsKey(newKey)) {
        builder.put(newKey,newTypeMap.get(newKey));
      }
    }
    resultMap=builder.build();
    if (resultMap.isEmpty()) {
      return this;
    }
    if (resultMap.size() < typeParams.size()) {
      return this;
    }
  }
  return new NominalType(resultMap,this.rawType);
}
