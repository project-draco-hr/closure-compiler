{
  UnionType nullOrString=(UnionType)createUnionType(NULL_TYPE,STRING_OBJECT_TYPE);
  UnionType stringOrNull=(UnionType)createUnionType(STRING_OBJECT_TYPE,NULL_TYPE);
  Asserts.assertTypeEquals(nullOrString,stringOrNull);
  Asserts.assertTypeEquals(stringOrNull,nullOrString);
  assertTypeCanAssignToItself(createUnionType(VOID_TYPE,NUMBER_TYPE));
  assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE,STRING_TYPE,OBJECT_TYPE));
  assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE,BOOLEAN_TYPE));
  assertTypeCanAssignToItself(createUnionType(VOID_TYPE));
  UnionType nullOrUnknown=(UnionType)createUnionType(NULL_TYPE,unresolvedNamedType);
  assertTrue(nullOrUnknown.isUnknownType());
  Asserts.assertTypeEquals(nullOrUnknown,NULL_TYPE.getLeastSupertype(nullOrUnknown));
  Asserts.assertTypeEquals(nullOrUnknown,nullOrUnknown.getLeastSupertype(NULL_TYPE));
  Asserts.assertTypeEquals(UNKNOWN_TYPE,NULL_TYPE.getGreatestSubtype(nullOrUnknown));
  Asserts.assertTypeEquals(UNKNOWN_TYPE,nullOrUnknown.getGreatestSubtype(NULL_TYPE));
  assertTrue(NULL_TYPE.differsFrom(nullOrUnknown));
  assertTrue(nullOrUnknown.differsFrom(NULL_TYPE));
  assertFalse(nullOrUnknown.differsFrom(unresolvedNamedType));
  assertTrue(NULL_TYPE.isSubtype(nullOrUnknown));
  assertTrue(unresolvedNamedType.isSubtype(nullOrUnknown));
  assertTrue(nullOrUnknown.isSubtype(NULL_TYPE));
  Asserts.assertTypeEquals(unresolvedNamedType,nullOrUnknown.restrictByNotNullOrUndefined());
  Asserts.assertTypeEquals(NUMBER_TYPE,nullOrString.findPropertyType("length"));
  assertEquals(null,nullOrString.findPropertyType("lengthx"));
  Asserts.assertResolvesToSame(nullOrString);
}
