{
  DiGraph<String,String> graph=new LinkedDirectedGraph<String,String>();
  graph.createNode("a");
  graph.createNode("b");
  graph.createNode("c");
  graph.connect("a","->","b");
  assertTrue(graph.hasNode("a"));
  assertTrue(graph.hasNode("b"));
  assertTrue(graph.hasNode("c"));
  assertFalse(graph.hasNode("d"));
  assertTrue(graph.isConnected("a","b"));
  assertTrue(graph.isConnected("b","a"));
  assertFalse(graph.isConnected("a","c"));
  assertFalse(graph.isConnected("b","c"));
  assertFalse(graph.isConnected("c","a"));
  assertFalse(graph.isConnected("c","b"));
  assertFalse(graph.isConnected("a","a"));
  assertFalse(graph.isConnected("b","b"));
  assertFalse(graph.isConnected("b","c"));
  assertTrue(graph.isConnectedInDirection("a","b"));
  assertFalse(graph.isConnectedInDirection("b","a"));
  assertFalse(graph.isConnectedInDirection("a","c"));
  assertFalse(graph.isConnectedInDirection("b","c"));
  assertFalse(graph.isConnectedInDirection("c","a"));
  assertFalse(graph.isConnectedInDirection("c","b"));
  graph.disconnect("a","b");
  assertFalse(graph.isConnected("a","b"));
  assertFalse(graph.isConnected("b","a"));
  graph.connect("a","->","b");
  graph.connect("b","->","a");
  graph.disconnect("a","b");
  assertFalse(graph.isConnected("a","b"));
  assertFalse(graph.isConnected("b","a"));
  graph.connect("a","->","b");
  graph.connect("b","->","a");
  graph.disconnectInDirection("a","b");
  assertTrue(graph.isConnected("b","a"));
  assertTrue(graph.isConnected("a","b"));
  assertFalse(graph.isConnectedInDirection("a","b"));
  assertTrue(graph.isConnectedInDirection("b","a"));
}
