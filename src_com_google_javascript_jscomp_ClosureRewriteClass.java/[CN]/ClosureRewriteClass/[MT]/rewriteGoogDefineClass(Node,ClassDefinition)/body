{
  Node block=IR.block();
  cls.constructor.value.setJSDocInfo(null);
  if (NodeUtil.isNameDeclaration(exprRoot)) {
    Node decl=IR.declaration(cls.name.cloneTree(),cls.constructor.value,exprRoot.getToken()).srcref(exprRoot);
    JSDocInfo mergedClassInfo=mergeJsDocFor(cls,decl);
    decl.setJSDocInfo(mergedClassInfo);
    block.addChildToBack(decl);
  }
 else {
    Node assign=IR.assign(cls.name.cloneTree(),cls.constructor.value).srcref(exprRoot).setJSDocInfo(cls.constructor.info);
    JSDocInfo mergedClassInfo=mergeJsDocFor(cls,assign);
    assign.setJSDocInfo(mergedClassInfo);
    Node expr=IR.exprResult(assign).srcref(exprRoot);
    block.addChildToBack(expr);
  }
  if (cls.superClass != null) {
    block.addChildToBack(fixupSrcref(IR.exprResult(IR.call(NodeUtil.newQName(compiler,"goog.inherits").srcrefTree(cls.superClass),cls.name.cloneTree(),cls.superClass.cloneTree()).srcref(cls.superClass))));
  }
  for (  MemberDefinition def : cls.staticProps) {
    def.value.setJSDocInfo(null);
    block.addChildToBack(fixupSrcref(IR.exprResult(fixupSrcref(IR.assign(IR.getprop(cls.name.cloneTree(),IR.string(def.name.getString()).srcref(def.name)).srcref(def.name),def.value)).setJSDocInfo(def.info))));
    maybeRewriteClassDefinition(block.getLastChild());
  }
  for (  MemberDefinition def : cls.props) {
    def.value.setJSDocInfo(null);
    Node exprResult=IR.exprResult(IR.assign(NodeUtil.newQName(compiler,cls.name.getQualifiedName() + ".prototype." + def.name.getString()),def.value).setJSDocInfo(def.info));
    exprResult.useSourceInfoIfMissingFromForTree(def.name);
    exprResult.setLength(def.value.getSourceOffset() + def.value.getLength() - def.name.getSourceOffset());
    block.addChildToBack(exprResult);
    maybeRewriteClassDefinition(block.getLastChild());
  }
  if (cls.classModifier != null) {
    Node argList=cls.classModifier.getSecondChild();
    Node arg=argList.getFirstChild();
    final String argName=arg.getString();
    NodeTraversal.traverseEs6(compiler,cls.classModifier.getLastChild(),new AbstractPostOrderCallback(){
      @Override public void visit(      NodeTraversal t,      Node n,      Node parent){
        if (n.isName() && n.getString().equals(argName)) {
          parent.replaceChild(n,cls.name.cloneTree());
        }
      }
    }
);
    block.addChildToBack(IR.exprResult(fixupFreeCall(IR.call(cls.classModifier,cls.name.cloneTree()).srcref(cls.classModifier))).srcref(cls.classModifier));
  }
  Node parent=exprRoot.getParent();
  Node stmts=block.removeChildren();
  parent.addChildrenAfter(stmts,exprRoot);
  parent.removeChild(exprRoot);
  compiler.reportCodeChange();
}
