{
  Node call=exprRoot.getFirstChild();
  if (call.isAssign()) {
    call=call.getSecondChild();
  }
 else   if (call.isName()) {
    call=call.getFirstChild();
  }
  Node objLit=cls.descriptor;
  if (hasShorthandAssignment(objLit)) {
    compiler.report(JSError.make(objLit,PolymerPassErrors.POLYMER_SHORTHAND_NOT_SUPPORTED));
    return;
  }
  JSDocInfoBuilder objLitDoc=new JSDocInfoBuilder(true);
  objLitDoc.recordLends(cls.target.getQualifiedName() + ".prototype");
  objLit.setJSDocInfo(objLitDoc.build());
  addTypesToFunctions(objLit,cls.target.getQualifiedName());
  PolymerPassStaticUtils.switchDollarSignPropsToBrackets(objLit,compiler);
  PolymerPassStaticUtils.quoteListenerAndHostAttributeKeys(objLit);
  for (  MemberDefinition prop : cls.props) {
    if (prop.value.isObjectLit()) {
      PolymerPassStaticUtils.switchDollarSignPropsToBrackets(prop.value,compiler);
    }
  }
  Node block=IR.block();
  JSDocInfoBuilder constructorDoc=this.getConstructorDoc(cls);
  Node ctorKey=cls.constructor.value.getParent();
  if (ctorKey != null) {
    ctorKey.removeProp(Node.JSDOC_INFO_PROP);
  }
  if (cls.target.isGetProp()) {
    Node assign=IR.assign(cls.target.cloneTree(),cls.constructor.value.cloneTree());
    assign.setJSDocInfo(constructorDoc.build());
    Node exprResult=IR.exprResult(assign);
    block.addChildToBack(exprResult);
  }
 else {
    Node var=IR.var(cls.target.cloneTree(),cls.constructor.value.cloneTree());
    var.setJSDocInfo(constructorDoc.build());
    block.addChildToBack(var);
  }
  appendPropertiesToBlock(cls,block,cls.target.getQualifiedName() + ".prototype.");
  appendBehaviorMembersToBlock(cls,block);
  ImmutableList<MemberDefinition> readOnlyProps=parseReadOnlyProperties(cls,block);
  addInterfaceExterns(cls,readOnlyProps);
  removePropertyDocs(objLit);
  block.useSourceInfoIfMissingFromForTree(exprRoot);
  Node statements=block.removeChildren();
  Node parent=exprRoot.getParent();
  if (!isInGlobalScope && !cls.target.isGetProp()) {
    Node scriptNode=NodeUtil.getEnclosingScript(exprRoot);
    scriptNode.addChildrenToFront(statements);
  }
 else {
    Node beforeRoot=exprRoot.getPrevious();
    if (beforeRoot == null) {
      parent.addChildrenToFront(statements);
    }
 else {
      parent.addChildrenAfter(statements,beforeRoot);
    }
  }
  if (NodeUtil.isNameDeclaration(exprRoot)) {
    Node assignExpr=varToAssign(exprRoot);
    parent.replaceChild(exprRoot,assignExpr);
  }
  compiler.reportCodeChange();
}
