{
switch (n.getType()) {
case Token.NEW:
case Token.CALL:
    Node calledFn=n.getFirstChild();
  String name=calledFn.getQualifiedName();
if (name != null) {
  Config config=findMatching(name);
  if (config != null) {
    doSubstitutions(t,config,n);
    return;
  }
}
if (NodeUtil.isGet(calledFn)) {
Node rhs=calledFn.getLastChild();
if (rhs.isName() || rhs.isString()) {
  String methodName=rhs.getString();
  String originalMethodName=(String)rhs.getParent().getProp(Node.ORIGINALNAME_PROP);
  Collection<String> classes;
  if (originalMethodName != null) {
    classes=methods.get(originalMethodName);
  }
 else {
    classes=methods.get(methodName);
  }
  if (classes != null) {
    Node lhs=calledFn.getFirstChild();
    if (lhs.getJSType() != null) {
      JSType type=lhs.getJSType().restrictByNotNullOrUndefined();
      Config config=findMatchingClass(type,classes);
      if (config != null) {
        doSubstitutions(t,config,n);
        return;
      }
    }
  }
}
}
break;
}
}
