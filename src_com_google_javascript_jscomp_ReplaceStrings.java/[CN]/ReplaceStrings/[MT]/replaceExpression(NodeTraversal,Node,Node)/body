{
  Node replacement;
  String key=null;
  String replacementString;
switch (expr.getType()) {
case Token.STRING:
    key=expr.getString();
  replacementString=getReplacement(key);
replacement=Node.newString(replacementString);
break;
case Token.ADD:
StringBuilder keyBuilder=new StringBuilder();
Node keyNode=Node.newString("");
replacement=buildReplacement(expr,keyNode,keyBuilder);
key=keyBuilder.toString();
replacementString=getReplacement(key);
keyNode.setString(replacementString);
break;
case Token.NAME:
Scope.Var var=t.getScope().getVar(expr.getString());
if (var != null && var.isConst()) {
Node value=var.getInitialValue();
if (value != null && value.getType() == Token.STRING) {
key=value.getString();
replacementString=getReplacement(key);
replacement=Node.newString(replacementString);
break;
}
}
return expr;
default :
return expr;
}
Preconditions.checkNotNull(key);
Preconditions.checkNotNull(replacementString);
recordReplacement(expr,key,replacementString);
parent.replaceChild(expr,replacement);
compiler.reportCodeChange();
return replacement;
}
