{
  if ((additionalCode == null) && (additionalEndCode == null)) {
    return new ProcessClosurePrimitives(compiler,null,CheckLevel.ERROR,true);
  }
 else {
    return new CompilerPass(){
      @Override public void process(      Node externs,      Node root){
        new ProcessClosurePrimitives(compiler,null,CheckLevel.OFF,true).process(externs,root);
        if (additionalCode != null) {
          SourceFile file=SourceFile.fromCode("additionalcode",additionalCode);
          Node scriptNode=root.getFirstChild();
          Node newScriptNode=new CompilerInput(file).getAstRoot(compiler);
          if (addAdditionalNamespace) {
            newScriptNode.getFirstChild().putBooleanProp(Node.IS_NAMESPACE,true);
          }
          while (newScriptNode.getLastChild() != null) {
            Node lastChild=newScriptNode.getLastChild();
            newScriptNode.removeChild(lastChild);
            scriptNode.addChildBefore(lastChild,scriptNode.getFirstChild());
          }
        }
        if (additionalEndCode != null) {
          SourceFile file=SourceFile.fromCode("additionalendcode",additionalEndCode);
          Node scriptNode=root.getFirstChild();
          Node newScriptNode=new CompilerInput(file).getAstRoot(compiler);
          if (addAdditionalNamespace) {
            newScriptNode.getFirstChild().putBooleanProp(Node.IS_NAMESPACE,true);
          }
          while (newScriptNode.getFirstChild() != null) {
            Node firstChild=newScriptNode.getFirstChild();
            newScriptNode.removeChild(firstChild);
            scriptNode.addChildToBack(firstChild);
          }
        }
        new ProcessClosurePrimitives(compiler,null,CheckLevel.ERROR,true).process(externs,root);
      }
    }
;
  }
}
