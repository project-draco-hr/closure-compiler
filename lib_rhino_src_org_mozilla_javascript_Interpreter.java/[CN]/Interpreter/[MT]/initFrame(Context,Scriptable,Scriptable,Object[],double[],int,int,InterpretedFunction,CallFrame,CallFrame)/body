{
  InterpreterData idata=fnOrScript.idata;
  boolean useActivation=idata.itsNeedsActivation;
  DebugFrame debuggerFrame=null;
  if (cx.debugger != null) {
    debuggerFrame=cx.debugger.getFrame(cx,idata);
    if (debuggerFrame != null) {
      useActivation=true;
    }
  }
  if (useActivation) {
    if (argsDbl != null) {
      args=getArgsArray(args,argsDbl,argShift,argCount);
    }
    argShift=0;
    argsDbl=null;
  }
  Scriptable scope;
  if (idata.itsFunctionType != 0) {
    scope=fnOrScript.getParentScope();
    if (useActivation) {
      scope=ScriptRuntime.createFunctionActivation(fnOrScript,scope,args);
    }
  }
 else {
    scope=callerScope;
    ScriptRuntime.initScript(fnOrScript,thisObj,cx,scope,fnOrScript.idata.evalScriptFlag);
  }
  if (idata.itsNestedFunctions != null) {
    if (idata.itsFunctionType != 0 && !idata.itsNeedsActivation)     Kit.codeBug();
    for (int i=0; i < idata.itsNestedFunctions.length; i++) {
      InterpreterData fdata=idata.itsNestedFunctions[i];
      if (fdata.itsFunctionType == FunctionNode.FUNCTION_STATEMENT) {
        initFunction(cx,scope,fnOrScript,i);
      }
    }
  }
  Scriptable[] scriptRegExps=null;
  if (idata.itsRegExpLiterals != null) {
    if (idata.itsFunctionType != 0) {
      scriptRegExps=fnOrScript.functionRegExps;
    }
 else {
      scriptRegExps=fnOrScript.createRegExpWraps(cx,scope);
    }
  }
  int emptyStackTop=idata.itsMaxVars + idata.itsMaxLocals - 1;
  int maxFrameArray=idata.itsMaxFrameArray;
  if (maxFrameArray != emptyStackTop + idata.itsMaxStack + 1)   Kit.codeBug();
  Object[] stack;
  int[] stackAttributes;
  double[] sDbl;
  boolean stackReuse;
  if (frame.stack != null && maxFrameArray <= frame.stack.length) {
    stackReuse=true;
    stack=frame.stack;
    stackAttributes=frame.stackAttributes;
    sDbl=frame.sDbl;
  }
 else {
    stackReuse=false;
    stack=new Object[maxFrameArray];
    stackAttributes=new int[maxFrameArray];
    sDbl=new double[maxFrameArray];
  }
  int varCount=idata.getParamAndVarCount();
  for (int i=0; i < varCount; i++) {
    if (idata.getParamOrVarConst(i))     stackAttributes[i]=ScriptableObject.CONST;
  }
  int definedArgs=idata.argCount;
  if (definedArgs > argCount) {
    definedArgs=argCount;
  }
  frame.parentFrame=parentFrame;
  frame.frameIndex=(parentFrame == null) ? 0 : parentFrame.frameIndex + 1;
  if (frame.frameIndex > cx.getMaximumInterpreterStackDepth()) {
    throw Context.reportRuntimeError("Exceeded maximum stack depth");
  }
  frame.frozen=false;
  frame.fnOrScript=fnOrScript;
  frame.idata=idata;
  frame.stack=stack;
  frame.stackAttributes=stackAttributes;
  frame.sDbl=sDbl;
  frame.varSource=frame;
  frame.localShift=idata.itsMaxVars;
  frame.emptyStackTop=emptyStackTop;
  frame.debuggerFrame=debuggerFrame;
  frame.useActivation=useActivation;
  frame.thisObj=thisObj;
  frame.scriptRegExps=scriptRegExps;
  frame.result=Undefined.instance;
  frame.pc=0;
  frame.pcPrevBranch=0;
  frame.pcSourceLineStart=idata.firstLinePC;
  frame.scope=scope;
  frame.savedStackTop=emptyStackTop;
  frame.savedCallOp=0;
  System.arraycopy(args,argShift,stack,0,definedArgs);
  if (argsDbl != null) {
    System.arraycopy(argsDbl,argShift,sDbl,0,definedArgs);
  }
  for (int i=definedArgs; i != idata.itsMaxVars; ++i) {
    stack[i]=Undefined.instance;
  }
  if (stackReuse) {
    for (int i=emptyStackTop + 1; i != stack.length; ++i) {
      stack[i]=null;
    }
  }
  enterFrame(cx,frame,args,false);
}
