{
  final Object DBL_MRK=DOUBLE_MARK;
  final Object undefined=Undefined.instance;
  final boolean instructionCounting=(cx.instructionThreshold != 0);
  final int INVOCATION_COST=100;
  final int EXCEPTION_COST=100;
  String stringReg=null;
  int indexReg=-1;
  if (cx.lastInterpreterFrame != null) {
    if (cx.previousInterpreterInvocations == null) {
      cx.previousInterpreterInvocations=new ObjArray();
    }
    cx.previousInterpreterInvocations.push(cx.lastInterpreterFrame);
  }
  GeneratorState generatorState=null;
  if (throwable != null) {
    if (throwable instanceof GeneratorState) {
      generatorState=(GeneratorState)throwable;
      enterFrame(cx,frame,ScriptRuntime.emptyArgs,true);
      throwable=null;
    }
 else     if (!(throwable instanceof ContinuationJump)) {
      Kit.codeBug();
    }
  }
  Object interpreterResult=null;
  double interpreterResultDbl=0.0;
  StateLoop:   for (; ; ) {
    withoutExceptions:     try {
      if (throwable != null) {
        frame=processThrowable(cx,throwable,frame,indexReg,instructionCounting);
        throwable=frame.throwable;
        frame.throwable=null;
      }
 else {
        if (generatorState == null && frame.frozen)         Kit.codeBug();
      }
      Object[] stack=frame.stack;
      double[] sDbl=frame.sDbl;
      Object[] vars=frame.varSource.stack;
      double[] varDbls=frame.varSource.sDbl;
      int[] varAttributes=frame.varSource.stackAttributes;
      byte[] iCode=frame.idata.itsICode;
      String[] strings=frame.idata.itsStringTable;
      int stackTop=frame.savedStackTop;
      cx.lastInterpreterFrame=frame;
      Loop:       for (; ; ) {
        int op=iCode[frame.pc++];
        jumplessRun: {
switch (op) {
case Icode_GENERATOR:
{
              if (!frame.frozen) {
                frame.pc--;
                CallFrame generatorFrame=captureFrameForGenerator(frame);
                generatorFrame.frozen=true;
                NativeGenerator generator=new NativeGenerator(frame.scope,generatorFrame.fnOrScript,generatorFrame);
                frame.result=generator;
                break Loop;
              }
 else {
              }
            }
case Token.YIELD:
{
            if (!frame.frozen) {
              return freezeGenerator(cx,frame,stackTop,generatorState);
            }
 else {
              Object obj=thawGenerator(frame,stackTop,generatorState,op);
              if (obj != Scriptable.NOT_FOUND) {
                throwable=obj;
                break withoutExceptions;
              }
              continue Loop;
            }
          }
case Icode_GENERATOR_END:
{
          frame.frozen=true;
          int sourceLine=getIndex(iCode,frame.pc);
          generatorState.returnedException=new JavaScriptException(NativeIterator.getStopIterationObject(frame.scope),frame.idata.itsSourceFile,sourceLine);
          break Loop;
        }
case Token.THROW:
{
        Object value=stack[stackTop];
        if (value == DBL_MRK)         value=ScriptRuntime.wrapNumber(sDbl[stackTop]);
        --stackTop;
        int sourceLine=getIndex(iCode,frame.pc);
        throwable=new JavaScriptException(value,frame.idata.itsSourceFile,sourceLine);
        break withoutExceptions;
      }
case Token.RETHROW:
{
      indexReg+=frame.localShift;
      throwable=stack[indexReg];
      break withoutExceptions;
    }
case Token.GE:
case Token.LE:
case Token.GT:
case Token.LT:
{
    stackTop=doCompare(frame,op,stack,sDbl,stackTop);
    continue Loop;
  }
case Token.IN:
case Token.INSTANCEOF:
{
  stackTop=doInOrInstanceof(cx,op,stack,sDbl,stackTop);
  continue Loop;
}
case Token.EQ:
case Token.NE:
{
--stackTop;
boolean valBln=doEquals(stack,sDbl,stackTop);
valBln^=(op == Token.NE);
stack[stackTop]=ScriptRuntime.wrapBoolean(valBln);
continue Loop;
}
case Token.SHEQ:
case Token.SHNE:
{
--stackTop;
boolean valBln=doShallowEquals(stack,sDbl,stackTop);
valBln^=(op == Token.SHNE);
stack[stackTop]=ScriptRuntime.wrapBoolean(valBln);
continue Loop;
}
case Token.IFNE:
if (stack_boolean(frame,stackTop--)) {
frame.pc+=2;
continue Loop;
}
break jumplessRun;
case Token.IFEQ:
if (!stack_boolean(frame,stackTop--)) {
frame.pc+=2;
continue Loop;
}
break jumplessRun;
case Icode_IFEQ_POP:
if (!stack_boolean(frame,stackTop--)) {
frame.pc+=2;
continue Loop;
}
stack[stackTop--]=null;
break jumplessRun;
case Token.GOTO:
break jumplessRun;
case Icode_GOSUB:
++stackTop;
stack[stackTop]=DBL_MRK;
sDbl[stackTop]=frame.pc + 2;
break jumplessRun;
case Icode_STARTSUB:
if (stackTop == frame.emptyStackTop + 1) {
indexReg+=frame.localShift;
stack[indexReg]=stack[stackTop];
sDbl[indexReg]=sDbl[stackTop];
--stackTop;
}
 else {
if (stackTop != frame.emptyStackTop) Kit.codeBug();
}
continue Loop;
case Icode_RETSUB:
{
if (instructionCounting) {
addInstructionCount(cx,frame,0);
}
indexReg+=frame.localShift;
Object value=stack[indexReg];
if (value != DBL_MRK) {
throwable=value;
break withoutExceptions;
}
frame.pc=(int)sDbl[indexReg];
if (instructionCounting) {
frame.pcPrevBranch=frame.pc;
}
continue Loop;
}
case Icode_POP:
stack[stackTop]=null;
stackTop--;
continue Loop;
case Icode_POP_RESULT:
frame.result=stack[stackTop];
frame.resultDbl=sDbl[stackTop];
stack[stackTop]=null;
--stackTop;
continue Loop;
case Icode_DUP:
stack[stackTop + 1]=stack[stackTop];
sDbl[stackTop + 1]=sDbl[stackTop];
stackTop++;
continue Loop;
case Icode_DUP2:
stack[stackTop + 1]=stack[stackTop - 1];
sDbl[stackTop + 1]=sDbl[stackTop - 1];
stack[stackTop + 2]=stack[stackTop];
sDbl[stackTop + 2]=sDbl[stackTop];
stackTop+=2;
continue Loop;
case Icode_SWAP:
{
Object o=stack[stackTop];
stack[stackTop]=stack[stackTop - 1];
stack[stackTop - 1]=o;
double d=sDbl[stackTop];
sDbl[stackTop]=sDbl[stackTop - 1];
sDbl[stackTop - 1]=d;
continue Loop;
}
case Token.RETURN:
frame.result=stack[stackTop];
frame.resultDbl=sDbl[stackTop];
--stackTop;
break Loop;
case Token.RETURN_RESULT:
break Loop;
case Icode_RETUNDEF:
frame.result=undefined;
break Loop;
case Token.BITNOT:
{
int rIntValue=stack_int32(frame,stackTop);
stack[stackTop]=DBL_MRK;
sDbl[stackTop]=~rIntValue;
continue Loop;
}
case Token.BITAND:
case Token.BITOR:
case Token.BITXOR:
case Token.LSH:
case Token.RSH:
{
stackTop=doBitOp(frame,op,stack,sDbl,stackTop);
continue Loop;
}
case Token.URSH:
{
double lDbl=stack_double(frame,stackTop - 1);
int rIntValue=stack_int32(frame,stackTop) & 0x1F;
stack[--stackTop]=DBL_MRK;
sDbl[stackTop]=ScriptRuntime.toUint32(lDbl) >>> rIntValue;
continue Loop;
}
case Token.NEG:
case Token.POS:
{
double rDbl=stack_double(frame,stackTop);
stack[stackTop]=DBL_MRK;
if (op == Token.NEG) {
rDbl=-rDbl;
}
sDbl[stackTop]=rDbl;
continue Loop;
}
case Token.ADD:
--stackTop;
doAdd(stack,sDbl,stackTop,cx);
continue Loop;
case Token.SUB:
case Token.MUL:
case Token.DIV:
case Token.MOD:
{
stackTop=doArithmetic(frame,op,stack,sDbl,stackTop);
continue Loop;
}
case Token.NOT:
stack[stackTop]=ScriptRuntime.wrapBoolean(!stack_boolean(frame,stackTop));
continue Loop;
case Token.BINDNAME:
stack[++stackTop]=ScriptRuntime.bind(cx,frame.scope,stringReg);
continue Loop;
case Token.STRICT_SETNAME:
case Token.SETNAME:
{
Object rhs=stack[stackTop];
if (rhs == DBL_MRK) rhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
Scriptable lhs=(Scriptable)stack[stackTop];
stack[stackTop]=op == Token.SETNAME ? ScriptRuntime.setName(lhs,rhs,cx,frame.scope,stringReg) : ScriptRuntime.strictSetName(lhs,rhs,cx,frame.scope,stringReg);
continue Loop;
}
case Icode_SETCONST:
{
Object rhs=stack[stackTop];
if (rhs == DBL_MRK) rhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
Scriptable lhs=(Scriptable)stack[stackTop];
stack[stackTop]=ScriptRuntime.setConst(lhs,rhs,cx,stringReg);
continue Loop;
}
case Token.DELPROP:
case Icode_DELNAME:
{
stackTop=doDelName(cx,op,stack,sDbl,stackTop);
continue Loop;
}
case Token.GETPROPNOWARN:
{
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.getObjectPropNoWarn(lhs,stringReg,cx);
continue Loop;
}
case Token.GETPROP:
{
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.getObjectProp(lhs,stringReg,cx,frame.scope);
continue Loop;
}
case Token.SETPROP:
{
Object rhs=stack[stackTop];
if (rhs == DBL_MRK) rhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.setObjectProp(lhs,stringReg,rhs,cx);
continue Loop;
}
case Icode_PROP_INC_DEC:
{
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.propIncrDecr(lhs,stringReg,cx,iCode[frame.pc]);
++frame.pc;
continue Loop;
}
case Token.GETELEM:
{
stackTop=doGetElem(cx,frame,stack,sDbl,stackTop);
continue Loop;
}
case Token.SETELEM:
{
stackTop=doSetElem(cx,stack,sDbl,stackTop);
continue Loop;
}
case Icode_ELEM_INC_DEC:
{
stackTop=doElemIncDec(cx,frame,iCode,stack,sDbl,stackTop);
continue Loop;
}
case Token.GET_REF:
{
Ref ref=(Ref)stack[stackTop];
stack[stackTop]=ScriptRuntime.refGet(ref,cx);
continue Loop;
}
case Token.SET_REF:
{
Object value=stack[stackTop];
if (value == DBL_MRK) value=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
Ref ref=(Ref)stack[stackTop];
stack[stackTop]=ScriptRuntime.refSet(ref,value,cx);
continue Loop;
}
case Token.DEL_REF:
{
Ref ref=(Ref)stack[stackTop];
stack[stackTop]=ScriptRuntime.refDel(ref,cx);
continue Loop;
}
case Icode_REF_INC_DEC:
{
Ref ref=(Ref)stack[stackTop];
stack[stackTop]=ScriptRuntime.refIncrDecr(ref,cx,iCode[frame.pc]);
++frame.pc;
continue Loop;
}
case Token.LOCAL_LOAD:
++stackTop;
indexReg+=frame.localShift;
stack[stackTop]=stack[indexReg];
sDbl[stackTop]=sDbl[indexReg];
continue Loop;
case Icode_LOCAL_CLEAR:
indexReg+=frame.localShift;
stack[indexReg]=null;
continue Loop;
case Icode_NAME_AND_THIS:
++stackTop;
stack[stackTop]=ScriptRuntime.getNameFunctionAndThis(stringReg,cx,frame.scope);
++stackTop;
stack[stackTop]=ScriptRuntime.lastStoredScriptable(cx);
continue Loop;
case Icode_PROP_AND_THIS:
{
Object obj=stack[stackTop];
if (obj == DBL_MRK) obj=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.getPropFunctionAndThis(obj,stringReg,cx,frame.scope);
++stackTop;
stack[stackTop]=ScriptRuntime.lastStoredScriptable(cx);
continue Loop;
}
case Icode_ELEM_AND_THIS:
{
Object obj=stack[stackTop - 1];
if (obj == DBL_MRK) obj=ScriptRuntime.wrapNumber(sDbl[stackTop - 1]);
Object id=stack[stackTop];
if (id == DBL_MRK) id=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop - 1]=ScriptRuntime.getElemFunctionAndThis(obj,id,cx);
stack[stackTop]=ScriptRuntime.lastStoredScriptable(cx);
continue Loop;
}
case Icode_VALUE_AND_THIS:
{
Object value=stack[stackTop];
if (value == DBL_MRK) value=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.getValueFunctionAndThis(value,cx);
++stackTop;
stack[stackTop]=ScriptRuntime.lastStoredScriptable(cx);
continue Loop;
}
case Icode_CALLSPECIAL:
{
if (instructionCounting) {
cx.instructionCount+=INVOCATION_COST;
}
stackTop=doCallSpecial(cx,frame,stack,sDbl,stackTop,iCode,indexReg);
continue Loop;
}
case Token.CALL:
case Icode_TAIL_CALL:
case Token.REF_CALL:
{
if (instructionCounting) {
cx.instructionCount+=INVOCATION_COST;
}
stackTop-=1 + indexReg;
Callable fun=(Callable)stack[stackTop];
Scriptable funThisObj=(Scriptable)stack[stackTop + 1];
if (op == Token.REF_CALL) {
Object[] outArgs=getArgsArray(stack,sDbl,stackTop + 2,indexReg);
stack[stackTop]=ScriptRuntime.callRef(fun,funThisObj,outArgs,cx);
continue Loop;
}
Scriptable calleeScope=frame.scope;
if (frame.useActivation) {
calleeScope=ScriptableObject.getTopLevelScope(frame.scope);
}
if (fun instanceof InterpretedFunction) {
InterpretedFunction ifun=(InterpretedFunction)fun;
if (frame.fnOrScript.securityDomain == ifun.securityDomain) {
CallFrame callParentFrame=frame;
CallFrame calleeFrame=new CallFrame();
if (op == Icode_TAIL_CALL) {
callParentFrame=frame.parentFrame;
exitFrame(cx,frame,null);
}
initFrame(cx,calleeScope,funThisObj,stack,sDbl,stackTop + 2,indexReg,ifun,callParentFrame,calleeFrame);
if (op != Icode_TAIL_CALL) {
frame.savedStackTop=stackTop;
frame.savedCallOp=op;
}
frame=calleeFrame;
continue StateLoop;
}
}
if (fun instanceof NativeContinuation) {
ContinuationJump cjump;
cjump=new ContinuationJump((NativeContinuation)fun,frame);
if (indexReg == 0) {
cjump.result=undefined;
}
 else {
cjump.result=stack[stackTop + 2];
cjump.resultDbl=sDbl[stackTop + 2];
}
throwable=cjump;
break withoutExceptions;
}
if (fun instanceof IdFunctionObject) {
IdFunctionObject ifun=(IdFunctionObject)fun;
if (NativeContinuation.isContinuationConstructor(ifun)) {
frame.stack[stackTop]=captureContinuation(cx,frame.parentFrame,false);
continue Loop;
}
if (BaseFunction.isApplyOrCall(ifun)) {
Callable applyCallable=ScriptRuntime.getCallable(funThisObj);
if (applyCallable instanceof InterpretedFunction) {
InterpretedFunction iApplyCallable=(InterpretedFunction)applyCallable;
if (frame.fnOrScript.securityDomain == iApplyCallable.securityDomain) {
frame=initFrameForApplyOrCall(cx,frame,indexReg,stack,sDbl,stackTop,op,calleeScope,ifun,iApplyCallable);
continue StateLoop;
}
}
}
}
if (fun instanceof NoSuchMethodShim) {
NoSuchMethodShim noSuchMethodShim=(NoSuchMethodShim)fun;
Callable noSuchMethodMethod=noSuchMethodShim.noSuchMethodMethod;
if (noSuchMethodMethod instanceof InterpretedFunction) {
InterpretedFunction ifun=(InterpretedFunction)noSuchMethodMethod;
if (frame.fnOrScript.securityDomain == ifun.securityDomain) {
frame=initFrameForNoSuchMethod(cx,frame,indexReg,stack,sDbl,stackTop,op,funThisObj,calleeScope,noSuchMethodShim,ifun);
continue StateLoop;
}
}
}
cx.lastInterpreterFrame=frame;
frame.savedCallOp=op;
frame.savedStackTop=stackTop;
stack[stackTop]=fun.call(cx,calleeScope,funThisObj,getArgsArray(stack,sDbl,stackTop + 2,indexReg));
continue Loop;
}
case Token.NEW:
{
if (instructionCounting) {
cx.instructionCount+=INVOCATION_COST;
}
stackTop-=indexReg;
Object lhs=stack[stackTop];
if (lhs instanceof InterpretedFunction) {
InterpretedFunction f=(InterpretedFunction)lhs;
if (frame.fnOrScript.securityDomain == f.securityDomain) {
Scriptable newInstance=f.createObject(cx,frame.scope);
CallFrame calleeFrame=new CallFrame();
initFrame(cx,frame.scope,newInstance,stack,sDbl,stackTop + 1,indexReg,f,frame,calleeFrame);
stack[stackTop]=newInstance;
frame.savedStackTop=stackTop;
frame.savedCallOp=op;
frame=calleeFrame;
continue StateLoop;
}
}
if (!(lhs instanceof Function)) {
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
throw ScriptRuntime.notFunctionError(lhs);
}
Function fun=(Function)lhs;
if (fun instanceof IdFunctionObject) {
IdFunctionObject ifun=(IdFunctionObject)fun;
if (NativeContinuation.isContinuationConstructor(ifun)) {
frame.stack[stackTop]=captureContinuation(cx,frame.parentFrame,false);
continue Loop;
}
}
Object[] outArgs=getArgsArray(stack,sDbl,stackTop + 1,indexReg);
stack[stackTop]=fun.construct(cx,frame.scope,outArgs);
continue Loop;
}
case Token.TYPEOF:
{
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.typeof(lhs);
continue Loop;
}
case Icode_TYPEOFNAME:
stack[++stackTop]=ScriptRuntime.typeofName(frame.scope,stringReg);
continue Loop;
case Token.STRING:
stack[++stackTop]=stringReg;
continue Loop;
case Icode_SHORTNUMBER:
++stackTop;
stack[stackTop]=DBL_MRK;
sDbl[stackTop]=getShort(iCode,frame.pc);
frame.pc+=2;
continue Loop;
case Icode_INTNUMBER:
++stackTop;
stack[stackTop]=DBL_MRK;
sDbl[stackTop]=getInt(iCode,frame.pc);
frame.pc+=4;
continue Loop;
case Token.NUMBER:
++stackTop;
stack[stackTop]=DBL_MRK;
sDbl[stackTop]=frame.idata.itsDoubleTable[indexReg];
continue Loop;
case Token.NAME:
stack[++stackTop]=ScriptRuntime.name(cx,frame.scope,stringReg);
continue Loop;
case Icode_NAME_INC_DEC:
stack[++stackTop]=ScriptRuntime.nameIncrDecr(frame.scope,stringReg,cx,iCode[frame.pc]);
++frame.pc;
continue Loop;
case Icode_SETCONSTVAR1:
indexReg=iCode[frame.pc++];
case Token.SETCONSTVAR:
stackTop=doSetConstVar(frame,stack,sDbl,stackTop,vars,varDbls,varAttributes,indexReg);
continue Loop;
case Icode_SETVAR1:
indexReg=iCode[frame.pc++];
case Token.SETVAR:
stackTop=doSetVar(frame,stack,sDbl,stackTop,vars,varDbls,varAttributes,indexReg);
continue Loop;
case Icode_GETVAR1:
indexReg=iCode[frame.pc++];
case Token.GETVAR:
stackTop=doGetVar(frame,stack,sDbl,stackTop,vars,varDbls,indexReg);
continue Loop;
case Icode_VAR_INC_DEC:
{
stackTop=doVarIncDec(cx,frame,stack,sDbl,stackTop,vars,varDbls,indexReg);
continue Loop;
}
case Icode_ZERO:
++stackTop;
stack[stackTop]=DBL_MRK;
sDbl[stackTop]=0;
continue Loop;
case Icode_ONE:
++stackTop;
stack[stackTop]=DBL_MRK;
sDbl[stackTop]=1;
continue Loop;
case Token.NULL:
stack[++stackTop]=null;
continue Loop;
case Token.THIS:
stack[++stackTop]=frame.thisObj;
continue Loop;
case Token.THISFN:
stack[++stackTop]=frame.fnOrScript;
continue Loop;
case Token.FALSE:
stack[++stackTop]=Boolean.FALSE;
continue Loop;
case Token.TRUE:
stack[++stackTop]=Boolean.TRUE;
continue Loop;
case Icode_UNDEF:
stack[++stackTop]=undefined;
continue Loop;
case Token.ENTERWITH:
{
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
frame.scope=ScriptRuntime.enterWith(lhs,cx,frame.scope);
continue Loop;
}
case Token.LEAVEWITH:
frame.scope=ScriptRuntime.leaveWith(frame.scope);
continue Loop;
case Token.CATCH_SCOPE:
{
--stackTop;
indexReg+=frame.localShift;
boolean afterFirstScope=(frame.idata.itsICode[frame.pc] != 0);
Throwable caughtException=(Throwable)stack[stackTop + 1];
Scriptable lastCatchScope;
if (!afterFirstScope) {
lastCatchScope=null;
}
 else {
lastCatchScope=(Scriptable)stack[indexReg];
}
stack[indexReg]=ScriptRuntime.newCatchScope(caughtException,lastCatchScope,stringReg,cx,frame.scope);
++frame.pc;
continue Loop;
}
case Token.ENUM_INIT_KEYS:
case Token.ENUM_INIT_VALUES:
case Token.ENUM_INIT_ARRAY:
{
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
indexReg+=frame.localShift;
int enumType=op == Token.ENUM_INIT_KEYS ? ScriptRuntime.ENUMERATE_KEYS : op == Token.ENUM_INIT_VALUES ? ScriptRuntime.ENUMERATE_VALUES : ScriptRuntime.ENUMERATE_ARRAY;
stack[indexReg]=ScriptRuntime.enumInit(lhs,cx,enumType);
continue Loop;
}
case Token.ENUM_NEXT:
case Token.ENUM_ID:
{
indexReg+=frame.localShift;
Object val=stack[indexReg];
++stackTop;
stack[stackTop]=(op == Token.ENUM_NEXT) ? (Object)ScriptRuntime.enumNext(val) : (Object)ScriptRuntime.enumId(val,cx);
continue Loop;
}
case Token.REF_SPECIAL:
{
Object obj=stack[stackTop];
if (obj == DBL_MRK) obj=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.specialRef(obj,stringReg,cx);
continue Loop;
}
case Token.REF_MEMBER:
{
stackTop=doRefMember(cx,stack,sDbl,stackTop,indexReg);
continue Loop;
}
case Token.REF_NS_MEMBER:
{
stackTop=doRefNsMember(cx,stack,sDbl,stackTop,indexReg);
continue Loop;
}
case Token.REF_NAME:
{
Object name=stack[stackTop];
if (name == DBL_MRK) name=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.nameRef(name,cx,frame.scope,indexReg);
continue Loop;
}
case Token.REF_NS_NAME:
{
stackTop=doRefNsName(cx,frame,stack,sDbl,stackTop,indexReg);
continue Loop;
}
case Icode_SCOPE_LOAD:
indexReg+=frame.localShift;
frame.scope=(Scriptable)stack[indexReg];
continue Loop;
case Icode_SCOPE_SAVE:
indexReg+=frame.localShift;
stack[indexReg]=frame.scope;
continue Loop;
case Icode_CLOSURE_EXPR:
stack[++stackTop]=InterpretedFunction.createFunction(cx,frame.scope,frame.fnOrScript,indexReg);
continue Loop;
case Icode_CLOSURE_STMT:
initFunction(cx,frame.scope,frame.fnOrScript,indexReg);
continue Loop;
case Token.REGEXP:
Object re=frame.idata.itsRegExpLiterals[indexReg];
stack[++stackTop]=ScriptRuntime.wrapRegExp(cx,frame.scope,re);
continue Loop;
case Icode_LITERAL_NEW:
++stackTop;
stack[stackTop]=new int[indexReg];
++stackTop;
stack[stackTop]=new Object[indexReg];
sDbl[stackTop]=0;
continue Loop;
case Icode_LITERAL_SET:
{
Object value=stack[stackTop];
if (value == DBL_MRK) value=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
int i=(int)sDbl[stackTop];
((Object[])stack[stackTop])[i]=value;
sDbl[stackTop]=i + 1;
continue Loop;
}
case Icode_LITERAL_GETTER:
{
Object value=stack[stackTop];
--stackTop;
int i=(int)sDbl[stackTop];
((Object[])stack[stackTop])[i]=value;
((int[])stack[stackTop - 1])[i]=-1;
sDbl[stackTop]=i + 1;
continue Loop;
}
case Icode_LITERAL_SETTER:
{
Object value=stack[stackTop];
--stackTop;
int i=(int)sDbl[stackTop];
((Object[])stack[stackTop])[i]=value;
((int[])stack[stackTop - 1])[i]=+1;
sDbl[stackTop]=i + 1;
continue Loop;
}
case Token.ARRAYLIT:
case Icode_SPARE_ARRAYLIT:
case Token.OBJECTLIT:
{
Object[] data=(Object[])stack[stackTop];
--stackTop;
int[] getterSetters=(int[])stack[stackTop];
Object val;
if (op == Token.OBJECTLIT) {
Object[] ids=(Object[])frame.idata.literalIds[indexReg];
val=ScriptRuntime.newObjectLiteral(ids,data,getterSetters,cx,frame.scope);
}
 else {
int[] skipIndexces=null;
if (op == Icode_SPARE_ARRAYLIT) {
skipIndexces=(int[])frame.idata.literalIds[indexReg];
}
val=ScriptRuntime.newArrayLiteral(data,skipIndexces,cx,frame.scope);
}
stack[stackTop]=val;
continue Loop;
}
case Icode_ENTERDQ:
{
Object lhs=stack[stackTop];
if (lhs == DBL_MRK) lhs=ScriptRuntime.wrapNumber(sDbl[stackTop]);
--stackTop;
frame.scope=ScriptRuntime.enterDotQuery(lhs,frame.scope);
continue Loop;
}
case Icode_LEAVEDQ:
{
boolean valBln=stack_boolean(frame,stackTop);
Object x=ScriptRuntime.updateDotQuery(valBln,frame.scope);
if (x != null) {
stack[stackTop]=x;
frame.scope=ScriptRuntime.leaveDotQuery(frame.scope);
frame.pc+=2;
continue Loop;
}
--stackTop;
break jumplessRun;
}
case Token.DEFAULTNAMESPACE:
{
Object value=stack[stackTop];
if (value == DBL_MRK) value=ScriptRuntime.wrapNumber(sDbl[stackTop]);
stack[stackTop]=ScriptRuntime.setDefaultNamespace(value,cx);
continue Loop;
}
case Token.ESCXMLATTR:
{
Object value=stack[stackTop];
if (value != DBL_MRK) {
stack[stackTop]=ScriptRuntime.escapeAttributeValue(value,cx);
}
continue Loop;
}
case Token.ESCXMLTEXT:
{
Object value=stack[stackTop];
if (value != DBL_MRK) {
stack[stackTop]=ScriptRuntime.escapeTextValue(value,cx);
}
continue Loop;
}
case Icode_DEBUGGER:
if (frame.debuggerFrame != null) {
frame.debuggerFrame.onDebuggerStatement(cx);
}
continue Loop;
case Icode_LINE:
frame.pcSourceLineStart=frame.pc;
if (frame.debuggerFrame != null) {
int line=getIndex(iCode,frame.pc);
frame.debuggerFrame.onLineChange(cx,line);
}
frame.pc+=2;
continue Loop;
case Icode_REG_IND_C0:
indexReg=0;
continue Loop;
case Icode_REG_IND_C1:
indexReg=1;
continue Loop;
case Icode_REG_IND_C2:
indexReg=2;
continue Loop;
case Icode_REG_IND_C3:
indexReg=3;
continue Loop;
case Icode_REG_IND_C4:
indexReg=4;
continue Loop;
case Icode_REG_IND_C5:
indexReg=5;
continue Loop;
case Icode_REG_IND1:
indexReg=0xFF & iCode[frame.pc];
++frame.pc;
continue Loop;
case Icode_REG_IND2:
indexReg=getIndex(iCode,frame.pc);
frame.pc+=2;
continue Loop;
case Icode_REG_IND4:
indexReg=getInt(iCode,frame.pc);
frame.pc+=4;
continue Loop;
case Icode_REG_STR_C0:
stringReg=strings[0];
continue Loop;
case Icode_REG_STR_C1:
stringReg=strings[1];
continue Loop;
case Icode_REG_STR_C2:
stringReg=strings[2];
continue Loop;
case Icode_REG_STR_C3:
stringReg=strings[3];
continue Loop;
case Icode_REG_STR1:
stringReg=strings[0xFF & iCode[frame.pc]];
++frame.pc;
continue Loop;
case Icode_REG_STR2:
stringReg=strings[getIndex(iCode,frame.pc)];
frame.pc+=2;
continue Loop;
case Icode_REG_STR4:
stringReg=strings[getInt(iCode,frame.pc)];
frame.pc+=4;
continue Loop;
default :
dumpICode(frame.idata);
throw new RuntimeException("Unknown icode : " + op + " @ pc : "+ (frame.pc - 1));
}
}
if (instructionCounting) {
addInstructionCount(cx,frame,2);
}
int offset=getShort(iCode,frame.pc);
if (offset != 0) {
frame.pc+=offset - 1;
}
 else {
frame.pc=frame.idata.longJumps.getExistingInt(frame.pc);
}
if (instructionCounting) {
frame.pcPrevBranch=frame.pc;
}
continue Loop;
}
exitFrame(cx,frame,null);
interpreterResult=frame.result;
interpreterResultDbl=frame.resultDbl;
if (frame.parentFrame != null) {
frame=frame.parentFrame;
if (frame.frozen) {
frame=frame.cloneFrozen();
}
setCallResult(frame,interpreterResult,interpreterResultDbl);
interpreterResult=null;
continue StateLoop;
}
break StateLoop;
}
 catch (Throwable ex) {
if (throwable != null) {
ex.printStackTrace(System.err);
throw new IllegalStateException();
}
throwable=ex;
}
if (throwable == null) Kit.codeBug();
final int EX_CATCH_STATE=2;
final int EX_FINALLY_STATE=1;
final int EX_NO_JS_STATE=0;
int exState;
ContinuationJump cjump=null;
if (generatorState != null && generatorState.operation == NativeGenerator.GENERATOR_CLOSE && throwable == generatorState.value) {
exState=EX_FINALLY_STATE;
}
 else if (throwable instanceof JavaScriptException) {
exState=EX_CATCH_STATE;
}
 else if (throwable instanceof EcmaError) {
exState=EX_CATCH_STATE;
}
 else if (throwable instanceof EvaluatorException) {
exState=EX_CATCH_STATE;
}
 else if (throwable instanceof ContinuationPending) {
exState=EX_NO_JS_STATE;
}
 else if (throwable instanceof RuntimeException) {
exState=cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS) ? EX_CATCH_STATE : EX_FINALLY_STATE;
}
 else if (throwable instanceof Error) {
exState=cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS) ? EX_CATCH_STATE : EX_NO_JS_STATE;
}
 else if (throwable instanceof ContinuationJump) {
exState=EX_FINALLY_STATE;
cjump=(ContinuationJump)throwable;
}
 else {
exState=cx.hasFeature(Context.FEATURE_ENHANCED_JAVA_ACCESS) ? EX_CATCH_STATE : EX_FINALLY_STATE;
}
if (instructionCounting) {
try {
addInstructionCount(cx,frame,EXCEPTION_COST);
}
 catch (RuntimeException ex) {
throwable=ex;
exState=EX_FINALLY_STATE;
}
catch (Error ex) {
throwable=ex;
cjump=null;
exState=EX_NO_JS_STATE;
}
}
if (frame.debuggerFrame != null && throwable instanceof RuntimeException) {
RuntimeException rex=(RuntimeException)throwable;
try {
frame.debuggerFrame.onExceptionThrown(cx,rex);
}
 catch (Throwable ex) {
throwable=ex;
cjump=null;
exState=EX_NO_JS_STATE;
}
}
for (; ; ) {
if (exState != EX_NO_JS_STATE) {
boolean onlyFinally=(exState != EX_CATCH_STATE);
indexReg=getExceptionHandler(frame,onlyFinally);
if (indexReg >= 0) {
continue StateLoop;
}
}
exitFrame(cx,frame,throwable);
frame=frame.parentFrame;
if (frame == null) {
break;
}
if (cjump != null && cjump.branchFrame == frame) {
indexReg=-1;
continue StateLoop;
}
}
if (cjump != null) {
if (cjump.branchFrame != null) {
Kit.codeBug();
}
if (cjump.capturedFrame != null) {
indexReg=-1;
continue StateLoop;
}
interpreterResult=cjump.result;
interpreterResultDbl=cjump.resultDbl;
throwable=null;
}
break StateLoop;
}
if (cx.previousInterpreterInvocations != null && cx.previousInterpreterInvocations.size() != 0) {
cx.lastInterpreterFrame=cx.previousInterpreterInvocations.pop();
}
 else {
cx.lastInterpreterFrame=null;
cx.previousInterpreterInvocations=null;
}
if (throwable != null) {
if (throwable instanceof RuntimeException) {
throw (RuntimeException)throwable;
}
 else {
throw (Error)throwable;
}
}
return (interpreterResult != DBL_MRK) ? interpreterResult : ScriptRuntime.wrapNumber(interpreterResultDbl);
}
