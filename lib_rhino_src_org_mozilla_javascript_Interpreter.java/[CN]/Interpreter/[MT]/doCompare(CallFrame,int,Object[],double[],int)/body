{
  --stackTop;
  Object rhs=stack[stackTop + 1];
  Object lhs=stack[stackTop];
  boolean valBln;
  object_compare: {
    number_compare: {
      double rDbl, lDbl;
      if (rhs == DOUBLE_MARK) {
        rDbl=sDbl[stackTop + 1];
        lDbl=stack_double(frame,stackTop);
      }
 else       if (lhs == DOUBLE_MARK) {
        rDbl=ScriptRuntime.toNumber(rhs);
        lDbl=sDbl[stackTop];
      }
 else {
        break number_compare;
      }
switch (op) {
case Token.GE:
        valBln=(lDbl >= rDbl);
      break object_compare;
case Token.LE:
    valBln=(lDbl <= rDbl);
  break object_compare;
case Token.GT:
valBln=(lDbl > rDbl);
break object_compare;
case Token.LT:
valBln=(lDbl < rDbl);
break object_compare;
default :
throw Kit.codeBug();
}
}
switch (op) {
case Token.GE:
valBln=ScriptRuntime.cmp_LE(rhs,lhs);
break;
case Token.LE:
valBln=ScriptRuntime.cmp_LE(lhs,rhs);
break;
case Token.GT:
valBln=ScriptRuntime.cmp_LT(rhs,lhs);
break;
case Token.LT:
valBln=ScriptRuntime.cmp_LT(lhs,rhs);
break;
default :
throw Kit.codeBug();
}
}
stack[stackTop]=ScriptRuntime.wrapBoolean(valBln);
return stackTop;
}
