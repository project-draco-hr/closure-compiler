{
  if (other.isSingleton()) {
    if (alternatives.contains(other)) {
      return this;
    }
 else {
      Set<ConcreteType> alts=Sets.newHashSet(alternatives);
      alts.add(other);
      return new ConcreteUnionType(alts);
    }
  }
 else   if (other.isUnion()) {
    ConcreteUnionType otherUnion=other.toUnion();
    if (alternatives.containsAll(otherUnion.alternatives)) {
      return this;
    }
 else     if (otherUnion.alternatives.containsAll(alternatives)) {
      return otherUnion;
    }
 else {
      Set<ConcreteType> alts=Sets.newHashSet(alternatives);
      alts.addAll(otherUnion.alternatives);
      return new ConcreteUnionType(alts);
    }
  }
 else {
    Preconditions.checkArgument(other.isNone() || other.isAll());
    return other.unionWith(this);
  }
}
