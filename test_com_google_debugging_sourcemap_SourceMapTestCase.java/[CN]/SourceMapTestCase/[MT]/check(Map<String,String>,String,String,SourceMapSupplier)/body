{
  Map<String,Token> originalTokens=findTokens(originalInputs);
  Map<String,Token> resultTokens=findTokens(generatedSource);
  assertThat(resultTokens).hasSize(originalTokens.size());
  SourceMapping reader;
  try {
    reader=SourceMapConsumerFactory.parse(sourceMapFileContent,supplier);
  }
 catch (  SourceMapParseException e) {
    throw new RuntimeException("unexpected exception",e);
  }
  for (  Token token : resultTokens.values()) {
    OriginalMapping mapping=reader.getMappingForLine(token.position.getLine() + 1,token.position.getColumn() + 1);
    assertThat(mapping).isNotNull();
    Token inputToken=originalTokens.get(token.tokenName);
    assertThat(inputToken).isNotNull();
    assertThat(inputToken.inputName).isEqualTo(mapping.getOriginalFile());
    assertThat(inputToken.position.getLine() + 1).isEqualTo(mapping.getLineNumber());
    int start=inputToken.position.getColumn() + 1;
    if (inputToken.tokenName.startsWith("STR")) {
      start--;
    }
    if (validateColumns) {
      assertThat(mapping.getColumnPosition()).isEqualTo(start);
    }
    if (!inputToken.tokenName.startsWith("STR")) {
      assertFalse("missing name for " + inputToken.tokenName,mapping.getIdentifier().isEmpty());
    }
    if (!mapping.getIdentifier().isEmpty()) {
      assertThat("__" + inputToken.tokenName + "__").isEqualTo(mapping.getIdentifier());
    }
  }
}
