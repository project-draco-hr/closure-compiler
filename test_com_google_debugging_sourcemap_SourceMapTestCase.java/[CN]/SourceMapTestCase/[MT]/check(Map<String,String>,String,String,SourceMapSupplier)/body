{
  Map<String,Token> originalTokens=findTokens(originalInputs);
  Map<String,Token> resultTokens=findTokens(generatedSource);
  assertEquals(originalTokens.size(),resultTokens.size());
  SourceMapping reader;
  try {
    reader=SourceMapConsumerFactory.parse(sourceMapFileContent,supplier);
  }
 catch (  SourceMapParseException e) {
    throw new RuntimeException("unexpected exception",e);
  }
  for (  Token token : resultTokens.values()) {
    OriginalMapping mapping=reader.getMappingForLine(token.position.getLine() + 1,token.position.getColumn() + 1);
    assertNotNull(mapping);
    Token inputToken=originalTokens.get(token.tokenName);
    assertNotNull(inputToken);
    assertEquals(mapping.getOriginalFile(),inputToken.inputName);
    assertEquals(mapping.getLineNumber(),inputToken.position.getLine() + 1);
    int start=inputToken.position.getColumn() + 1;
    if (inputToken.tokenName.startsWith("STR")) {
      start--;
    }
    if (validateColumns) {
      assertEquals(start,mapping.getColumnPosition());
    }
    if (!inputToken.tokenName.startsWith("STR")) {
      assertFalse("missing name for " + inputToken.tokenName,mapping.getIdentifier().isEmpty());
    }
    if (!mapping.getIdentifier().isEmpty()) {
      assertEquals(mapping.getIdentifier(),"__" + inputToken.tokenName + "__");
    }
  }
}
