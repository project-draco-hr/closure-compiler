{
  String parent=null;
  String grandparent=null;
  Node node=context.getFirstChild();
  if (node.isGetProp()) {
    Node parentNode=node.getFirstChild();
    parent=parentNode.getQualifiedName();
    if (parentNode.isGetProp() && parentNode.getLastChild().getString().equals(PROTOTYPE_PROPERTY)) {
      grandparent=parentNode.getFirstChild().getQualifiedName();
    }
  }
 else   if (node.getParent().isMemberFunctionDef()) {
    Node classNode=node.getGrandparent().getParent();
    parent=NodeUtil.getName(classNode);
    parent+=node.getParent().isStaticMember() ? "" : ".prototype";
    export=parent + "." + export;
  }
  boolean useExportSymbol=true;
  if (grandparent != null) {
    useExportSymbol=false;
  }
 else   if (parent != null && exports.containsKey(parent)) {
    useExportSymbol=false;
  }
 else   if (node.getParent().isMemberFunctionDef()) {
    useExportSymbol=false;
  }
  Node call;
  if (useExportSymbol) {
    recordExportSymbol(export);
    call=IR.call(NodeUtil.newQName(compiler,exportSymbolFunction,context,export),IR.string(export),NodeUtil.newQName(compiler,export,context,export));
  }
 else {
    String property=getPropertyName(node);
    call=IR.call(NodeUtil.newQName(compiler,exportPropertyFunction,context,exportPropertyFunction),NodeUtil.newQName(compiler,parent,context,exportPropertyFunction),IR.string(property),NodeUtil.newQName(compiler,export,context,exportPropertyFunction));
  }
  Node expression=IR.exprResult(call).useSourceInfoIfMissingFromForTree(node);
  annotate(expression);
  addStatement(context,expression);
  compiler.reportCodeChange();
}
