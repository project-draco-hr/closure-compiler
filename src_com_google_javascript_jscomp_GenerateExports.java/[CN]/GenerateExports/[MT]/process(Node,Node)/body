{
  FindExportableNodes findExportableNodes=new FindExportableNodes(compiler);
  NodeTraversal.traverse(compiler,root,findExportableNodes);
  Map<String,GenerateNodeContext> exports=findExportableNodes.getExports();
  for (  Map.Entry<String,GenerateNodeContext> entry : exports.entrySet()) {
    String export=entry.getKey();
    GenerateNodeContext context=entry.getValue();
    String parent=null;
    String grandparent=null;
    Node node=context.getNode().getFirstChild();
    if (node.getType() == Token.GETPROP) {
      parent=node.getFirstChild().getQualifiedName();
      if (node.getFirstChild().getType() == Token.GETPROP && getPropertyName(node.getFirstChild()).equals(PROTOTYPE_PROPERTY)) {
        grandparent=node.getFirstChild().getFirstChild().getQualifiedName();
      }
    }
    boolean useExportSymbol=true;
    if (grandparent != null && exports.containsKey(grandparent)) {
      useExportSymbol=false;
    }
 else     if (parent != null && exports.containsKey(parent)) {
      useExportSymbol=false;
    }
    Node call;
    if (useExportSymbol) {
      call=new Node(Token.CALL,NodeUtil.newQualifiedNameNode(exportSymbolFunction,context.getNode(),export));
      call.addChildToBack(Node.newString(export));
      call.addChildToBack(NodeUtil.newQualifiedNameNode(export,context.getNode(),export));
    }
 else {
      String property=getPropertyName(node);
      call=new Node(Token.CALL,new Node[]{NodeUtil.newQualifiedNameNode(exportPropertyFunction,context.getNode(),exportPropertyFunction),NodeUtil.newQualifiedNameNode(parent,context.getNode(),exportPropertyFunction),Node.newString(property),NodeUtil.newQualifiedNameNode(export,context.getNode(),exportPropertyFunction)});
    }
    Node expression=new Node(Token.EXPR_RESULT,call);
    annotate(expression);
    context.getScriptNode().addChildAfter(expression,context.getContextNode());
    compiler.reportCodeChange();
  }
}
