{
  FindExportableNodes findExportableNodes=new FindExportableNodes(compiler);
  NodeTraversal.traverse(compiler,root,findExportableNodes);
  Map<String,GenerateNodeContext> exports=findExportableNodes.getExports();
  CodingConvention convention=compiler.getCodingConvention();
  for (  Map.Entry<String,GenerateNodeContext> entry : exports.entrySet()) {
    String export=entry.getKey();
    GenerateNodeContext context=entry.getValue();
    String parent=null;
    String grandparent=null;
    Node node=context.getNode().getFirstChild();
    if (node.isGetProp()) {
      parent=node.getFirstChild().getQualifiedName();
      if (node.getFirstChild().isGetProp() && getPropertyName(node.getFirstChild()).equals(PROTOTYPE_PROPERTY)) {
        grandparent=node.getFirstChild().getFirstChild().getQualifiedName();
      }
    }
    boolean useExportSymbol=true;
    if (grandparent != null && exports.containsKey(grandparent)) {
      useExportSymbol=false;
    }
 else     if (parent != null && exports.containsKey(parent)) {
      useExportSymbol=false;
    }
    Node call;
    if (useExportSymbol) {
      call=IR.call(NodeUtil.newQualifiedNameNode(convention,exportSymbolFunction,context.getNode(),export),IR.string(export),NodeUtil.newQualifiedNameNode(convention,export,context.getNode(),export));
    }
 else {
      String property=getPropertyName(node);
      call=IR.call(NodeUtil.newQualifiedNameNode(convention,exportPropertyFunction,context.getNode(),exportPropertyFunction),NodeUtil.newQualifiedNameNode(convention,parent,context.getNode(),exportPropertyFunction),IR.string(property),NodeUtil.newQualifiedNameNode(convention,export,context.getNode(),exportPropertyFunction));
    }
    Node expression=IR.exprResult(call);
    annotate(expression);
    Node insertionPoint=context.getContextNode().getNext();
    while (insertionPoint != null && NodeUtil.isExprCall(insertionPoint) && convention.getClassesDefinedByCall(insertionPoint.getFirstChild()) != null) {
      insertionPoint=insertionPoint.getNext();
    }
    if (insertionPoint == null) {
      context.getScriptNode().addChildToBack(expression);
    }
 else {
      context.getScriptNode().addChildBefore(expression,insertionPoint);
    }
    compiler.reportCodeChange();
  }
}
