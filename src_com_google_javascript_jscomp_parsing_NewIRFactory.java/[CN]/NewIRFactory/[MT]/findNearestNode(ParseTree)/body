{
switch (tree.type) {
case EXPRESSION_STATEMENT:
    return findNearestNode(tree.asExpressionStatement().expression);
case CALL_EXPRESSION:
  return findNearestNode(tree.asCallExpression().operand);
case BINARY_OPERATOR:
return findNearestNode(tree.asBinaryOperator().left);
case CONDITIONAL_EXPRESSION:
return findNearestNode(tree.asConditionalExpression().condition);
case MEMBER_EXPRESSION:
return findNearestNode(tree.asMemberExpression().operand);
case MEMBER_LOOKUP_EXPRESSION:
return findNearestNode(tree.asMemberLookupExpression().operand);
default :
return tree;
}
}
