{
  LiteralToken token=literalTree.literalToken.asLiteral();
  Node literalStringNode=newStringNode(normalizeRegex(token));
  setSourceInfo(literalStringNode,token);
  Node node=newNode(Token.REGEXP,literalStringNode);
  String rawRegex=token.value;
  int lastSlash=rawRegex.lastIndexOf('/');
  String flags="";
  if (lastSlash < rawRegex.length()) {
    flags=rawRegex.substring(lastSlash + 1);
  }
  if (!flags.isEmpty()) {
    Node flagsNode=newStringNode(flags);
    setSourceInfo(flagsNode,token);
    node.addChildToBack(flagsNode);
  }
  return node;
}
