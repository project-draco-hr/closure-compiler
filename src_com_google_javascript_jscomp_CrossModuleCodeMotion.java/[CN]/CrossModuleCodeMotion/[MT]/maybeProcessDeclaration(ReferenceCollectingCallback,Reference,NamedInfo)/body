{
  Node name=ref.getNode();
  Node parent=name.getParent();
  Node grandparent=parent.getParent();
switch (parent.getType()) {
case Token.VAR:
    if (canMoveValue(collector,ref.getScope(),name.getFirstChild())) {
      return info.addDeclaration(new Declaration(getModule(ref),name));
    }
  return false;
case Token.FUNCTION:
if (NodeUtil.isFunctionDeclaration(parent)) {
  return info.addDeclaration(new Declaration(getModule(ref),name));
}
return false;
case Token.ASSIGN:
case Token.GETPROP:
Node child=name;
for (Node current : name.getAncestors()) {
if (current.isGetProp()) {
}
 else if (current.isAssign() && current.getFirstChild() == child) {
Node currentParent=current.getParent();
if (currentParent.isExprResult() && canMoveValue(collector,ref.getScope(),current.getLastChild())) {
return info.addDeclaration(new Declaration(getModule(ref),current));
}
}
 else {
return false;
}
child=current;
}
return false;
case Token.CALL:
if (NodeUtil.isExprCall(grandparent)) {
SubclassRelationship relationship=compiler.getCodingConvention().getClassesDefinedByCall(parent);
if (relationship != null && name.getString().equals(relationship.subclassName)) {
return info.addDeclaration(new Declaration(getModule(ref),parent));
}
}
return false;
default :
return false;
}
}
