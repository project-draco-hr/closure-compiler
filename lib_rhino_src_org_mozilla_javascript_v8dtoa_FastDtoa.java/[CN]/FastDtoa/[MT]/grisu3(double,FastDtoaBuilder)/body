{
  long bits=Double.doubleToLongBits(v);
  DiyFp w=DoubleHelper.asNormalizedDiyFp(bits);
  DiyFp boundary_minus=new DiyFp(), boundary_plus=new DiyFp();
  DoubleHelper.normalizedBoundaries(bits,boundary_minus,boundary_plus);
  assert(boundary_plus.e() == w.e());
  DiyFp ten_mk=new DiyFp();
  int mk=CachedPowers.getCachedPower(w.e() + DiyFp.kSignificandSize,minimal_target_exponent,maximal_target_exponent,ten_mk);
  assert(minimal_target_exponent <= w.e() + ten_mk.e() + DiyFp.kSignificandSize && maximal_target_exponent >= w.e() + ten_mk.e() + DiyFp.kSignificandSize);
  DiyFp scaled_w=DiyFp.times(w,ten_mk);
  assert(scaled_w.e() == boundary_plus.e() + ten_mk.e() + DiyFp.kSignificandSize);
  DiyFp scaled_boundary_minus=DiyFp.times(boundary_minus,ten_mk);
  DiyFp scaled_boundary_plus=DiyFp.times(boundary_plus,ten_mk);
  return digitGen(scaled_boundary_minus,scaled_w,scaled_boundary_plus,buffer,mk);
}
