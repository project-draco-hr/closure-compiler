{
  if (peek(TokenType.YIELD) && inGeneratorContext()) {
    return parseYield(expressionIn);
  }
  SourcePosition start=getTreeStartLocation();
  ParseTree left=peekParenPatternAssignment() ? parseParenPattern() : parseConditional(expressionIn);
  if (peekAssignmentOperator()) {
    if (!left.isLeftHandSideExpression() && !left.isPattern()) {
      reportError("Left hand side of assignment must be new, call, member, " + "function, primary expressions or destructuring pattern");
    }
    Token operator=nextToken();
    ParseTree right=parseAssignment(expressionIn);
    return new BinaryOperatorTree(getTreeLocation(start),left,operator,right);
  }
  return left;
}
