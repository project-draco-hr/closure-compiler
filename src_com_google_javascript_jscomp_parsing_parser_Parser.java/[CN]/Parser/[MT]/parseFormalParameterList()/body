{
  SourcePosition listStart=getTreeStartLocation();
  eat(TokenType.OPEN_PAREN);
  ImmutableList.Builder<ParseTree> result=ImmutableList.builder();
  while (peek(TokenType.SPREAD) || peekId() || peek(TokenType.OPEN_SQUARE)|| peek(TokenType.OPEN_CURLY)) {
    SourcePosition start=getTreeStartLocation();
    if (peek(TokenType.SPREAD)) {
      eat(TokenType.SPREAD);
      result.add(new RestParameterTree(getTreeLocation(start),eatId()));
      break;
    }
    ParseTree parameter;
    ParseTree typeAnnotation=null;
    SourceRange typeLocation=null;
    if (peekId()) {
      parameter=parseIdentifierExpression();
      if (peek(TokenType.COLON)) {
        SourcePosition typeStart=getTreeStartLocation();
        typeAnnotation=parseTypeAnnotation();
        typeLocation=getTreeLocation(typeStart);
      }
    }
 else     if (peek(TokenType.OPEN_SQUARE)) {
      parameter=parseArrayPattern(PatternKind.INITIALIZER);
    }
 else {
      parameter=parseObjectPattern(PatternKind.INITIALIZER);
    }
    if (peek(TokenType.EQUAL)) {
      eat(TokenType.EQUAL);
      ParseTree defaultValue=parseAssignmentExpression();
      parameter=new DefaultParameterTree(getTreeLocation(start),parameter,defaultValue);
    }
    if (typeAnnotation != null) {
      parameter=new TypedParameterTree(typeLocation,parameter,typeAnnotation);
    }
    result.add(parameter);
    if (!peek(TokenType.CLOSE_PAREN)) {
      Token comma=eat(TokenType.COMMA);
      if (peek(TokenType.CLOSE_PAREN)) {
        reportError(comma,"Invalid trailing comma in formal parameter list");
      }
    }
  }
  eat(TokenType.CLOSE_PAREN);
  return new FormalParameterListTree(getTreeLocation(listStart),result.build());
}
