{
  SourcePosition start=getTreeStartLocation();
  eat(TokenType.CLASS);
  IdentifierToken name=null;
  if (!isExpression || peekId()) {
    name=eatId();
  }
  GenericTypeListTree generics=maybeParseGenericTypes();
  ParseTree superClass=null;
  if (peek(TokenType.EXTENDS)) {
    eat(TokenType.EXTENDS);
    superClass=parseExpression();
  }
  ImmutableList.Builder<ParseTree> interfaces=ImmutableList.builder();
  if (config.parseTypeSyntax && peek(TokenType.IMPLEMENTS)) {
    eat(TokenType.IMPLEMENTS);
    ParseTree type=parseType();
    interfaces.add(type);
    while (peek(TokenType.COMMA)) {
      eat(TokenType.COMMA);
      type=parseType();
      if (type != null) {
        interfaces.add(type);
      }
    }
  }
  eat(TokenType.OPEN_CURLY);
  ImmutableList<ParseTree> elements=parseClassElements(isAmbient);
  eat(TokenType.CLOSE_CURLY);
  return new ClassDeclarationTree(getTreeLocation(start),name,generics,superClass,interfaces.build(),elements);
}
