{
  boolean isGenerator=eatOpt(TokenType.STAR) != null;
  ParseTree nameExpr;
  IdentifierToken name;
  if (peekIdOrKeyword()) {
    nameExpr=null;
    name=eatIdOrKeywordAsId();
  }
 else {
    if (config.parseTypeSyntax && peekIndexSignature()) {
      ParseTree indexSignature=parseIndexSignature();
      eatPossibleImplicitSemiColon();
      return indexSignature;
    }
    nameExpr=parseComputedPropertyName();
    name=null;
  }
  if (!config.parseTypeSyntax || peek(TokenType.OPEN_PAREN) || peek(TokenType.OPEN_ANGLE)) {
    FunctionDeclarationTree.Kind kind;
    TokenType accessOnFunction;
    if (nameExpr == null) {
      kind=FunctionDeclarationTree.Kind.MEMBER;
      accessOnFunction=partial.accessModifier;
    }
 else {
      kind=FunctionDeclarationTree.Kind.EXPRESSION;
      accessOnFunction=null;
    }
    ParseTree function;
    if (partial.isAmbient) {
      function=parseMethodSignature(partial,name,isGenerator,false);
      eatPossibleImplicitSemiColon();
    }
 else {
      FunctionDeclarationTree.Builder builder=FunctionDeclarationTree.builder(kind).setName(name).setStatic(partial.isStatic).setAccess(accessOnFunction);
      parseFunctionTail(builder,isGenerator);
      function=builder.build(getTreeLocation(partial.start));
    }
    if (kind == FunctionDeclarationTree.Kind.MEMBER) {
      return function;
    }
 else {
      return new ComputedPropertyMethodTree(getTreeLocation(partial.start),partial.accessModifier,nameExpr,function);
    }
  }
 else {
    if (isGenerator) {
      reportError("Member variable cannot be prefixed by '*' (generator function)");
    }
    ParseTree declaredType=maybeParseColonType();
    if (peek(TokenType.EQUAL)) {
      reportError("Member variable initializers ('=') are not supported");
    }
    eatPossibleImplicitSemiColon();
    if (nameExpr == null) {
      return new MemberVariableTree(getTreeLocation(partial.start),name,partial.isStatic,false,partial.accessModifier,declaredType);
    }
 else {
      return new ComputedPropertyMemberVariableTree(getTreeLocation(partial.start),nameExpr,partial.isStatic,partial.accessModifier,declaredType);
    }
  }
}
