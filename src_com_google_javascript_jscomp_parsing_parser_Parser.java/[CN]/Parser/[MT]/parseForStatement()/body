{
  SourcePosition start=getTreeStartLocation();
  eat(TokenType.FOR);
  eat(TokenType.OPEN_PAREN);
  if (peekVariableDeclarationList()) {
    VariableDeclarationListTree variables=parseVariableDeclarationListNoIn();
    if (peek(TokenType.IN)) {
      if (variables.declarations.size() > 1) {
        reportError("for-in statement may not have more than one variable declaration");
      }
      VariableDeclarationTree declaration=variables.declarations.get(0);
      if (declaration.initializer != null) {
        if (config.atLeast6) {
          reportError("for-in statement may not have initializer");
        }
 else {
          errorReporter.reportWarning(declaration.location.start,"for-in statement should not have initializer");
        }
      }
      return parseForInStatement(start,variables);
    }
 else     if (peekPredefinedString(PredefinedName.OF)) {
      if (variables.declarations.size() > 1) {
        reportError("for-of statement may not have more than one variable declaration");
      }
      VariableDeclarationTree declaration=variables.declarations.get(0);
      if (declaration.initializer != null) {
        reportError("for-of statement may not have initializer");
      }
      return parseForOfStatement(start,variables);
    }
 else {
      checkVanillaForInitializers(variables);
      return parseForStatement(start,variables);
    }
  }
  if (peek(TokenType.SEMI_COLON)) {
    return parseForStatement(start,null);
  }
  ParseTree initializer=parseExpressionNoIn();
  if (peek(TokenType.IN) || peek(TokenType.EQUAL) || peekPredefinedString(PredefinedName.OF)) {
    initializer=transformLeftHandSideExpression(initializer);
  }
  if (peek(TokenType.IN) || peekPredefinedString(PredefinedName.OF)) {
    if (initializer.type != ParseTreeType.BINARY_OPERATOR && initializer.type != ParseTreeType.COMMA_EXPRESSION) {
      if (peek(TokenType.IN)) {
        return parseForInStatement(start,initializer);
      }
 else {
        return parseForOfStatement(start,initializer);
      }
    }
  }
  return parseForStatement(start,initializer);
}
