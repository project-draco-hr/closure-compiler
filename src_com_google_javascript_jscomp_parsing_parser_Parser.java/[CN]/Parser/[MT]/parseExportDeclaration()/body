{
  SourcePosition start=getTreeStartLocation();
  boolean isDefault=false;
  boolean isExportAll=false;
  boolean isExportSpecifier=false;
  eat(TokenType.EXPORT);
  ParseTree export=null;
  ImmutableList<ParseTree> exportSpecifierList=null;
switch (peekType()) {
case STAR:
    isExportAll=true;
  nextToken();
break;
case FUNCTION:
export=parseFunctionDeclaration();
break;
case CLASS:
export=parseClassDeclaration(false);
break;
case DEFAULT:
isDefault=true;
nextToken();
export=parseExpression();
break;
case OPEN_CURLY:
isExportSpecifier=true;
exportSpecifierList=parseExportSpecifierSet();
break;
default :
case VAR:
case LET:
case CONST:
export=parseVariableDeclarationList();
break;
}
LiteralToken moduleSpecifier=null;
if (isExportAll || (isExportSpecifier && peekPredefinedString(PredefinedName.FROM))) {
eatPredefinedString(PredefinedName.FROM);
moduleSpecifier=eat(TokenType.STRING).asLiteral();
}
eatPossibleImplicitSemiColon();
return new ExportDeclarationTree(getTreeLocation(start),isDefault,isExportAll,export,exportSpecifierList,moduleSpecifier);
}
