{
  SourcePosition start=getTreeStartLocation();
  boolean isDefault=false;
  boolean isExportAll=false;
  boolean isExportSpecifier=false;
  boolean needsSemiColon=true;
  eat(TokenType.EXPORT);
  ParseTree export=null;
  ImmutableList<ParseTree> exportSpecifierList=null;
switch (peekType()) {
case STAR:
    isExportAll=true;
  nextToken();
break;
case FUNCTION:
export=isAmbient ? parseAmbientFunctionDeclaration() : parseFunctionDeclaration();
needsSemiColon=isAmbient;
break;
case CLASS:
export=parseClassDeclaration(isAmbient);
needsSemiColon=false;
break;
case INTERFACE:
export=parseInterfaceDeclaration();
needsSemiColon=false;
break;
case ENUM:
export=parseEnumDeclaration();
needsSemiColon=false;
break;
case MODULE:
case NAMESPACE:
export=parseNamespaceDeclaration(isAmbient);
needsSemiColon=false;
break;
case DECLARE:
export=parseAmbientDeclaration();
needsSemiColon=false;
break;
case DEFAULT:
isDefault=true;
nextToken();
export=parseExpression();
needsSemiColon=false;
break;
case OPEN_CURLY:
isExportSpecifier=true;
exportSpecifierList=parseExportSpecifierSet();
break;
case TYPE:
export=parseTypeAlias();
break;
default :
case VAR:
case LET:
case CONST:
export=isAmbient ? parseAmbientVariableDeclarationList() : parseVariableDeclarationList();
break;
}
LiteralToken moduleSpecifier=null;
if (isExportAll || (isExportSpecifier && peekPredefinedString(PredefinedName.FROM))) {
eatPredefinedString(PredefinedName.FROM);
moduleSpecifier=eat(TokenType.STRING).asLiteral();
}
if (needsSemiColon || peekImplicitSemiColon()) {
eatPossibleImplicitSemiColon();
}
return new ExportDeclarationTree(getTreeLocation(start),isDefault,isExportAll,export,exportSpecifierList,moduleSpecifier);
}
