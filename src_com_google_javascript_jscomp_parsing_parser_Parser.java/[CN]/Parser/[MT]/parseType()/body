{
  SourcePosition start=getTreeStartLocation();
  if (!peekId() && !peek(TokenType.VOID) && !peek(TokenType.OPEN_PAREN)) {
    reportError("Unexpected token '%s' in type expression",peekType());
    return new TypeNameTree(getTreeLocation(start),ImmutableList.of("error"));
  }
  ParseTree typeExpression=parseFunctionTypeExpression();
  if (!peek(TokenType.BAR)) {
    return typeExpression;
  }
  ImmutableList.Builder<ParseTree> unionType=ImmutableList.builder();
  unionType.add(typeExpression);
  do {
    eat(TokenType.BAR);
    unionType.add(parseArrayTypeExpression());
  }
 while (peek(TokenType.BAR));
  return new UnionTypeTree(getTreeLocation(start),unionType.build());
}
