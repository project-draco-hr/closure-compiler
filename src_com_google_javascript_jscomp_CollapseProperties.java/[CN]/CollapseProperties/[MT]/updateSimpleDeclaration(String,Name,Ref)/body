{
  Node rvalue=ref.node.getNext();
  Node parent=ref.node.getParent();
  Node grandparent=parent.getParent();
  Node greatGrandparent=grandparent.getParent();
  if (rvalue != null && rvalue.isFunction()) {
    checkForHosedThisReferences(rvalue,refName.docInfo,refName);
  }
  Node nameNode=NodeUtil.newName(compiler,alias,grandparent.getFirstChild(),refName.getFullName());
  NodeUtil.copyNameAnnotations(ref.node.getLastChild(),nameNode);
  if (grandparent.isExprResult()) {
    parent.removeChild(rvalue);
    nameNode.addChildToFront(rvalue);
    Node varNode=IR.var(nameNode);
    greatGrandparent.replaceChild(grandparent,varNode);
  }
 else {
    Preconditions.checkNotNull(ref.getTwin());
    Node current=grandparent;
    Node currentParent=grandparent.getParent();
    for (; !currentParent.isScript() && !currentParent.isBlock(); current=currentParent, currentParent=currentParent.getParent()) {
    }
    Node stubVar=IR.var(nameNode.cloneTree()).useSourceInfoIfMissingFrom(nameNode);
    currentParent.addChildBefore(stubVar,current);
    parent.replaceChild(ref.node,nameNode);
  }
  compiler.reportCodeChange();
}
