{
  Node rvalue=ref.node.getNext();
  Node parent=ref.node.getParent();
  Node gramps=parent.getParent();
  Node greatGramps=gramps.getParent();
  Node greatGreatGramps=greatGramps.getParent();
  if (rvalue != null && rvalue.isFunction()) {
    checkForHosedThisReferences(rvalue,refName.docInfo,refName);
  }
  Node nameNode=NodeUtil.newName(compiler.getCodingConvention(),alias,gramps.getFirstChild(),refName.getFullName());
  NodeUtil.copyNameAnnotations(ref.node.getLastChild(),nameNode);
  if (gramps.isExprResult()) {
    parent.removeChild(rvalue);
    nameNode.addChildToFront(rvalue);
    Node varNode=new Node(Token.VAR,nameNode);
    greatGramps.replaceChild(gramps,varNode);
  }
 else {
    Preconditions.checkNotNull(ref.getTwin());
    Node current=gramps;
    Node currentParent=gramps.getParent();
    for (; currentParent.getType() != Token.SCRIPT && currentParent.getType() != Token.BLOCK; current=currentParent, currentParent=currentParent.getParent()) {
    }
    Node stubVar=new Node(Token.VAR,nameNode.cloneTree()).copyInformationFrom(nameNode);
    currentParent.addChildBefore(stubVar,current);
    parent.replaceChild(ref.node,nameNode);
  }
  compiler.reportCodeChange();
}
