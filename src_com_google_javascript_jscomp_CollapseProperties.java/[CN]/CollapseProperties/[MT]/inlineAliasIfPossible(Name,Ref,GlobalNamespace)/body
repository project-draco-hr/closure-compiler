{
  Node aliasParent=alias.node.getParent();
  if (aliasParent.isName()) {
    Scope scope=alias.scope;
    String aliasVarName=aliasParent.getString();
    Var aliasVar=scope.getVar(aliasVarName);
    if (scope.isFunctionBlockScope()) {
      scope=scope.getParent();
    }
    ReferenceCollectingCallback collector=new ReferenceCollectingCallback(compiler,ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,Predicates.equalTo(aliasVar));
    collector.processScope(scope);
    ReferenceCollection aliasRefs=collector.getReferences(aliasVar);
    Set<AstChange> newNodes=new LinkedHashSet<>();
    if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration()) {
      if (!aliasRefs.isAssignedOnceInLifetime()) {
        if (name.isConstructor()) {
          boolean accessPropsAfterAliasing=false;
          for (          Reference ref : aliasRefs.references) {
            if (ref.getNode().getParent().isGetProp()) {
              accessPropsAfterAliasing=true;
              break;
            }
          }
          if (accessPropsAfterAliasing) {
            compiler.report(JSError.make(aliasParent,UNSAFE_CTOR_ALIASING,aliasVarName));
          }
        }
        return false;
      }
      int size=aliasRefs.references.size();
      for (int i=1; i < size; i++) {
        ReferenceCollectingCallback.Reference aliasRef=aliasRefs.references.get(i);
        Node newNode=alias.node.cloneTree();
        aliasRef.getParent().replaceChild(aliasRef.getNode(),newNode);
        newNodes.add(new AstChange(getRefModule(aliasRef),aliasRef.getScope(),newNode));
      }
      aliasParent.replaceChild(alias.node,IR.nullNode());
      compiler.reportCodeChange();
      namespace.scanNewNodes(newNodes);
      return true;
    }
  }
  return false;
}
