{
  int end;
  VariableDeclaration pn=new VariableDeclaration(pos);
  pn.setType(declType);
  pn.setLineno(ts.lineno);
  for (; ; ) {
    AstNode destructuring=null;
    Name name=null;
    int tt=peekToken(), kidPos=ts.tokenBeg;
    end=ts.tokenEnd;
    if (tt == Token.LB || tt == Token.LC) {
      destructuring=destructuringPrimaryExpr();
      end=getNodeEnd(destructuring);
      if (!(destructuring instanceof DestructuringForm))       reportError("msg.bad.assign.left",kidPos,end - kidPos);
      markDestructuring(destructuring);
    }
 else {
      mustMatchToken(Token.NAME,"msg.bad.var");
      name=createNameNode();
      name.setLineno(ts.getLineno());
      if (inUseStrictDirective) {
        String id=ts.getString();
        if ("eval".equals(id) || "arguments".equals(ts.getString())) {
          reportError("msg.bad.id.strict",id);
        }
      }
      defineSymbol(declType,ts.getString(),inForInit);
    }
    int lineno=ts.lineno;
    AstNode init=null;
    if (matchToken(Token.ASSIGN)) {
      init=assignExpr();
      end=getNodeEnd(init);
    }
    VariableInitializer vi=new VariableInitializer(kidPos,end - kidPos);
    if (destructuring != null) {
      if (init == null && !inForInit) {
        reportError("msg.destruct.assign.no.init");
      }
      vi.setTarget(destructuring);
    }
 else {
      vi.setTarget(name);
    }
    vi.setInitializer(init);
    vi.setType(declType);
    vi.setLineno(lineno);
    pn.addVariable(vi);
    if (!matchToken(Token.COMMA))     break;
  }
  pn.setLength(end - pos);
  pn.setIsStatement(isStatement);
  return pn;
}
