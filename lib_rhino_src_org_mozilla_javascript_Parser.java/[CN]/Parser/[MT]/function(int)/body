{
  int syntheticType=type;
  int baseLineno=ts.lineno;
  int functionSourceStart=ts.tokenBeg;
  Name name=null;
  AstNode memberExprNode=null;
  if (matchToken(Token.NAME)) {
    name=createNameNode(true,Token.NAME);
    if (inUseStrictDirective) {
      String id=name.getIdentifier();
      if ("eval".equals(id) || "arguments".equals(id)) {
        reportError("msg.bad.id.strict",id);
      }
    }
    if (!matchToken(Token.LP)) {
      if (compilerEnv.isAllowMemberExprAsFunctionName()) {
        AstNode memberExprHead=name;
        name=null;
        memberExprNode=memberExprTail(false,memberExprHead);
      }
      mustMatchToken(Token.LP,"msg.no.paren.parms");
    }
  }
 else   if (matchToken(Token.LP)) {
  }
 else {
    if (compilerEnv.isAllowMemberExprAsFunctionName()) {
      memberExprNode=memberExpr(false);
    }
    mustMatchToken(Token.LP,"msg.no.paren.parms");
  }
  int lpPos=currentToken == Token.LP ? ts.tokenBeg : -1;
  if (memberExprNode != null) {
    syntheticType=FunctionNode.FUNCTION_EXPRESSION;
  }
  if (syntheticType != FunctionNode.FUNCTION_EXPRESSION && name != null && name.length() > 0) {
    defineSymbol(Token.FUNCTION,name.getIdentifier());
  }
  FunctionNode fnNode=new FunctionNode(functionSourceStart,name);
  fnNode.setFunctionType(type);
  if (lpPos != -1)   fnNode.setLp(lpPos - functionSourceStart);
  PerFunctionVariables savedVars=new PerFunctionVariables(fnNode);
  try {
    parseFunctionParams(fnNode);
    fnNode.setBody(parseFunctionBody());
    fnNode.setEncodedSourceBounds(functionSourceStart,ts.tokenEnd);
    fnNode.setLength(ts.tokenEnd - functionSourceStart);
    if (compilerEnv.isStrictMode() && !fnNode.getBody().hasConsistentReturnUsage()) {
      String msg=(name != null && name.length() > 0) ? "msg.no.return.value" : "msg.anon.no.return.value";
      addStrictWarning(msg,name == null ? "" : name.getIdentifier());
    }
  }
  finally {
    savedVars.restore();
  }
  if (memberExprNode != null) {
    Kit.codeBug();
    fnNode.setMemberExprNode(memberExprNode);
  }
  fnNode.setSourceName(sourceURI);
  fnNode.setBaseLineno(baseLineno);
  fnNode.setEndLineno(ts.lineno);
  if (compilerEnv.isIdeMode()) {
    fnNode.setParentScope(currentScope);
  }
  return fnNode;
}
