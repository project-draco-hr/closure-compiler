{
  LetNode pn=new LetNode(pos);
  pn.setLineno(ts.lineno);
  if (mustMatchToken(Token.LP,"msg.no.paren.after.let"))   pn.setLp(ts.tokenBeg - pos);
  pushScope(pn);
  try {
    VariableDeclaration vars=variables(Token.LET,ts.tokenBeg,isStatement);
    pn.setVariables(vars);
    if (mustMatchToken(Token.RP,"msg.no.paren.let")) {
      pn.setRp(ts.tokenBeg - pos);
    }
    if (isStatement && peekToken() == Token.LC) {
      consumeToken();
      int beg=ts.tokenBeg;
      AstNode stmt=statements();
      mustMatchToken(Token.RC,"msg.no.curly.let");
      stmt.setLength(ts.tokenEnd - beg);
      pn.setLength(ts.tokenEnd - pos);
      pn.setBody(stmt);
      pn.setType(Token.LET);
    }
 else {
      AstNode expr=expr();
      pn.setLength(getNodeEnd(expr) - pos);
      pn.setBody(expr);
      if (isStatement) {
        ExpressionStatement es=new ExpressionStatement(pn,!insideFunction());
        es.setLineno(pn.getLineno());
        return es;
      }
    }
  }
  finally {
    popScope();
  }
  return pn;
}
