{
  if (currentToken != Token.LB)   codeBug();
  int pos=ts.tokenBeg, end=ts.tokenEnd;
  List<AstNode> elements=new ArrayList<AstNode>();
  ArrayLiteral pn=new ArrayLiteral(pos);
  boolean after_lb_or_comma=true;
  int afterComma=-1;
  int skipCount=0;
  for (; ; ) {
    int tt=peekToken();
    if (tt == Token.COMMA) {
      consumeToken();
      afterComma=ts.tokenEnd;
      if (!after_lb_or_comma) {
        after_lb_or_comma=true;
      }
 else {
        elements.add(new EmptyExpression(ts.tokenBeg,1));
        skipCount++;
      }
    }
 else     if (tt == Token.RB) {
      consumeToken();
      end=ts.tokenEnd;
      pn.setDestructuringLength(elements.size() + (after_lb_or_comma ? 1 : 0));
      pn.setSkipCount(skipCount);
      if (afterComma != -1)       warnTrailingComma(pos,elements,afterComma);
      break;
    }
 else     if (tt == Token.FOR && !after_lb_or_comma && elements.size() == 1) {
      return arrayComprehension(elements.get(0),pos);
    }
 else     if (tt == Token.EOF) {
      reportError("msg.no.bracket.arg");
    }
 else {
      if (!after_lb_or_comma) {
        reportError("msg.no.bracket.arg");
      }
      elements.add(assignExpr());
      after_lb_or_comma=false;
      afterComma=-1;
    }
  }
  for (  AstNode e : elements) {
    pn.addElement(e);
  }
  pn.setLength(end - pos);
  return pn;
}
