{
  int nodeType=left.getType();
switch (nodeType) {
case Token.NAME:
    if (inUseStrictDirective && "eval".equals(((Name)left).getIdentifier())) {
      reportError("msg.bad.id.strict",((Name)left).getIdentifier());
    }
  left.setType(Token.BINDNAME);
return new Node(Token.SETNAME,left,right);
case Token.GETPROP:
case Token.GETELEM:
{
Node obj, id;
if (left instanceof PropertyGet) {
  obj=((PropertyGet)left).getTarget();
  id=((PropertyGet)left).getProperty();
}
 else if (left instanceof ElementGet) {
  obj=((ElementGet)left).getTarget();
  id=((ElementGet)left).getElement();
}
 else {
  obj=left.getFirstChild();
  id=left.getLastChild();
}
int type;
if (nodeType == Token.GETPROP) {
  type=Token.SETPROP;
  id.setType(Token.STRING);
}
 else {
  type=Token.SETELEM;
}
return new Node(type,obj,id,right);
}
case Token.GET_REF:
{
Node ref=left.getFirstChild();
checkMutableReference(ref);
return new Node(Token.SET_REF,ref,right);
}
}
throw codeBug();
}
