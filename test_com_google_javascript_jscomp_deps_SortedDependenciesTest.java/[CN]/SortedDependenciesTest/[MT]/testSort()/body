{
  SimpleDependencyInfo a=new SimpleDependencyInfo("a","a",provides(),requires("b","c"));
  SimpleDependencyInfo b=new SimpleDependencyInfo("b","b",provides("b"),requires("d"));
  SimpleDependencyInfo c=new SimpleDependencyInfo("c","c",provides("c"),requires("d"));
  SimpleDependencyInfo d=new SimpleDependencyInfo("d","d",provides("d"),requires());
  SimpleDependencyInfo e=new SimpleDependencyInfo("e","e",provides("e"),requires());
  SimpleDependencyInfo f=new SimpleDependencyInfo("f","f",provides("f"),requires());
  assertSortedInputs(ImmutableList.of(d,b,c,a),ImmutableList.of(a,b,c,d));
  assertSortedInputs(ImmutableList.of(d,b,c,a),ImmutableList.of(d,b,c,a));
  assertSortedInputs(ImmutableList.of(d,c,b,a),ImmutableList.of(d,c,b,a));
  assertSortedInputs(ImmutableList.of(d,b,c,a),ImmutableList.of(d,a,b,c));
  assertSortedDeps(ImmutableList.of(d,b,c,a),ImmutableList.of(d,b,c,a),ImmutableList.of(a));
  assertSortedDeps(ImmutableList.of(d,c),ImmutableList.of(d,c,b,a),ImmutableList.of(c));
  assertSortedDeps(ImmutableList.of(d),ImmutableList.of(d,c,b,a),ImmutableList.of(d));
  try {
    assertSortedDeps(ImmutableList.<SimpleDependencyInfo>of(),ImmutableList.of(a,b,c,d),ImmutableList.of(e));
    fail("Expected an exception");
  }
 catch (  IllegalArgumentException expected) {
  }
}
