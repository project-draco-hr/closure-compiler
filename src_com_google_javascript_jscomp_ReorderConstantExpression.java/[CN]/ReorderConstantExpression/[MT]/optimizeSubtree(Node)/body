{
  if (NodeUtil.isSymmetricOperation(subtree) || NodeUtil.isRelationalOperation(subtree)) {
    if (NodeUtil.precedence(subtree.getType()) == NodeUtil.precedence(subtree.getFirstChild().getType())) {
      return subtree;
    }
    if (NodeUtil.isImmutableValue(subtree.getLastChild()) && !NodeUtil.isImmutableValue(subtree.getFirstChild())) {
      if (NodeUtil.isRelationalOperation(subtree)) {
        Token inverseOperator=NodeUtil.getInverseOperator(subtree.getType());
        subtree.setType(inverseOperator);
      }
      Node firstNode=subtree.getFirstChild().detachFromParent();
      Node lastNode=subtree.getLastChild().detachFromParent();
      subtree.addChildToFront(lastNode);
      subtree.addChildToBack(firstNode);
      reportCodeChange();
    }
  }
  return subtree;
}
