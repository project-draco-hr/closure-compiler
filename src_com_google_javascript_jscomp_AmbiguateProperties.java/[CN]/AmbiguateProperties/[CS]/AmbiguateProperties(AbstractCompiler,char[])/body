{
  Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());
  this.compiler=compiler;
  this.reservedCharacters=reservedCharacters;
  JSTypeRegistry r=compiler.getTypeRegistry();
  invalidatingTypes=Sets.newHashSet(r.getNativeType(JSTypeNative.ALL_TYPE),r.getNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE),r.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE),r.getNativeType(JSTypeNative.FUNCTION_PROTOTYPE),r.getNativeType(JSTypeNative.GLOBAL_THIS),r.getNativeType(JSTypeNative.OBJECT_TYPE),r.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),r.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),r.getNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE));
  for (  TypeMismatch mis : compiler.getTypeMismatches()) {
    addInvalidatingType(mis.typeA);
    addInvalidatingType(mis.typeB);
  }
  externedNames=compiler.getExternProperties();
}
