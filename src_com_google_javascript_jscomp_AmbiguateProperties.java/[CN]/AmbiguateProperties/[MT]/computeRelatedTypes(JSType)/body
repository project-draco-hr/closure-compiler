{
  if (type instanceof UnionType) {
    type=type.restrictByNotNullOrUndefined();
    if (type instanceof UnionType) {
      for (      JSType alt : ((UnionType)type).getAlternates()) {
        computeRelatedTypes(alt);
      }
      return;
    }
  }
  if (relatedBitsets.containsKey(type)) {
    return;
  }
  JSTypeBitSet related=new JSTypeBitSet(intForType.size());
  relatedBitsets.put(type,related);
  related.set(getIntForType(type));
  if (type instanceof FunctionPrototypeType) {
    addRelatedInstance(((FunctionPrototypeType)type).getOwnerFunction(),related);
    return;
  }
  FunctionType constructor=type.toObjectType().getConstructor();
  if (constructor != null && constructor.getSubTypes() != null) {
    for (    FunctionType subType : constructor.getSubTypes()) {
      addRelatedInstance(subType,related);
    }
  }
  for (  FunctionType implementor : compiler.getTypeRegistry().getDirectImplementors(type.toObjectType())) {
    addRelatedInstance(implementor,related);
  }
}
