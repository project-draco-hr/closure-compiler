{
  NodeTraversal.traverse(compiler,root,new ProcessProperties());
  ImmutableSet.Builder<String> reservedNames=ImmutableSet.<String>builder().addAll(externedNames).addAll(quotedNames);
  int numRenamedPropertyNames=0;
  int numSkippedPropertyNames=0;
  Set<Property> propsByFreq=new TreeSet<>(FREQUENCY_COMPARATOR);
  for (  Property p : propertyMap.values()) {
    if (p.skipAmbiguating) {
      ++numSkippedPropertyNames;
      reservedNames.add(p.oldName);
    }
 else {
      ++numRenamedPropertyNames;
      propsByFreq.add(p);
    }
  }
  PropertyGraph graph=new PropertyGraph(propsByFreq);
  GraphColoring<Property,Void> coloring=new GreedyGraphColoring<>(graph,FREQUENCY_COMPARATOR);
  int numNewPropertyNames=coloring.color();
  NameGenerator nameGen=new NameGenerator(reservedNames.build(),"",reservedCharacters);
  String[] colorMap=new String[numNewPropertyNames];
  for (int i=0; i < numNewPropertyNames; ++i) {
    colorMap[i]=nameGen.generateNextName();
  }
  for (  PropertyGraphNode node : graph.getNodesWithoutCopy()) {
    node.getValue().newName=colorMap[node.getAnnotation().hashCode()];
    if (renamingMap != null) {
      renamingMap.put(node.getValue().oldName,node.getValue().newName);
    }
  }
  for (  Node n : stringNodesToRename) {
    String oldName=n.getString();
    Property p=propertyMap.get(oldName);
    if (p != null && p.newName != null) {
      Preconditions.checkState(oldName.equals(p.oldName));
      if (!p.newName.equals(oldName)) {
        n.setString(p.newName);
        compiler.reportCodeChange();
      }
    }
  }
  logger.fine("Collapsed " + numRenamedPropertyNames + " properties into "+ numNewPropertyNames+ " and skipped renaming "+ numSkippedPropertyNames+ " properties.");
}
