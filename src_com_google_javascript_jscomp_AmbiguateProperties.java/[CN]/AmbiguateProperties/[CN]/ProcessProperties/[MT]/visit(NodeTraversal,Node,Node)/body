{
switch (n.getType()) {
case Token.GETPROP:
{
      Node propNode=n.getSecondChild();
      JSType jstype=getJSType(n.getFirstChild());
      maybeMarkCandidate(propNode,jstype);
      break;
    }
case Token.CALL:
{
    Node target=n.getFirstChild();
    if (!target.isName()) {
      break;
    }
    String renameFunctionName=target.getOriginalName();
    if (renameFunctionName == null) {
      renameFunctionName=target.getString();
    }
    if (renameFunctionName == null || !compiler.getCodingConvention().isPropertyRenameFunction(renameFunctionName)) {
      break;
    }
    if (n.getChildCount() != 3) {
      compiler.report(JSError.make(n,DisambiguateProperties.Warnings.INVALID_RENAME_FUNCTION,renameFunctionName," Must be called with exactly 2 arguments."));
      break;
    }
    Node propName=n.getSecondChild();
    if (!propName.isString()) {
      compiler.report(JSError.make(n,DisambiguateProperties.Warnings.INVALID_RENAME_FUNCTION,renameFunctionName," The first argument must be a string literal."));
      break;
    }
    if (propName.getString().contains(".")) {
      compiler.report(JSError.make(n,DisambiguateProperties.Warnings.INVALID_RENAME_FUNCTION,renameFunctionName," The first argument must not be a property path."));
      break;
    }
    JSType jstype=getJSType(n.getChildAtIndex(2));
    maybeMarkCandidate(propName,jstype);
    break;
  }
case Token.OBJECTLIT:
for (Node key=n.getFirstChild(); key != null; key=key.getNext()) {
  if (!key.isQuotedString()) {
    JSType jstype=getJSType(n.getFirstChild());
    maybeMarkCandidate(key,jstype);
  }
 else {
    quotedNames.add(key.getString());
  }
}
break;
case Token.GETELEM:
Node child=n.getLastChild();
if (child.isString()) {
quotedNames.add(child.getString());
}
break;
}
}
