{
switch (n.getType()) {
case GETPROP:
{
      Node propNode=n.getSecondChild();
      JSType jstype=getJSType(n.getFirstChild());
      maybeMarkCandidate(propNode,jstype);
      break;
    }
case CALL:
{
    Node target=n.getFirstChild();
    if (!target.isQualifiedName()) {
      break;
    }
    String renameFunctionName=target.getOriginalQualifiedName();
    if (renameFunctionName != null && compiler.getCodingConvention().isPropertyRenameFunction(renameFunctionName)) {
      if (n.getChildCount() != 2 && n.getChildCount() != 3) {
        compiler.report(JSError.make(n,DisambiguateProperties.Warnings.INVALID_RENAME_FUNCTION,renameFunctionName," Must be called with 1 or 2 arguments."));
        break;
      }
      Node propName=n.getSecondChild();
      if (!propName.isString()) {
        compiler.report(JSError.make(n,DisambiguateProperties.Warnings.INVALID_RENAME_FUNCTION,renameFunctionName," The first argument must be a string literal."));
        break;
      }
      if (propName.getString().contains(".")) {
        compiler.report(JSError.make(n,DisambiguateProperties.Warnings.INVALID_RENAME_FUNCTION,renameFunctionName," The first argument must not be a property path."));
        break;
      }
      JSType jstype=getJSType(n.getSecondChild());
      maybeMarkCandidate(propName,jstype);
    }
 else     if (NodeUtil.isObjectDefinePropertiesDefinition(n)) {
      Node typeObj=n.getSecondChild();
      JSType jstype=getJSType(typeObj);
      Node objectLiteral=typeObj.getNext();
      if (!objectLiteral.isObjectLit()) {
        break;
      }
      for (      Node key : objectLiteral.children()) {
        if (key.isQuotedString()) {
          quotedNames.add(key.getString());
        }
 else {
          maybeMarkCandidate(key,jstype);
        }
      }
    }
    break;
  }
case OBJECTLIT:
if (n.getParent().isCall() && NodeUtil.isObjectDefinePropertiesDefinition(n.getParent())) {
  break;
}
for (Node key=n.getFirstChild(); key != null; key=key.getNext()) {
if (!key.isQuotedString()) {
  JSType jstype=getJSType(n.getFirstChild());
  maybeMarkCandidate(key,jstype);
}
 else {
  quotedNames.add(key.getString());
}
}
break;
case GETELEM:
Node child=n.getLastChild();
if (child.isString()) {
quotedNames.add(child.getString());
}
break;
default :
break;
}
}
