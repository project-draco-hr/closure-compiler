{
  if (this.isTemplatizedType() && this.toMaybeTemplatizedType().wrapsSameRawType(otherObject)) {
    return this.getTemplateTypeMap().checkEquivalenceHelper(otherObject.getTemplateTypeMap(),eqMethod,eqCache);
  }
  if (this.hasAnyTemplateTypes() || otherObject.hasAnyTemplateTypes()) {
    Preconditions.checkState(eqCache.isStructuralTyping());
    return false;
  }
  MatchStatus result=eqCache.checkCache(this,otherObject);
  if (result != null) {
    return result.subtypeValue();
  }
  Set<String> keySet=getPropertyNames();
  Set<String> otherKeySet=otherObject.getPropertyNames();
  if (!otherKeySet.equals(keySet)) {
    eqCache.updateCache(this,otherObject,MatchStatus.NOT_MATCH);
    return false;
  }
  for (  String key : keySet) {
    if (!otherObject.getPropertyType(key).checkEquivalenceHelper(getPropertyType(key),eqMethod,eqCache)) {
      eqCache.updateCache(this,otherObject,MatchStatus.NOT_MATCH);
      return false;
    }
  }
  eqCache.updateCache(this,otherObject,MatchStatus.MATCH);
  return true;
}
