{
  ClassFileWriter cfw=new ClassFileWriter(adapterName,superClass.getName(),"<adapter>");
  cfw.addField("factory","Lorg/mozilla/javascript/ContextFactory;",(short)(ClassFileWriter.ACC_PUBLIC | ClassFileWriter.ACC_FINAL));
  cfw.addField("delegee","Lorg/mozilla/javascript/Scriptable;",(short)(ClassFileWriter.ACC_PUBLIC | ClassFileWriter.ACC_FINAL));
  cfw.addField("self","Lorg/mozilla/javascript/Scriptable;",(short)(ClassFileWriter.ACC_PUBLIC | ClassFileWriter.ACC_FINAL));
  int interfacesCount=interfaces == null ? 0 : interfaces.length;
  for (int i=0; i < interfacesCount; i++) {
    if (interfaces[i] != null)     cfw.addInterface(interfaces[i].getName());
  }
  String superName=superClass.getName().replace('.','/');
  Constructor<?>[] ctors=superClass.getConstructors();
  for (  Constructor<?> ctor : ctors) {
    generateCtor(cfw,adapterName,superName,ctor);
  }
  generateSerialCtor(cfw,adapterName,superName);
  if (scriptClassName != null) {
    generateEmptyCtor(cfw,adapterName,superName,scriptClassName);
  }
  ObjToIntMap generatedOverrides=new ObjToIntMap();
  ObjToIntMap generatedMethods=new ObjToIntMap();
  for (int i=0; i < interfacesCount; i++) {
    Method[] methods=interfaces[i].getMethods();
    for (int j=0; j < methods.length; j++) {
      Method method=methods[j];
      int mods=method.getModifiers();
      if (Modifier.isStatic(mods) || Modifier.isFinal(mods)) {
        continue;
      }
      String methodName=method.getName();
      Class<?>[] argTypes=method.getParameterTypes();
      if (!functionNames.has(methodName)) {
        try {
          superClass.getMethod(methodName,argTypes);
          continue;
        }
 catch (        NoSuchMethodException e) {
        }
      }
      String methodSignature=getMethodSignature(method,argTypes);
      String methodKey=methodName + methodSignature;
      if (!generatedOverrides.has(methodKey)) {
        generateMethod(cfw,adapterName,methodName,argTypes,method.getReturnType());
        generatedOverrides.put(methodKey,0);
        generatedMethods.put(methodName,0);
      }
    }
  }
  Method[] methods=getOverridableMethods(superClass);
  for (int j=0; j < methods.length; j++) {
    Method method=methods[j];
    int mods=method.getModifiers();
    boolean isAbstractMethod=Modifier.isAbstract(mods);
    String methodName=method.getName();
    if (isAbstractMethod || functionNames.has(methodName)) {
      Class<?>[] argTypes=method.getParameterTypes();
      String methodSignature=getMethodSignature(method,argTypes);
      String methodKey=methodName + methodSignature;
      if (!generatedOverrides.has(methodKey)) {
        generateMethod(cfw,adapterName,methodName,argTypes,method.getReturnType());
        generatedOverrides.put(methodKey,0);
        generatedMethods.put(methodName,0);
        if (!isAbstractMethod) {
          generateSuper(cfw,adapterName,superName,methodName,methodSignature,argTypes,method.getReturnType());
        }
      }
    }
  }
  ObjToIntMap.Iterator iter=new ObjToIntMap.Iterator(functionNames);
  for (iter.start(); !iter.done(); iter.next()) {
    String functionName=(String)iter.getKey();
    if (generatedMethods.has(functionName))     continue;
    int length=iter.getValue();
    Class<?>[] parms=new Class[length];
    for (int k=0; k < length; k++)     parms[k]=ScriptRuntime.ObjectClass;
    generateMethod(cfw,adapterName,functionName,parms,ScriptRuntime.ObjectClass);
  }
  return cfw.toByteArray();
}
