{
  int N=args.length;
  if (N == 0) {
    throw ScriptRuntime.typeError0("msg.adapter.zero.args");
  }
  int classCount;
  for (classCount=0; classCount < N - 1; classCount++) {
    Object arg=args[classCount];
    if (arg instanceof NativeObject) {
      break;
    }
    if (!(arg instanceof NativeJavaClass)) {
      throw ScriptRuntime.typeError2("msg.not.java.class.arg",String.valueOf(classCount),ScriptRuntime.toString(arg));
    }
  }
  Class<?> superClass=null;
  Class<?>[] intfs=new Class[classCount];
  int interfaceCount=0;
  for (int i=0; i < classCount; ++i) {
    Class<?> c=((NativeJavaClass)args[i]).getClassObject();
    if (!c.isInterface()) {
      if (superClass != null) {
        throw ScriptRuntime.typeError2("msg.only.one.super",superClass.getName(),c.getName());
      }
      superClass=c;
    }
 else {
      intfs[interfaceCount++]=c;
    }
  }
  if (superClass == null) {
    superClass=ScriptRuntime.ObjectClass;
  }
  Class<?>[] interfaces=new Class[interfaceCount];
  System.arraycopy(intfs,0,interfaces,0,interfaceCount);
  Scriptable obj=ScriptableObject.ensureScriptable(args[classCount]);
  Class<?> adapterClass=getAdapterClass(scope,superClass,interfaces,obj);
  Object adapter;
  int argsCount=N - classCount - 1;
  try {
    if (argsCount > 0) {
      Object[] ctorArgs=new Object[argsCount + 2];
      ctorArgs[0]=obj;
      ctorArgs[1]=cx.getFactory();
      System.arraycopy(args,classCount + 1,ctorArgs,2,argsCount);
      NativeJavaClass classWrapper=new NativeJavaClass(scope,adapterClass);
      NativeJavaMethod ctors=classWrapper.members.ctors;
      int index=ctors.findCachedFunction(cx,ctorArgs);
      if (index < 0) {
        String sig=NativeJavaMethod.scriptSignature(args);
        throw Context.reportRuntimeError2("msg.no.java.ctor",adapterClass.getName(),sig);
      }
      adapter=NativeJavaClass.constructInternal(ctorArgs,ctors.methods[index]);
    }
 else {
      Class<?>[] ctorParms={ScriptRuntime.ScriptableClass,ScriptRuntime.ContextFactoryClass};
      Object[] ctorArgs={obj,cx.getFactory()};
      adapter=adapterClass.getConstructor(ctorParms).newInstance(ctorArgs);
    }
    Object self=getAdapterSelf(adapterClass,adapter);
    if (self instanceof Wrapper) {
      Object unwrapped=((Wrapper)self).unwrap();
      if (unwrapped instanceof Scriptable) {
        if (unwrapped instanceof ScriptableObject) {
          ScriptRuntime.setObjectProtoAndParent((ScriptableObject)unwrapped,scope);
        }
        return unwrapped;
      }
    }
    return self;
  }
 catch (  Exception ex) {
    throw Context.throwAsScriptRuntimeEx(ex);
  }
}
