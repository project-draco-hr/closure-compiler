{
switch (n.getType()) {
case FUNCTION:
{
      if (parent.isCall()) {
        Preconditions.checkState(!parent.getFirstChild().matchesQualifiedName("goog.scope"),parent);
      }
      Node body=n.getLastChild();
      if (body.isBlock() && body.hasChildren()) {
        if (isConstructor(n)) {
          processConstructor(n);
        }
        n.getLastChild().removeChildren();
        compiler.reportCodeChange();
      }
      break;
    }
case EXPR_RESULT:
  Node expr=n.getFirstChild();
switch (expr.getType()) {
case NUMBER:
case STRING:
  n.detachFromParent();
compiler.reportCodeChange();
break;
case CALL:
Node callee=expr.getFirstChild();
Preconditions.checkState(!callee.matchesQualifiedName("goog.scope"),n);
Preconditions.checkState(!callee.matchesQualifiedName("goog.forwardDeclare"),n);
if (callee.matchesQualifiedName("goog.provide")) {
Node childBefore;
while (null != (childBefore=n.getPrevious()) && childBefore.getBooleanProp(Node.IS_NAMESPACE)) {
parent.removeChild(childBefore);
compiler.reportCodeChange();
}
}
 else if (!callee.matchesQualifiedName("goog.require") && !callee.matchesQualifiedName("goog.module")) {
n.detachFromParent();
compiler.reportCodeChange();
}
break;
case ASSIGN:
if (t.inModuleScope() && expr.getFirstChild().matchesQualifiedName("exports")) {
break;
}
processName(expr.getFirstChild(),n);
break;
case GETPROP:
processName(expr,n);
break;
default :
if (expr.getJSDocInfo() == null) {
n.detachFromParent();
compiler.reportCodeChange();
}
break;
}
break;
case VAR:
case CONST:
case LET:
if (n.getChildCount() == 1 && NodeUtil.isStatement(n)) {
processName(n.getFirstChild(),n);
}
break;
case THROW:
case RETURN:
case BREAK:
case CONTINUE:
case DEBUGGER:
NodeUtil.removeChild(parent,n);
compiler.reportCodeChange();
break;
default :
break;
}
return true;
}
