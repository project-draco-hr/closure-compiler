{
switch (n.getType()) {
case FUNCTION:
{
      if (parent.isCall()) {
        Preconditions.checkState(!parent.getFirstChild().matchesQualifiedName("goog.scope"),parent);
      }
      Node body=n.getLastChild();
      if (body.isBlock() && body.hasChildren()) {
        if (isConstructor(n)) {
          processConstructor(n);
        }
        n.getLastChild().removeChildren();
        compiler.reportCodeChange();
      }
      break;
    }
case EXPR_RESULT:
  Node expr=n.getFirstChild();
switch (expr.getType()) {
case NUMBER:
case STRING:
  n.detachFromParent();
compiler.reportCodeChange();
break;
case CALL:
Preconditions.checkState(!n.getFirstChild().matchesQualifiedName("goog.scope"),n);
Preconditions.checkState(!n.getFirstChild().matchesQualifiedName("goog.forwardDeclare"),n);
n.detachFromParent();
compiler.reportCodeChange();
break;
case ASSIGN:
processName(expr.getFirstChild(),n);
break;
case GETPROP:
processName(expr,n);
break;
default :
if (expr.getJSDocInfo() == null) {
n.detachFromParent();
compiler.reportCodeChange();
}
break;
}
break;
case VAR:
case CONST:
case LET:
if (n.getChildCount() == 1) {
processName(n.getFirstChild(),n);
}
break;
case THROW:
case RETURN:
case BREAK:
case CONTINUE:
case DEBUGGER:
n.detachFromParent();
compiler.reportCodeChange();
break;
case FOR_OF:
case DO:
case WHILE:
case FOR:
{
Node body=NodeUtil.getLoopCodeBlock(n);
parent.replaceChild(n,body.detachFromParent());
Node initializer=n.isFor() ? n.getFirstChild() : IR.empty();
if (NodeUtil.isNameDeclaration(initializer)) {
parent.addChildBefore(initializer.detachFromParent(),body);
processName(initializer.getFirstChild(),initializer);
}
compiler.reportCodeChange();
break;
}
case LABEL:
parent.replaceChild(n,n.getSecondChild().detachFromParent());
compiler.reportCodeChange();
break;
}
return true;
}
