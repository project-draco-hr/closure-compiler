{
  try {
    long hashCode=HASH_FUNCTION.hashString(js,StandardCharsets.UTF_8).asLong();
    return cachedTranspilations.get(hashCode,new Callable<String>(){
      @Override public String call(){
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        Compiler compiler=new Compiler(new PrintStream(baos));
        compiler.disableThreads();
        SourceFile externs=SourceFile.fromCode("externs","function Symbol() {}");
        SourceFile sourceFile=SourceFile.fromCode(path,js);
        compiler.<SourceFile,SourceFile>compile(ImmutableList.<SourceFile>of(externs),ImmutableList.<SourceFile>of(sourceFile),getOptions());
        if (compiler.getErrorManager().getErrorCount() > 0) {
          String message;
          try {
            message=baos.toString(StandardCharsets.UTF_8.name());
          }
 catch (          UnsupportedEncodingException e) {
            throw new RuntimeException(e);
          }
          throw new IllegalStateException(message);
        }
        return compiler.toSource();
      }
    }
);
  }
 catch (  ExecutionException|UncheckedExecutionException e) {
    if (e.getCause() instanceof IllegalStateException) {
      throw (IllegalStateException)e.getCause();
    }
 else {
      throw Throwables.propagate(e);
    }
  }
}
