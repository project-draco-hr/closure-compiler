{
  Object result;
  Scriptable thisObj=scope;
  XMLObject firstXMLObject=null;
  for (; ; ) {
    if (scope instanceof NativeWith) {
      Scriptable withObj=scope.getPrototype();
      if (withObj instanceof XMLObject) {
        XMLObject xmlObj=(XMLObject)withObj;
        if (xmlObj.has(name,xmlObj)) {
          thisObj=xmlObj;
          result=xmlObj.get(name,xmlObj);
          break;
        }
        if (firstXMLObject == null) {
          firstXMLObject=xmlObj;
        }
      }
 else {
        result=ScriptableObject.getProperty(withObj,name);
        if (result != Scriptable.NOT_FOUND) {
          thisObj=withObj;
          break;
        }
      }
    }
 else     if (scope instanceof NativeCall) {
      result=scope.get(name,scope);
      if (result != Scriptable.NOT_FOUND) {
        if (asFunctionCall) {
          thisObj=ScriptableObject.getTopLevelScope(parentScope);
        }
        break;
      }
    }
 else {
      result=ScriptableObject.getProperty(scope,name);
      if (result != Scriptable.NOT_FOUND) {
        thisObj=scope;
        break;
      }
    }
    scope=parentScope;
    parentScope=parentScope.getParentScope();
    if (parentScope == null) {
      result=topScopeName(cx,scope,name);
      if (result == Scriptable.NOT_FOUND) {
        if (firstXMLObject == null || asFunctionCall) {
          throw notFoundError(scope,name);
        }
        result=firstXMLObject.get(name,firstXMLObject);
      }
      thisObj=scope;
      break;
    }
  }
  if (asFunctionCall) {
    if (!(result instanceof Callable)) {
      throw notFunctionError(result,name);
    }
    storeScriptable(cx,thisObj);
  }
  return result;
}
