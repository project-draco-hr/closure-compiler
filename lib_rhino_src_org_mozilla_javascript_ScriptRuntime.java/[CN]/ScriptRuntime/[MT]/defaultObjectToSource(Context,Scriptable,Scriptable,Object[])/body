{
  boolean toplevel, iterating;
  if (cx.iterating == null) {
    toplevel=true;
    iterating=false;
    cx.iterating=new ObjToIntMap(31);
  }
 else {
    toplevel=false;
    iterating=cx.iterating.has(thisObj);
  }
  StringBuffer result=new StringBuffer(128);
  if (toplevel) {
    result.append("(");
  }
  result.append('{');
  try {
    if (!iterating) {
      cx.iterating.intern(thisObj);
      Object[] ids=thisObj.getIds();
      for (int i=0; i < ids.length; i++) {
        Object id=ids[i];
        Object value;
        if (id instanceof Integer) {
          int intId=((Integer)id).intValue();
          value=thisObj.get(intId,thisObj);
          if (value == Scriptable.NOT_FOUND)           continue;
          if (i > 0)           result.append(", ");
          result.append(intId);
        }
 else {
          String strId=(String)id;
          value=thisObj.get(strId,thisObj);
          if (value == Scriptable.NOT_FOUND)           continue;
          if (i > 0)           result.append(", ");
          if (ScriptRuntime.isValidIdentifierName(strId)) {
            result.append(strId);
          }
 else {
            result.append('\'');
            result.append(ScriptRuntime.escapeString(strId,'\''));
            result.append('\'');
          }
        }
        result.append(':');
        result.append(ScriptRuntime.uneval(cx,scope,value));
      }
    }
  }
  finally {
    if (toplevel) {
      cx.iterating=null;
    }
  }
  result.append('}');
  if (toplevel) {
    result.append(')');
  }
  return result.toString();
}
