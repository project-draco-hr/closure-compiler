{
  Node parent=n.getParent();
switch (parent.getToken()) {
case BLOCK:
case SCRIPT:
case TRY:
    return true;
case FUNCTION:
  return n != parent.getSecondChild();
case WHILE:
case DO:
case IF:
return NodeUtil.getConditionExpression(parent) != n;
case FOR:
if (NodeUtil.isForIn(parent)) {
return n != parent.getFirstChild();
}
 else {
return NodeUtil.getConditionExpression(parent) != n;
}
case SWITCH:
case CASE:
case CATCH:
case WITH:
return n != parent.getFirstChild();
default :
return false;
}
}
