{
  Node parent=n.getParent();
switch (parent.getType()) {
case Token.BLOCK:
case Token.SCRIPT:
case Token.TRY:
    return true;
case Token.FUNCTION:
  return n != parent.getSecondChild();
case Token.WHILE:
case Token.DO:
case Token.IF:
return NodeUtil.getConditionExpression(parent) != n;
case Token.FOR:
if (NodeUtil.isForIn(parent)) {
return n != parent.getFirstChild();
}
 else {
return NodeUtil.getConditionExpression(parent) != n;
}
case Token.SWITCH:
case Token.CASE:
case Token.CATCH:
case Token.WITH:
return n != parent.getFirstChild();
default :
return false;
}
}
