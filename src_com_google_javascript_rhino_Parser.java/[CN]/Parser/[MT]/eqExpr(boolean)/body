{
  Node pn=relExpr(inForInit);
  int lineno;
  int charno;
  for (; ; ) {
    int tt=peekToken();
    lineno=ts.getLineno();
    charno=ts.getCharno();
switch (tt) {
case Token.EQ:
case Token.NE:
case Token.SHEQ:
case Token.SHNE:
      consumeToken();
    int decompilerToken=tt;
  int parseToken=tt;
if (compilerEnv.getLanguageVersion() == Context.VERSION_1_2) {
switch (tt) {
case Token.EQ:
    parseToken=Token.SHEQ;
  break;
case Token.NE:
parseToken=Token.SHNE;
break;
case Token.SHEQ:
decompilerToken=Token.EQ;
break;
case Token.SHNE:
decompilerToken=Token.NE;
break;
}
}
decompiler.addToken(decompilerToken);
pn=nf.createBinary(parseToken,pn,relExpr(inForInit),lineno,charno);
continue;
}
break;
}
return pn;
}
