{
  this.decompiler=createDecompiler(compilerEnv);
  this.nf=new IRFactory(this);
  currentScriptOrFn=nf.createScript();
  int sourceStartOffset=decompiler.getCurrentOffset();
  decompiler.addToken(Token.SCRIPT);
  this.currentFlaggedToken=Token.EOF;
  this.syntaxErrorCount=0;
  ts.setFileLevelJsDocBuilder(currentScriptOrFn.getJsDocBuilderForNode());
  int baseLineno=ts.getLineno();
  int baseCharno=ts.getCharno();
  Node pn=nf.createLeaf(Token.BLOCK,baseLineno,baseCharno);
  try {
    for (; ; ) {
      int tt=peekToken();
      if (tt <= Token.EOF) {
        break;
      }
      Node n;
      if (tt == Token.FUNCTION) {
        consumeToken();
        try {
          n=function(calledByCompileFunction ? FunctionNode.FUNCTION_EXPRESSION : FunctionNode.FUNCTION_STATEMENT);
        }
 catch (        ParserException e) {
          break;
        }
      }
 else {
        n=statement();
      }
      nf.addChildToBack(pn,n);
    }
  }
 catch (  StackOverflowError ex) {
    String msg=ScriptRuntime.getMessage0("msg.too.deep.parser.recursion");
    throw Context.reportRuntimeError(msg,sourceURI,ts.getLineno(),null,0);
  }
  if (this.syntaxErrorCount != 0) {
    String msg=String.valueOf(this.syntaxErrorCount);
    msg=ScriptRuntime.getMessage1("msg.got.syntax.errors",msg);
    throw errorReporter.runtimeError(msg,sourceURI,baseLineno,null,0);
  }
  currentScriptOrFn.setSourceName(sourceURI);
  currentScriptOrFn.setBaseLineno(baseLineno);
  currentScriptOrFn.setEndLineno(ts.getLineno());
  if (currentScriptOrFn.getJSDocInfo() == null) {
    currentScriptOrFn.setJSDocInfo(ts.getFileOverviewJSDocInfo());
  }
  int sourceEndOffset=decompiler.getCurrentOffset();
  currentScriptOrFn.setEncodedSourceBounds(sourceStartOffset,sourceEndOffset);
  nf.initScript(currentScriptOrFn,pn);
  currentScriptOrFn.setIsSyntheticBlock(true);
  this.decompiler=null;
  return currentScriptOrFn;
}
