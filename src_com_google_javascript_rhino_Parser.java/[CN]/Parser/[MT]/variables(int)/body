{
  Node pn;
  boolean first=true;
  JSDocInfo varInfo=null;
  if (context == Token.CONST) {
    pn=nf.createVariables(Token.CONST,ts.getLineno(),ts.getCharno());
    decompiler.addToken(Token.CONST);
  }
 else {
    pn=nf.createVariables(Token.VAR,ts.getLineno(),ts.getCharno());
    varInfo=ts.getAndResetJSDocInfo();
    if (varInfo != null) {
      pn.setJSDocInfo(varInfo);
    }
    decompiler.addToken(Token.VAR);
  }
  for (; ; ) {
    Node name;
    Node init;
    mustMatchToken(Token.NAME,"msg.bad.var");
    String s=ts.getString();
    int lineno=ts.getLineno();
    int charno=ts.getCharno();
    JSDocInfo info=ts.getAndResetJSDocInfo();
    if (!first)     decompiler.addToken(Token.COMMA);
    first=false;
    decompiler.addName(s);
    if (context == Token.CONST) {
      if (!currentScriptOrFn.addConst(s)) {
        if (currentScriptOrFn.addVar(s) != ScriptOrFnNode.DUPLICATE_CONST)         addError("msg.var.redecl",s);
 else         addError("msg.const.redecl",s);
      }
    }
 else {
      int dupState=currentScriptOrFn.addVar(s);
      if (dupState == ScriptOrFnNode.DUPLICATE_CONST)       addError("msg.const.redecl",s);
 else       if (dupState == ScriptOrFnNode.DUPLICATE_PARAMETER)       addStrictWarning("msg.var.hides.arg",s);
 else       if (dupState == ScriptOrFnNode.DUPLICATE_VAR)       addStrictWarning("msg.var.redecl",s);
    }
    name=nf.createTaggedName(s,info,lineno,charno);
    if (matchToken(Token.ASSIGN)) {
      decompiler.addToken(Token.ASSIGN);
      init=assignExpr(context == Token.FOR);
      nf.addChildToBack(name,init);
    }
    nf.addChildToBack(pn,name);
    if (!matchToken(Token.COMMA))     break;
  }
  return pn;
}
