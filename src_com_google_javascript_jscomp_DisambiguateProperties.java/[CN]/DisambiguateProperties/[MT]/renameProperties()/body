{
  int propsRenamed=0, propsSkipped=0, instancesRenamed=0, instancesSkipped=0, singleTypeProps=0;
  Set<String> reported=new HashSet<>();
  for (  Property prop : properties.values()) {
    if (prop.shouldRename()) {
      UnionFind<JSType> pTypes=prop.getTypes();
      Map<JSType,String> propNames=buildPropNames(prop);
      ++propsRenamed;
      prop.expandTypesToSkip();
      for (      Map.Entry<Node,JSType> entry : prop.rootTypesByNode.entrySet()) {
        Node node=entry.getKey();
        JSType rootType=entry.getValue();
        if (prop.shouldRename(rootType)) {
          String newName=propNames.get(pTypes.find(rootType));
          node.setString(newName);
          compiler.reportCodeChange();
          ++instancesRenamed;
        }
 else {
          ++instancesSkipped;
          CheckLevel checkLevelForProp=propertiesToErrorFor.get(prop.name);
          if (checkLevelForProp != null && checkLevelForProp != CheckLevel.OFF && !reported.contains(prop.name)) {
            reported.add(prop.name);
            compiler.report(JSError.make(node,checkLevelForProp,Warnings.INVALIDATION_ON_TYPE,prop.name,rootType.toString(),""));
          }
        }
      }
    }
 else {
      if (prop.skipRenaming) {
        ++propsSkipped;
      }
 else {
        ++singleTypeProps;
      }
    }
  }
  logger.fine("Renamed " + instancesRenamed + " instances of "+ propsRenamed+ " properties.");
  logger.fine("Skipped renaming " + instancesSkipped + " invalidated "+ "properties, "+ propsSkipped+ " instances of properties "+ "that were skipped for specific types and "+ singleTypeProps+ " properties that were referenced from only one type.");
}
