{
  if (n.isCall() && n.getFirstChild() != null && n.getFirstChild().isName() && "define".equals(n.getFirstChild().getString())) {
    Var define=t.getScope().getVar(n.getFirstChild().getString());
    if (define != null && !define.isGlobal()) {
      return;
    }
    if (!(parent.isExprResult() && parent.getParent().isScript())) {
      t.report(n,NON_TOP_LEVEL_STATEMENT_DEFINE_ERROR);
      return;
    }
    Node script=parent.getParent();
    Node requiresNode=null;
    Node callback=null;
    int defineArity=n.getChildCount() - 1;
    if (defineArity == 0) {
      unsupportedDefineError(t,n);
      return;
    }
 else     if (defineArity == 1) {
      callback=n.getSecondChild();
      if (callback.isObjectLit()) {
        handleDefineObjectLiteral(parent,callback,script);
        return;
      }
    }
 else     if (defineArity == 2) {
      requiresNode=n.getSecondChild();
      callback=n.getChildAtIndex(2);
    }
 else     if (defineArity >= 3) {
      unsupportedDefineError(t,n);
      return;
    }
    if (!callback.isFunction() || (requiresNode != null && !requiresNode.isArrayLit())) {
      unsupportedDefineError(t,n);
      return;
    }
    handleRequiresAndParamList(t,n,script,requiresNode,callback);
    Node callbackBlock=callback.getChildAtIndex(2);
    NodeTraversal.traverseEs6(compiler,callbackBlock,new DefineCallbackReturnCallback());
    moveCallbackContentToTopLevel(parent,script,callbackBlock);
    compiler.reportCodeChange();
  }
}
