{
switch (n.getToken()) {
case FALSE:
case NEW_TARGET:
case NULL:
case SUPER:
case THIS:
case TRUE:
    validateChildless(n);
  return;
case DELPROP:
case POS:
case NEG:
case NOT:
case INC:
case DEC:
case TYPEOF:
case VOID:
case BITNOT:
case CAST:
validateUnaryOp(n);
return;
case ASSIGN:
case ASSIGN_BITOR:
case ASSIGN_BITXOR:
case ASSIGN_BITAND:
case ASSIGN_LSH:
case ASSIGN_RSH:
case ASSIGN_URSH:
case ASSIGN_ADD:
case ASSIGN_SUB:
case ASSIGN_MUL:
case ASSIGN_DIV:
case ASSIGN_MOD:
case ASSIGN_EXPONENT:
validateAssignmentExpression(n);
return;
case HOOK:
validateTrinaryOp(n);
return;
case STRING:
validateString(n);
return;
case NUMBER:
validateNumber(n);
return;
case NAME:
validateName(n);
return;
case GETELEM:
case COMMA:
case OR:
case AND:
case BITOR:
case BITXOR:
case BITAND:
case EQ:
case NE:
case SHEQ:
case SHNE:
case LT:
case GT:
case LE:
case GE:
case INSTANCEOF:
case IN:
case LSH:
case RSH:
case URSH:
case SUB:
case ADD:
case MUL:
case MOD:
case DIV:
case EXPONENT:
validateBinaryOp(n);
return;
case GETPROP:
validateGetProp(n);
return;
case ARRAYLIT:
validateArrayLit(n);
return;
case OBJECTLIT:
validateObjectLit(n);
return;
case REGEXP:
validateRegExpLit(n);
return;
case CALL:
validateCall(n);
return;
case SPREAD:
validateSpread(n);
return;
case NEW:
validateNew(n);
return;
case FUNCTION:
validateFunctionExpression(n);
return;
case CLASS:
validateClass(n);
return;
case TEMPLATELIT:
validateTemplateLit(n);
return;
case TAGGED_TEMPLATELIT:
validateTaggedTemplateLit(n);
return;
case YIELD:
validateYield(n);
return;
case AWAIT:
validateAwait(n);
return;
default :
violation("Expected expression but was " + n.getToken(),n);
}
}
