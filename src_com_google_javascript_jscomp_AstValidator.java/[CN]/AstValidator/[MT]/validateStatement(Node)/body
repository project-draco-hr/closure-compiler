{
switch (n.getType()) {
case Token.LABEL:
    validateLabel(n);
  return;
case Token.BLOCK:
validateBlock(n);
return;
case Token.FUNCTION:
validateFunctionStatement(n);
return;
case Token.WITH:
validateWith(n);
return;
case Token.FOR:
validateFor(n);
return;
case Token.WHILE:
validateWhile(n);
return;
case Token.DO:
validateDo(n);
return;
case Token.SWITCH:
validateSwitch(n);
return;
case Token.IF:
validateIf(n);
return;
case Token.VAR:
validateVar(n);
return;
case Token.EXPR_RESULT:
validateExprStmt(n);
return;
case Token.RETURN:
validateReturn(n);
return;
case Token.THROW:
validateThrow(n);
return;
case Token.TRY:
validateTry(n);
return;
case Token.BREAK:
validateBreak(n);
return;
case Token.CONTINUE:
validateContinue(n);
return;
case Token.EMPTY:
return;
default :
violation("Expected statement but was " + Node.tokenToName(n.getType()) + ".",n);
}
}
