{
  rewriteGeneratorBody("",LINE_JOINER.join("case 0:","  $jscomp$generator$state = -1;"));
  assertThat(((NoninjectingCompiler)getLastCompiler()).injected).containsExactly("es6_runtime");
  rewriteGeneratorBody("yield 1;",LINE_JOINER.join("case 0:","  $jscomp$generator$state = 1;","  return {value: 1, done: false};","case 1:","  if (!($jscomp$generator$throw$arg !== undefined)) {","    $jscomp$generator$state = 2; break;","  }","  $jscomp$generator$state = -1;","  throw $jscomp$generator$throw$arg;","case 2:","  $jscomp$generator$state = -1;"));
  test("/** @param {*} a */ function *f(a, b) {}",LINE_JOINER.join("/** @param {*} a @suppress {uselessCode} */","function f(a, b) {","  var $jscomp$generator$state = 0;","  function $jscomp$generator$impl($jscomp$generator$next$arg,","      $jscomp$generator$throw$arg) {","    while (1) switch ($jscomp$generator$state) {","      case 0:","        $jscomp$generator$state = -1;","      default:","        return {value: undefined, done: true}","    }","  }","  var iterator = /** @type {!Generator<?>} */ ({","    next: function(arg){ return $jscomp$generator$impl(arg, undefined); },","    throw: function(arg){ return $jscomp$generator$impl(undefined, arg); },","    return: function(arg) { throw Error('Not yet implemented'); },","  });","  $jscomp.initSymbolIterator();","  /** @this {!Generator<?>} */","  iterator[Symbol.iterator] = function() { return this; };","  return iterator;","}"));
  rewriteGeneratorBodyWithVars("var i = 0, j = 2","var j; var i;",LINE_JOINER.join("case 0:","  i = 0;","  j = 2;","  $jscomp$generator$state = -1;"));
  rewriteGeneratorBodyWithVars("var i = 0; yield i; i = 1; yield i; i = i + 1; yield i;","var i;",LINE_JOINER.join("case 0:","  i = 0;","  $jscomp$generator$state = 1;","  return {value: i, done: false};","case 1:","  if (!($jscomp$generator$throw$arg !== undefined)) {","    $jscomp$generator$state = 2; break;","  }","  $jscomp$generator$state = -1;","  throw $jscomp$generator$throw$arg;","case 2:","  i = 1;","  $jscomp$generator$state = 3;","  return {value: i, done: false};","case 3:","  if (!($jscomp$generator$throw$arg !== undefined)) {","    $jscomp$generator$state = 4; break;","  }","  $jscomp$generator$state = -1;","  throw $jscomp$generator$throw$arg;","case 4:","  i = i + 1;","  $jscomp$generator$state = 5;","  return {value: i, done: false};","case 5:","  if (!($jscomp$generator$throw$arg !== undefined)) {","    $jscomp$generator$state = 6; break;","  }","  $jscomp$generator$state = -1;","  throw $jscomp$generator$throw$arg;","case 6:","  $jscomp$generator$state = -1;"));
}
