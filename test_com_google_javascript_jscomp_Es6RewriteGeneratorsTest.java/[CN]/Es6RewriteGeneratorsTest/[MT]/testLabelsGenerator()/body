{
  test("function *f() { l: if (true) { break l; } }",LINE_JOINER.join("/** @suppress {uselessCode} */","function f() {","  var $jscomp$generator$state = 0;","  function $jscomp$generator$impl($jscomp$generator$next$arg,","      $jscomp$generator$throw$arg) {","    while (1) switch ($jscomp$generator$state) {","      case 0:","        l: if (true) { break l; }","        $jscomp$generator$state = -1;","      default:","        return {value: undefined, done: true}","    }","  }","  var iterator = /** @type {!Generator<?>} */ ({","    next: function(arg){ return $jscomp$generator$impl(arg, undefined); },","    throw: function(arg){ return $jscomp$generator$impl(undefined, arg); },","    return: function(arg) { throw Error('Not yet implemented'); },","  });","  $jscomp.initSymbolIterator();","  iterator[Symbol.iterator] = function() { return this; };","  return iterator;","}"));
  test("function *f() { l: for (;;) { yield i; continue l; } }",LINE_JOINER.join("/** @suppress {uselessCode} */","function f() {","  var $jscomp$generator$state = 0;","  function $jscomp$generator$impl($jscomp$generator$next$arg,","      $jscomp$generator$throw$arg) {","    while (1) switch ($jscomp$generator$state) {","      case 0:","      case 1:","        if (!true) { $jscomp$generator$state = 2; break; }","        $jscomp$generator$state = 3;","        return {value: i, done: false};","      case 3:","        if (!($jscomp$generator$throw$arg !== undefined)) {","          $jscomp$generator$state = 4; break;","        }","        $jscomp$generator$state = -1;","        throw $jscomp$generator$throw$arg;","      case 4:","        $jscomp$generator$state = 1;","        break;","        $jscomp$generator$state = 1;","        break;","      case 2:","        $jscomp$generator$state = -1;","      default:","        return {value: undefined, done: true}","    }","  }","  var iterator = /** @type {!Generator<?>} */ ({","    next: function(arg){ return $jscomp$generator$impl(arg, undefined); },","    throw: function(arg){ return $jscomp$generator$impl(undefined, arg); },","    return: function(arg) { throw Error('Not yet implemented'); },","  });","  $jscomp.initSymbolIterator();","  iterator[Symbol.iterator] = function() { return this; };","  return iterator;","}"));
}
