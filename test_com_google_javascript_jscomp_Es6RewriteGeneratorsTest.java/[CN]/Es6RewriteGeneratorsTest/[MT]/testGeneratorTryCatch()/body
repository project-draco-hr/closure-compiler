{
  test("function *f() {try {yield 1;} catch (e) {}}",LINE_JOINER.join("/** @suppress {uselessCode} */","function f() {","  var $jscomp$generator$state = 0;","  var e;","  var $jscomp$generator$global$error;","  function $jscomp$generator$impl($jscomp$generator$next$arg,","      $jscomp$generator$throw$arg) {","    while (1) switch ($jscomp$generator$state) {","      case 0:","        try {","          $jscomp$generator$state = 3;","          return {value: 1, done: false};","        } catch ($jscomp$generator$e) {","          $jscomp$generator$global$error = $jscomp$generator$e;","          $jscomp$generator$state = 1;","          break;","        }","      case 3:","        try {","          if (!($jscomp$generator$throw$arg !== undefined)) {","            $jscomp$generator$state = 4; break;","          }","          $jscomp$generator$state = -1;","          throw $jscomp$generator$throw$arg;","        } catch ($jscomp$generator$e) {","          $jscomp$generator$global$error = $jscomp$generator$e;","          $jscomp$generator$state = 1;","          break;","        }","      case 4:","        try {","          $jscomp$generator$state = 2;","          break;","        } catch ($jscomp$generator$e) {","          $jscomp$generator$global$error = $jscomp$generator$e;","          $jscomp$generator$state = 1;","          break;","        }","      case 1:","        e = $jscomp$generator$global$error;","      case 2:","        $jscomp$generator$state = -1;","      default:","        return {value: undefined, done: true}","    }","  }","  var iterator = {","    next: function(arg){ return $jscomp$generator$impl(arg, undefined); },","    throw: function(arg){ return $jscomp$generator$impl(undefined, arg); },","  }","  $jscomp.initSymbolIterator();","  iterator[Symbol.iterator] = function() { return this; };","  return /** @type {!Iterable<?>} */ (iterator);","}"));
}
