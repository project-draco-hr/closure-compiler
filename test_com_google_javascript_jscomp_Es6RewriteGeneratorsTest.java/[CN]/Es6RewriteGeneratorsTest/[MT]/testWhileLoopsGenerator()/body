{
  test("function *f() {var i = 0; while (i < 10) { i++; i++; i++; } yield i;}",LINE_JOINER.join("/** @suppress {uselessCode} */","function f() {","  var $jscomp$generator$state = 0;","  var i;","  function $jscomp$generator$impl($jscomp$generator$next$arg,","      $jscomp$generator$throw$arg) {","    while (1) switch ($jscomp$generator$state) {","      case 0:","        i = 0;","        while (i < 10) { i ++; i++; i++; }","        $jscomp$generator$state = 1;","        return {value: i, done: false};","      case 1:","        if (!($jscomp$generator$throw$arg !== undefined)) {","          $jscomp$generator$state = 2; break;","        }","        $jscomp$generator$state = -1;","        throw $jscomp$generator$throw$arg;","      case 2:","        $jscomp$generator$state = -1;","      default:","        return {value: undefined, done: true}","    }","  }","  var iterator = /** @type {!Generator<?>} */ ({","    next: function(arg){ return $jscomp$generator$impl(arg, undefined); },","    throw: function(arg){ return $jscomp$generator$impl(undefined, arg); },","    return: function(arg) { throw Error('Not yet implemented'); },","  });","  $jscomp.initSymbolIterator();","  iterator[Symbol.iterator] = function() { return this; };","  return iterator;","}"));
  test("function *f() { var j = 0; while (j < 10) { yield j; j++; } }",LINE_JOINER.join("/** @suppress {uselessCode} */","function f() {","  var $jscomp$generator$state = 0;","  var j;","  function $jscomp$generator$impl($jscomp$generator$next$arg,","      $jscomp$generator$throw$arg) {","    while (1) switch ($jscomp$generator$state) {","      case 0:","        j = 0;","      case 1:","        if (!(j < 10)) { $jscomp$generator$state = 2; break; }","        $jscomp$generator$state = 3;","        return {value: j, done: false};","      case 3:","        if (!($jscomp$generator$throw$arg !== undefined)) {","          $jscomp$generator$state = 4; break;","        }","        $jscomp$generator$state = -1;","        throw $jscomp$generator$throw$arg;","      case 4:","        j++","        $jscomp$generator$state = 1;","        break","      case 2:","        $jscomp$generator$state = -1;","      default:","        return {value: undefined, done: true}","      }","    }","  var iterator = /** @type {!Generator<?>} */ ({","    next: function(arg){ return $jscomp$generator$impl(arg, undefined); },","    throw: function(arg){ return $jscomp$generator$impl(undefined, arg); },","    return: function(arg) { throw Error('Not yet implemented'); },","  });","  $jscomp.initSymbolIterator();","  iterator[Symbol.iterator] = function() { return this; };","  return iterator;","}"));
}
