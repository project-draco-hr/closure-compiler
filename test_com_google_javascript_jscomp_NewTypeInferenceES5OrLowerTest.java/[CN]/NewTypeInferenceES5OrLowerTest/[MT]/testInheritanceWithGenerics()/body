{
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/** @param {T} x */","I.prototype.bar = function(x) {};","/** @constructor @implements {I<number>} */","function Foo() {}","Foo.prototype.bar = function(x) {};","(new Foo).bar(123);"));
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/** @param {T} x */","I.prototype.bar = function(x) {};","/** @constructor @implements {I<number>} */","function Foo() {}","Foo.prototype.bar = function(x) {};","(new Foo).bar('str');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/** @param {T} x */","I.prototype.bar = function(x) {};","/** @constructor @implements {I<number>} */","function Foo() {}","/** @override */","Foo.prototype.bar = function(x) {};","new Foo().bar('str');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/** @param {T} x */","I.prototype.bar = function(x) {};","/**"," * @template U"," * @constructor"," * @implements {I<U>}"," * @param {U} x"," */","function Foo(x) {}","Foo.prototype.bar = function(x) {};{}","new Foo(5).bar('str');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/** @param {T} x */","I.prototype.bar = function(x) {};","/** @constructor @implements {I<number>} */","function Foo() {}","Foo.prototype.bar = function(x) {};","/** @param {I<string>} x */ function f(x) {};","f(new Foo());"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/** @param {T} x */","I.prototype.bar = function(x) {};","/** @constructor @implements {I<number>} */","function Foo() {}","/** @param {string} x */","Foo.prototype.bar = function(x) {};"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/** @param {T} x */","I.prototype.bar = function(x) {};","/**"," * @template T"," * @param {T} x"," * @constructor @implements {I<number>}"," */","function Foo(x) {}","/** @param {T} x */","Foo.prototype.bar = function(x) {};"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @constructor"," */","function Foo() {}","/** @param {T} x */","Foo.prototype.method = function(x) {};","/**"," * @template T"," * @constructor"," * @extends {Foo<T>}"," * @param {T} x"," */","function Bar(x) {}","/** @param {number} x */","Bar.prototype.method = function(x) {};"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @constructor"," */","function High() {}","/** @param {Low<T>} x */","High.prototype.method = function(x) {};","/**"," * @template T"," * @constructor"," * @extends {High<T>}"," */","function Low() {}"));
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @constructor"," */","function High() {}","/** @param {Low<number>} x */","High.prototype.method = function(x) {};","/**"," * @template T"," * @constructor"," * @extends {High<T>}"," */","function Low() {}"));
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @constructor"," */","function High() {}","/** @param {Low<T>} x */ // error, low is not templatized","High.prototype.method = function(x) {};","/**"," * @constructor"," * @extends {High<number>}"," */","function Low() {}"),JSTypeCreatorFromJSDoc.INVALID_GENERICS_INSTANTIATION);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function I() {}","/**"," * @template T"," * @constructor"," * @implements {I<T>}"," * @extends {Bar}"," */","function Foo(x) {}","/**"," * @constructor"," * @implements {I<number>}"," */","function Bar(x) {}"));
  typeCheck(LINE_JOINER.join("/**"," * @interface"," * @template T"," */","function Foo() {}","/** @constructor @implements {Foo<number>} */","function A() {}","var /** Foo<number> */ x = new A();"));
  typeCheck(LINE_JOINER.join("/** @interface */","function High() {}","/**"," * @template T"," * @param {T} x"," * @return {T}"," */","High.prototype.method = function (x) {};","/** @constructor @implements {High} */","function Low() {}","Low.prototype.method = function (x) {","  return x;","};","(new Low).method(123) - 123;"));
  typeCheck(LINE_JOINER.join("/** @interface */","function High() {}","/**"," * @template T"," * @param {T} x"," * @return {T}"," */","High.prototype.method = function (x) {};","/** @constructor @implements {High} */","function Low() {}","Low.prototype.method = function (x) {","  return x;","};","(new Low).method('str') - 123;"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @interface"," */","function High() {}","/** @return {T} */","High.prototype.method = function () {};","/** @constructor @implements {High} */","function Low() {}","Low.prototype.method = function () { return /** @type {?} */ (null); };","(new Low).method() - 123;","(new Low).method() < 'asdf';"));
}
