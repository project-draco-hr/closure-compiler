{
  String CLOSURE_DEFS=Joiner.on('\n').join("/** @const */ var goog = {};","goog.inherits = function(child, parent){};");
  typeCheck(CLOSURE_DEFS + Joiner.on('\n').join("/** @constructor */function base() {}","/** @return {number} */ ","  base.prototype.foo = function() { return 1; };","/** @extends {base}\n * @constructor */function derived() {}","goog.inherits(derived, base);","var /** number */ n = derived.superClass_.foo()"));
  typeCheck(CLOSURE_DEFS + Joiner.on('\n').join("/** @constructor */ function OldType() {}","/** @param {?function(new:OldType)} f */ function g(f) {","  /**","    * @constructor","    * @extends {OldType}","    */","  function NewType() {};","  goog.inherits(NewType, f);","  NewType.prototype.method = function() {","    NewType.superClass_.foo.call(this);","  };","}"),NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(CLOSURE_DEFS + Joiner.on('\n').join("/** @constructor */ function Foo() {}","goog.inherits(Foo, Object);","var /** !Object */ b = Foo.superClass_;"));
  typeCheck(CLOSURE_DEFS + Joiner.on('\n').join("/** @constructor */ function base() {}","/** @constructor @extends {base} */ function derived() {}","goog.inherits(derived, base);","var /** null */ b = derived.superClass_"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(CLOSURE_DEFS + "var /** !Object */ b = Object.superClass_",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(CLOSURE_DEFS + "var o = {x: 'str'}; var q = o.superClass_;",NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(CLOSURE_DEFS + "var o = {superClass_: 'str'}; var /** string */ s = o.superClass_;");
}
