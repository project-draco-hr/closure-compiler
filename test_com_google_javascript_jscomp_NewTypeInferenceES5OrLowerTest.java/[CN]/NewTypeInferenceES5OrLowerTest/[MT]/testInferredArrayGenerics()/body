{
  typeCheck("/** @const */ var x = [];",GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE);
  typeCheck("/** @const */ var x = [1, 'str'];",GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor @extends {Foo} */ function Bar() {}","/** @const */ var x = [new Foo, new Bar];"),GlobalTypeInfo.COULD_NOT_INFER_CONST_TYPE);
  typeCheck("var /** Array<string> */ a = [1, 2];",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("var arr = [];","var /** Array<string> */ as = arr;"));
  typeCheck(Joiner.on('\n').join("var arr = [1, 2, 3];","var /** Array<string> */ as = arr;"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","var /** Array<string> */ a = [new Foo, new Foo];"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor @extends {Foo} */ function Bar() {}","var /** Array<Foo> */ a = [new Foo, new Bar];"));
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor @extends {Foo} */ function Bar() {}","var /** Array<Bar> */ a = [new Foo, new Bar];"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @const */ var x = [1, 2, 3];","function g() { var /** Array<string> */ a = x; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor @extends {Foo} */ function Bar() {}","/** @const */ var x = [new Foo, new Foo];","function g() { var /** Array<Bar> */ a = x; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
}
