{
  typeCheck("/** @constructor @template T */ function Foo(){}\n" + "/**\n" + " * @template T\n"+ " * @param {!Array<T>|!Foo<T>} arr\n"+ " * @return {T}\n"+ " */\n"+ "function get(arr) {\n"+ "  return arr[0];\n"+ "}\n"+ "var /** null */ x = get([5]);",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/**\n" + " * @template T\n" + " * @param {Array<T>} arr\n"+ " * @return {T|undefined}\n"+ " */\n"+ "function get(arr) {\n"+ "  if (arr === null || arr.length === 0) {\n"+ "    return undefined;\n"+ "  }\n"+ "  return arr[0];\n"+ "}\n"+ "var /** (number|undefined) */ x = get([5]);");
  typeCheck("/**\n" + " * @template T\n" + " * @param {Array<T>} arr\n"+ " * @return {T|undefined}\n"+ " */\n"+ "function get(arr) {\n"+ "  if (arr === null || arr.length === 0) {\n"+ "    return undefined;\n"+ "  }\n"+ "  return arr[0];\n"+ "}\n"+ "var /** null */ x = get([5]);",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @constructor @template U */ function Foo(/** U */ x){}\n" + "/**\n" + " * @template T\n"+ " * @param {U|!Array<T>} arr\n"+ " * @return {U}\n"+ " */\n"+ "Foo.prototype.get = function(arr, /** ? */ opt_arg) {\n"+ "  return opt_arg;\n"+ "}\n"+ "var /** null */ x = (new Foo('str')).get([5], 1);",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @constructor @template U */ function Foo(/** U */ x){}\n" + "/**\n" + " * @template T\n"+ " * @param {U|!Array<T>} arr\n"+ " * @return {U}\n"+ " */\n"+ "Foo.prototype.get = function(arr, /** ? */ opt_arg) {\n"+ "  return opt_arg;\n"+ "}\n"+ "Foo.prototype.f = function() {\n"+ "  var /** null */ x = this.get([5], 1);\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/**\n" + " * @template T\n" + " * @constructor\n"+ " */\n"+ "function Bar() {}\n"+ "/** @constructor */\n"+ "function Foo() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {!Bar<(!Bar<T>|!Foo)>} x\n"+ " */\n"+ "function f(x) {}\n"+ "f(/** @type {!Bar<!Bar<number>>} */ (new Bar));",NewTypeInference.FAILED_TO_UNIFY);
}
