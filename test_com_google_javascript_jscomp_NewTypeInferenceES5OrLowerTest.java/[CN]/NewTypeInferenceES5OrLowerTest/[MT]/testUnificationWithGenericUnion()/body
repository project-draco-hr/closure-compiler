{
  typeCheck(LINE_JOINER.join("/** @constructor @template T */ function Foo(){}","/**"," * @template T"," * @param {!Array<T>|!Foo<T>} arr"," * @return {T}"," */","function get(arr) {","  return arr[0];","}","var /** null */ x = get([5]);"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @param {Array<T>} arr"," * @return {T|undefined}"," */","function get(arr) {","  if (arr === null || arr.length === 0) {","    return undefined;","  }","  return arr[0];","}","var /** (number|undefined) */ x = get([5]);"));
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @param {Array<T>} arr"," * @return {T|undefined}"," */","function get(arr) {","  if (arr === null || arr.length === 0) {","    return undefined;","  }","  return arr[0];","}","var /** null */ x = get([5]);"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/** @constructor @template U */ function Foo(/** U */ x){}","/**"," * @template T"," * @param {U|!Array<T>} arr"," * @return {U}"," */","Foo.prototype.get = function(arr, /** ? */ opt_arg) {","  return opt_arg;","}","var /** null */ x = (new Foo('str')).get([5], 1);"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/** @constructor @template U */ function Foo(/** U */ x){}","/**"," * @template T"," * @param {U|!Array<T>} arr"," * @return {U}"," */","Foo.prototype.get = function(arr, /** ? */ opt_arg) {","  return opt_arg;","}","Foo.prototype.f = function() {","  var /** null */ x = this.get([5], 1);","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @constructor"," */","function Bar() {}","/** @constructor */","function Foo() {}","/**"," * @template T"," * @param {!Bar<(!Bar<T>|!Foo)>} x"," */","function f(x) {}","f(/** @type {!Bar<!Bar<number>>} */ (new Bar));"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/** @constructor */","function Foo() {}","/**"," * @template T"," * @param {T|null} x"," */","function f(x) {}","f(new Foo);"));
}
