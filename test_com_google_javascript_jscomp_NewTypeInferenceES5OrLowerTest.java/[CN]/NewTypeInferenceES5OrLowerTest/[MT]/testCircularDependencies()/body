{
  typeCheck(Joiner.on('\n').join("/** @constructor @extends {Bar}*/ function Foo() {}","/** @constructor */ function Bar() {}"));
  typeCheck(Joiner.on('\n').join("/** @param {Foo} x */ function f(x) {}","/** @constructor */ function Foo() {}"));
  typeCheck(Joiner.on('\n').join("f(new Bar)","/** @param {Foo} x */ function f(x) {}","/** @constructor */ function Foo() {}","/** @constructor */ function Bar() {}"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor @param {Foo} x */ function Bar(x) {}","/** @constructor @param {Bar} x */ function Foo(x) {}","new Bar(new Foo(null));"));
  typeCheck(Joiner.on('\n').join("/** @constructor @param {Foo} x */ function Bar(x) {}","/** @constructor @param {Bar} x */ function Foo(x) {}","new Bar(new Foo(undefined));"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor @extends {Bar} */ function Foo() {}","/** @constructor @extends {Foo} */ function Bar() {}"),JSTypeCreatorFromJSDoc.INHERITANCE_CYCLE);
  typeCheck(Joiner.on('\n').join("/** @interface @extends {Bar} */ function Foo() {}","/** @interface @extends {Foo} */ function Bar() {}"),JSTypeCreatorFromJSDoc.INHERITANCE_CYCLE);
  typeCheck("/** @constructor @extends {Foo} */ function Foo() {}",JSTypeCreatorFromJSDoc.INHERITANCE_CYCLE);
}
