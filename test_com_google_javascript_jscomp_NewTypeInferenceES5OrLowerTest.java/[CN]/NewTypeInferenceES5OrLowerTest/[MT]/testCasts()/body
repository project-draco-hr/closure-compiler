{
  typeCheck("(/** @type {number} */ ('asdf'));",NewTypeInference.INVALID_CAST);
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @param {T} x"," */","function f(x) {","  /** @type{!Object} */ (x);","}"));
  typeCheck(LINE_JOINER.join("/**"," * @template T"," * @param {T|string} x"," */","function f(x) {","  /** @type{!Object} */ (x);","}"));
  typeCheck(LINE_JOINER.join("function f(/** (number|string) */ x) {","  var y = /** @type {number} */ (x);","}"));
  typeCheck("(/** @type {(number|string)} */ (1));");
  typeCheck("(/** @type {number} */ (/** @type {?} */ ('asdf')))");
  typeCheck(LINE_JOINER.join("/** @constructor */","function Parent() {}","/** @constructor @extends {Parent} */","function Child() {}","/** @type {Child|null} */ (new Parent);"));
  typeCheck(LINE_JOINER.join("function f(/** (number|string) */ x) {","  return /** @type {number|boolean} */ (x);","}"));
  typeCheck(LINE_JOINER.join("/** @constructor */","function High() {}","/** @constructor @extends {High} */","function Low() {}","/** @constructor */","function Foo() {}","function f(/** (!Foo|!Low) */ x) {","  return /** @type {!High} */ (x);","}"));
}
