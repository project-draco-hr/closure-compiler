{
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/** @const */","var exports = Foo;","Foo.prop = 123;","exports.prop2 = 234;","function f() {","  return exports.prop + Foo.prop2;","}"));
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/** @const */","var exports = Foo;","/** @type {number} */ exports.prop = 123;","/** @type {string} */ exports.prop2 = 'str';","function f() {","  return Foo.prop - Foo.prop2;","}"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @const */","var $jscomp$scope = {};","/** @const */","var exports = {};","/** @constructor */","$jscomp$scope.Foo = function() {};","/** @constructor */","$jscomp$scope.Foo.Bar = function() {};","/** @const */","exports.Foo = $jscomp$scope.Foo;","/** @type {exports.Foo} */","var w = 123;"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @const */","var $jscomp$scope = {};","/** @const */","var exports = {};","/** @constructor */","$jscomp$scope.Foo = function() {};","/** @constructor */","$jscomp$scope.Foo.Bar = function() {};","/** @const */","exports.Foo = $jscomp$scope.Foo;","/** @type {exports.Foo.Bar} */","var z = 123;"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @const */","var ns = {}","/** @const */","var x = ns;","/** @type {number} */","ns.prop = 123;","function f() {","  var /** string */ s = x.prop;","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @enum */","var e = { A: 1 }","/** @const */","var x = e;","/** @type {number} */","e.prop = 123;","function f() {","  var /** string */ s = x.prop;","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */","function Parent() {}","/** @return {number} */","Parent.prototype.method = function() {};","/** @constructor @implements {Parent} */","function Foo() {}","Foo.prototype.method = function() { return 1; };","/** @const */","var exports = Foo;","function f() {","  var /** null */ x = exports.prototype.method.call(new Foo);","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */","function Parent() {}","/** @return {number} */","Parent.prototype.method = function() {};","/** @constructor @implements {Parent} */","function Foo() {}","Foo.prototype.method = function() { return 1; };","/** @const */","var exports = Foo;","function f() {","  var /** null */ x = (new exports).method();","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */","function Parent() {}","/** @return {number} */","Parent.prototype.method = function() {};","/** @constructor @implements {Parent} */","function Foo() {}","Foo.prototype.method = function() { return 1; };","/** @const */","var exports = new Foo;","function f() {","  var /** null */ x = exports.method();","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */","function I1() {}","/** @return {number|string} */","I1.prototype.method = function() {};","/** @interface */","function I2() {}","/** @return {number|boolean} */","I2.prototype.method = function() {};","/**"," * @constructor"," * @implements {I1}"," * @implements {I2}"," */","function Foo() {}","Foo.prototype.method = function() { return 1; };","/** @const */","var exports = Foo;","function f() {","  var /** null */ x = exports.prototype.method.call(new Foo);","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("function h() {","  /** @type {ns.ns2.Foo} */","  var w = 123;","  /** @type {ns.ns2.Foo.Bar} */","  var z = 123;","}","/** @const */","var $jscomp = {};","/** @const */","$jscomp.scope = {};","/** @const */","var ns = {};","/** @const */","ns.ns2 = {};","/** @constructor */","$jscomp.scope.Foo = function() {};","function f() {","  /** @constructor */","  $jscomp.scope.Foo.Bar = function() {};","}","/** @const */","ns.ns2.Foo = $jscomp.scope.Foo;"),NewTypeInference.MISTYPED_ASSIGN_RHS,NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("function f() { Foo.prop - 1; }","function g() { Foo2.prop - 1; }","/** @constructor */","var Foo = function() {};","/** @const */","var Foo2 = Foo;","/** @const */","var Foo3 = Foo2;","/** @type {string} */","Foo3.prop = '';"),NewTypeInference.INVALID_OPERAND_TYPE,NewTypeInference.INVALID_OPERAND_TYPE);
}
