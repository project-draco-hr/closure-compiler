{
  typeCheck("/** @type {Array<string>} */\n" + "var arr = ['str'];\n" + "arr[0]++;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("var arr = ['str'];\n" + "arr[0]++;",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function foo (/** Array<string> */ a) {}\n" + "/** @type {Array<number>} */\n" + "var b = [1];\n"+ "foo(b);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("function foo (/** Array<string> */ a) {}\n" + "foo([1]);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @type {!Array<number>} */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @type {!Array<number>} */\n" + "var arr = [1, 2, 3];\n" + "arr['0'] = 'str';");
  typeCheck("/** @type {Array<number>} */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("function f(/** Array<number> */ arr) {\n" + "  arr[0] = 'str';\n" + "}",NewTypeInference.NULLABLE_DEREFERENCE);
  typeCheck("/** @const */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("var arr = [1, 2, 3];\n" + "arr[0] = 'str';");
  typeCheck("/** @constructor */ function Super(){}\n" + "/** @constructor @extends {Super} */ function Sub(){}\n" + "/** @type {!Array<Super>} */ var arr = [new Sub];\n"+ "arr[0] = new Super;");
  typeCheck("/** @type {Array<number>} */ var arr = [];\n" + "arr[0] = 'str';",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @type {Array<number>} */ var arr = [];\n" + "(function (/** Array<string> */ x){})(arr);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("function /** string */ f(/** !Array<number> */ arr) {\n" + "  return arr[0];\n" + "}",NewTypeInference.RETURN_NONDECLARED_TYPE);
  typeCheck("var arr = [];\n" + "arr[0] = 5;\n" + "var /** Array<string> */ as = arr;");
}
