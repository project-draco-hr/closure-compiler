{
  typeCheck("/** @constructor */\n" + "function C(){ /** @type {number} */ this.prop = 1; }\n" + "(new C)['prop'] < 'asdf';",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function f(x, y) {\n" + "  x < y;\n" + "  ({})[y - 5];\n"+ "}\n"+ "f('asdf', 123);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("function f(x, y) {\n" + "  x < y;\n" + "  ({})[y - 5];\n"+ "  x = 'asdf';\n"+ "}\n"+ "f('asdf', 123);");
  typeCheck("function f(x, y) {\n" + "  ({})[y - 5];\n" + "  x < y;\n"+ "}\n"+ "f('asdf', 123);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("function f(x) {\n" + "  x['prop'] = 'str';\n" + "  return x['prop'] - 5;\n"+ "}\n"+ "f({});",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("function f(/** ? */ o) { return o[0].prop; }");
  typeCheck("function f(x) {\n" + "  x['prop'] = 7;\n" + "  var p = 'prop';\n"+ "  x[p] = 'str';\n"+ "  return x['prop'] - 5;\n"+ "}\n"+ "f({});");
}
