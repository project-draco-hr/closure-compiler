{
  typeCheck(Joiner.on('\n').join("/** @type {!Function} */","var abstractMethod = function(){};","/** @constructor */ function Foo(){};","/** @param {number} index */","Foo.prototype.m = abstractMethod;","/** @constructor @extends {Foo} */ function Bar(){};","/** @override */","Bar.prototype.m = function(index) {};"));
  typeCheck(Joiner.on('\n').join("/** @type {!Function} */","var abstractMethod = function(){};","/** @constructor */ function Foo(){};","/** @constructor @extends {Foo} */ function Bar(){};","/** @param {number} index */","Foo.prototype.m = abstractMethod;","/** @override */","Bar.prototype.m = function(index) {};","(new Bar).m('str');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @type {!Function} */","var abstractMethod = function(){};","/** @constructor */ function Foo(){};","/** @constructor @extends {Foo} */ function Bar(){};","/**"," * @param {number} b"," * @param {string} a"," */","Foo.prototype.m = abstractMethod;","/** @override */","Bar.prototype.m = function(a, b) {};","(new Bar).m('str', 5);"),NewTypeInference.INVALID_ARGUMENT_TYPE,NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @type {!Function} */","var abstractMethod = function(){};","/** @constructor */ function Foo(){};","/** @constructor @extends {Foo} */ function Bar(){};","/** @type {function(number, string)} */","Foo.prototype.m = abstractMethod;","/** @override */","Bar.prototype.m = function(a, b) {};","(new Bar).m('str', 5);"),NewTypeInference.INVALID_ARGUMENT_TYPE,NewTypeInference.INVALID_ARGUMENT_TYPE);
}
