{
  typeCheck(Joiner.on('\n').join("/** @enum {number} */","var E = {","  ONE: 1,","  TWO: 2","};","function f(/** E */ x) { x < 'str'; }"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @enum */","var E = {","  ONE: 1,","  TWO: 2","};","function f(/** E */ x) { x < 'str'; }"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @enum {number} */","var E = {","  ONE: 1,","  TWO: 2","};","function f(/** E */ x) {}","function g(/** number */ x) {}","f(E.TWO);","g(E.TWO);"));
  typeCheck(Joiner.on('\n').join("/** @enum {number} */","var E = {","  ONE: 1,","  TWO: 2","};","function f(/** E */ x) {}","f(1);"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @enum {number} */","var E = {","  ONE: 1,","  TWO: 2","};","function f() { E.THREE - 5; }"),TypeCheck.INEXISTENT_PROPERTY);
  typeCheck(Joiner.on('\n').join("/** @enum {!Foo} */","var E = { ONE: new Foo };","/** @constructor */","function Foo() {}"));
  typeCheck(Joiner.on('\n').join("/** @typedef {number} */","var num;","/** @enum {num} */","var E = { ONE: 1 };","function f(/** E */ x) { x < 'str'; }"),NewTypeInference.INVALID_OPERAND_TYPE);
}
