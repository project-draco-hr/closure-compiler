{
  typeCheck("/** @constructor @struct */ function Foo() { this.prop = 123; }\n" + "(new Foo).prop;");
  typeCheck("/** @constructor @struct */ function Foo() { this.prop = 123; }\n" + "(new Foo)['prop'];",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("/** @interface */ function Foo() {}\n" + "/** @type {number} */ Foo.prototype.prop;\n" + "function f(/** !Foo */ x) { x['prop']; }",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("/** @constructor @struct */ function Foo() {\n" + "  this.prop = 123;\n" + "  this['prop'] - 123;\n"+ "}",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("/** @constructor @struct */ function Foo() { this.prop = 123; }\n" + "(new Foo)['prop'] = 123;",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("/** @constructor @struct */ function Foo() { this.prop = 123; }\n" + "function f(pname) { (new Foo)[pname] = 123; }",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("/** @constructor @struct */ function Foo() { this.prop = {}; }\n" + "(new Foo)['prop'].newprop = 123;",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("/** @constructor @struct */ function Foo() {}\n" + "/** @constructor */ function Bar() {}\n" + "function f(cond) {\n"+ "  var x;\n"+ "  if (cond) {\n"+ "    x = new Foo;\n"+ "  }\n"+ "  else {\n"+ "    x = new Bar;\n"+ "  }\n"+ "  x['prop'] = 123;\n"+ "}",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("(/** @struct */ { 'prop' : 1 });",TypeCheck.ILLEGAL_OBJLIT_KEY);
  typeCheck("var lit = /** @struct */ { prop : 1 }; lit['prop'];",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("function f(cond) {\n" + "  var x;\n" + "  if (cond) {\n"+ "    x = /** @struct */ { a: 1 };\n"+ "  }\n"+ "  else {\n"+ "    x = /** @struct */ { a: 2 };\n"+ "  }\n"+ "  x['a'] = 123;\n"+ "}",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("function f(cond) {\n" + "  var x;\n" + "  if (cond) {\n"+ "    x = /** @struct */ { a: 1 };\n"+ "  }\n"+ "  else {\n"+ "    x = {};\n"+ "  }\n"+ "  x['random' + 'propname'] = 123;\n"+ "}",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("/**\n" + " * @constructor\n" + " * @struct\n"+ " */\n"+ "function Foo() {\n"+ "  /** @type {number} */\n"+ "  this.prop;\n"+ "  this.prop = 'asdf';\n"+ "}\n",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/**\n" + " * @constructor\n" + " * @struct\n"+ " */\n"+ "function Foo() {\n"+ "  /** @type {number} */\n"+ "  this.prop;\n"+ "}\n"+ "(new Foo).prop = 'asdf';\n",NewTypeInference.MISTYPED_ASSIGN_RHS);
}
