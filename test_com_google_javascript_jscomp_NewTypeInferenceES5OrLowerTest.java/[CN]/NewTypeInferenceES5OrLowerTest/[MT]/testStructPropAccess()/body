{
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */ function Foo() { this.prop = 123; }","(new Foo).prop;"));
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */ function Foo() { this.prop = 123; }","(new Foo)['prop'];"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Foo() {}","/** @type {number} */ Foo.prototype.prop;","function f(/** !Foo */ x) { x['prop']; }"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */ function Foo() {","  this.prop = 123;","  this['prop'] - 123;","}"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */ function Foo() { this.prop = 123; }","(new Foo)['prop'] = 123;"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */ function Foo() { this.prop = 123; }","function f(pname) { (new Foo)[pname] = 123; }"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */ function Foo() { this.prop = {}; }","(new Foo)['prop'].newprop = 123;"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */ function Foo() {}","/** @constructor */ function Bar() {}","function f(cond) {","  var x;","  if (cond) {","    x = new Foo;","  }","  else {","    x = new Bar;","  }","  x['prop'] = 123;","}"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck("(/** @struct */ { 'prop' : 1 });",TypeCheck.ILLEGAL_OBJLIT_KEY);
  typeCheck("var lit = /** @struct */ { prop : 1 }; lit['prop'];",TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("function f(cond) {","  var x;","  if (cond) {","    x = /** @struct */ { a: 1 };","  }","  else {","    x = /** @struct */ { a: 2 };","  }","  x['a'] = 123;","}"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("function f(cond) {","  var x;","  if (cond) {","    x = /** @struct */ { a: 1 };","  }","  else {","    x = {};","  }","  x['random' + 'propname'] = 123;","}"),TypeValidator.ILLEGAL_PROPERTY_ACCESS);
  typeCheck(Joiner.on('\n').join("/**"," * @constructor"," * @struct"," */","function Foo() {","  /** @type {number} */","  this.prop;","  this.prop = 'asdf';","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/**"," * @constructor"," * @struct"," */","function Foo() {","  /** @type {number} */","  this.prop;","}","(new Foo).prop = 'asdf';"),NewTypeInference.MISTYPED_ASSIGN_RHS);
}
