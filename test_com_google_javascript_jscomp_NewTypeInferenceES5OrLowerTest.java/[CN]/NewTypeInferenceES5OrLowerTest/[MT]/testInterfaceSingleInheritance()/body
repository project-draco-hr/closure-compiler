{
  typeCheck(Joiner.on('\n').join("/** @interface */ function I() {}","/** @type {string} */ I.prototype.prop;","/** @constructor @implements{I} */ function C() {}"),GlobalTypeInfo.INTERFACE_METHOD_NOT_IMPLEMENTED);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I() {}","/** @param {number} x */","I.prototype.method = function(x) {};","/** @constructor @implements{I} */ function C() {}"),GlobalTypeInfo.INTERFACE_METHOD_NOT_IMPLEMENTED);
  typeCheck(Joiner.on('\n').join("/** @interface */ function IParent() {}","/** @type {number} */ IParent.prototype.prop;","/** @interface @extends{IParent} */ function IChild() {}","/** @constructor @implements{IChild} */","function C() { this.prop = 5; }","(new C).prop < 'adsf';"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function IParent() {}","/** @type {number} */ IParent.prototype.prop;","/** @interface @extends{IParent} */ function IChild() {}","/** @constructor @implements{IChild} */","function C() { this.prop = 'str'; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Parent() { /** @type {number} */ this.prop = 123; }","/** @constructor @extends {Parent} */ function Child() {}","(new Child).prop = 321;"));
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Parent() { /** @type {number} */ this.prop = 123; }","/** @constructor @extends {Parent} */ function Child() {}","(new Child).prop = 'str';"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I() {}","/** @param {number} x */","I.prototype.method = function(x, y) {};","/** @constructor @implements{I} */ function C() {}","/** @param {string} y */","C.prototype.method = function(x, y) {};","(new C).method(5, 6);"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I() {}","/** @param {number} x */","I.prototype.method = function(x, y) {};","/** @constructor @implements{I} */ function C() {}","/** @param {string} y */","C.prototype.method = function(x, y) {};","(new C).method('asdf', 'fgr');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I() {}","/** @param {number} x */","I.prototype.method = function(x) {};","/** @constructor @implements{I} */ function C() {}","C.prototype.method = function(x) {};","(new C).method('asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I1() {}","/** @param {number} x */ I1.prototype.method = function(x, y) {};","/** @interface */ function I2() {}","/** @param {string} y */ I2.prototype.method = function(x, y) {};","/** @constructor @implements{I1} @implements{I2} */ function C(){}","C.prototype.method = function(x, y) {};","(new C).method('asdf', 'fgr');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I1() {}","/** @param {number} x */ I1.prototype.method = function(x, y) {};","/** @interface */ function I2() {}","/** @param {string} y */ I2.prototype.method = function(x, y) {};","/** @constructor @implements{I1} @implements{I2} */ function C(){}","C.prototype.method = function(x, y) {};","(new C).method(1, 2);"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I1() {}","/** @param {number} x */ I1.prototype.method = function(x) {};","/** @interface */ function I2() {}","/** @param {string} x */ I2.prototype.method = function(x) {};","/** @constructor @implements{I1} @implements{I2} */ function C(){}","C.prototype.method = function(x) {};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function I1() {}","/** @param {number} x */ I1.prototype.method = function(x) {};","/** @interface */ function I2() {}","/** @param {string} x */ I2.prototype.method = function(x) {};","/** @constructor @implements{I1} @implements{I2} */ function C(){}","C.prototype.method = function(x) {};","(new C).method(true);"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I() {}","/** @param {number} x */ I.prototype.method = function(x) {};","/** @constructor */ function S() {}","/** @param {string} x */ S.prototype.method = function(x) {};","/** @constructor @implements{I} @extends{S} */ function C(){}","C.prototype.method = function(x) {};","(new C).method(true);"),NewTypeInference.INVALID_ARGUMENT_TYPE);
}
