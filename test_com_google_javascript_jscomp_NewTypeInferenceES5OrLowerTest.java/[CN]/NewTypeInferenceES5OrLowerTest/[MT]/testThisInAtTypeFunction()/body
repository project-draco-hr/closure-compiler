{
  typeCheck("/** @constructor */ function Foo(){};\n" + "/** @type {number} */ Foo.prototype.n;\n" + "/** @type {function(this:Foo)} */ function f() { this.n = 'str' };",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @type {function(this:gibberish)} */ function foo() {}",GlobalTypeInfo.UNRECOGNIZED_TYPE_NAME);
  typeCheck("/** @constructor */\n" + "function Foo() {}\n" + "var /** function(this:Foo) */ x = function() {};");
  typeCheck("/** @constructor */\n" + "function Foo() {}\n" + "/** @param {function(this:Foo)} x */\n"+ "function f(x) {}\n"+ "f(/** @type {function(this:Foo)} */ (function() {}));");
  typeCheck("/** @constructor */\n" + "function Foo() { /** @type {number} */ this.prop = 1; }\n" + "/** @type {function(this:Foo)} */\n"+ "function f() { this.prop = 'asdf'; }",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @constructor */\n" + "function Foo() {}\n" + "/** @constructor */\n"+ "function Bar() {}\n"+ "/** @param {function(this:Foo)} x */\n"+ "function f(x) {}\n"+ "f(/** @type {function(this:Bar)} */ (function() {}));",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @constructor */\n" + "function High() {}\n" + "/** @constructor @extends {High} */\n"+ "function Low() {}\n"+ "function f(/** function(this:Low) */ low,\n"+ "           /** function(this:High) */ high) {\n"+ "  var fun = (1 < 2) ? low : high;\n"+ "  var /** function(this:High) */ f2 = fun;\n"+ "  var /** function(this:Low) */ f3 = fun;\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @constructor */\n" + "function High() {}\n" + "/** @constructor @extends {High} */\n"+ "function Low() {}\n"+ "function f(/** function(function(this:Low)) */ low,\n"+ "           /** function(function(this:High)) */ high) {\n"+ "  var fun = (1 < 2) ? low : high;\n"+ "  var /** function(function(this:High)) */ f2 = fun;\n"+ "  var /** function(function(this:Low)) */ f3 = fun;\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/**\n" + " * @constructor\n" + " * @template T\n"+ " * @param {T} x\n"+ " */\n"+ "function Foo(x) {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {function(this:Foo<T>)} fun\n"+ " */\n"+ "function f(fun) { return fun; }\n"+ "var /** function(this:Foo<string>) */ x =\n"+ "    f(/** @type {function(this:Foo<number>)} */ (function() {}));",NewTypeInference.MISTYPED_ASSIGN_RHS);
}
