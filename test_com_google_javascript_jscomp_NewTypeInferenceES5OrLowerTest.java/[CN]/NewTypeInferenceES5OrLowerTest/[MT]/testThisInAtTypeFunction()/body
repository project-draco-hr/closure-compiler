{
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo(){};","/** @type {number} */ Foo.prototype.n;","/** @type {function(this:Foo)} */ function f() { this.n = 'str' };"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/** @type {function(this:gibberish)} */ function foo() {}",GlobalTypeInfo.UNRECOGNIZED_TYPE_NAME);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","var /** function(this:Foo) */ x = function() {};"));
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/** @param {function(this:Foo)} x */","function f(x) {}","f(/** @type {function(this:Foo)} */ (function() {}));"));
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() { /** @type {number} */ this.prop = 1; }","/** @type {function(this:Foo)} */","function f() { this.prop = 'asdf'; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/** @constructor */","function Bar() {}","/** @param {function(this:Foo)} x */","function f(x) {}","f(/** @type {function(this:Bar)} */ (function() {}));"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function High() {}","/** @constructor @extends {High} */","function Low() {}","function f(/** function(this:Low) */ low,","           /** function(this:High) */ high) {","  var fun = (1 < 2) ? low : high;","  var /** function(this:High) */ f2 = fun;","  var /** function(this:Low) */ f3 = fun;","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function High() {}","/** @constructor @extends {High} */","function Low() {}","function f(/** function(function(this:Low)) */ low,","           /** function(function(this:High)) */ high) {","  var fun = (1 < 2) ? low : high;","  var /** function(function(this:High)) */ f2 = fun;","  var /** function(function(this:Low)) */ f3 = fun;","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/**"," * @constructor"," * @template T"," * @param {T} x"," */","function Foo(x) {}","/**"," * @template T"," * @param {function(this:Foo<T>)} fun"," */","function f(fun) { return fun; }","var /** function(this:Foo<string>) */ x =","    f(/** @type {function(this:Foo<number>)} */ (function() {}));"),NewTypeInference.MISTYPED_ASSIGN_RHS);
}
