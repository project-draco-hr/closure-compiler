{
  typeCheck(Joiner.on('\n').join("/** @interface */ function Intf() {}","/** @param {number} x */","Intf.prototype.method = function(x) {};","/** @interface @extends {Intf} */","function Subintf() {}","/** @override */","Subintf.prototype.method;","function f(/** !Subintf */ x) { x.method('asdf'); }"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Intf() {}","/** @param {number} x */","Intf.prototype.method = function(x) {};","/** @interface @extends {Intf} */","function Subintf() {}","Subintf.prototype.method;","function f(/** !Subintf */ x) { x.method('asdf'); }"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Intf() {}","/** @param {number} x */","Intf.prototype.method = function(x) {};","/** @constructor  @implements {Intf} */","function C() {}","/** @override */","C.prototype.method = (function(){ return function(x){}; })();","(new C).method('asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Intf() {}","/** @param {number} x */","Intf.prototype.method = function(x) {};","/** @constructor  @implements {Intf} */","function C() {}","C.prototype.method = (function(){ return function(x){}; })();","(new C).method('asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Intf() {}","/** @type {string} */","Intf.prototype.s = 'str';","/** @constructor @implements {Intf} */","function C() {}","/** @override */","C.prototype.s = 'str2';","(new C).s - 5;"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Intf() {}","/** @type {string} */","Intf.prototype.s = 'str';","/** @constructor @implements {Intf} */","function C() {}","/** @type {number} @override */","C.prototype.s = 72;"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Intf() {}","/** @type {string} */","Intf.prototype.s = 'str';","/** @constructor @implements {Intf} */","function C() {}","/** @override */","C.prototype.s = 72;"),NewTypeInference.MISTYPED_ASSIGN_RHS);
}
