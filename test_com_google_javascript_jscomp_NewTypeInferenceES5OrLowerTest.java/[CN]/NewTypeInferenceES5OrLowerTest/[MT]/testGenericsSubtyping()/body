{
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," */","Parent.prototype.method = function(x, y){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {number} x"," * @param {number} y"," */","Child.prototype.method = function(x, y){};"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," */","Parent.prototype.method = function(x, y){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {?} x"," * @param {number} y"," */","Child.prototype.method = function(x, y){};"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," */","Parent.prototype.method = function(x, y){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {*} x"," * @param {*} y"," */","Child.prototype.method = function(x, y){};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," */","Parent.prototype.method = function(x, y){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {?} x"," * @param {?} y"," */","Child.prototype.method = function(x, y){};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @return {T}"," */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {?} x"," * @return {?}"," */","Child.prototype.method = function(x){ return x; };"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @return {T}"," */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {*} x"," * @return {?}"," */","Child.prototype.method = function(x){ return x; };"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @return {T}"," */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {*} x"," * @return {*}"," */","Child.prototype.method = function(x){ return x; };"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @return {T}"," */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {number} x"," * @return {number}"," */","Child.prototype.method = function(x){ return x; };"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {T} x"," * @return {T}"," */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {?} x"," * @return {*}"," */","Child.prototype.method = function(x){ return x; };"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template T"," * @param {function(T, T) : boolean} x"," */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @param {function(number, number) : boolean} x"," */","Child.prototype.method = function(x){ return x; };"),GlobalTypeInfo.INVALID_PROP_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," */","function f(x) {}","/** @param {function(number, number)} x */","function g(x) {}","g(f);"));
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," */","function f(x) {}","/** @param {function()} x */","function g(x) {}","g(f);"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */","function Parent() {}","/**"," * @template T"," * @param {T} x"," */","Parent.prototype.method = function(x) {};","/**"," * @constructor"," * @implements {Parent}"," */","function Child() {}","/**"," * @template U"," * @param {U} x"," */","Child.prototype.method = function(x) {};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/** @param {string} x */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @template T"," * @param {T} x"," */","Child.prototype.method = function(x){};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/** @param {*} x */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @template T"," * @param {T} x"," */","Child.prototype.method = function(x){};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/** @param {?} x */","Parent.prototype.method = function(x){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @template T"," * @param {T} x"," */","Child.prototype.method = function(x){};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @param {string} x"," * @param {number} y"," */","Parent.prototype.method = function(x, y){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @template T"," * @param {T} x"," * @param {T} y"," */","Child.prototype.method = function(x, y){};"));
  typeCheck(Joiner.on('\n').join("/** @interface */ function Parent() {}","/**"," * @template A, B"," * @param {A} x"," * @param {B} y"," * @return {A}"," */","Parent.prototype.method = function(x, y){};","/** @constructor @implements {Parent} */","function Child() {}","/**"," * @template A, B"," * @param {A} x"," * @param {B} y"," * @return {B}"," */","Child.prototype.method = function(x, y){ return y; };"));
}
