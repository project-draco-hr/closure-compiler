{
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor */ function Bar() {}","/** @param {(Foo|Bar)} x */ function reqFooBar(x) {}","function f(cond) {","  reqFooBar(cond ? new Foo : new Bar);","}"));
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor */ function Bar() {}","/** @param {Foo} x */ function reqFoo(x) {}","function f(cond) {","  reqFoo(cond ? new Foo : new Bar);","}"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor */ function Bar() {}","/** @param {(Foo|Bar)} x */ function g(x) {","  if (x instanceof Foo) {","    var /** Foo */ y = x;","  } else {","    var /** Bar */ z = x;","  }","  var /** Foo */ w = x;","}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() { /** @type {string} */ this.s = 'str'; }","/** @param {(!Foo|{n:number, s:string})} x */ function g(x) {","  if (x instanceof Foo) {","  } else {","    x.s - 5;","  }","}"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @type {number} */ Foo.prototype.n = 5;","/** @param {{n : number}} x */ function reqRecord(x) {}","function f() {","  reqRecord(new Foo);","}"));
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @type {number} */ Foo.prototype.n = 5;","/** @param {{n : string}} x */ function reqRecord(x) {}","function f() {","  reqRecord(new Foo);","}"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @param {{n : number}|!Foo} x */","function f(x) {","  x.n - 5;","}"),NewTypeInference.POSSIBLY_INEXISTENT_PROPERTY);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @param {{n : number}|!Foo} x */","function f(x) {","  x.abc - 5;","}"),NewTypeInference.INEXISTENT_PROPERTY);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor */ function Bar() {}","/** @param {!Bar|!Foo} x */","function f(x) {","  x.abc = 'str';","  if (x instanceof Foo) {","    x.abc - 5;","  }","}"),NewTypeInference.INVALID_OPERAND_TYPE);
}
