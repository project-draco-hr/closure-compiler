{
  typeCheck(LINE_JOINER.join("/** @param {number} n */","function f(n) { n < 5; }"));
  typeCheck(LINE_JOINER.join("/** @param {string} n */","function f(n) { n < 5; }"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(LINE_JOINER.join("/** @return {string} */","function f() { return 1; }"),NewTypeInference.RETURN_NONDECLARED_TYPE);
  typeCheck(LINE_JOINER.join("/** @return {string} */","function f() { return; }"),NewTypeInference.RETURN_NONDECLARED_TYPE);
  typeCheck(LINE_JOINER.join("/** @return {string} */","function f(s) { return s; }","f(123);","f('asdf')"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/** @return {number} */","function f() {}"),NewTypeInference.MISSING_RETURN_STATEMENT);
  typeCheck(LINE_JOINER.join("/** @return {(undefined|number)} */","function f() { if (true) { return 'str'; } }"),NewTypeInference.RETURN_NONDECLARED_TYPE);
  typeCheck(LINE_JOINER.join("/** @param {function(number)} fun */","function f(fun) {}","f(function (/** string */ s) {});"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @param {number} n */ function f(/** number */ n) {}",JSTypeCreatorFromJSDoc.TWO_JSDOCS);
  typeCheck("/** @constructor */ var Foo = function() {}; new Foo;");
  typeCheck(LINE_JOINER.join("/** @constructor */ function Foo() {}","/** @param {number} x */ Foo.prototype.method = function(x) {};","(new Foo).method('asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/** @constructor */ function Foo() {}","Foo.prototype.method = /** @param {number} x */ function(x) {};","(new Foo).method('asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(LINE_JOINER.join("/** @constructor */ function Foo() {}","Foo.prototype.method = function(/** number */ x) {};","(new Foo).method('asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @type {function(number)} */ function f(x) {}; f('asdf');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @type {number} */ function f() {}",JSTypeCreatorFromJSDoc.FUNCTION_WITH_NONFUNC_JSDOC);
  typeCheck(LINE_JOINER.join("/** @type {function():number} */","function /** number */ f() { return 1; }"));
  typeCheck(LINE_JOINER.join("function f(/** function(number) */ fnum, floose, cond) {","  var y;","  if (cond) {","    y = fnum;","  } else {","    floose();","    y = floose;","  }","  return y;","}"));
  typeCheck(LINE_JOINER.join("/** @param {function(): *} x */ function g(x) {}","/** @param {function(number): string} x */ function f(x) {","  g(x);","}"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("var x = {}; x.a = function(/** string */ x) {}; x.a(123);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @param {function(...)} x */ function f(x) {}");
  typeCheck(LINE_JOINER.join("/**"," * @interface"," */","function A() {};","/** @return {number} */","A.prototype.foo = function() {};"));
  typeCheck("/** @param {number} x */ function f(y) {}",GlobalTypeInfo.INEXISTENT_PARAM);
}
