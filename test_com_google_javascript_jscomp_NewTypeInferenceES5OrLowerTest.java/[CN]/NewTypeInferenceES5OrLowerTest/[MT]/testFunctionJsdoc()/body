{
  typeCheck("/** @param {number} n */\n" + "function f(n) { n < 5; }");
  typeCheck("/** @param {string} n */\n" + "function f(n) { n < 5; }",NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck("/** @return {string} */\n" + "function f() { return 1; }",NewTypeInference.RETURN_NONDECLARED_TYPE);
  typeCheck("/** @return {string} */\n" + "function f() { return; }",NewTypeInference.RETURN_NONDECLARED_TYPE);
  typeCheck("/** @return {string} */\n" + "function f(s) { return s; }" + "f(123);\n"+ "f('asdf')",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @return {number} */\n" + "function f() {}",CheckMissingReturn.MISSING_RETURN_STATEMENT);
  typeCheck("/** @return {(undefined|number)} */\n" + "function f() { if (true) { return 'str'; } }",NewTypeInference.RETURN_NONDECLARED_TYPE);
  typeCheck("/** @param {function(number)} fun */\n" + "function f(fun) {}\n" + "f(function (/** string */ s) {});",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @param {number} n */ function f(/** number */ n) {}",RhinoErrorReporter.BAD_JSDOC_ANNOTATION);
  typeCheck("/** @constructor */ var Foo = function() {}; new Foo;");
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @param {number} x */ Foo.prototype.method = function(x) {};\n" + "(new Foo).method('asdf');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @constructor */ function Foo() {}\n" + "Foo.prototype.method = /** @param {number} x */ function(x) {};\n" + "(new Foo).method('asdf');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @constructor */ function Foo() {}\n" + "Foo.prototype.method = function(/** number */ x) {};\n" + "(new Foo).method('asdf');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @type {function(number)} */ function f(x) {}; f('asdf');",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @type {number} */ function f() {}",RhinoErrorReporter.BAD_JSDOC_ANNOTATION);
  typeCheck("/** @type {function():number} */\n" + "function /** number */ f() { return 1; }",RhinoErrorReporter.BAD_JSDOC_ANNOTATION);
  typeCheck("function f(/** function(number) */ fnum, floose, cond) {\n" + "  var y;\n" + "  if (cond) {\n"+ "    y = fnum;\n"+ "  } else {\n"+ "    floose();\n"+ "    y = floose;\n"+ "  }\n"+ "  return y;\n"+ "}");
  typeCheck("/** @param {function(): *} x */ function g(x) {}\n" + "/** @param {function(number): string} x */ function f(x) {\n" + "  g(x);\n"+ "}",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("var x = {}; x.a = function(/** string */ x) {}; x.a(123);",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/** @param {function(...)} x */ function f(x) {}");
  typeCheck("/**\n" + " * @interface\n" + " */\n"+ "function A() {};\n"+ "/** @return {number} */\n"+ "A.prototype.foo = function() {};");
  typeCheck("/** @param {number} x */ function f(y) {}",GlobalTypeInfo.INEXISTENT_PARAM);
}
