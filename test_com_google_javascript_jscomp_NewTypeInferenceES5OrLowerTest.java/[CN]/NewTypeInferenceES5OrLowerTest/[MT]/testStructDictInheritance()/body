{
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */","function Foo() {}","/** @constructor @struct @extends {Foo} */","function Bar() {}"));
  typeCheck(Joiner.on('\n').join("/** @constructor @struct */","function Foo() {}","/** @constructor @unrestricted @extends {Foo} */","function Bar() {}"));
  typeCheck(Joiner.on('\n').join("/** @constructor @dict */","function Foo() {}","/** @constructor @dict @extends {Foo} */","function Bar() {}"));
  typeCheck(Joiner.on('\n').join("/** @constructor @unrestricted */","function Foo() {}","/** @constructor @struct @extends {Foo} */","function Bar() {}"),JSTypeCreatorFromJSDoc.CONFLICTING_SHAPE_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor @unrestricted */","function Foo() {}","/** @constructor @dict @extends {Foo} */","function Bar() {}"),JSTypeCreatorFromJSDoc.CONFLICTING_SHAPE_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {","  /** @type {string} */","  this.prop = 'asdf';","}","/**"," * @constructor"," * @extends {Foo}"," * @struct"," */","function Bar() {}","(new Bar).prop - 123;"),JSTypeCreatorFromJSDoc.CONFLICTING_SHAPE_TYPE,NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */","function Foo() {}","/** @constructor @dict @implements {Foo} */","function Bar() {}"),JSTypeCreatorFromJSDoc.DICT_IMPLEMENTS_INTERF);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/**"," * @constructor"," * @struct"," * @extends {Foo}"," * @suppress {newCheckTypesAllChecks}"," */","function Bar() {}","var /** !Foo */ x = new Bar;"));
}
