{
  typeCheck("/** @constructor */ function Foo() {}\n" + "/** @constructor @extends {Foo} */ function Bar() {}\n" + "/** @constructor @extends {Foo} */ function Baz() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {T|!Foo} x\n"+ " * @param {T} y\n"+ " * @return {T}\n"+ " */\n"+ "function f(x, y) { return y; }\n"+ "/** @param {!Bar|!Baz} x */\n"+ "function g(x) {\n"+ "  f(x, 123) - 123;\n"+ "}");
  typeCheck("/** @constructor */\n" + "function Parent() {}\n" + "/** @constructor @extends {Parent} */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {T|!Parent} x\n"+ " * @return {T}\n"+ " */\n"+ "function f(x) { return /** @type {?} */ (x); }\n"+ "function g(/** (number|!Child) */ x) {\n"+ "  f(x) - 5;\n"+ "}");
  typeCheck("/**\n" + " * @constructor\n" + " * @template T\n"+ " */\n"+ "function Parent() {}\n"+ "/**\n"+ " * @constructor\n"+ " * @extends {Parent<number>}\n"+ " */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {!Parent<T>} x\n"+ " */\n"+ "function f(x) {}\n"+ "/**\n"+ " * @param {!Child} x\n"+ " */\n"+ "function g(x) { f(x); }");
  typeCheck("/**\n" + " * @constructor\n" + " * @template T\n"+ " */\n"+ "function Parent() {}\n"+ "/**\n"+ " * @constructor\n"+ " * @template U\n"+ " * @extends {Parent<U>}\n"+ " */\n"+ "function Child() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {!Child<T>} x\n"+ " */\n"+ "function f(x) {}\n"+ "/**\n"+ " * @param {!Parent<number>} x\n"+ " */\n"+ "function g(x) { f(x); }",NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck("/**\n" + " * @template T\n" + " * @constructor\n"+ " */\n"+ "function High() {}\n"+ "/** @constructor @extends {High<number>} */\n"+ "function Low() {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {!High<T>} x\n"+ " * @return {T}\n"+ " */\n"+ "function f(x) { return /** @type {?} */ (null); }\n"+ "var /** string */ s = f(new Low);",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/**\n" + " * @constructor\n" + " * @template T\n"+ " */\n"+ "function High() {}\n"+ "/** @return {T} */\n"+ "High.prototype.get = function() { return /** @type {?} */ (null); };\n"+ "/**\n"+ " * @constructor\n"+ " * @template U\n"+ " * @extends {High<U>}\n"+ " */\n"+ "function Low() {}\n"+ "/**\n"+ " * @template V\n"+ " * @param {!High<V>} x\n"+ " * @return {V}\n"+ " */\n"+ "function f(x) { return x.get(); }\n"+ "/** @param {!Low<number>} x */\n"+ "function g(x) {\n"+ "  var /** number */ n = f(x);\n"+ "  var /** string */ s = f(x);\n"+ "}",NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck("/**\n" + " * @interface\n" + " * @template T\n"+ " */\n"+ "function High() {}\n"+ "/**\n"+ " * @constructor\n"+ " * @template T\n"+ " * @implements {High<T>}\n"+ " */\n"+ "function Mid() {}\n"+ "/**\n"+ " * @constructor\n"+ " * @template T\n"+ " * @extends {Mid<T>}\n"+ " * @param {T} x\n"+ " */\n"+ "function Low(x) {}\n"+ "/**\n"+ " * @template T\n"+ " * @param {!High<T>} x\n"+ " * @return {T}\n"+ " */\n"+ "function f(x) {\n"+ "  return /** @type {?} */ (null);\n"+ "}\n"+ "f(new Low('asdf')) - 5;",NewTypeInference.INVALID_OPERAND_TYPE);
}
