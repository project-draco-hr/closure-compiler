{
  typeCheck(Joiner.on('\n').join("/** @interface */","function Intf() {}","/** @param {(number|string)} x */","Intf.prototype.method = function(x) {};","/**"," * @constructor"," * @implements {Intf}"," */","function C() {}","/** @override */","C.prototype.method = function (x) { x - 1; };","(new C).method('asdf');"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @interface */","function Intf() {}","/** @param {(number|string)} x */","Intf.prototype.method = function(x) {};","/**"," * @constructor"," * @implements {Intf}"," */","function C() {}","/** @inheritDoc */","C.prototype.method = function (x) { x - 1; };","(new C).method('asdf');"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/** @override */","Foo.prototype.method = function() {};"),GlobalTypeInfo.UNKNOWN_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/** @inheritDoc */","Foo.prototype.method = function() {};"),GlobalTypeInfo.UNKNOWN_OVERRIDE);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function High() {}","/** @param {number=} x */","High.prototype.f = function(x) {};","/** @constructor @extends {High} */","function Low() {}","/** @override */","Low.prototype.f = function(x) {};","(new Low).f();","(new Low).f('asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function F() {}","/**"," * @param {string} x"," * @param {...*} var_args"," * @return {*}"," */","F.prototype.method;","/**"," * @constructor"," * @extends {F}"," */","function G() {}","/** @override */","G.prototype.method = function (x, opt_index) {};","(new G).method('asdf');"));
  typeCheck(Joiner.on('\n').join("/** @constructor */","function F() {}","/**"," * @param {string} x"," * @param {...number} var_args"," * @return {number}"," */","F.prototype.method;","/**"," * @constructor"," * @extends {F}"," */","function G() {}","/** @override */","G.prototype.method = function (x, opt_index) {};","(new G).method('asdf', 'asdf');"),NewTypeInference.INVALID_ARGUMENT_TYPE,NewTypeInference.MISSING_RETURN_STATEMENT);
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","Foo.prototype.m = function() {};","/** @constructor @extends {Foo}*/","function Bar() {}","/**"," * @param {number=} x"," * @override"," */","Bar.prototype.m = function(x) {};","(new Bar).m(123);"));
  typeCheck("(123).toString(16);");
  typeCheck(Joiner.on('\n').join("/** @constructor */","function Foo() {}","/** @constructor @extends {Foo}*/","function Bar() {}","/**"," * @param {number=} x"," * @override"," */","Bar.prototype.m = function(x) {};","(new Bar).m(123);"),GlobalTypeInfo.UNKNOWN_OVERRIDE);
}
