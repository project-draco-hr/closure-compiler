{
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) {}","/** @param {T} y */","Foo.prototype.bar = function(y) {}","new Foo('str').bar(5)"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) {}","/** @type {function(T)} y */","Foo.prototype.bar = function(y) {};","new Foo('str').bar(5)"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) { /** @type {T} */ this.x = x; }","/** @return {T} */","Foo.prototype.bar = function() { return this.x; };","new Foo('str').bar() - 5"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) { /** @type {T} */ this.x = x; }","/** @type {function() : T} */","Foo.prototype.bar = function() { return this.x; };","new Foo('str').bar() - 5"),NewTypeInference.INVALID_OPERAND_TYPE);
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) {}","/** @type {function(this:Foo<T>, T)} */","Foo.prototype.bar = function(x) { this.x = x; };","new Foo('str').bar(5)"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) {}","/** @param {!Foo<number>} x */","function f(x) {}","f(new Foo(7));"));
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) {}","/** @param {Foo<number>} x */","function f(x) {}","f(new Foo('str'));"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/**"," * @template T"," * @param {T} x"," * @constructor"," */","function Foo(x) {}","/** @param {T} x */","Foo.prototype.method = function(x) {};","/** @param {!Foo<number>} x */","function f(x) { x.method('asdf'); }"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/**"," * @constructor"," * @template T"," */","function Foo() {}","/** @param {T} x */","Foo.prototype.method = function(x) {};","var /** @type {Foo<string>} */ foo = null;","foo.method('asdf');"),NewTypeInference.PROPERTY_ACCESS_ON_NONOBJECT);
}
