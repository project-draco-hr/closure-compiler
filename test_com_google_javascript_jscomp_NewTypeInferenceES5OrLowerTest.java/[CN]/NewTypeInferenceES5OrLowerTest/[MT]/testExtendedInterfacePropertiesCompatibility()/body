{
  typeCheck(Joiner.on('\n').join("/** @interface */function Int0() {};","/** @interface */function Int1() {};","/** @type {number} */","Int0.prototype.foo;","/** @type {string} */","Int1.prototype.foo;","/** @interface \n @extends {Int0} \n @extends {Int1} */","function Int2() {};"),GlobalTypeInfo.SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES);
  typeCheck(Joiner.on('\n').join("/** @interface */","function Parent1() {}","/**"," * @template T"," * @param {T} x"," * @return {number}"," */","Parent1.prototype.method = function(x) {};","/** @interface */","function Parent2() {}","/**"," * @template T"," * @param {T} x"," * @return {string}"," */","Parent2.prototype.method = function(x) {};","/** @interface @extends {Parent1} @extends {Parent2} */","function Child() {}"),GlobalTypeInfo.SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo() {}","/** @constructor */ function Bar() {}","/** @interface */","function Parent1() {}","/** @type {!Foo} */","Parent1.prototype.obj;","/** @interface */","function Parent2() {}","/** @type {!Bar} */","Parent2.prototype.obj;","/** @interface @extends {Parent1} @extends {Parent2} */","function Child() {}"),GlobalTypeInfo.SUPER_INTERFACES_HAVE_INCOMPATIBLE_PROPERTIES);
}
