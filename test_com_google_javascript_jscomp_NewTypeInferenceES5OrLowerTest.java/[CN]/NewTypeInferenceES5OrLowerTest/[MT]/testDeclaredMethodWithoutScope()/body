{
  typeCheck(Joiner.on('\n').join("/** @interface */ function Foo(){}","/** @type {function(number)} */ Foo.prototype.bar;","/** @constructor @implements {Foo} */ function Bar(){}","Bar.prototype.bar = function(x){}"));
  typeCheck(Joiner.on('\n').join("/** @type {!Function} */","var g = function() { throw 0; };","/** @constructor */ function Foo(){}","/** @type {function(number)} */ Foo.prototype.bar = g;","/** @constructor @extends {Foo} */ function Bar(){}","Bar.prototype.bar = function(x){}"));
  typeCheck(Joiner.on('\n').join("/** @param {string} s */","var reqString = function(s) {};","/** @constructor */ function Foo(){}","/** @type {function(string)} */ Foo.prototype.bar = reqString;","/** @constructor @extends {Foo} */ function Bar(){}","Bar.prototype.bar = function(x){}"));
  typeCheck(Joiner.on('\n').join("/** @param {string} s */","var reqString = function(s) {};","/** @constructor */ function Foo(){}","/** @type {function(number)} */ Foo.prototype.bar = reqString;","/** @constructor @extends {Foo} */ function Bar(){}","Bar.prototype.bar = function(x){}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo(){}","/** @type {Function} */ Foo.prototype.bar = null;","/** @constructor @extends {Foo} */ function Bar(){}","Bar.prototype.bar = function(){}"));
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Foo(){}","/** @type {!Function} */ Foo.prototype.bar = null;","/** @constructor @extends {Foo} */ function Bar(){}","Bar.prototype.bar = function(){}"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */ function I(){}","/** @return {void} */","I.prototype.method;"));
}
