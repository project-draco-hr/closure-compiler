{
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Parent() {}","/** @constructor @extends{Parent} */ function Child() {}","(function(/** Parent */ x) {})(new Child);"));
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Parent() {}","/** @constructor @extends{Parent} */ function Child() {}","(function(/** Child */ x) {})(new Parent);"),NewTypeInference.INVALID_ARGUMENT_TYPE);
  typeCheck(Joiner.on('\n').join("/** @constructor */ function Parent() {}","/** @constructor @extends{Parent} */ function Child() {}","/** @constructor */","function Foo() { /** @type {Parent} */ this.x = new Child(); }","/** @type {Child} */ Foo.prototype.y = new Parent();"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */","function High() {}","/** @constructor @implements {High} */","function Low() {}","var /** !High */ x = new Low"));
  typeCheck(Joiner.on('\n').join("/** @interface */","function High() {}","/** @interface @extends {High}*/","function Low() {}","function f(/** !High */ h, /** !Low */ l) { h = l; }"));
  typeCheck(Joiner.on('\n').join("/** @interface */","function High() {}","/** @interface @extends {High}*/","function Low() {}","/** @constructor @implements {Low} */","function Foo() {}","var /** !High */ x = new Foo;"));
  typeCheck(Joiner.on('\n').join("/** @interface */","function Foo() {}","/** @interface */","function High() {}","/** @interface @extends {High} */","function Med() {}","/**"," * @interface"," * @extends {Med}"," * @extends {Foo}"," */","function Low() {}","function f(/** !High */ x, /** !Low */ y) { x = y }"));
  typeCheck(Joiner.on('\n').join("/**"," * @interface"," * @template T"," */","function Foo() {}","function f(/** !Foo<number> */ x, /** !Foo<string> */ y) { x = y; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/**"," * @interface"," * @template T"," */","function Foo() {}","/**"," * @constructor"," * @implements {Foo<number>}"," */","function Bar() {}","function f(/** !Foo<string> */ x, /** Bar */ y) { x = y; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/**"," * @interface"," * @template T"," */","function Foo() {}","/**"," * @constructor"," * @template T"," * @implements {Foo<T>}"," */","function Bar() {}","function f(/** !Foo<string> */ x, /** !Bar<number> */ y) { x = y; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/**"," * @interface"," * @template T"," */","function Foo() {}","/**"," * @constructor"," * @template T"," * @implements {Foo<T>}"," */","function Bar() {}","function f(/** !Foo<string> */ x, /** !Bar<string> */ y) {","  x = y;","}"));
  typeCheck(Joiner.on('\n').join("/**"," * @interface"," * @template T"," */","function Foo() {}","/**"," * @constructor"," * @template T"," * @implements {Foo<T>}"," */","function Bar() {}","/**"," * @template T"," * @param {!Foo<T>} x"," * @param {!Bar<number>} y"," */","function f(x, y) { x = y; }"),NewTypeInference.MISTYPED_ASSIGN_RHS);
  typeCheck(Joiner.on('\n').join("/** @interface */","function High() {}","/** @param {number} x */","High.prototype.method = function (x) {};","/** @constructor @implements {High} */","function Low() {}","Low.prototype.method = function (x) {","  var /** !Low */ y = this;","};"));
}
