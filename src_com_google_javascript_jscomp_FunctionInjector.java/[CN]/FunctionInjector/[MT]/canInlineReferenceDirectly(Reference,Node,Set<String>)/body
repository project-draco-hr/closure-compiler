{
  if (!isDirectCallNodeReplacementPossible(fnNode)) {
    return CanInlineResult.NO;
  }
  Node callNode=ref.callNode;
  Node cArg=callNode.getSecondChild();
  if (!callNode.getFirstChild().isName()) {
    if (NodeUtil.isFunctionObjectCall(callNode)) {
      if (cArg == null || !cArg.isThis()) {
        return CanInlineResult.NO;
      }
      cArg=cArg.getNext();
    }
 else {
      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
    }
  }
  Map<String,Node> args=FunctionArgumentInjector.getFunctionCallParameterMap(fnNode,callNode,this.throwawayNameSupplier);
  boolean hasArgs=!args.isEmpty();
  if (hasArgs) {
    Set<String> allNamesToAlias=new HashSet<>(namesToAlias);
    FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode,args,allNamesToAlias,compiler.getCodingConvention());
    if (!allNamesToAlias.isEmpty()) {
      return CanInlineResult.NO;
    }
  }
  return CanInlineResult.YES;
}
