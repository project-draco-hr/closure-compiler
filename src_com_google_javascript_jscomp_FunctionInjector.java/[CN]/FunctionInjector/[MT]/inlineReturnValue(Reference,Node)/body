{
  Node callNode=ref.callNode;
  Node block=fnNode.getLastChild();
  Node callParentNode=callNode.getParent();
  Map<String,Node> argMap=FunctionArgumentInjector.getFunctionCallParameterMap(fnNode,callNode,this.safeNameIdSupplier);
  Node newExpression;
  if (!block.hasChildren()) {
    Node srcLocation=block;
    newExpression=NodeUtil.newUndefinedNode(srcLocation);
  }
 else {
    Node returnNode=block.getFirstChild();
    Preconditions.checkArgument(returnNode.isReturn());
    Node safeReturnNode=returnNode.cloneTree();
    Node inlineResult=FunctionArgumentInjector.inject(null,safeReturnNode,null,argMap);
    Preconditions.checkArgument(safeReturnNode == inlineResult);
    newExpression=safeReturnNode.removeFirstChild();
  }
  callParentNode.replaceChild(callNode,newExpression);
  return newExpression;
}
