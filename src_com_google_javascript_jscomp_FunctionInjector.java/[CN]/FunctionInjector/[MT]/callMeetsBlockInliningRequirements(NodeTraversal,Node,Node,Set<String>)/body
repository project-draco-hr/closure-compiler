{
  boolean fnContainsVars=NodeUtil.has(NodeUtil.getFunctionBody(fnNode),new NodeUtil.MatchDeclaration(),new NodeUtil.MatchShallowStatement());
  boolean callerContainsFunction=false;
  if (!t.inGlobalScope()) {
    Node fnCaller=t.getScopeRoot();
    Node fnCallerBody=fnCaller.getLastChild();
    callerContainsFunction=NodeUtil.containsFunction(fnCallerBody);
  }
  if (fnContainsVars && callerContainsFunction) {
    return false;
  }
  if (callerContainsFunction) {
    Map<String,Node> args=FunctionArgumentInjector.getFunctionCallParameterMap(fnNode,callNode,this.safeNameIdSupplier);
    boolean hasArgs=!args.isEmpty();
    if (hasArgs) {
      Set<String> allNamesToAlias=Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode,args,allNamesToAlias,compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {
        return false;
      }
    }
  }
  return true;
}
