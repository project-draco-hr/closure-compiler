{
  final boolean assumeMinimumCapture=this.assumeMinimumCapture;
  boolean fnContainsVars=NodeUtil.has(NodeUtil.getFunctionBody(fnNode),new NodeUtil.MatchDeclaration(),new NodeUtil.MatchShallowStatement());
  boolean forbidTemps=false;
  if (!ref.scope.isGlobal()) {
    Node fnCaller=ref.scope.getRootNode();
    Node fnCallerBody=fnCaller.getLastChild();
    Predicate<Node> match=new Predicate<Node>(){
      @Override public boolean apply(      Node n){
        if (n.isName()) {
          return n.getString().equals("eval");
        }
        if (!assumeMinimumCapture && n.isFunction()) {
          return n != fnNode;
        }
        return false;
      }
    }
;
    forbidTemps=NodeUtil.has(fnCallerBody,match,NodeUtil.MATCH_NOT_FUNCTION);
  }
  if (fnContainsVars && forbidTemps) {
    return false;
  }
  if (forbidTemps) {
    Map<String,Node> args=FunctionArgumentInjector.getFunctionCallParameterMap(fnNode,ref.callNode,this.safeNameIdSupplier);
    boolean hasArgs=!args.isEmpty();
    if (hasArgs) {
      Set<String> allNamesToAlias=Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(fnNode,args,allNamesToAlias,compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {
        return false;
      }
    }
  }
  return true;
}
