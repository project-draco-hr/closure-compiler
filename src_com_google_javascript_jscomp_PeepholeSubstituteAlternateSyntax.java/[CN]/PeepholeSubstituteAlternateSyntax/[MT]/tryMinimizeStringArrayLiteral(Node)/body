{
  if (!late) {
    return n;
  }
  int numElements=n.getChildCount();
  int saving=numElements * 2 - STRING_SPLIT_OVERHEAD;
  if (saving <= 0) {
    return n;
  }
  String[] strings=new String[n.getChildCount()];
  int idx=0;
  for (Node cur=n.getFirstChild(); cur != null; cur=cur.getNext()) {
    strings[idx++]=cur.getString();
  }
  String delimiter=pickDelimiter(strings);
  if (delimiter != null) {
    String template=Joiner.on(delimiter).join(strings);
    Node call=IR.call(IR.getprop(IR.string(template),IR.string("split")),IR.string("" + delimiter));
    call.copyInformationFromForTree(n);
    n.getParent().replaceChild(n,call);
    reportCodeChange();
    return call;
  }
  return n;
}
