{
  if (!late) {
    return n;
  }
  Preconditions.checkArgument(NodeUtil.isAssociative(n.getType()));
  Node rhs=n.getLastChild();
  if (n.getType() == rhs.getType()) {
    Node first=n.getFirstChild().detachFromParent();
    Node second=rhs.getFirstChild().detachFromParent();
    Node third=rhs.getLastChild().detachFromParent();
    Node newLhs=new Node(n.getType(),first,second).copyInformationFrom(n);
    Node newRoot=new Node(rhs.getType(),newLhs,third).copyInformationFrom(rhs);
    n.getParent().replaceChild(n,newRoot);
    reportCodeChange();
    return newRoot;
  }
 else   if (NodeUtil.isCommutative(n.getType()) && !NodeUtil.mayHaveSideEffects(n)) {
    Node lhs=n.getFirstChild();
    while (lhs.getType() == n.getType()) {
      lhs=lhs.getFirstChild();
    }
    int precedence=NodeUtil.precedence(n.getType());
    int lhsPrecedence=NodeUtil.precedence(lhs.getType());
    int rhsPrecedence=NodeUtil.precedence(rhs.getType());
    if (rhsPrecedence == precedence && lhsPrecedence != precedence) {
      n.removeChild(rhs);
      lhs.getParent().replaceChild(lhs,rhs);
      n.addChildToBack(lhs);
      reportCodeChange();
      return n;
    }
  }
  return n;
}
