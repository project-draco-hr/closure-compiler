{
  Preconditions.checkArgument(n.isCall() || n.isNew());
  Node constructorNameNode=n.getFirstChild();
  Node newLiteralNode=null;
  if (isASTNormalized() && Token.NAME == constructorNameNode.getType()) {
    String className=constructorNameNode.getString();
    if ("RegExp".equals(className)) {
      return tryFoldRegularExpressionConstructor(n);
    }
 else {
      boolean constructorHasArgs=constructorNameNode.getNext() != null;
      if ("Object".equals(className) && !constructorHasArgs) {
        newLiteralNode=new Node(Token.OBJECTLIT);
      }
 else       if ("Array".equals(className)) {
        Node arg0=constructorNameNode.getNext();
        FoldArrayAction action=isSafeToFoldArrayConstructor(arg0);
        if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS || action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS) {
          newLiteralNode=new Node(Token.ARRAYLIT);
          n.removeChildren();
          if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS) {
            newLiteralNode.addChildrenToFront(arg0);
          }
        }
      }
      if (newLiteralNode != null) {
        n.getParent().replaceChild(n,newLiteralNode);
        reportCodeChange();
        return newLiteralNode;
      }
    }
  }
  return n;
}
