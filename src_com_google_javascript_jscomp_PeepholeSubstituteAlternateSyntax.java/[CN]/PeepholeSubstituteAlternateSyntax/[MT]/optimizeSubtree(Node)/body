{
switch (node.getType()) {
case Token.ASSIGN_SUB:
    return reduceSubstractionAssignment(node);
case Token.TRUE:
case Token.FALSE:
  return reduceTrueFalse(node);
case Token.NEW:
node=tryFoldStandardConstructors(node);
if (!node.isCall()) {
return node;
}
case Token.CALL:
Node result=tryFoldLiteralConstructor(node);
if (result == node) {
result=tryFoldSimpleFunctionCall(node);
if (result == node) {
result=tryFoldImmediateCallToBoundFunction(node);
}
}
return result;
case Token.RETURN:
return tryReduceReturn(node);
case Token.COMMA:
return trySplitComma(node);
case Token.NAME:
return tryReplaceUndefined(node);
case Token.ARRAYLIT:
return tryMinimizeArrayLiteral(node);
case Token.MUL:
case Token.AND:
case Token.OR:
case Token.BITOR:
case Token.BITXOR:
case Token.BITAND:
return tryRotateAssociativeOperator(node);
default :
return node;
}
}
