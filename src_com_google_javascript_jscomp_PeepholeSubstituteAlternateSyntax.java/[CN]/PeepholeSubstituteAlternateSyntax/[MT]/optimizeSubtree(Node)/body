{
switch (node.getToken()) {
case ASSIGN_SUB:
    return reduceSubstractionAssignment(node);
case TRUE:
case FALSE:
  return reduceTrueFalse(node);
case NEW:
node=tryFoldStandardConstructors(node);
if (!node.isCall()) {
return node;
}
case CALL:
Node result=tryFoldLiteralConstructor(node);
if (result == node) {
result=tryFoldSimpleFunctionCall(node);
if (result == node) {
result=tryFoldImmediateCallToBoundFunction(node);
}
}
return result;
case RETURN:
return tryReduceReturn(node);
case COMMA:
return trySplitComma(node);
case NAME:
return tryReplaceUndefined(node);
case ARRAYLIT:
return tryMinimizeArrayLiteral(node);
case GETPROP:
return tryMinimizeWindowRefs(node);
case MUL:
case AND:
case OR:
case BITOR:
case BITXOR:
case BITAND:
return tryRotateAssociativeOperator(node);
default :
return node;
}
}
