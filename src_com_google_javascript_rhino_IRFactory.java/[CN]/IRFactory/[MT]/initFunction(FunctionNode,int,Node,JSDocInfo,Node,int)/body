{
  fnNode.itsFunctionType=functionType;
  fnNode.addChildToBack(args);
  fnNode.addChildToBack(statements);
  if (parser.getSourceName() != null) {
    fnNode.putProp(Node.SOURCENAME_PROP,parser.getSourceName());
  }
  if (info != null) {
    fnNode.setJSDocInfo(info);
  }
  int functionCount=fnNode.getFunctionCount();
  if (functionCount != 0) {
    fnNode.itsNeedsActivation=true;
    for (int i=0; i != functionCount; ++i) {
      FunctionNode fn=fnNode.getFunctionNode(i);
      if (fn.getFunctionType() == FunctionNode.FUNCTION_EXPRESSION_STATEMENT) {
        String name=fn.getFunctionName();
        if (name != null && name.length() != 0) {
          fnNode.removeParamOrVar(name);
        }
      }
    }
  }
  fnNode.putIntProp(Node.FUNCTION_PROP,functionIndex);
  return fnNode;
}
