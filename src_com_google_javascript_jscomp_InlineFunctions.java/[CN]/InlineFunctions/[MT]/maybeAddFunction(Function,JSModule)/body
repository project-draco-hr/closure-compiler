{
  String name=fn.getName();
  FunctionState fs=getOrCreateFunctionState(name);
  if (fs.hasExistingFunctionDefinition()) {
    fs.setInline(false);
  }
 else {
    if (fs.canInline()) {
      fs.setFn(fn);
      if (FunctionInjector.isDirectCallNodeReplacementPossible(fn.getFunctionNode())) {
        fs.inlineDirectly(true);
      }
      if (!isCandidateFunction(fn)) {
        fs.setInline(false);
      }
      if (fs.canInline()) {
        fs.setModule(module);
        Node fnNode=fn.getFunctionNode();
        Set<String> namesToAlias=FunctionArgumentInjector.findModifiedParameters(fnNode);
        if (!namesToAlias.isEmpty()) {
          fs.inlineDirectly(false);
          fs.setNamesToAlias(namesToAlias);
        }
        Node block=NodeUtil.getFunctionBody(fnNode);
        if (NodeUtil.referencesThis(block)) {
          fs.setReferencesThis(true);
        }
        if (NodeUtil.containsFunction(block)) {
          fs.setHasInnerFunctions(true);
          if (!assumeMinimumCapture && hasLocalNames(fnNode)) {
            fs.setInline(false);
          }
        }
      }
      if (fs.canInline() && !fs.canInlineDirectly()) {
        if (!blockFunctionInliningEnabled) {
          fs.setInline(false);
        }
      }
    }
  }
}
