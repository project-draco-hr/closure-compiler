{
  out.append("# This is a list of legacy warnings that have yet to be fixed.\n");
  if (productName != null) {
    out.append("# Please find some time and fix at least one of them " + "and it will be the happiest day for " + productName + ".\n");
  }
  if (generatorTarget != null) {
    out.append("# When you fix any of these warnings, run " + generatorTarget + " task.\n");
  }
  if (headerNote != null) {
    out.append("# " + Joiner.on("\n# ").join(Splitter.on("\n").split(headerNote)) + "\n");
  }
  Multimap<DiagnosticType,String> warningsByType=TreeMultimap.create();
  for (  JSError warning : warnings) {
    warningsByType.put(warning.getType(),formatWarning(warning,true));
  }
  for (  DiagnosticType type : warningsByType.keySet()) {
    out.append("\n# Warning ").append(type.key).append(": ").println(Iterables.get(LINE_SPLITTER.split(type.format.toPattern()),0));
    for (    String warning : warningsByType.get(type)) {
      out.println(warning);
    }
  }
  out.flush();
}
