{
  Variable a=new Variable("a");
  Variable b=new Variable("b");
  Variable c=new Variable("c");
  Instruction inst1=new BranchInstruction(a);
  Instruction inst2=newAssignNumberToVariableInstruction(a,0);
  Instruction inst3=newAssignNumberToVariableInstruction(b,0);
  Instruction inst4=newAssignVariableToVariableInstruction(c,b);
  ControlFlowGraph<Instruction> cfg=new ControlFlowGraph<Instruction>(inst1);
  GraphNode<Instruction,Branch> n1=cfg.createNode(inst1);
  GraphNode<Instruction,Branch> n2=cfg.createNode(inst2);
  GraphNode<Instruction,Branch> n3=cfg.createNode(inst3);
  GraphNode<Instruction,Branch> n4=cfg.createNode(inst4);
  cfg.connect(inst1,ControlFlowGraph.Branch.ON_TRUE,inst2);
  cfg.connect(inst1,ControlFlowGraph.Branch.ON_FALSE,inst3);
  cfg.connect(inst2,ControlFlowGraph.Branch.UNCOND,inst4);
  cfg.connect(inst3,ControlFlowGraph.Branch.UNCOND,inst4);
  BranchedDummyConstPropagation constProp=new BranchedDummyConstPropagation(cfg);
  constProp.analyze();
  verifyBranchedInHas(n1,a,null);
  verifyBranchedInHas(n1,b,null);
  verifyBranchedInHas(n1,c,null);
  verifyBranchedInHas(n2,a,null);
  verifyBranchedInHas(n2,b,null);
  verifyBranchedInHas(n2,c,null);
  verifyBranchedInHas(n3,a,0);
  verifyBranchedInHas(n3,b,null);
  verifyBranchedInHas(n3,c,null);
  verifyBranchedInHas(n4,a,0);
}
