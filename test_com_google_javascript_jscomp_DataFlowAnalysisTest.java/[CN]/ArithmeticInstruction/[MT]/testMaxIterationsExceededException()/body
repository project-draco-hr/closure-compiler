{
  Variable a=new Variable("a");
  Instruction inst1=new ArithmeticInstruction(a,a,Operation.ADD,a);
  ControlFlowGraph<Instruction> cfg=new ControlFlowGraph<Instruction>(inst1,true,true){
    @Override public Comparator<DiGraphNode<Instruction,Branch>> getOptionalNodeComparator(    boolean isForward){
      return new Comparator<DiGraphNode<Instruction,Branch>>(){
        @Override public int compare(        DiGraphNode<Instruction,Branch> o1,        DiGraphNode<Instruction,Branch> o2){
          return o1.getValue().order - o2.getValue().order;
        }
      }
;
    }
  }
;
  cfg.createNode(inst1);
  for (int i=0; i < MAX_STEP + 1; i++) {
    Instruction inst2=new ArithmeticInstruction(a,a,Operation.ADD,a);
    cfg.createNode(inst2);
    inst2.order=i + 1;
    cfg.connect(inst1,ControlFlowGraph.Branch.UNCOND,inst2);
    inst1=inst2;
  }
  DummyConstPropagation constProp=new DummyConstPropagation(cfg);
  try {
    constProp.analyze(MAX_STEP);
    fail("Expected MaxIterationsExceededException to be thrown.");
  }
 catch (  MaxIterationsExceededException e) {
    assertEquals(e.getMessage(),"Analysis did not terminate after " + MAX_STEP + " iterations");
  }
}
