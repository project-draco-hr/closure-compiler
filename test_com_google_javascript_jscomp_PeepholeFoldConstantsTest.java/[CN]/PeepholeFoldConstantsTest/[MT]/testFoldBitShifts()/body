{
  fold("x = 1 << 0","x = 1");
  fold("x = -1 << 0","x = -1");
  fold("x = 1 << 1","x = 2");
  fold("x = 3 << 1","x = 6");
  fold("x = 1 << 8","x = 256");
  fold("x = 1 >> 0","x = 1");
  fold("x = -1 >> 0","x = -1");
  fold("x = 1 >> 1","x = 0");
  fold("x = 2 >> 1","x = 1");
  fold("x = 5 >> 1","x = 2");
  fold("x = 127 >> 3","x = 15");
  fold("x = 3 >> 1","x = 1");
  fold("x = 3 >> 2","x = 0");
  fold("x = 10 >> 1","x = 5");
  fold("x = 10 >> 2","x = 2");
  fold("x = 10 >> 5","x = 0");
  fold("x = 10 >>> 1","x = 5");
  fold("x = 10 >>> 2","x = 2");
  fold("x = 10 >>> 5","x = 0");
  fold("x = -1 >>> 1","x = 2147483647");
  fold("x = -1 >>> 0","x = 4294967295");
  fold("x = -2 >>> 0","x = 4294967294");
  fold("x = 0x90000000 >>> 28","x = 9");
  fold("x = 0xffffffff << 0","x = -1");
  fold("x = 0xffffffff << 4","x = -16");
  testSame("1 << 32",PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
  testSame("1 << -1",PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
  testSame("1 >> 32",PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
  testSame("1.5 << 0",PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
  testSame("1 << .5",PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
  testSame("1.5 >>> 0",PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
  testSame("1 >>> .5",PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
  testSame("1.5 >> 0",PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
  testSame("1 >> .5",PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
}
