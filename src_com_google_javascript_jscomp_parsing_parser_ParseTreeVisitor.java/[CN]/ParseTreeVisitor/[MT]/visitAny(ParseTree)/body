{
  if (tree == null) {
    return;
  }
switch (tree.type) {
case ARGUMENT_LIST:
    visit(tree.asArgumentList());
  break;
case ARRAY_LITERAL_EXPRESSION:
visit(tree.asArrayLiteralExpression());
break;
case ARRAY_PATTERN:
visit(tree.asArrayPattern());
break;
case AWAIT_STATEMENT:
visit(tree.asAsyncStatement());
break;
case BINARY_OPERATOR:
visit(tree.asBinaryOperator());
break;
case BLOCK:
visit(tree.asBlock());
break;
case BREAK_STATEMENT:
visit(tree.asBreakStatement());
break;
case CALL_EXPRESSION:
visit(tree.asCallExpression());
break;
case CASE_CLAUSE:
visit(tree.asCaseClause());
break;
case CATCH:
visit(tree.asCatch());
break;
case CLASS_DECLARATION:
visit(tree.asClassDeclaration());
break;
case CLASS_EXPRESSION:
visit(tree.asClassExpression());
break;
case COMMA_EXPRESSION:
visit(tree.asCommaExpression());
break;
case CONDITIONAL_EXPRESSION:
visit(tree.asConditionalExpression());
break;
case CONTINUE_STATEMENT:
visit(tree.asContinueStatement());
break;
case DEBUGGER_STATEMENT:
visit(tree.asDebuggerStatement());
break;
case DEFAULT_CLAUSE:
visit(tree.asDefaultClause());
break;
case DEFAULT_PARAMETER:
visit(tree.asDefaultParameter());
break;
case DO_WHILE_STATEMENT:
visit(tree.asDoWhileStatement());
break;
case EMPTY_STATEMENT:
visit(tree.asEmptyStatement());
break;
case EXPORT_DECLARATION:
visit(tree.asExportDeclaration());
break;
case EXPRESSION_STATEMENT:
visit(tree.asExpressionStatement());
break;
case FIELD_DECLARATION:
visit(tree.asFieldDeclaration());
break;
case FINALLY:
visit(tree.asFinally());
break;
case FOR_EACH_STATEMENT:
visit(tree.asForEachStatement());
break;
case FOR_IN_STATEMENT:
visit(tree.asForInStatement());
break;
case FOR_STATEMENT:
visit(tree.asForStatement());
break;
case FORMAL_PARAMETER_LIST:
visit(tree.asFormalParameterList());
break;
case FUNCTION_DECLARATION:
visit(tree.asFunctionDeclaration());
break;
case GET_ACCESSOR:
visit(tree.asGetAccessor());
break;
case IDENTIFIER_EXPRESSION:
visit(tree.asIdentifierExpression());
break;
case IF_STATEMENT:
visit(tree.asIfStatement());
break;
case IMPORT_DECLARATION:
visit(tree.asImportDeclaration());
break;
case IMPORT_PATH:
visit(tree.asImportPath());
break;
case IMPORT_SPECIFIER:
visit(tree.asImportSpecifier());
break;
case LABELLED_STATEMENT:
visit(tree.asLabelledStatement());
break;
case LITERAL_EXPRESSION:
visit(tree.asLiteralExpression());
break;
case MEMBER_EXPRESSION:
visit(tree.asMemberExpression());
break;
case MEMBER_LOOKUP_EXPRESSION:
visit(tree.asMemberLookupExpression());
break;
case MISSING_PRIMARY_EXPRESSION:
visit(tree.asMissingPrimaryExpression());
break;
case MIXIN:
visit(tree.asMixin());
break;
case MIXIN_RESOLVE:
visit(tree.asMixinResolve());
break;
case MIXIN_RESOLVE_LIST:
visit(tree.asMixinResolveList());
break;
case MODULE_DEFINITION:
visit(tree.asModuleDefinition());
break;
case NEW_EXPRESSION:
visit(tree.asNewExpression());
break;
case OBJECT_LITERAL_EXPRESSION:
visit(tree.asObjectLiteralExpression());
break;
case OBJECT_PATTERN:
visit(tree.asObjectPattern());
break;
case OBJECT_PATTERN_FIELD:
visit(tree.asObjectPatternField());
break;
case PAREN_EXPRESSION:
visit(tree.asParenExpression());
break;
case POSTFIX_EXPRESSION:
visit(tree.asPostfixExpression());
break;
case PROGRAM:
visit(tree.asProgram());
break;
case PROPERTY_NAME_ASSIGNMENT:
visit(tree.asPropertyNameAssignment());
break;
case REQUIRES_MEMBER:
visit(tree.asRequiresMember());
break;
case REST_PARAMETER:
visit(tree.asRestParameter());
break;
case RETURN_STATEMENT:
visit(tree.asReturnStatement());
break;
case SET_ACCESSOR:
visit(tree.asSetAccessor());
break;
case SPREAD_EXPRESSION:
visit(tree.asSpreadExpression());
break;
case SPREAD_PATTERN_ELEMENT:
visit(tree.asSpreadPatternElement());
break;
case SUPER_EXPRESSION:
visit(tree.asSuperExpression());
break;
case SWITCH_STATEMENT:
visit(tree.asSwitchStatement());
break;
case THIS_EXPRESSION:
visit(tree.asThisExpression());
break;
case THROW_STATEMENT:
visit(tree.asThrowStatement());
break;
case TRAIT_DECLARATION:
visit(tree.asTraitDeclaration());
break;
case TRY_STATEMENT:
visit(tree.asTryStatement());
break;
case UNARY_EXPRESSION:
visit(tree.asUnaryExpression());
break;
case VARIABLE_DECLARATION:
visit(tree.asVariableDeclaration());
break;
case VARIABLE_DECLARATION_LIST:
visit(tree.asVariableDeclarationList());
break;
case VARIABLE_STATEMENT:
visit(tree.asVariableStatement());
break;
case WHILE_STATEMENT:
visit(tree.asWhileStatement());
break;
case WITH_STATEMENT:
visit(tree.asWithStatement());
break;
case YIELD_STATEMENT:
visit(tree.asYieldStatement());
break;
case NULL:
visit(tree.asNull());
break;
default :
throw new RuntimeException("Unimplemented");
}
}
