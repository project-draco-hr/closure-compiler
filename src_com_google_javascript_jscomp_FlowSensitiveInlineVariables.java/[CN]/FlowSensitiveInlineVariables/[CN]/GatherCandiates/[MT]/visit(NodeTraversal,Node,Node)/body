{
  DiGraphNode<Node,Branch> graphNode=cfg.getDirectedGraphNode(n);
  if (graphNode == null) {
    return;
  }
  FlowState<MustDef> state=graphNode.getAnnotation();
  final MustDef defs=state.getIn();
  final Node cfgNode=n;
  AbstractCfgNodeTraversalCallback gatherCb=new AbstractCfgNodeTraversalCallback(){
    @Override public void visit(    NodeTraversal t,    Node n,    Node parent){
      if (n.isName()) {
        if (parent == null) {
          return;
        }
        if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.isVar() || parent.isInc()|| parent.isDec()|| parent.isParamList()|| parent.isCatch()) {
          return;
        }
        String name=n.getString();
        if (compiler.getCodingConvention().isExported(name)) {
          return;
        }
        Definition def=reachingDef.getDef(name,cfgNode);
        if (def != null && !reachingDef.dependsOnOuterScopeVars(def)) {
          candidates.add(new Candidate(name,def,n,cfgNode));
        }
      }
    }
  }
;
  NodeTraversal.traverse(compiler,cfgNode,gatherCb);
}
