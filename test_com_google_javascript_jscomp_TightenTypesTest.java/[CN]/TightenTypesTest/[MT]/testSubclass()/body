{
  testSame("/** @constructor */\n" + "function Foo() {}\n" + "Foo.prototype.foo = function() { return this.bar; };\n"+ "Foo.prototype.bar = function() { return new A(); };\n"+ "/**\n"+ " * @constructor\n"+ " * @extends Foo\n"+ " */\n"+ "function Bar() {}\n"+ "/** @override */\n"+ "Bar.prototype.bar = function() { return new B(); };\n"+ "/** @constructor */ function A() {}\n"+ "/** @constructor */ function B() {}\n"+ "var a = (new Foo()).foo()();\n"+ "a = (new Bar()).foo()();\n");
  ConcreteType fooType=getPropertyType(getFunctionPrototype(getType("Foo")),"foo");
  assertType("(Bar,Foo)",getThisType(fooType));
  assertType("(A,B)",getType("a"));
  testSame("/** @constructor */\n" + "function Foo() {}\n" + "Foo.prototype.foo = function() { return this.bar; };\n"+ "Foo.prototype.bar = function() { return new A(); };\n"+ "/**\n"+ " * @constructor\n"+ " * @extends Foo\n"+ " */\n"+ "function Bar() {}\n"+ "/** @override */\n"+ "Bar.prototype.bar = function() { return new B(); };\n"+ "/** @constructor */ function A() {}\n"+ "/** @constructor */ function B() {}\n"+ "var a = (new Bar()).foo()();\n");
  fooType=getPropertyType(getFunctionPrototype(getType("Foo")),"foo");
  assertType("Bar",getThisType(fooType));
  assertType("B",getType("a"));
}
