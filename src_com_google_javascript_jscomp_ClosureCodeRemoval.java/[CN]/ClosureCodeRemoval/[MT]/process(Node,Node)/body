{
  List<Callback> passes=new ArrayList<>();
  if (removeAbstractMethods) {
    passes.add(new FindAbstractMethods());
  }
  if (removeAssertionCalls) {
    passes.add(new FindAssertionCalls());
  }
  CombinedCompilerPass.traverse(compiler,root,passes);
  for (  RemovableAssignment assignment : abstractMethodAssignmentNodes) {
    assignment.remove();
  }
  for (  Node call : assertionCalls) {
    Node parent=call.getParent();
    if (parent.isExprResult()) {
      parent.getParent().removeChild(parent);
    }
 else {
      Node firstArg=call.getSecondChild();
      if (firstArg == null) {
        parent.replaceChild(call,NodeUtil.newUndefinedNode(call));
      }
 else {
        Node replacement=firstArg.detachFromParent();
        replacement.setJSType(call.getJSType());
        parent.replaceChild(call,replacement);
      }
    }
    compiler.reportCodeChange();
  }
}
