{
  generateNestedFunctions();
  generateRegExpLiterals();
  visitStatement(tree,0);
  fixLabelGotos();
  if (itsData.itsFunctionType == 0) {
    addToken(Token.RETURN_RESULT);
  }
  if (itsData.itsICode.length != iCodeTop) {
    byte[] tmp=new byte[iCodeTop];
    System.arraycopy(itsData.itsICode,0,tmp,0,iCodeTop);
    itsData.itsICode=tmp;
  }
  if (strings.size() == 0) {
    itsData.itsStringTable=null;
  }
 else {
    itsData.itsStringTable=new String[strings.size()];
    ObjToIntMap.Iterator iter=strings.newIterator();
    for (iter.start(); !iter.done(); iter.next()) {
      String str=(String)iter.getKey();
      int index=iter.getValue();
      if (itsData.itsStringTable[index] != null)       Kit.codeBug();
      itsData.itsStringTable[index]=str;
    }
  }
  if (doubleTableTop == 0) {
    itsData.itsDoubleTable=null;
  }
 else   if (itsData.itsDoubleTable.length != doubleTableTop) {
    double[] tmp=new double[doubleTableTop];
    System.arraycopy(itsData.itsDoubleTable,0,tmp,0,doubleTableTop);
    itsData.itsDoubleTable=tmp;
  }
  if (exceptionTableTop != 0 && itsData.itsExceptionTable.length != exceptionTableTop) {
    int[] tmp=new int[exceptionTableTop];
    System.arraycopy(itsData.itsExceptionTable,0,tmp,0,exceptionTableTop);
    itsData.itsExceptionTable=tmp;
  }
  itsData.itsMaxVars=scriptOrFn.getParamAndVarCount();
  itsData.itsMaxFrameArray=itsData.itsMaxVars + itsData.itsMaxLocals + itsData.itsMaxStack;
  itsData.argNames=scriptOrFn.getParamAndVarNames();
  itsData.argIsConst=scriptOrFn.getParamAndVarConst();
  itsData.argCount=scriptOrFn.getParamCount();
  itsData.encodedSourceStart=scriptOrFn.getEncodedSourceStart();
  itsData.encodedSourceEnd=scriptOrFn.getEncodedSourceEnd();
  if (literalIds.size() != 0) {
    itsData.literalIds=literalIds.toArray();
  }
  if (Token.printICode)   Interpreter.dumpICode(itsData);
}
