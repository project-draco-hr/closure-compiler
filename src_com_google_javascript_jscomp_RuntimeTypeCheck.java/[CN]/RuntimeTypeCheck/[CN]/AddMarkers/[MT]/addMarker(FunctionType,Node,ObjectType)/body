{
  if (funType.getSource() == null) {
    return nodeToInsertAfter;
  }
  String className=NodeUtil.getFunctionName(funType.getSource());
  if (className == null) {
    return nodeToInsertAfter;
  }
  Node classNode=NodeUtil.newQName(compiler,className);
  Node marker=IR.string(interfaceType == null ? "instance_of__" + className : "implements__" + interfaceType.getReferenceName());
  Node assign=IR.exprResult(IR.assign(IR.getelem(IR.getprop(classNode,IR.string("prototype")),marker),IR.trueNode()));
  nodeToInsertAfter.getParent().addChildAfter(assign,nodeToInsertAfter);
  compiler.reportCodeChange();
  nodeToInsertAfter=assign;
  return nodeToInsertAfter;
}
