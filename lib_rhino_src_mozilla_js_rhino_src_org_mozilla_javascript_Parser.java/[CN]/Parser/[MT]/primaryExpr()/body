{
  int ttFlagged=nextFlaggedToken();
  int tt=ttFlagged & CLEAR_TI_MASK;
switch (tt) {
case Token.FUNCTION:
    return function(FunctionNode.FUNCTION_EXPRESSION);
case Token.LB:
  return arrayLiteral();
case Token.LC:
return objectLiteral();
case Token.LET:
return let(false,ts.tokenBeg);
case Token.LP:
return parenExpr();
case Token.XMLATTR:
mustHaveXML();
return attributeAccess();
case Token.NAME:
return name(ttFlagged,tt);
case Token.NUMBER:
{
String s=ts.getString();
if (this.inUseStrictDirective && ts.isNumberOctal()) {
reportError("msg.no.octal.strict");
}
return new NumberLiteral(ts.tokenBeg,s,ts.getNumber());
}
case Token.STRING:
return createStringLiteral();
case Token.DIV:
case Token.ASSIGN_DIV:
ts.readRegExp(tt);
int pos=ts.tokenBeg, end=ts.tokenEnd;
RegExpLiteral re=new RegExpLiteral(pos,end - pos);
re.setValue(ts.getString());
re.setFlags(ts.readAndClearRegExpFlags());
return re;
case Token.NULL:
case Token.THIS:
case Token.FALSE:
case Token.TRUE:
pos=ts.tokenBeg;
end=ts.tokenEnd;
return new KeywordLiteral(pos,end - pos,tt);
case Token.RESERVED:
reportError("msg.reserved.id");
break;
case Token.ERROR:
break;
case Token.EOF:
reportError("msg.unexpected.eof");
break;
default :
reportError("msg.syntax");
break;
}
return makeErrorNode();
}
