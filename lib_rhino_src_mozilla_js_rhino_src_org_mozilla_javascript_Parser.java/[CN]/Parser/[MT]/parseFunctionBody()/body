{
  if (!matchToken(Token.LC)) {
    if (compilerEnv.getLanguageVersion() < Context.VERSION_1_8) {
      reportError("msg.no.brace.body");
    }
    return parseFunctionBodyExpr();
  }
  ++nestingOfFunction;
  int pos=ts.tokenBeg;
  Block pn=new Block(pos);
  boolean inDirectivePrologue=true;
  boolean savedStrictMode=inUseStrictDirective;
  pn.setLineno(ts.lineno);
  try {
    bodyLoop:     for (; ; ) {
      AstNode n;
      int tt=peekToken();
switch (tt) {
case Token.ERROR:
case Token.EOF:
case Token.RC:
        break bodyLoop;
case Token.FUNCTION:
      consumeToken();
    n=function(FunctionNode.FUNCTION_STATEMENT);
  break;
default :
n=statement();
if (inDirectivePrologue) {
String directive=getDirective(n);
if (directive == null) {
  inDirectivePrologue=false;
}
 else if (directive.equals("use strict")) {
  inUseStrictDirective=true;
}
}
break;
}
pn.addStatement(n);
}
}
 catch (ParserException e) {
}
 finally {
--nestingOfFunction;
inUseStrictDirective=savedStrictMode;
}
int end=ts.tokenEnd;
getAndResetJsDoc();
if (mustMatchToken(Token.RC,"msg.no.brace.after.body")) end=ts.tokenEnd;
pn.setLength(end - pos);
return pn;
}
