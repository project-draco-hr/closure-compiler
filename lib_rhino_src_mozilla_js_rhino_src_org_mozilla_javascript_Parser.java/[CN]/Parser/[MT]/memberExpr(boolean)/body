{
  int tt=peekToken(), lineno=ts.lineno;
  AstNode pn;
  if (tt != Token.NEW) {
    pn=primaryExpr();
  }
 else {
    consumeToken();
    int pos=ts.tokenBeg;
    NewExpression nx=new NewExpression(pos);
    AstNode target=memberExpr(false);
    int end=getNodeEnd(target);
    nx.setTarget(target);
    int lp=-1;
    if (matchToken(Token.LP)) {
      lp=ts.tokenBeg;
      List<AstNode> args=argumentList();
      if (args != null && args.size() > ARGC_LIMIT)       reportError("msg.too.many.constructor.args");
      int rp=ts.tokenBeg;
      end=ts.tokenEnd;
      if (args != null)       nx.setArguments(args);
      nx.setParens(lp - pos,rp - pos);
    }
    if (matchToken(Token.LC)) {
      ObjectLiteral initializer=objectLiteral();
      end=getNodeEnd(initializer);
      nx.setInitializer(initializer);
    }
    nx.setLength(end - pos);
    pn=nx;
  }
  pn.setLineno(lineno);
  AstNode tail=memberExprTail(allowCallSyntax,pn);
  return tail;
}
