{
  if (currentToken != Token.FOR)   codeBug();
  consumeToken();
  int forPos=ts.tokenBeg, lineno=ts.lineno;
  boolean isForEach=false, isForIn=false;
  int eachPos=-1, inPos=-1, lp=-1, rp=-1;
  AstNode init=null;
  AstNode cond=null;
  AstNode incr=null;
  Loop pn=null;
  Scope tempScope=new Scope();
  pushScope(tempScope);
  try {
    if (matchToken(Token.NAME)) {
      if ("each".equals(ts.getString())) {
        isForEach=true;
        eachPos=ts.tokenBeg - forPos;
      }
 else {
        reportError("msg.no.paren.for");
      }
    }
    if (mustMatchToken(Token.LP,"msg.no.paren.for"))     lp=ts.tokenBeg - forPos;
    int tt=peekToken();
    init=forLoopInit(tt);
    if (matchToken(Token.IN)) {
      isForIn=true;
      inPos=ts.tokenBeg - forPos;
      cond=expr();
    }
 else {
      mustMatchToken(Token.SEMI,"msg.no.semi.for");
      if (peekToken() == Token.SEMI) {
        cond=new EmptyExpression(ts.tokenBeg,1);
        cond.setLineno(ts.lineno);
      }
 else {
        cond=expr();
      }
      mustMatchToken(Token.SEMI,"msg.no.semi.for.cond");
      int tmpPos=ts.tokenEnd;
      if (peekToken() == Token.RP) {
        incr=new EmptyExpression(tmpPos,1);
        incr.setLineno(ts.lineno);
      }
 else {
        incr=expr();
      }
    }
    if (mustMatchToken(Token.RP,"msg.no.paren.for.ctrl"))     rp=ts.tokenBeg - forPos;
    if (isForIn) {
      ForInLoop fis=new ForInLoop(forPos);
      if (init instanceof VariableDeclaration) {
        if (((VariableDeclaration)init).getVariables().size() > 1) {
          reportError("msg.mult.index");
        }
      }
      fis.setIterator(init);
      fis.setIteratedObject(cond);
      fis.setInPosition(inPos);
      fis.setIsForEach(isForEach);
      fis.setEachPosition(eachPos);
      pn=fis;
    }
 else {
      ForLoop fl=new ForLoop(forPos);
      fl.setInitializer(init);
      fl.setCondition(cond);
      fl.setIncrement(incr);
      pn=fl;
    }
    currentScope.replaceWith(pn);
    popScope();
    enterLoop(pn);
    try {
      AstNode body=statement();
      pn.setLength(getNodeEnd(body) - forPos);
      pn.setBody(body);
    }
  finally {
      exitLoop();
    }
  }
  finally {
    if (currentScope == tempScope) {
      popScope();
    }
  }
  pn.setParens(lp,rp);
  pn.setLineno(lineno);
  return pn;
}
