{
  if (indexReg >= 0) {
    if (frame.frozen) {
      frame=frame.cloneFrozen();
    }
    int[] table=frame.idata.itsExceptionTable;
    frame.pc=table[indexReg + EXCEPTION_HANDLER_SLOT];
    if (instructionCounting) {
      frame.pcPrevBranch=frame.pc;
    }
    frame.savedStackTop=frame.emptyStackTop;
    int scopeLocal=frame.localShift + table[indexReg + EXCEPTION_SCOPE_SLOT];
    int exLocal=frame.localShift + table[indexReg + EXCEPTION_LOCAL_SLOT];
    frame.scope=(Scriptable)frame.stack[scopeLocal];
    frame.stack[exLocal]=throwable;
    throwable=null;
  }
 else {
    ContinuationJump cjump=(ContinuationJump)throwable;
    throwable=null;
    if (cjump.branchFrame != frame)     Kit.codeBug();
    if (cjump.capturedFrame == null)     Kit.codeBug();
    int rewindCount=cjump.capturedFrame.frameIndex + 1;
    if (cjump.branchFrame != null) {
      rewindCount-=cjump.branchFrame.frameIndex;
    }
    int enterCount=0;
    CallFrame[] enterFrames=null;
    CallFrame x=cjump.capturedFrame;
    for (int i=0; i != rewindCount; ++i) {
      if (!x.frozen)       Kit.codeBug();
      if (isFrameEnterExitRequired(x)) {
        if (enterFrames == null) {
          enterFrames=new CallFrame[rewindCount - i];
        }
        enterFrames[enterCount]=x;
        ++enterCount;
      }
      x=x.parentFrame;
    }
    while (enterCount != 0) {
      --enterCount;
      x=enterFrames[enterCount];
      enterFrame(cx,x,ScriptRuntime.emptyArgs,true);
    }
    frame=cjump.capturedFrame.cloneFrozen();
    setCallResult(frame,cjump.result,cjump.resultDbl);
  }
  frame.throwable=throwable;
  return frame;
}
