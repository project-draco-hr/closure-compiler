{
switch (n.getType()) {
case Token.GETPROP:
case Token.GETELEM:
    Node dest=n.getFirstChild().getNext();
  if (dest.getType() == Token.STRING) {
    if (dest.getString().equals("prototype")) {
      processPrototypeParent(t,parent);
    }
 else {
      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) {
        addPossibleSignature(dest.getString(),n.getNext(),t);
      }
    }
  }
break;
case Token.OBJECTLIT:
for (Node key=n.getFirstChild(); key != null; key=key.getNext()) {
switch (key.getType()) {
case Token.STRING:
  addPossibleSignature(key.getString(),key.getFirstChild(),t);
break;
case Token.SET:
case Token.GET:
nonMethodProperties.add(key.getString());
break;
default :
throw new IllegalStateException("unexpect OBJECTLIT key: " + key);
}
}
break;
}
}
