{
switch (n.getType()) {
case Token.CALL:
    String providedClassName=codingConvention.extractClassNameIfProvide(n,parent);
  if (providedClassName != null) {
    provides.put(providedClassName,n);
  }
if (!containsRequires && codingConvention.extractClassNameIfRequire(n,parent) != null) {
  containsRequires=true;
}
break;
case Token.FUNCTION:
if (!n.isArrowFunction()) {
visitFunctionNode(n,parent);
}
break;
case Token.CLASS:
visitClassNode(n);
break;
case Token.SCRIPT:
visitScriptNode();
}
}
