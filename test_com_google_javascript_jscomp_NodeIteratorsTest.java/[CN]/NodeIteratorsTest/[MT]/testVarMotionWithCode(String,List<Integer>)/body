{
  List<Node> ancestors=new ArrayList<>();
  Node root=(new Compiler()).parseTestCode(";" + code);
  for (Node n=root; n != null; n=n.getFirstChild()) {
    ancestors.add(0,n);
  }
  FunctionlessLocalScope searchIt=new FunctionlessLocalScope(ancestors.toArray(new Node[ancestors.size()]));
  boolean found=false;
  while (searchIt.hasNext()) {
    Node n=searchIt.next();
    if (n.isName() && searchIt.currentParent().isVar() && n.getString().equals("X")) {
      found=true;
      break;
    }
  }
  assertTrue("Variable X not found! " + root.toStringTree(),found);
  List<Node> currentAncestors=searchIt.currentAncestors();
  assert(currentAncestors.size() >= 3);
  Iterator<Node> moveIt=LocalVarMotion.forVar(currentAncestors.get(0),currentAncestors.get(1),currentAncestors.get(2));
  List<Integer> actualTokens=new ArrayList<>();
  while (moveIt.hasNext()) {
    actualTokens.add(moveIt.next().getType());
  }
  assertEquals(expectedTokens,actualTokens);
}
