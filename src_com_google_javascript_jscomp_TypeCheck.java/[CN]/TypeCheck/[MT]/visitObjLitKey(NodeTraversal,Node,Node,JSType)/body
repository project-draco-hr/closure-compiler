{
  if (objlit.isFromExterns()) {
    ensureTyped(t,key);
    return;
  }
  if (litType.isStruct() && key.isQuotedString()) {
    report(t,key,ILLEGAL_OBJLIT_KEY,"struct");
  }
 else   if (litType.isDict() && !key.isQuotedString()) {
    report(t,key,ILLEGAL_OBJLIT_KEY,"dict");
  }
  Node rvalue=key.getFirstChild();
  JSType rightType=getObjectLitKeyTypeFromValueType(key,getJSType(rvalue));
  if (rightType == null) {
    rightType=getNativeType(UNKNOWN_TYPE);
  }
  Node owner=objlit;
  JSType keyType=getJSType(key);
  JSType allowedValueType=keyType;
  if (allowedValueType.isEnumElementType()) {
    allowedValueType=allowedValueType.toMaybeEnumElementType().getPrimitiveType();
  }
  boolean valid=validator.expectCanAssignToPropertyOf(t,key,rightType,allowedValueType,owner,NodeUtil.getObjectLitKeyName(key));
  if (valid) {
    ensureTyped(t,key,rightType);
  }
 else {
    ensureTyped(t,key);
  }
  JSType objlitType=getJSType(objlit);
  ObjectType type=ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
  if (type != null) {
    String property=NodeUtil.getObjectLitKeyName(key);
    checkPropertyInheritanceOnPrototypeLitKey(t,key,property,type);
    if (type.hasProperty(property) && !type.isPropertyTypeInferred(property) && !propertyIsImplicitCast(type,property)) {
      validator.expectCanAssignToPropertyOf(t,key,keyType,type.getPropertyType(property),owner,property);
    }
    return;
  }
}
