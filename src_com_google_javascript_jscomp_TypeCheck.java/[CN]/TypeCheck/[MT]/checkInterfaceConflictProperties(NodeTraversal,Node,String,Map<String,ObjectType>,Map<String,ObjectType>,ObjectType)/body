{
  ObjectType implicitProto=interfaceType.getImplicitPrototype();
  Set<String> currentPropertyNames;
  if (implicitProto == null) {
    currentPropertyNames=ImmutableSet.of();
  }
 else {
    currentPropertyNames=implicitProto.getOwnPropertyNames();
  }
  for (  String name : currentPropertyNames) {
    ObjectType oType=properties.get(name);
    currentProperties.put(name,interfaceType);
    if (oType != null) {
      JSType thisPropType=interfaceType.getPropertyType(name);
      JSType oPropType=oType.getPropertyType(name);
      if (thisPropType.isEquivalentTo(oPropType) || thisPropType.isFunctionType() && oPropType.isFunctionType() && thisPropType.toMaybeFunctionType().hasEqualCallType(oPropType.toMaybeFunctionType())) {
        continue;
      }
      compiler.report(t.makeError(n,INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,functionName,name,oType.toString(),interfaceType.toString()));
    }
  }
  for (  ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
    checkInterfaceConflictProperties(t,n,functionName,properties,currentProperties,iType);
  }
}
