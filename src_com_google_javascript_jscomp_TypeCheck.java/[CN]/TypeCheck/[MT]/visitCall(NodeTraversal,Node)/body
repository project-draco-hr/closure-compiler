{
  Node child=n.getFirstChild();
  JSType childType=getJSType(child).restrictByNotNullOrUndefined();
  if (!childType.canBeCalled()) {
    report(t,n,NOT_CALLABLE,childType.toString());
    ensureTyped(t,n);
    return;
  }
  if (childType.isFunctionType()) {
    FunctionType functionType=childType.toMaybeFunctionType();
    boolean isExtern=false;
    JSDocInfo functionJSDocInfo=functionType.getJSDocInfo();
    if (functionJSDocInfo != null && functionJSDocInfo.getAssociatedNode() != null) {
      isExtern=functionJSDocInfo.getAssociatedNode().isFromExterns();
    }
    if (functionType.isConstructor() && !functionType.isNativeObjectType() && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType())) {
      report(t,n,CONSTRUCTOR_NOT_CALLABLE,childType.toString());
    }
    if (functionType.isOrdinaryFunction() && !functionType.getTypeOfThis().isUnknownType() && !(functionType.getTypeOfThis().toObjectType() != null && functionType.getTypeOfThis().toObjectType().isNativeObjectType())&& !(child.isGetElem() || child.isGetProp())) {
      report(t,n,EXPECTED_THIS_TYPE,functionType.toString());
    }
    visitParameterList(t,n,functionType);
    ensureTyped(t,n,functionType.getReturnType());
  }
 else {
    ensureTyped(t,n);
  }
}
