{
  if (lvalue.isGetProp()) {
    Node obj=lvalue.getFirstChild();
    Node prop=lvalue.getLastChild();
    JSType objType=getJSType(obj);
    String pname=prop.getString();
    if (!objType.isStruct() || objType.hasProperty(pname)) {
      return;
    }
    Scope s=t.getScope();
    if (obj.isThis() && getJSType(s.getRootNode()).isConstructor()) {
      return;
    }
    Node assgnStm=lvalue.getParent().getParent();
    if (objType instanceof ObjectType && s.isGlobal() && NodeUtil.isPrototypePropertyDeclaration(assgnStm)) {
      ObjectType instance=objType.toObjectType().getOwnerFunction().getInstanceType();
      String file=lvalue.getSourceFileName();
      Node ctor=instance.getConstructor().getSource();
      if (ctor != null && ctor.getSourceFileName().equals(file)) {
        return;
      }
    }
    report(t,prop,ILLEGAL_PROPERTY_CREATION);
  }
}
