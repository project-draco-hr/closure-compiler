{
  JSDocInfo info=assign.getJSDocInfo();
  Node lvalue=assign.getFirstChild();
  Node rvalue=assign.getLastChild();
  if (lvalue.isGetProp()) {
    Node object=lvalue.getFirstChild();
    JSType objectJsType=getJSType(object);
    String property=lvalue.getLastChild().getString();
    if (object.isGetProp()) {
      JSType jsType=getJSType(object.getFirstChild());
      if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
        visitInterfaceGetprop(t,assign,object,property,lvalue,rvalue);
      }
    }
    checkEnumAlias(t,info,rvalue);
    if (property.equals("prototype")) {
      if (objectJsType != null && objectJsType.isFunctionType()) {
        FunctionType functionType=objectJsType.toMaybeFunctionType();
        if (functionType.isConstructor()) {
          JSType rvalueType=rvalue.getJSType();
          validator.expectObject(t,rvalue,rvalueType,OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
          return;
        }
      }
    }
    if (object.isGetProp()) {
      Node object2=object.getFirstChild();
      String property2=NodeUtil.getStringValue(object.getLastChild());
      if ("prototype".equals(property2)) {
        JSType jsType=getJSType(object2);
        if (jsType.isFunctionType()) {
          FunctionType functionType=jsType.toMaybeFunctionType();
          if (functionType.isConstructor() || functionType.isInterface()) {
            checkDeclaredPropertyInheritance(t,assign,functionType,property,info,getJSType(rvalue));
          }
        }
      }
    }
    ObjectType type=ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
    if (type != null) {
      if (type.hasProperty(property) && !type.isPropertyTypeInferred(property) && !propertyIsImplicitCast(type,property)) {
        validator.expectCanAssignToPropertyOf(t,assign,getJSType(rvalue),type.getPropertyType(property),object,property);
        return;
      }
    }
  }
  JSType leftType=getJSType(lvalue);
  if (lvalue.isQualifiedName()) {
    JSType rvalueType=getJSType(assign.getLastChild());
    Var var=t.getScope().getVar(lvalue.getQualifiedName());
    if (var != null) {
      if (var.isTypeInferred()) {
        return;
      }
      if (var.getType() != null) {
        leftType=var.getType();
      }
    }
  }
  Node rightChild=assign.getLastChild();
  JSType rightType=getJSType(rightChild);
  if (validator.expectCanAssignTo(t,assign,rightType,leftType,"assignment")) {
    ensureTyped(t,assign,rightType);
  }
 else {
    ensureTyped(t,assign);
  }
}
