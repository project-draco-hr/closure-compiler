{
  JSDocInfo info=assign.getJSDocInfo();
  Node lvalue=assign.getFirstChild();
  Node rvalue=assign.getLastChild();
  if (lvalue.isGetProp()) {
    Node object=lvalue.getFirstChild();
    JSType objectJsType=getJSType(object);
    Node property=lvalue.getLastChild();
    String pname=property.getString();
    if (object.isGetProp()) {
      JSType jsType=getJSType(object.getFirstChild());
      if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
        visitInterfaceGetprop(t,assign,object,pname,lvalue,rvalue);
      }
    }
    checkEnumAlias(t,info,rvalue);
    checkPropCreation(t,lvalue);
    if (pname.equals("prototype")) {
      if (objectJsType != null && objectJsType.isFunctionType()) {
        FunctionType functionType=objectJsType.toMaybeFunctionType();
        if (functionType.isConstructor()) {
          JSType rvalueType=rvalue.getJSType();
          validator.expectObject(t,rvalue,rvalueType,OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
          if (functionType.makesStructs() && !rvalueType.isStruct()) {
            String funName=functionType.getTypeOfThis().toString();
            compiler.report(t.makeError(assign,CONFLICTING_SHAPE_TYPE,"struct",funName));
          }
          return;
        }
      }
    }
    ObjectType type=ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
    if (type != null) {
      if (type.hasProperty(pname) && !type.isPropertyTypeInferred(pname)) {
        JSType expectedType=type.getPropertyType(pname);
        if (!expectedType.isUnknownType()) {
          if (!propertyIsImplicitCast(type,pname)) {
            validator.expectCanAssignToPropertyOf(t,assign,getJSType(rvalue),expectedType,object,pname);
            checkPropertyInheritanceOnGetpropAssign(t,assign,object,pname,info,expectedType);
          }
          return;
        }
      }
    }
    checkPropertyInheritanceOnGetpropAssign(t,assign,object,pname,info,getNativeType(UNKNOWN_TYPE));
  }
  JSType leftType=getJSType(lvalue);
  if (lvalue.isQualifiedName()) {
    TypedVar var=t.getTypedScope().getVar(lvalue.getQualifiedName());
    if (var != null) {
      if (var.isTypeInferred()) {
        return;
      }
      if (NodeUtil.getRootOfQualifiedName(lvalue).isThis() && t.getTypedScope() != var.getScope()) {
        return;
      }
      if (var.getType() != null) {
        leftType=var.getType();
      }
    }
  }
  Node rightChild=assign.getLastChild();
  JSType rightType=getJSType(rightChild);
  if (validator.expectCanAssignTo(t,assign,rightType,leftType,"assignment")) {
    ensureTyped(t,assign,rightType);
  }
 else {
    ensureTyped(t,assign);
  }
}
