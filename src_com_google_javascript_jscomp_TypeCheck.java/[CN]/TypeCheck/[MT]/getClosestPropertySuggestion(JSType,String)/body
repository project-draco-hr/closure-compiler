{
  if (editDistance == null) {
    return null;
  }
  String bestSoFar=null;
  int shortest=Integer.MAX_VALUE;
  if (objectType instanceof ObjectType) {
    ObjectType type=(ObjectType)objectType;
    for (    String alt : type.getPropertyNames()) {
      int distance;
      try {
        distance=(Integer)editDistance.invoke(null,propName,alt,false);
      }
 catch (      Exception e) {
        return null;
      }
      if (distance <= shortest) {
        if (distance == shortest) {
          if (bestSoFar != null && alt.compareToIgnoreCase(bestSoFar) > 0) {
            continue;
          }
        }
        shortest=distance;
        bestSoFar=alt;
      }
    }
  }
 else   if (objectType.isUnionType()) {
    UnionType type=(UnionType)objectType;
    for (    JSType alt : type.getAlternates()) {
      SuggestionPair pair=getClosestPropertySuggestion(alt,propName);
      if (pair != null) {
        if (pair.distance <= shortest) {
          if (pair.distance == shortest) {
            if (bestSoFar != null && pair.suggestion.compareToIgnoreCase(bestSoFar) > 0) {
              continue;
            }
          }
          shortest=pair.distance;
          bestSoFar=pair.suggestion;
        }
      }
    }
  }
  if (bestSoFar != null) {
    return new SuggestionPair(bestSoFar,shortest);
  }
  return null;
}
