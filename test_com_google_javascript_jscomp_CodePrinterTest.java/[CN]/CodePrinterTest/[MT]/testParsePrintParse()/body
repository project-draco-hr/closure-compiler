{
  testReparse("3;");
  testReparse("var a = b;");
  testReparse("var x, y, z;");
  testReparse("try { foo() } catch(e) { bar() }");
  testReparse("try { foo() } catch(e) { bar() } finally { stuff() }");
  testReparse("try { foo() } finally { stuff() }");
  testReparse("throw 'me'");
  testReparse("function foo(a) { return a + 4; }");
  testReparse("function foo() { return; }");
  testReparse("var a = function(a, b) { foo(); return a + b; }");
  testReparse("b = [3, 4, 'paul', 'Buchhe it',,5];");
  testReparse("v = (5, 6, 7, 8)");
  testReparse("d = 34.0; x = 0; y = .3; z = -22");
  testReparse("d = -x; t = !x + ~y;");
  testReparse("'hi'; /* just a test */ stuff(a,b) \n" + " foo(); // and another \n" + " bar();");
  testReparse("a = b++ + ++c; a = b++-++c; a = - --b; a = - ++b;");
  testReparse("a++; b= a++; b = ++a; b = a--; b = --a; a+=2; b-=5");
  testReparse("a = (2 + 3) * 4;");
  testReparse("a = 1 + (2 + 3) + 4;");
  testReparse("x = a ? b : c; x = a ? (b,3,5) : (foo(),bar());");
  testReparse("a = b | c || d ^ e " + "&& f & !g != h << i <= j < k >>> l > m * n % !o");
  testReparse("a == b; a != b; a === b; a == b == a;" + " (a == b) == a; a == (b == a);");
  testReparse("if (a > b) a = b; if (b < 3) a = 3; else c = 4;");
  testReparse("if (a == b) { a++; } if (a == 0) { a++; } else { a --; }");
  testReparse("for (var i in a) b += i;");
  testReparse("for (var i = 0; i < 10; i++){ b /= 2;" + " if (b == 2)break;else continue;}");
  testReparse("for (x = 0; x < 10; x++) a /= 2;");
  testReparse("for (;;) a++;");
  testReparse("while(true) { blah(); }while(true) blah();");
  testReparse("do stuff(); while(a>b);");
  testReparse("[0, null, , true, false, this];");
  testReparse("s.replace(/absc/, 'X').replace(/ab/gi, 'Y');");
  testReparse("new Foo; new Bar(a, b,c);");
  testReparse("with(foo()) { x = z; y = t; } with(bar()) a = z;");
  testReparse("delete foo['bar']; delete foo;");
  testReparse("var x = { 'a':'paul', 1:'3', 2:(3,4) };");
  testReparse("switch(a) { case 2: case 3: stuff(); break;" + "case 4: morestuff(); break; default: done();}");
  testReparse("x = foo['bar'] + foo['my stuff'] + foo[bar] + f.stuff;");
  testReparse("a.v = b.v; x['foo'] = y['zoo'];");
  testReparse("'test' in x; 3 in x; a in x;");
  testReparse("'foo\"bar' + \"foo'c\" + 'stuff\\n and \\\\more'");
  testReparse("x.__proto__;");
}
