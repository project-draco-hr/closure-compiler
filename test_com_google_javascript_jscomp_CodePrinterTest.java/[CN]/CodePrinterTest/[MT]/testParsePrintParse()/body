{
  List<String> parsePrintParseTestCases=ImmutableList.of("3;","var a = b;","var x, y, z;","try { foo() } catch(e) { bar() }","try { foo() } catch(e) { bar() } finally { stuff() }","try { foo() } finally { stuff() }","throw 'me'","function foo(a) { return a + 4; }","function foo() { return; }","var a = function(a, b) { foo(); return a + b; }","b = [3, 4, 'paul', \"Buchhe it\",,5];","v = (5, 6, 7, 8)","d = 34.0; x = 0; y = .3; z = -22","d = -x; t = !x + ~y;","'hi'; /* just a test */ stuff(a,b) \n foo(); // and another \n bar();","a = b++ + ++c; a = b++-++c; a = - --b; a = - ++b;","a++; b= a++; b = ++a; b = a--; b = --a; a+=2; b-=5","a = (2 + 3) * 4;","a = 1 + (2 + 3) + 4;","x = a ? b : c; x = a ? (b,3,5) : (foo(),bar());","a = b | c || d ^ e && f & !g != h << i <= j < k >>> l > m * n % !o","a == b; a != b; a === b; a == b == a; (a == b) == a; a == (b == a);","if (a > b) a = b; if (b < 3) a = 3; else c = 4;","if (a == b) { a++; } if (a == 0) { a++; } else { a --; }","for (var i in a) b += i;","for (var i = 0; i < 10; i++){ b /= 2; if (b == 2)break;else continue;}","for (x = 0; x < 10; x++) a /= 2;","for (;;) a++;","while(true) { blah(); }while(true) blah();","do stuff(); while(a>b);","[0, null, , true, false, this];","s.replace(/absc/, 'X').replace(/ab/gi, 'Y');","new Foo; new Bar(a, b,c);","with(foo()) { x = z; y = t; } with(bar()) a = z;","delete foo['bar']; delete foo;","var x = { 'a':'paul', 1:'3', 2:(3,4) };","switch(a) { case 2: case 3: { stuff(); break; }" + "case 4: morestuff(); break; default: done();}","x = foo['bar'] + foo['my stuff'] + foo[bar] + f.stuff;","a.v = b.v; x['foo'] = y['zoo'];","'test' in x; 3 in x; a in x;","'foo\"bar' + \"foo'c\" + 'stuff\\n and \\\\more'","x.__proto__;");
  for (  String testCase : parsePrintParseTestCases) {
    Node parse1=parse(testCase);
    Node parse2=parse(new CodePrinter.Builder(parse1).build());
    assertTrue(testCase,parse1.checkTreeEqualsSilent(parse2));
  }
}
