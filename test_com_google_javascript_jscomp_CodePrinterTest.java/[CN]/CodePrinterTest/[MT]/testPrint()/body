{
  assertPrint("10 + a + b","10+a+b");
  assertPrint("10 + (30*50)","10+30*50");
  assertPrint("with(x) { x + 3; }","with(x)x+3");
  assertPrint("\"aa'a\"","\"aa'a\"");
  assertPrint("\"aa\\\"a\"","'aa\"a'");
  assertPrint("function foo()\n{return 10;}","function foo(){return 10}");
  assertPrint("a instanceof b","a instanceof b");
  assertPrint("typeof(a)","typeof a");
  assertPrint("var foo = x ? { a : 1 } : {a: 3, b:4, \"default\": 5, \"foo-bar\": 6}","var foo=x?{a:1}:{a:3,b:4,\"default\":5,\"foo-bar\":6}");
  assertPrint("function foo(){throw 'error';}","function foo(){throw\"error\";}");
  assertPrint("if (true) function foo(){return}","if(true){function foo(){return}}");
  assertPrint("var x = 10; { var y = 20; }","var x=10;var y=20");
  assertPrint("while (x-- > 0);","while(x-- >0);");
  assertPrint("x-- >> 1","x-- >>1");
  assertPrint("(function () {})(); ","(function(){})()");
  assertPrint("var a,b,c,d;a || (b&& c) && (a || d)","var a,b,c,d;a||b&&c&&(a||d)");
  assertPrint("var a,b,c; a || (b || c); a * (b * c); a | (b | c)","var a,b,c;a||b||c;a*b*c;a|b|c");
  assertPrint("var a,b,c; a / b / c;a / (b / c); a - (b - c);","var a,b,c;a/b/c;a/(b/c);a-(b-c)");
  assertPrint("var a,b; a = b = 3;","var a,b;a=b=3");
  assertPrint("var a,b,c,d; a = (b = c = (d = 3));","var a,b,c,d;a=b=c=d=3");
  assertPrint("var a,b,c; a += (b = c += 3);","var a,b,c;a+=b=c+=3");
  assertPrint("var a,b,c; a *= (b -= c);","var a,b,c;a*=b-=c");
  assertPrint("'<script>'","\"<script>\"");
  assertPrint("'</script>'","\"<\\/script>\"");
  assertPrint("\"</script> </SCRIPT>\"","\"<\\/script> <\\/SCRIPT>\"");
  assertPrint("'-->'","\"--\\>\"");
  assertPrint("']]>'","\"]]\\>\"");
  assertPrint("' --></script>'","\" --\\><\\/script>\"");
  assertPrint("/--> <\\/script>/g","/--\\> <\\/script>/g");
  assertPrint("a ? delete b[0] : 3","a?delete b[0]:3");
  assertPrint("(delete a[0])/10","delete a[0]/10");
  assertPrint("new A","new A");
  assertPrint("new A()","new A");
  assertPrint("new A('x')","new A(\"x\")");
  assertPrint("new A().a()","(new A).a()");
  assertPrint("(new A).a()","(new A).a()");
  assertPrint("new A('y').a()","(new A(\"y\")).a()");
  assertPrint("new A.B","new A.B");
  assertPrint("new A.B()","new A.B");
  assertPrint("new A.B('z')","new A.B(\"z\")");
  assertPrint("(new A.B).a()","(new A.B).a()");
  assertPrint("new A.B().a()","(new A.B).a()");
  assertPrint("new A.B('w').a()","(new A.B(\"w\")).a()");
  assertPrint("x + +y","x+ +y");
  assertPrint("x - (-y)","x- -y");
  assertPrint("x++ +y","x++ +y");
  assertPrint("x-- -y","x-- -y");
  assertPrint("x++ -y","x++-y");
  assertPrint("foo:for(;;){break foo;}","foo:for(;;)break foo");
  assertPrint("foo:while(1){continue foo;}","foo:while(1)continue foo");
  assertPrint("({})","({})");
  assertPrint("var x = {};","var x={}");
  assertPrint("({}).x","({}).x");
  assertPrint("({})['x']","({})[\"x\"]");
  assertPrint("({}) instanceof Object","({})instanceof Object");
  assertPrint("({}) || 1","({})||1");
  assertPrint("1 || ({})","1||{}");
  assertPrint("({}) ? 1 : 2","({})?1:2");
  assertPrint("0 ? ({}) : 2","0?{}:2");
  assertPrint("0 ? 1 : ({})","0?1:{}");
  assertPrint("typeof ({})","typeof{}");
  assertPrint("f({})","f({})");
  assertPrint("(function(){})","(function(){})");
  assertPrint("(function(){})()","(function(){})()");
  assertPrint("(function(){})instanceof Object","(function(){})instanceof Object");
  assertPrint("(function(){}).bind().call()","(function(){}).bind().call()");
  assertPrint("var x = function() { };","var x=function(){}");
  assertPrint("var x = function() { }();","var x=function(){}()");
  assertPrint("(function() {}), 2","(function(){}),2");
  assertPrint("(function f(){})","(function f(){})");
  assertPrint("function f(){}","function f(){}");
  assertPrint("({ 'a': 4, '\\u0100': 4 })","({a:4,\"\\u0100\":4})");
  assertPrint("if (true) var x; x = 4;","if(true)var x;x=4");
  assertPrint("\\u00fb","\\u00fb");
  assertPrint("\\u00fa=1","\\u00fa=1");
  assertPrint("function \\u00f9(){}","function \\u00f9(){}");
  assertPrint("x.\\u00f8","x.\\u00f8");
  assertPrint("x.\\u00f8","x.\\u00f8");
  assertPrint("abc\\u4e00\\u4e01jkl","abc\\u4e00\\u4e01jkl");
  assertPrint("! ! true","!!true");
  assertPrint("!(!(true))","!!true");
  assertPrint("typeof(void(0))","typeof void 0");
  assertPrint("typeof(void(!0))","typeof void!0");
  assertPrint("+ - + + - + 3","+-+ +-+3");
  assertPrint("+(--x)","+--x");
  assertPrint("-(++x)","-++x");
  assertPrint("-(--x)","- --x");
  assertPrint("!(~~5)","!~~5");
  assertPrint("~(a/b)","~(a/b)");
  assertPrint("new (foo.bar()).factory(baz)","new (foo.bar().factory)(baz)");
  assertPrint("new (bar()).factory(baz)","new (bar().factory)(baz)");
  assertPrint("new (new foobar(x)).factory(baz)","new (new foobar(x)).factory(baz)");
  assertPrint("a ? b : (c ? d : e)","a?b:c?d:e");
  assertPrint("a ? (b ? c : d) : e","a?b?c:d:e");
  assertPrint("(a ? b : c) ? d : e","(a?b:c)?d:e");
  assertPrint("if (x) if (y); else;","if(x)if(y);else;");
  assertPrint("a,b,c","a,b,c");
  assertPrint("(a,b),c","a,b,c");
  assertPrint("a,(b,c)","a,b,c");
  assertPrint("x=a,b,c","x=a,b,c");
  assertPrint("x=(a,b),c","x=(a,b),c");
  assertPrint("x=a,(b,c)","x=a,b,c");
  assertPrint("x=a,y=b,z=c","x=a,y=b,z=c");
  assertPrint("x=(a,y=b,z=c)","x=(a,y=b,z=c)");
  assertPrint("x=[a,b,c,d]","x=[a,b,c,d]");
  assertPrint("x=[(a,b,c),d]","x=[(a,b,c),d]");
  assertPrint("x=[(a,(b,c)),d]","x=[(a,b,c),d]");
  assertPrint("x=[a,(b,c,d)]","x=[a,(b,c,d)]");
  assertPrint("var x=(a,b)","var x=(a,b)");
  assertPrint("var x=a,b,c","var x=a,b,c");
  assertPrint("var x=(a,b),c","var x=(a,b),c");
  assertPrint("var x=a,b=(c,d)","var x=a,b=(c,d)");
  assertPrint("foo(a,b,c,d)","foo(a,b,c,d)");
  assertPrint("foo((a,b,c),d)","foo((a,b,c),d)");
  assertPrint("foo((a,(b,c)),d)","foo((a,b,c),d)");
  assertPrint("f(a+b,(c,d,(e,f,g)))","f(a+b,(c,d,e,f,g))");
  assertPrint("({}) , 1 , 2","({}),1,2");
  assertPrint("({}) , {} , {}","({}),{},{}");
  assertPrint("if (x){}","if(x);");
  assertPrint("if(x);","if(x);");
  assertPrint("if(x)if(y);","if(x)if(y);");
  assertPrint("if(x){if(y);}","if(x)if(y);");
  assertPrint("if(x){if(y){};;;}","if(x)if(y);");
  assertPrint("if(x){;;function y(){};;}","if(x){function y(){}}");
}
