{
  if (matchingExitNode(n,exitType,labelName)) {
    compiler.reportChangeToEnclosingScope(n);
    NodeUtil.removeChild(n.getParent(),n);
    return;
  }
  if (n.isIf()) {
    Node ifBlock=n.getSecondChild();
    tryMinimizeExits(ifBlock,exitType,labelName);
    Node elseBlock=ifBlock.getNext();
    if (elseBlock != null) {
      tryMinimizeExits(elseBlock,exitType,labelName);
    }
    return;
  }
  if (n.isTry()) {
    Node tryBlock=n.getFirstChild();
    tryMinimizeExits(tryBlock,exitType,labelName);
    Node allCatchNodes=NodeUtil.getCatchBlock(n);
    if (NodeUtil.hasCatchHandler(allCatchNodes)) {
      Preconditions.checkState(allCatchNodes.hasOneChild());
      Node catchNode=allCatchNodes.getFirstChild();
      Node catchCodeBlock=catchNode.getLastChild();
      tryMinimizeExits(catchCodeBlock,exitType,labelName);
    }
  }
  if (n.isLabel()) {
    Node labelBlock=n.getLastChild();
    tryMinimizeExits(labelBlock,exitType,labelName);
  }
  if (n.isSwitch() && (exitType != Token.BREAK || labelName != null)) {
    tryMinimizeSwitchExits(n,exitType,labelName);
    return;
  }
  if (!n.isBlock() || !n.hasChildren()) {
    return;
  }
  for (Node c=n.getFirstChild(); c != null; c=c.getNext()) {
    if (c.isIf()) {
      Node ifTree=c;
      Node trueBlock, falseBlock;
      trueBlock=ifTree.getSecondChild();
      falseBlock=trueBlock.getNext();
      tryMinimizeIfBlockExits(trueBlock,falseBlock,ifTree,exitType,labelName);
      trueBlock=ifTree.getSecondChild();
      falseBlock=trueBlock.getNext();
      if (falseBlock != null) {
        tryMinimizeIfBlockExits(falseBlock,trueBlock,ifTree,exitType,labelName);
      }
    }
    if (c == n.getLastChild()) {
      break;
    }
  }
  for (Node c=n.getLastChild(); c != null; c=n.getLastChild()) {
    tryMinimizeExits(c,exitType,labelName);
    if (c == n.getLastChild()) {
      break;
    }
  }
}
