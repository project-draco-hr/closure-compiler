{
switch (n.getToken()) {
case LABEL:
    tryMinimizeExits(n.getLastChild(),Token.BREAK,n.getFirstChild().getString());
  break;
case FOR:
case WHILE:
tryMinimizeExits(NodeUtil.getLoopCodeBlock(n),Token.CONTINUE,null);
break;
case DO:
tryMinimizeExits(NodeUtil.getLoopCodeBlock(n),Token.CONTINUE,null);
Node cond=NodeUtil.getConditionExpression(n);
if (NodeUtil.getPureBooleanValue(cond) == TernaryValue.FALSE) {
tryMinimizeExits(n.getFirstChild(),Token.BREAK,null);
}
break;
case BLOCK:
if (n.getParent() != null && n.getParent().isFunction()) {
tryMinimizeExits(n,Token.RETURN,null);
}
break;
case SWITCH:
tryMinimizeSwitchExits(n,Token.BREAK,null);
break;
default :
break;
}
return n;
}
