{
  Map<String,Object> ht=isStatic ? staticMembers : members;
  Object member=ht.get(name);
  if (!isStatic && member == null) {
    member=staticMembers.get(name);
  }
  if (member == null) {
    member=this.getExplicitFunction(scope,name,javaObject,isStatic);
    if (member == null)     return Scriptable.NOT_FOUND;
  }
  if (member instanceof Scriptable) {
    return member;
  }
  Context cx=Context.getContext();
  Object rval;
  Class<?> type;
  try {
    if (member instanceof BeanProperty) {
      BeanProperty bp=(BeanProperty)member;
      if (bp.getter == null)       return Scriptable.NOT_FOUND;
      rval=bp.getter.invoke(javaObject,Context.emptyArgs);
      type=bp.getter.method().getReturnType();
    }
 else {
      Field field=(Field)member;
      rval=field.get(isStatic ? null : javaObject);
      type=field.getType();
    }
  }
 catch (  Exception ex) {
    throw Context.throwAsScriptRuntimeEx(ex);
  }
  scope=ScriptableObject.getTopLevelScope(scope);
  return cx.getWrapFactory().wrap(cx,scope,rval,type);
}
