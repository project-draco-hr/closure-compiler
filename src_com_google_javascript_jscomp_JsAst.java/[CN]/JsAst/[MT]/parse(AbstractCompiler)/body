{
  ErrorManager errorManager=compiler.getErrorManager();
  int startErrorCount=errorManager.getErrorCount();
  RecordingReporterProxy reporter=new RecordingReporterProxy(compiler.getDefaultErrorReporter());
  try {
    ParserRunner.ParseResult result=ParserRunner.parse(sourceFile,sourceFile.getCode(),compiler.getParserConfig(sourceFile.isExtern() ? AbstractCompiler.ConfigContext.EXTERNS : AbstractCompiler.ConfigContext.DEFAULT),reporter);
    root=result.ast;
    features=result.features;
    if (compiler.getOptions().preservesDetailedSourceInfo()) {
      compiler.addComments(sourceFile.getName(),result.comments);
    }
    if (result.sourceMap != null) {
      String sourceMapName=sourceFile.getName() + ".inline.map";
      SourceMapInput sourceMapInput=new SourceMapInput(SourceFile.fromCode(sourceMapName,result.sourceMap));
      compiler.addInputSourceMap(sourceFile.getName(),sourceMapInput);
    }
  }
 catch (  IOException e) {
    compiler.report(JSError.make(AbstractCompiler.READ_ERROR,sourceFile.getName()));
  }
  if (root == null || (errorManager.getErrorCount() > startErrorCount && !compiler.getOptions().canContinueAfterErrors())) {
    root=IR.script();
  }
 else {
    compiler.prepareAst(root);
  }
  if (reporter.errors.size() > 0 || reporter.warnings.size() > 0) {
    ParseResult result=new ParseResult(ImmutableList.copyOf(reporter.errors),ImmutableList.copyOf(reporter.warnings));
    root.putProp(Node.PARSE_RESULTS,result);
  }
  root.setStaticSourceFile(sourceFile);
}
