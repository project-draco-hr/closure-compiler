{
  this.compiler=compiler;
  this.generatePseudoNames=generatePseudoNames;
  this.xidHashFunction=xidHashFunction;
  nameGenerators=new LinkedHashMap<>();
  idGeneratorMaps=new LinkedHashMap<>();
  consistNameMap=new LinkedHashMap<>();
  Map<String,BiMap<String,String>> previousMap;
  previousMap=IdMappingUtil.parseSerializedIdMappings(previousMapSerialized);
  this.previousMap=previousMap;
  if (idGens != null) {
    for (    Entry<String,RenamingMap> gen : idGens.entrySet()) {
      String name=gen.getKey();
      RenamingMap map=gen.getValue();
      if (map instanceof UniqueRenamingToken) {
        nameGenerators.put(name,createNameSupplier(RenameStrategy.INCONSISTENT,previousMap.get(name)));
      }
 else {
        nameGenerators.put(name,createNameSupplier(RenameStrategy.MAPPED,map));
      }
      idGeneratorMaps.put(name,new LinkedHashMap<String,String>());
    }
  }
}
