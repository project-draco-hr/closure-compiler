{
  if (!n.isCall()) {
    return;
  }
  String callName=n.getFirstChild().getQualifiedName();
  NameSupplier nameGenerator=nameGenerators.get(callName);
  if (nameGenerator == null) {
    return;
  }
  if (!t.inGlobalScope() && nameGenerator.getRenameStrategy() == RenameStrategy.INCONSISTENT) {
    compiler.report(t.makeError(n,NON_GLOBAL_ID_GENERATOR_CALL));
    return;
  }
  if (nameGenerator.getRenameStrategy() == RenameStrategy.INCONSISTENT) {
    for (    Node ancestor : n.getAncestors()) {
      if (NodeUtil.isControlStructure(ancestor)) {
        compiler.report(t.makeError(n,CONDITIONAL_ID_GENERATOR_CALL));
        return;
      }
    }
  }
  Node arg=n.getFirstChild().getNext();
  if (arg.isString()) {
    String rename=getObfuscatedName(arg,callName,nameGenerator,arg.getString());
    parent.replaceChild(n,IR.string(rename));
    compiler.reportCodeChange();
  }
 else   if (arg.isObjectLit()) {
    for (    Node key : arg.children()) {
      String rename=getObfuscatedName(key,callName,nameGenerator,key.getString());
      key.setString(rename);
      key.putBooleanProp(Node.QUOTED_PROP,true);
    }
    arg.detachFromParent();
    parent.replaceChild(n,arg);
    compiler.reportCodeChange();
  }
}
