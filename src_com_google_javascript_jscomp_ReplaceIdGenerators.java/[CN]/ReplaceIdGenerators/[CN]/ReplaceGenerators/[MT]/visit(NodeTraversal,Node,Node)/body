{
  if (!n.isCall()) {
    return;
  }
  String callName=n.getFirstChild().getQualifiedName();
  NameSupplier nameGenerator=nameGenerators.get(callName);
  if (nameGenerator == null) {
    return;
  }
  if (!t.inGlobalScope() && nameGenerator.getRenameStrategy() == RenameStrategy.INCONSISTENT) {
    compiler.report(t.makeError(n,NON_GLOBAL_ID_GENERATOR_CALL));
    return;
  }
  if (nameGenerator.getRenameStrategy() == RenameStrategy.INCONSISTENT) {
    for (    Node ancestor : n.getAncestors()) {
      if (NodeUtil.isControlStructure(ancestor)) {
        compiler.report(t.makeError(n,CONDITIONAL_ID_GENERATOR_CALL));
        return;
      }
    }
  }
  Node id=n.getFirstChild().getNext();
  if (!id.isString()) {
    return;
  }
  Map<String,String> idGeneratorMap=idGeneratorMaps.get(callName);
  String rename=null;
  String name=id.getString();
  String instanceId=getIdForGeneratorNode(nameGenerator.getRenameStrategy() == RenameStrategy.CONSISTENT,id);
  if (nameGenerator.getRenameStrategy() == RenameStrategy.CONSISTENT) {
    Map<String,String> entry=consistNameMap.get(callName);
    rename=entry.get(instanceId);
    if (rename == null) {
      rename=nameGenerator.getName(instanceId,name);
      entry.put(instanceId,rename);
    }
  }
 else {
    rename=nameGenerator.getName(instanceId,name);
  }
  parent.replaceChild(n,IR.string(rename));
  idGeneratorMap.put(rename,instanceId);
  compiler.reportCodeChange();
}
