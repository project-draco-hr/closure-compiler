{
  JSDocInfo doc=n.getJSDocInfo();
  if (doc == null) {
    return;
  }
  int numGeneratorAnnotations=Booleans.countTrue(doc.isConsistentIdGenerator(),doc.isIdGenerator(),doc.isStableIdGenerator(),doc.isXidGenerator(),doc.isMappedIdGenerator());
  if (numGeneratorAnnotations == 0) {
    return;
  }
 else   if (numGeneratorAnnotations > 1) {
    compiler.report(t.makeError(n,CONFLICTING_GENERATOR_TYPE));
  }
  String name=null;
  if (n.isAssign()) {
    name=n.getFirstChild().getQualifiedName();
  }
 else   if (NodeUtil.isNameDeclaration(n)) {
    name=n.getFirstChild().getString();
  }
 else   if (n.isFunction()) {
    name=n.getFirstChild().getString();
    if (name.isEmpty()) {
      return;
    }
  }
  if (doc.isConsistentIdGenerator()) {
    consistNameMap.put(name,new LinkedHashMap<String,String>());
    nameGenerators.put(name,createNameSupplier(RenameStrategy.CONSISTENT,previousMap.get(name)));
  }
 else   if (doc.isStableIdGenerator()) {
    nameGenerators.put(name,createNameSupplier(RenameStrategy.STABLE,previousMap.get(name)));
  }
 else   if (doc.isXidGenerator()) {
    nameGenerators.put(name,createNameSupplier(RenameStrategy.XID,previousMap.get(name)));
  }
 else   if (doc.isIdGenerator()) {
    nameGenerators.put(name,createNameSupplier(RenameStrategy.INCONSISTENT,previousMap.get(name)));
  }
 else   if (doc.isMappedIdGenerator()) {
    NameSupplier supplier=nameGenerators.get(name);
    if (supplier == null || supplier.getRenameStrategy() != RenameStrategy.MAPPED) {
      compiler.report(t.makeError(n,MISSING_NAME_MAP_FOR_GENERATOR));
      return;
    }
  }
 else {
    throw new IllegalStateException("unexpected");
  }
  idGeneratorMaps.put(name,new LinkedHashMap<String,String>());
}
