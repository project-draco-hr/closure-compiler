{
  JSDocInfo doc=n.getJSDocInfo();
  if (doc == null) {
    return;
  }
  int numGeneratorAnnotations=(doc.isConsistentIdGenerator() ? 1 : 0) + (doc.isIdGenerator() ? 1 : 0) + (doc.isStableIdGenerator() ? 1 : 0);
  if (numGeneratorAnnotations == 0) {
    return;
  }
 else   if (numGeneratorAnnotations > 1) {
    compiler.report(t.makeError(n,CONFLICTING_GENERATOR_TYPE));
  }
  String name=null;
  if (n.isAssign()) {
    name=n.getFirstChild().getQualifiedName();
  }
 else   if (n.isVar()) {
    name=n.getFirstChild().getString();
  }
 else   if (n.isFunction()) {
    name=n.getFirstChild().getString();
    if (name.isEmpty()) {
      return;
    }
  }
  if (doc.isConsistentIdGenerator()) {
    consistNameMap.put(name,Maps.<String,String>newLinkedHashMap());
    nameGenerators.put(name,createNameSupplier(RenameStrategy.CONSISTENT,previousMap.get(name)));
  }
 else   if (doc.isStableIdGenerator()) {
    nameGenerators.put(name,createNameSupplier(RenameStrategy.STABLE,previousMap.get(name)));
  }
 else {
    nameGenerators.put(name,createNameSupplier(RenameStrategy.INCONSISTENT,previousMap.get(name)));
  }
  idGeneratorMaps.put(name,Maps.<String,String>newLinkedHashMap());
}
