{
  AbstractPostOrderCallback finder=new AbstractPostOrderCallback(){
    @Override public void visit(    NodeTraversal t,    Node n,    Node parent){
      if (jsScope == t.getScope() || !n.isName() || parent.isFunction()) {
        return;
      }
      String name=n.getString();
      Var var=t.getScope().getVar(name);
      if (var != null && var.scope == jsScope) {
        escaped.add(jsScope.getVar(name));
      }
    }
  }
;
  NodeTraversal t=new NodeTraversal(compiler,finder);
  t.traverseAtScope(jsScope);
  for (Iterator<Var> i=jsScope.getVars(); i.hasNext(); ) {
    Var var=i.next();
    if (var.getParentNode().isCatch() || compiler.getCodingConvention().isExported(var.getName())) {
      escaped.add(var);
    }
  }
}
