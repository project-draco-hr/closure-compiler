{
  LinkedDirectedGraph<FunctionInformation,CallSitePropagationInfo> sideEffectGraph=LinkedDirectedGraph.createWithoutAnnotations();
  for (  FunctionInformation functionInfo : functionSideEffectMap.values()) {
    functionInfo.graphNode=sideEffectGraph.createNode(functionInfo);
  }
  representativeNodesByName=generateRepresentativeNodes(sideEffectGraph);
  for (  FunctionInformation functionInfo : functionSideEffectMap.values()) {
    if (!functionInfo.mayHaveSideEffects()) {
      continue;
    }
    for (    Node callSite : functionInfo.getCallsInFunctionBody()) {
      List<FunctionInformation> possibleSideEffects=getSideEffectsForCall(callSite,definitionProvider,representativeNodesByName);
      if (possibleSideEffects == null) {
        functionInfo.setTaintsGlobalState();
        break;
      }
      for (      FunctionInformation sideEffectNode : possibleSideEffects) {
        Preconditions.checkNotNull(sideEffectNode);
        CallSitePropagationInfo edge=CallSitePropagationInfo.computePropagationType(callSite);
        sideEffectGraph.connect(sideEffectNode.graphNode,edge,functionInfo.graphNode);
      }
    }
  }
  FixedPointGraphTraversal.newTraversal(new EdgeCallback<FunctionInformation,CallSitePropagationInfo>(){
    @Override public boolean traverseEdge(    FunctionInformation source,    CallSitePropagationInfo edge,    FunctionInformation destination){
      return edge.propagate(source,destination);
    }
  }
).computeFixedPoint(sideEffectGraph);
  for (  FunctionInformation functionInfo : functionSideEffectMap.values()) {
    if (functionInfo.mayBePure()) {
      functionInfo.setIsPure();
    }
  }
}
