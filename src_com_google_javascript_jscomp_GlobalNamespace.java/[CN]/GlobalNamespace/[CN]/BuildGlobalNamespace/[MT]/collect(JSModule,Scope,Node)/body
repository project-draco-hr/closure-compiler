{
  Node parent=n.getParent();
  String name;
  boolean isSet=false;
  Name.Type type=Name.Type.OTHER;
  boolean isPropAssign=false;
switch (n.getToken()) {
case GETTER_DEF:
case SETTER_DEF:
case STRING_KEY:
case MEMBER_FUNCTION_DEF:
    name=null;
  if (parent != null && parent.isObjectLit()) {
    name=getNameForObjLitKey(n);
  }
 else   if (parent != null && parent.isClassMembers()) {
    name=getNameForClassMembers(n);
  }
if (name == null) {
  return;
}
isSet=true;
switch (n.getToken()) {
case MEMBER_FUNCTION_DEF:
case STRING_KEY:
type=getValueType(n.getFirstChild());
break;
case GETTER_DEF:
type=Name.Type.GET;
break;
case SETTER_DEF:
type=Name.Type.SET;
break;
default :
throw new IllegalStateException("unexpected:" + n);
}
break;
case NAME:
if (parent != null) {
switch (parent.getToken()) {
case VAR:
case LET:
case CONST:
isSet=true;
Node rvalue=n.getFirstChild();
type=rvalue == null ? Name.Type.OTHER : getValueType(rvalue);
break;
case ASSIGN:
if (parent.getFirstChild() == n) {
isSet=true;
type=getValueType(n.getNext());
}
break;
case GETPROP:
return;
case FUNCTION:
Node grandparent=parent.getParent();
if (grandparent == null || NodeUtil.isFunctionExpression(parent)) {
return;
}
isSet=true;
type=Name.Type.FUNCTION;
break;
case CATCH:
case INC:
case DEC:
isSet=true;
type=Name.Type.OTHER;
break;
case CLASS:
isSet=true;
type=Name.Type.CLASS;
break;
default :
if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
isSet=true;
type=Name.Type.OTHER;
}
}
}
name=n.getString();
break;
case GETPROP:
if (parent != null) {
switch (parent.getToken()) {
case ASSIGN:
if (parent.getFirstChild() == n) {
isSet=true;
type=getValueType(n.getNext());
isPropAssign=true;
}
break;
case INC:
case DEC:
isSet=true;
type=Name.Type.OTHER;
break;
case GETPROP:
return;
default :
if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {
isSet=true;
type=Name.Type.OTHER;
}
}
}
name=n.getQualifiedName();
if (name == null) {
return;
}
break;
default :
return;
}
if (!isGlobalNameReference(name,scope)) {
return;
}
scope=scope.getClosestHoistScope();
if (isSet) {
if (scope.isGlobal()) {
handleSetFromGlobal(module,scope,n,parent,name,isPropAssign,type);
}
 else {
handleSetFromLocal(module,scope,n,parent,name);
}
}
 else {
handleGet(module,scope,n,parent,name);
}
}
