{
  if (maybeHandlePrototypePrefix(module,scope,n,parent,name)) {
    return;
  }
  Ref.Type type;
switch (parent.getToken()) {
case EXPR_RESULT:
case IF:
case INSTANCEOF:
case TYPEOF:
case VOID:
case NOT:
case BITNOT:
case POS:
case NEG:
    type=Ref.Type.DIRECT_GET;
  break;
case CALL:
if (n == parent.getFirstChild()) {
  type=Ref.Type.CALL_GET;
}
 else if (isClassDefiningCall(parent)) {
  type=Ref.Type.DIRECT_GET;
}
 else {
  type=Ref.Type.ALIASING_GET;
}
break;
case NEW:
type=n == parent.getFirstChild() ? Ref.Type.DIRECT_GET : Ref.Type.ALIASING_GET;
break;
case OR:
case AND:
type=determineGetTypeForHookOrBooleanExpr(module,scope,parent,name);
break;
case HOOK:
if (n != parent.getFirstChild()) {
type=determineGetTypeForHookOrBooleanExpr(module,scope,parent,name);
}
 else {
type=Ref.Type.DIRECT_GET;
}
break;
case DELPROP:
type=Ref.Type.DELETE_PROP;
break;
default :
type=Ref.Type.ALIASING_GET;
break;
}
handleGet(module,scope,n,parent,name,type);
}
