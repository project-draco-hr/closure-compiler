{
  compareJsDoc=false;
  test("class D {} class C extends D { constructor() { super(); } }",Joiner.on('\n').join("/** @constructor @struct */","var D = function() {};","/** @constructor @struct @extends {D} */","var C = function() {","  C.base(this, 'constructor');","}","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);"));
  test("class D {} class C extends D { constructor(str) { super(str); } }",Joiner.on('\n').join("/** @constructor @struct */","var D = function() {}","/** @constructor @struct @extends {D} */","var C = function(str) {","  C.base(this, 'constructor', str);","}","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);"));
  test(Joiner.on('\n').join("class D {}","class C extends D {","  foo() { return super.foo(); }","}"),Joiner.on('\n').join("/** @constructor @struct */","var D = function() {}","/** @constructor @struct @extends {D} */","var C = function() { C.base(this, 'constructor'); }","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);","C.prototype.foo = function() ","{return C.base(this, 'foo');}"));
  test(Joiner.on('\n').join("class D {}","class C extends D {","  foo(bar) { return super.foo(bar); }","}"),Joiner.on('\n').join("/** @constructor @struct */","var D = function() {}","/** @constructor @struct @extends {D} */","var C = function() { C.base(this, 'constructor'); }","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);","C.prototype.foo = function(bar)","{return C.base(this, 'foo', bar);}"));
  test("class C { constructor() { super(); } }",null,Es6ConvertSuper.NO_SUPERTYPE);
  test("class C { f() { super(); } }",null,Es6ConvertSuper.NO_SUPERTYPE);
  test("class C { static f() { super(); } }",null,Es6ConvertSuper.NO_SUPERTYPE);
  test("class C { method() { class D extends C { constructor() { super(); }}}}",Joiner.on('\n').join("/** @constructor @struct */","var C = function() {}","C.prototype.method = function() {","  /** @constructor @struct @extends{C} */","  var D = function() {","    D.base(this, 'constructor');","  }","  $jscomp.copyProperties(D, C);","  $jscomp.inherits(D, C);","};"));
  test("var i = super();",null,Es6ConvertSuper.NO_SUPERTYPE);
  test("class D {} class C extends D { f() {super();} }",Joiner.on('\n').join("/** @constructor @struct */","var D = function() {};","/** @constructor @struct @extends {D} */","var C = function() { C.base(this, 'constructor'); }","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);","C.prototype.f = function() {C.base(this, 'f');}"));
  test("class D { constructor (v) {} } class C extends D {}",Joiner.on('\n').join("/** @constructor @struct */","var D = function(v) {};","/** @constructor @struct @extends{D} */","var C = function() { C.base(this, 'constructor'); }","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);"));
}
