{
  compareJsDoc=false;
  test("class D {} class C extends D {}",Joiner.on('\n').join("/** @constructor @struct */","var D = function() {};","/** @constructor @struct @extends {D} */","var C = function(args) {","  args=[].slice.call(arguments, 0);","  C.base.apply(C, [].concat([this, 'constructor'], args));","};","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);"));
  test("class D {} class C extends D { constructor() { super(); } }",Joiner.on('\n').join("/** @constructor @struct */","var D = function() {};","/** @constructor @struct @extends {D} */","var C = function() {","  C.base(this, 'constructor');","}","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);"));
  test("class D {} class C extends D { constructor(str) { super(str); } }",Joiner.on('\n').join("/** @constructor @struct */","var D = function() {};","/** @constructor @struct @extends {D} */","var C = function(str) { ","  C.base(this, 'constructor', str); }","$jscomp.copyProperties(C, D);","$jscomp.inherits(C, D);"));
  test("class C extends ns.D { }",Joiner.on('\n').join("/** @constructor @struct @extends {ns.D} */","var C = function(args) {","  args=[].slice.call(arguments, 0);","  C.base.apply(C, [].concat([this, 'constructor'], args));","};","$jscomp.copyProperties(C, ns.D);","$jscomp.inherits(C, ns.D);"));
}
