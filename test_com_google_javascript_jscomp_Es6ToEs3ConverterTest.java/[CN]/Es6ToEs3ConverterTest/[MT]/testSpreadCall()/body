{
  test("f(...arr);","f.apply(null, [].concat($jscomp.arrayFromIterable(arr)));");
  test("f(0, ...g());","f.apply(null, [].concat([0], $jscomp.arrayFromIterable(g())));");
  test("f(...arr, 1);","f.apply(null, [].concat($jscomp.arrayFromIterable(arr), [1]));");
  test("f(0, ...g(), 2);","f.apply(null, [].concat([0], $jscomp.arrayFromIterable(g()), [2]));");
  test("obj.m(...arr);","obj.m.apply(obj, [].concat($jscomp.arrayFromIterable(arr)));");
  test("x.y.z.m(...arr);","x.y.z.m.apply(x.y.z, [].concat($jscomp.arrayFromIterable(arr)));");
  test("f(a, ...b, c, ...d, e);","f.apply(null, [].concat([a], $jscomp.arrayFromIterable(b)," + " [c], $jscomp.arrayFromIterable(d), [e]));");
  test("new F(...args);","new Function.prototype.bind.apply(F, [].concat($jscomp.arrayFromIterable(args)));");
  test("Factory.create().m(...arr);",LINE_JOINER.join("var $jscomp$spread$args0;","($jscomp$spread$args0 = Factory.create()).m.apply(" + "$jscomp$spread$args0, [].concat($jscomp.arrayFromIterable(arr)));"));
  test("var x = b ? Factory.create().m(...arr) : null;",LINE_JOINER.join("var $jscomp$spread$args0;","var x = b ? ($jscomp$spread$args0 = Factory.create()).m.apply($jscomp$spread$args0, ","    [].concat($jscomp.arrayFromIterable(arr))) : null;"));
  test("getF()(...args);","getF().apply(null, [].concat($jscomp.arrayFromIterable(args)));");
  test("F.c().m(...a); G.d().n(...b);",LINE_JOINER.join("var $jscomp$spread$args0;","($jscomp$spread$args0 = F.c()).m.apply($jscomp$spread$args0,","    [].concat($jscomp.arrayFromIterable(a)));","var $jscomp$spread$args1;","($jscomp$spread$args1 = G.d()).n.apply($jscomp$spread$args1,","    [].concat($jscomp.arrayFromIterable(b)));"));
  enableTypeCheck();
  test(EXTERNS_BASE,LINE_JOINER.join("class C {}","class Factory {","  /** @return {C} */","  static create() {return new C()}","}","var arr = [1,2]","Factory.create().m(...arr);"),null,null,TypeCheck.INEXISTENT_PROPERTY);
  test(EXTERNS_BASE,LINE_JOINER.join("class C { m(a) {} }","class Factory {","  /** @return {C} */","  static create() {return new C()}","}","var arr = [1,2]","Factory.create().m(...arr);"),LINE_JOINER.join("/** @constructor @struct */","var C = function() {};","C.prototype.m = function(a) {};","/** @constructor @struct */","var Factory = function() {};","/** @return {C} */","Factory.create = function() {return new C()};","var arr = [1,2]","var $jscomp$spread$args0;","($jscomp$spread$args0 = Factory.create()).m.apply(","    $jscomp$spread$args0, [].concat($jscomp.arrayFromIterable(arr)));"),null,null);
}
