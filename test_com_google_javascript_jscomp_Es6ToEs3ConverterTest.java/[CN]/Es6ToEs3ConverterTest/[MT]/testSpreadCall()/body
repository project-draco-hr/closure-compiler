{
  test("f(...arr);","f.apply(null, [].concat(arr));");
  test("f(0, ...g());","f.apply(null, [].concat([0], g()));");
  test("f(...arr, 1);","f.apply(null, [].concat(arr, [1]));");
  test("f(0, ...g(), 2);","f.apply(null, [].concat([0], g(), [2]));");
  test("obj.m(...arr);","obj.m.apply(obj, [].concat(arr));");
  test("x.y.z.m(...arr);","x.y.z.m.apply(x.y.z, [].concat(arr));");
  test("f(a, ...b, c, ...d, e);","f.apply(null, [].concat([a], b, [c], d, [e]));");
  test("new F(...args);","new Function.prototype.bind.apply(F, [].concat(args));");
  test("Factory.create().m(...arr);",Joiner.on('\n').join("var $jscomp$spread$args0;","($jscomp$spread$args0 = Factory.create()).m.apply($jscomp$spread$args0, [].concat(arr));"));
  test("var x = b ? Factory.create().m(...arr) : null;",Joiner.on('\n').join("var $jscomp$spread$args0;","var x = b ? ($jscomp$spread$args0 = Factory.create()).m.apply($jscomp$spread$args0, ","    [].concat(arr)) : null;"));
  test("getF()(...args);","getF().apply(null, [].concat(args));");
  test("F.c().m(...a); G.d().n(...b);",Joiner.on('\n').join("var $jscomp$spread$args0;","($jscomp$spread$args0 = F.c()).m.apply($jscomp$spread$args0,","    [].concat(a));","var $jscomp$spread$args1;","($jscomp$spread$args1 = G.d()).n.apply($jscomp$spread$args1,","    [].concat(b));"));
  enableTypeCheck(CheckLevel.WARNING);
  test(EXTERNS_BASE,Joiner.on('\n').join("class C {}","class Factory {","  /** @return {C} */","  static create() {return new C()}","}","var arr = [1,2]","Factory.create().m(...arr);"),null,null,TypeCheck.INEXISTENT_PROPERTY);
  test(EXTERNS_BASE,Joiner.on('\n').join("class C { m(a) {} }","class Factory {","  /** @return {C} */","  static create() {return new C()}","}","var arr = [1,2]","Factory.create().m(...arr);"),Joiner.on('\n').join("/** @constructor @struct */","function C() {}","C.prototype.m = function (a) {};","/** @constructor @struct */","function Factory() {}","/** @return {C} */","Factory.create = function () {return new C()};","var arr = [1,2]","var $jscomp$spread$args0;","($jscomp$spread$args0 = Factory.create()).m.apply($jscomp$spread$args0, [].concat(arr));"),null,null);
}
