{
  Preconditions.checkState(!inLoop,"Nested loops are forbidden");
  inLoop=true;
  optimizePasses();
  scopeHandler=new ScopedChangeHandler();
  compiler.addChangeHandler(scopeHandler);
  setScope(root);
  lastRuns=new HashMap<>();
  for (  NamedPass pass : myPasses) {
    lastRuns.put(pass,START_TIME);
  }
  Set<NamedPass> madeChanges=Sets.newHashSet();
  Set<NamedPass> runInPrevIter=Sets.newHashSet();
  State state=State.RUN_PASSES_NOT_RUN_IN_PREV_ITER;
  boolean lastIterMadeChanges;
  int count=0;
  try {
    while (true) {
      if (count++ > MAX_LOOPS) {
        compiler.throwInternalError(OPTIMIZE_LOOP_ERROR,null);
      }
      lastIterMadeChanges=false;
      for (      NamedPass pass : myPasses) {
        if ((state == State.RUN_PASSES_NOT_RUN_IN_PREV_ITER && !runInPrevIter.contains(pass)) || (state == State.RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER && madeChanges.contains(pass))) {
          timestamp++;
          currentPass=pass;
          pass.process(externs,root);
          runInPrevIter.add(pass);
          lastRuns.put(pass,timestamp);
          if (hasHaltingErrors()) {
            return;
          }
 else           if (scopeHandler.hasCodeChangedSinceLastCall()) {
            madeChanges.add(pass);
            lastIterMadeChanges=true;
          }
 else {
            madeChanges.remove(pass);
          }
        }
 else {
          runInPrevIter.remove(pass);
        }
      }
      if (state == State.RUN_PASSES_NOT_RUN_IN_PREV_ITER) {
        if (lastIterMadeChanges) {
          state=State.RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER;
        }
 else {
          return;
        }
      }
 else {
        if (!lastIterMadeChanges) {
          state=State.RUN_PASSES_NOT_RUN_IN_PREV_ITER;
        }
      }
    }
  }
  finally {
    inLoop=false;
    compiler.removeChangeHandler(scopeHandler);
  }
}
