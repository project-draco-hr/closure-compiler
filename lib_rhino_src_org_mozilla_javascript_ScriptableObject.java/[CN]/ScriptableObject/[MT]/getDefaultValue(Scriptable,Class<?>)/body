{
  Context cx=null;
  for (int i=0; i < 2; i++) {
    boolean tryToString;
    if (typeHint == ScriptRuntime.StringClass) {
      tryToString=(i == 0);
    }
 else {
      tryToString=(i == 1);
    }
    String methodName;
    Object[] args;
    if (tryToString) {
      methodName="toString";
      args=ScriptRuntime.emptyArgs;
    }
 else {
      methodName="valueOf";
      args=new Object[1];
      String hint;
      if (typeHint == null) {
        hint="undefined";
      }
 else       if (typeHint == ScriptRuntime.StringClass) {
        hint="string";
      }
 else       if (typeHint == ScriptRuntime.ScriptableClass) {
        hint="object";
      }
 else       if (typeHint == ScriptRuntime.FunctionClass) {
        hint="function";
      }
 else       if (typeHint == ScriptRuntime.BooleanClass || typeHint == Boolean.TYPE) {
        hint="boolean";
      }
 else       if (typeHint == ScriptRuntime.NumberClass || typeHint == ScriptRuntime.ByteClass || typeHint == Byte.TYPE || typeHint == ScriptRuntime.ShortClass || typeHint == Short.TYPE || typeHint == ScriptRuntime.IntegerClass || typeHint == Integer.TYPE || typeHint == ScriptRuntime.FloatClass || typeHint == Float.TYPE || typeHint == ScriptRuntime.DoubleClass || typeHint == Double.TYPE) {
        hint="number";
      }
 else {
        throw Context.reportRuntimeError1("msg.invalid.type",typeHint.toString());
      }
      args[0]=hint;
    }
    Object v=getProperty(object,methodName);
    if (!(v instanceof Function))     continue;
    Function fun=(Function)v;
    if (cx == null)     cx=Context.getContext();
    v=fun.call(cx,fun.getParentScope(),object,args);
    if (v != null) {
      if (!(v instanceof Scriptable)) {
        return v;
      }
      if (typeHint == ScriptRuntime.ScriptableClass || typeHint == ScriptRuntime.FunctionClass) {
        return v;
      }
      if (tryToString && v instanceof Wrapper) {
        Object u=((Wrapper)v).unwrap();
        if (u instanceof String)         return u;
      }
    }
  }
  String arg=(typeHint == null) ? "undefined" : typeHint.getName();
  throw ScriptRuntime.typeError1("msg.default.value",arg);
}
