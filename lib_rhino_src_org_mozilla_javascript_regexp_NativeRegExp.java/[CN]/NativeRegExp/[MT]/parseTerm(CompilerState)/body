{
  char[] src=state.cpbegin;
  char c=src[state.cp++];
  int nDigits=2;
  int parenBaseCount=state.parenCount;
  int num, tmp;
  RENode term;
  int termStart;
switch (c) {
case '^':
    state.result=new RENode(REOP_BOL);
  state.progLength++;
return true;
case '$':
state.result=new RENode(REOP_EOL);
state.progLength++;
return true;
case '\\':
if (state.cp < state.cpend) {
c=src[state.cp++];
switch (c) {
case 'b':
state.result=new RENode(REOP_WBDRY);
state.progLength++;
return true;
case 'B':
state.result=new RENode(REOP_WNONBDRY);
state.progLength++;
return true;
case '0':
reportWarning(state.cx,"msg.bad.backref","");
num=0;
while (state.cp < state.cpend) {
c=src[state.cp];
if ((c >= '0') && (c <= '7')) {
state.cp++;
tmp=8 * num + (c - '0');
if (tmp > 0377) break;
num=tmp;
}
 else break;
}
c=(char)(num);
doFlat(state,c);
break;
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7':
case '8':
case '9':
termStart=state.cp - 1;
num=getDecimalValue(c,state,0xFFFF,"msg.overlarge.backref");
if (num > state.parenCount) reportWarning(state.cx,"msg.bad.backref","");
if ((num > 9) && (num > state.parenCount)) {
state.cp=termStart;
num=0;
while (state.cp < state.cpend) {
c=src[state.cp];
if ((c >= '0') && (c <= '7')) {
state.cp++;
tmp=8 * num + (c - '0');
if (tmp > 0377) break;
num=tmp;
}
 else break;
}
c=(char)(num);
doFlat(state,c);
break;
}
state.result=new RENode(REOP_BACKREF);
state.result.parenIndex=num - 1;
state.progLength+=3;
break;
case 'f':
c=0xC;
doFlat(state,c);
break;
case 'n':
c=0xA;
doFlat(state,c);
break;
case 'r':
c=0xD;
doFlat(state,c);
break;
case 't':
c=0x9;
doFlat(state,c);
break;
case 'v':
c=0xB;
doFlat(state,c);
break;
case 'c':
if ((state.cp < state.cpend) && isControlLetter(src[state.cp])) c=(char)(src[state.cp++] & 0x1F);
 else {
--state.cp;
c='\\';
}
doFlat(state,c);
break;
case 'u':
nDigits+=2;
case 'x':
{
int n=0;
int i;
for (i=0; (i < nDigits) && (state.cp < state.cpend); i++) {
c=src[state.cp++];
n=Kit.xDigitToInt(c,n);
if (n < 0) {
state.cp-=(i + 2);
n=src[state.cp++];
break;
}
}
c=(char)(n);
}
doFlat(state,c);
break;
case 'd':
state.result=new RENode(REOP_DIGIT);
state.progLength++;
break;
case 'D':
state.result=new RENode(REOP_NONDIGIT);
state.progLength++;
break;
case 's':
state.result=new RENode(REOP_SPACE);
state.progLength++;
break;
case 'S':
state.result=new RENode(REOP_NONSPACE);
state.progLength++;
break;
case 'w':
state.result=new RENode(REOP_ALNUM);
state.progLength++;
break;
case 'W':
state.result=new RENode(REOP_NONALNUM);
state.progLength++;
break;
default :
state.result=new RENode(REOP_FLAT);
state.result.chr=c;
state.result.length=1;
state.result.flatIndex=state.cp - 1;
state.progLength+=3;
break;
}
break;
}
 else {
reportError("msg.trail.backslash","");
return false;
}
case '(':
{
RENode result=null;
termStart=state.cp;
if (state.cp + 1 < state.cpend && src[state.cp] == '?' && ((c=src[state.cp + 1]) == '=' || c == '!' || c == ':')) {
state.cp+=2;
if (c == '=') {
result=new RENode(REOP_ASSERT);
state.progLength+=4;
}
 else if (c == '!') {
result=new RENode(REOP_ASSERT_NOT);
state.progLength+=4;
}
}
 else {
result=new RENode(REOP_LPAREN);
state.progLength+=6;
result.parenIndex=state.parenCount++;
}
++state.parenNesting;
if (!parseDisjunction(state)) return false;
if (state.cp == state.cpend || src[state.cp] != ')') {
reportError("msg.unterm.paren","");
return false;
}
++state.cp;
--state.parenNesting;
if (result != null) {
result.kid=state.result;
state.result=result;
}
break;
}
case ')':
reportError("msg.re.unmatched.right.paren","");
return false;
case '[':
state.result=new RENode(REOP_CLASS);
termStart=state.cp;
state.result.startIndex=termStart;
while (true) {
if (state.cp == state.cpend) {
reportError("msg.unterm.class","");
return false;
}
if (src[state.cp] == '\\') state.cp++;
 else {
if (src[state.cp] == ']') {
state.result.kidlen=state.cp - termStart;
break;
}
}
state.cp++;
}
state.result.index=state.classCount++;
if (!calculateBitmapSize(state,state.result,src,termStart,state.cp++)) return false;
state.progLength+=3;
break;
case '.':
state.result=new RENode(REOP_DOT);
state.progLength++;
break;
case '*':
case '+':
case '?':
reportError("msg.bad.quant",String.valueOf(src[state.cp - 1]));
return false;
default :
state.result=new RENode(REOP_FLAT);
state.result.chr=c;
state.result.length=1;
state.result.flatIndex=state.cp - 1;
state.progLength+=3;
break;
}
term=state.result;
if (state.cp == state.cpend) {
return true;
}
boolean hasQ=false;
switch (src[state.cp]) {
case '+':
state.result=new RENode(REOP_QUANT);
state.result.min=1;
state.result.max=-1;
state.progLength+=8;
hasQ=true;
break;
case '*':
state.result=new RENode(REOP_QUANT);
state.result.min=0;
state.result.max=-1;
state.progLength+=8;
hasQ=true;
break;
case '?':
state.result=new RENode(REOP_QUANT);
state.result.min=0;
state.result.max=1;
state.progLength+=8;
hasQ=true;
break;
case '{':
{
int min=0;
int max=-1;
int leftCurl=state.cp;
c=src[++state.cp];
if (isDigit(c)) {
++state.cp;
min=getDecimalValue(c,state,0xFFFF,"msg.overlarge.min");
c=src[state.cp];
if (c == ',') {
c=src[++state.cp];
if (isDigit(c)) {
++state.cp;
max=getDecimalValue(c,state,0xFFFF,"msg.overlarge.max");
c=src[state.cp];
if (min > max) {
reportError("msg.max.lt.min",String.valueOf(src[state.cp]));
return false;
}
}
}
 else {
max=min;
}
if (c == '}') {
state.result=new RENode(REOP_QUANT);
state.result.min=min;
state.result.max=max;
state.progLength+=12;
hasQ=true;
}
}
if (!hasQ) {
state.cp=leftCurl;
}
break;
}
}
if (!hasQ) return true;
++state.cp;
state.result.kid=term;
state.result.parenIndex=parenBaseCount;
state.result.parenCount=state.parenCount - parenBaseCount;
if ((state.cp < state.cpend) && (src[state.cp] == '?')) {
++state.cp;
state.result.greedy=false;
}
 else state.result.greedy=true;
return true;
}
