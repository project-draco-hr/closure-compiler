{
switch (n.getType()) {
case Token.GETPROP:
{
      String propName=n.getLastChild().getString();
      if (inExterns || compiler.getCodingConvention().isExported(propName) || isPinningPropertyUse(n)|| !isKnownClassProperty(n)) {
        used.add(propName);
      }
 else {
        candidates.add(n);
      }
      break;
    }
case Token.OBJECTLIT:
{
    for (    Node c : n.children()) {
      used.add(c.getString());
    }
    break;
  }
case Token.CALL:
Node target=n.getFirstChild();
if (n.hasMoreThanOneChild() && target.isName() && target.getString().equals(NodeUtil.JSC_PROPERTY_NAME_FN)) {
Node propName=target.getNext();
if (propName.isString()) {
  used.add(propName.getString());
}
}
break;
}
}
