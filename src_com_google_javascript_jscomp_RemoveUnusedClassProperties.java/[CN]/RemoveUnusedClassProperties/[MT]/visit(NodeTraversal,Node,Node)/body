{
switch (n.getType()) {
case GETPROP:
{
      String propName=n.getLastChild().getString();
      if (compiler.getCodingConvention().isExported(propName) || isPinningPropertyUse(n) || !isRemovablePropertyDefinition(n)) {
        used.add(propName);
      }
 else {
        candidates.add(n);
      }
      break;
    }
case OBJECTLIT:
{
    if (!NodeUtil.isObjectDefinePropertiesDefinition(n.getParent())) {
      for (      Node c : n.children()) {
        used.add(c.getString());
      }
    }
    break;
  }
case CALL:
Node target=n.getFirstChild();
if (n.hasMoreThanOneChild() && compiler.getCodingConvention().isPropertyRenameFunction(target.getOriginalQualifiedName())) {
Node propName=target.getNext();
if (propName.isString()) {
  used.add(propName.getString());
}
}
 else if (NodeUtil.isObjectDefinePropertiesDefinition(n)) {
if (n.getChildCount() == 3 && n.getLastChild().isObjectLit()) {
  Node objlit=n.getLastChild();
  for (  Node c : objlit.children()) {
    if (!c.isQuotedString()) {
      candidates.add(c);
    }
 else {
      used.add(c.getString());
    }
  }
}
}
break;
}
}
