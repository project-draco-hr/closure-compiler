{
  if (s.propertyScope != null) {
    return;
  }
  SymbolScope parentPropertyScope=null;
  ObjectType type=s.getType() == null ? null : s.getType().toObjectType();
  if (type == null) {
    return;
  }
  ObjectType proto=type.getParentScope();
  if (proto != null && proto != type && proto.getConstructor() != null) {
    Symbol parentSymbol=getSymbolForInstancesOf(proto.getConstructor());
    if (parentSymbol != null) {
      createPropertyScopeFor(parentSymbol);
      parentPropertyScope=parentSymbol.getPropertyScope();
    }
  }
  ObjectType instanceType=type;
  Iterable<String> propNames=type.getOwnPropertyNames();
  if (instanceType.isFunctionPrototypeType()) {
    if (instanceType.getOwnerFunction().hasInstanceType()) {
      instanceType=instanceType.getOwnerFunction().getInstanceType();
      Set<String> set=Sets.newHashSet(propNames);
      Iterables.addAll(set,instanceType.getOwnPropertyNames());
      propNames=set;
    }
  }
  s.setPropertyScope(new SymbolScope(null,parentPropertyScope,type,s));
  for (  String propName : propNames) {
    StaticSlot<JSType> newProp=instanceType.getSlot(propName);
    if (newProp.getDeclaration() == null) {
      continue;
    }
    Symbol oldProp=symbols.get(newProp.getDeclaration().getNode(),s.getName() + "." + propName);
    if (oldProp != null) {
      removeSymbol(oldProp);
    }
    if (symbols.get(newProp.getDeclaration().getNode(),newProp.getName()) != null) {
      logger.info("Found duplicate symbol " + newProp);
      continue;
    }
    Symbol newSym=copySymbolTo(newProp,s.propertyScope);
    if (oldProp != null) {
      if (newSym.getJSDocInfo() == null) {
        newSym.setJSDocInfo(oldProp.getJSDocInfo());
      }
      newSym.setPropertyScope(oldProp.propertyScope);
      for (      Reference ref : oldProp.references.values()) {
        newSym.defineReferenceAt(ref.getNode());
      }
    }
  }
}
