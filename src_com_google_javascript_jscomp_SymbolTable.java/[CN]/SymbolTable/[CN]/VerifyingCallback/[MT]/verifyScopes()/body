{
  collectingExpected=true;
  NodeTraversal.traverse(compiler,expectedRoot,this);
  collectingExpected=false;
  (new NodeTraversal(compiler,this,SymbolTable.this)).traverse(actualRoot);
  Preconditions.checkState(expectedScopes.size() == actualScopes.size());
  for (int i=0; i < expectedScopes.size(); i++) {
    Scope expectedScope=expectedScopes.get(i);
    Scope actualScope=actualScopes.get(i);
    if (expectedScope.getVarCount() != actualScope.getVarCount()) {
      compiler.report(JSError.make(VARIABLE_COUNT_MISMATCH,Integer.toString(expectedScope.getVarCount()),Integer.toString(actualScope.getVarCount())));
    }
 else {
      Iterator<Var> it=expectedScope.getVars();
      while (it.hasNext()) {
        Var var=it.next();
        Scope.Var actualVar=actualScope.getVar(var.getName());
        if (actualVar == null) {
          compiler.report(JSError.make(MISSING_VARIABLE,var.getName()));
        }
 else         if (!isNodeAttached(actualVar.getNameNode())) {
          compiler.report(JSError.make(MOVED_VARIABLE,var.getName()));
        }
      }
    }
  }
}
