{
  NativeArray na=null;
  boolean denseMode=false;
  if (thisObj instanceof NativeArray) {
    na=(NativeArray)thisObj;
    denseMode=na.denseOnly;
  }
  scope=getTopLevelScope(scope);
  int argc=args.length;
  if (argc == 0)   return cx.newArray(scope,0);
  long length=getLengthProperty(cx,thisObj);
  long begin=toSliceIndex(ScriptRuntime.toInteger(args[0]),length);
  argc--;
  long count;
  if (args.length == 1) {
    count=length - begin;
  }
 else {
    double dcount=ScriptRuntime.toInteger(args[1]);
    if (dcount < 0) {
      count=0;
    }
 else     if (dcount > (length - begin)) {
      count=length - begin;
    }
 else {
      count=(long)dcount;
    }
    argc--;
  }
  long end=begin + count;
  Object result;
  if (count != 0) {
    if (count == 1 && (cx.getLanguageVersion() == Context.VERSION_1_2)) {
      result=getElem(cx,thisObj,begin);
    }
 else {
      if (denseMode) {
        int intLen=(int)(end - begin);
        Object[] copy=new Object[intLen];
        System.arraycopy(na.dense,(int)begin,copy,0,intLen);
        result=cx.newArray(scope,copy);
      }
 else {
        Scriptable resultArray=cx.newArray(scope,0);
        for (long last=begin; last != end; last++) {
          Object temp=getRawElem(thisObj,last);
          if (temp != NOT_FOUND) {
            setElem(cx,resultArray,last - begin,temp);
          }
        }
        setLengthProperty(cx,resultArray,end - begin);
        result=resultArray;
      }
    }
  }
 else {
    if (cx.getLanguageVersion() == Context.VERSION_1_2) {
      result=Undefined.instance;
    }
 else {
      result=cx.newArray(scope,0);
    }
  }
  long delta=argc - count;
  if (denseMode && length + delta < Integer.MAX_VALUE && na.ensureCapacity((int)(length + delta))) {
    System.arraycopy(na.dense,(int)end,na.dense,(int)(begin + argc),(int)(length - end));
    if (argc > 0) {
      System.arraycopy(args,2,na.dense,(int)begin,argc);
    }
    if (delta < 0) {
      Arrays.fill(na.dense,(int)(length + delta),(int)length,NOT_FOUND);
    }
    na.length=length + delta;
    return result;
  }
  if (delta > 0) {
    for (long last=length - 1; last >= end; last--) {
      Object temp=getRawElem(thisObj,last);
      setRawElem(cx,thisObj,last + delta,temp);
    }
  }
 else   if (delta < 0) {
    for (long last=end; last < length; last++) {
      Object temp=getRawElem(thisObj,last);
      setRawElem(cx,thisObj,last + delta,temp);
    }
  }
  int argoffset=args.length - argc;
  for (int i=0; i < argc; i++) {
    setElem(cx,thisObj,begin + i,args[i + argoffset]);
  }
  setLengthProperty(cx,thisObj,length + delta);
  return result;
}
