{
  final Comparator<Object> comparator;
  if (args.length > 0 && Undefined.instance != args[0]) {
    final Callable jsCompareFunction=ScriptRuntime.getValueFunctionAndThis(args[0],cx);
    final Scriptable funThis=ScriptRuntime.lastStoredScriptable(cx);
    final Object[] cmpBuf=new Object[2];
    comparator=new Comparator<Object>(){
      public int compare(      final Object x,      final Object y){
        if (x == NOT_FOUND) {
          return y == NOT_FOUND ? 0 : 1;
        }
 else         if (y == NOT_FOUND) {
          return -1;
        }
 else         if (x == Undefined.instance) {
          return y == Undefined.instance ? 0 : 1;
        }
 else         if (y == Undefined.instance) {
          return -1;
        }
        cmpBuf[0]=x;
        cmpBuf[1]=y;
        Object ret=jsCompareFunction.call(cx,scope,funThis,cmpBuf);
        final double d=ScriptRuntime.toNumber(ret);
        if (d < 0) {
          return -1;
        }
 else         if (d > 0) {
          return +1;
        }
        return 0;
      }
    }
;
  }
 else {
    comparator=new Comparator<Object>(){
      public int compare(      final Object x,      final Object y){
        if (x == NOT_FOUND) {
          return y == NOT_FOUND ? 0 : 1;
        }
 else         if (y == NOT_FOUND) {
          return -1;
        }
 else         if (x == Undefined.instance) {
          return y == Undefined.instance ? 0 : 1;
        }
 else         if (y == Undefined.instance) {
          return -1;
        }
        final String a=ScriptRuntime.toString(x);
        final String b=ScriptRuntime.toString(y);
        return a.compareTo(b);
      }
    }
;
  }
  long llength=getLengthProperty(cx,thisObj);
  final int length=(int)llength;
  if (llength != length) {
    throw Context.reportRuntimeError1("msg.arraylength.too.big",String.valueOf(llength));
  }
  final Object[] working=new Object[length];
  for (int i=0; i != length; ++i) {
    working[i]=getRawElem(thisObj,i);
  }
  Arrays.sort(working,comparator);
  for (int i=0; i < length; ++i) {
    setRawElem(cx,thisObj,i,working[i]);
  }
  return thisObj;
}
