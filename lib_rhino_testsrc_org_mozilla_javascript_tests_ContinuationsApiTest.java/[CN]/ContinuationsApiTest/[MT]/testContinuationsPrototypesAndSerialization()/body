{
  byte[] serializedData=null;
{
    Scriptable globalScope;
    Context cx=Context.enter();
    try {
      globalScope=cx.initStandardObjects();
      cx.setOptimizationLevel(-1);
      globalScope.put("myObject",globalScope,Context.javaToJS(new MyClass(),globalScope));
    }
  finally {
      Context.exit();
    }
    cx=Context.enter();
    try {
      cx.setOptimizationLevel(-1);
      cx.evaluateString(globalScope,"function f(a) { Number.prototype.blargh = function() {return 'foo';}; var k = myObject.f(a); var t = []; return new Number(8).blargh(); }","function test source",1,null);
      Function f=(Function)globalScope.get("f",globalScope);
      Object[] args={7};
      cx.callFunctionWithContinuations(f,globalScope,args);
      fail("Should throw ContinuationPending");
    }
 catch (    ContinuationPending pending) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      ObjectOutputStream sos=new ObjectOutputStream(baos);
      sos.writeObject(globalScope);
      sos.writeObject(pending.getContinuation());
      sos.close();
      baos.close();
      serializedData=baos.toByteArray();
    }
 finally {
      Context.exit();
    }
  }
{
    try {
      Context cx=Context.enter();
      Scriptable globalScope;
      ByteArrayInputStream bais=new ByteArrayInputStream(serializedData);
      ObjectInputStream sis=new ObjectInputStream(bais);
      globalScope=(Scriptable)sis.readObject();
      Object continuation=sis.readObject();
      sis.close();
      bais.close();
      Object result=cx.resumeContinuation(continuation,globalScope,8);
      assertEquals("foo",result);
    }
  finally {
      Context.exit();
    }
  }
}
