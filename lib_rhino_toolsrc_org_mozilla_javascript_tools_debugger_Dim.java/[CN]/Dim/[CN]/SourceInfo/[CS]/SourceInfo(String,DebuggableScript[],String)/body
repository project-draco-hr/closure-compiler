{
  this.source=source;
  this.url=normilizedUrl;
  int N=functions.length;
  int[][] lineArrays=new int[N][];
  for (int i=0; i != N; ++i) {
    lineArrays[i]=functions[i].getLineNumbers();
  }
  int minAll=0, maxAll=-1;
  int[] firstLines=new int[N];
  for (int i=0; i != N; ++i) {
    int[] lines=lineArrays[i];
    if (lines == null || lines.length == 0) {
      firstLines[i]=-1;
    }
 else {
      int min, max;
      min=max=lines[0];
      for (int j=1; j != lines.length; ++j) {
        int line=lines[j];
        if (line < min) {
          min=line;
        }
 else         if (line > max) {
          max=line;
        }
      }
      firstLines[i]=min;
      if (minAll > maxAll) {
        minAll=min;
        maxAll=max;
      }
 else {
        if (min < minAll) {
          minAll=min;
        }
        if (max > maxAll) {
          maxAll=max;
        }
      }
    }
  }
  if (minAll > maxAll) {
    this.breakableLines=EMPTY_BOOLEAN_ARRAY;
    this.breakpoints=EMPTY_BOOLEAN_ARRAY;
  }
 else {
    if (minAll < 0) {
      throw new IllegalStateException(String.valueOf(minAll));
    }
    int linesTop=maxAll + 1;
    this.breakableLines=new boolean[linesTop];
    this.breakpoints=new boolean[linesTop];
    for (int i=0; i != N; ++i) {
      int[] lines=lineArrays[i];
      if (lines != null && lines.length != 0) {
        for (int j=0; j != lines.length; ++j) {
          int line=lines[j];
          this.breakableLines[line]=true;
        }
      }
    }
  }
  this.functionSources=new FunctionSource[N];
  for (int i=0; i != N; ++i) {
    String name=functions[i].getFunctionName();
    if (name == null) {
      name="";
    }
    this.functionSources[i]=new FunctionSource(this,firstLines[i],name);
  }
}
