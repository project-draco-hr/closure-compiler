{
  int token=n.getType();
switch (token) {
case Token.STAR:
case Token.EMPTY:
    return anyType();
case Token.VOID:
  return undefinedType();
case Token.BANG:
return convertTypeNodeAST(n.getFirstChild());
case Token.STRING:
String typeName=n.getString();
switch (typeName) {
case "boolean":
return booleanType();
case "number":
return numberType();
case "string":
return stringType();
case "null":
case "undefined":
case "void":
return null;
default :
TypeDeclarationNode root=namedType(typeName);
if (n.getChildCount() > 0 && n.getFirstChild().isBlock()) {
Node block=n.getFirstChild();
if ("Array".equals(typeName)) {
return arrayType(convertTypeNodeAST(block.getFirstChild()));
}
return parameterizedType(root,Iterables.filter(Iterables.transform(block.children(),CONVERT_TYPE_NODE),Predicates.notNull()));
}
return root;
}
case Token.QMARK:
Node child=n.getFirstChild();
return child == null ? anyType() : convertTypeNodeAST(child);
case Token.LC:
LinkedHashMap<String,TypeDeclarationNode> properties=new LinkedHashMap<>();
for (Node field : n.getFirstChild().children()) {
boolean isFieldTypeDeclared=field.getType() == Token.COLON;
Node fieldNameNode=isFieldTypeDeclared ? field.getFirstChild() : field;
String fieldName=fieldNameNode.getString();
if (fieldName.startsWith("'") || fieldName.startsWith("\"")) {
fieldName=fieldName.substring(1,fieldName.length() - 1);
}
TypeDeclarationNode fieldType=isFieldTypeDeclared ? convertTypeNodeAST(field.getLastChild()) : null;
properties.put(fieldName,fieldType);
}
return recordType(properties);
case Token.ELLIPSIS:
return arrayType(convertTypeNodeAST(n.getFirstChild()));
case Token.PIPE:
ImmutableList<TypeDeclarationNode> types=FluentIterable.from(n.children()).transform(CONVERT_TYPE_NODE).filter(Predicates.notNull()).toList();
switch (types.size()) {
case 0:
return null;
case 1:
return types.get(0);
default :
return unionType(types);
}
case Token.FUNCTION:
Node returnType=anyType();
LinkedHashMap<String,TypeDeclarationNode> parameters=new LinkedHashMap<>();
String restName=null;
TypeDeclarationNode restType=null;
for (Node child2 : n.children()) {
if (child2.isParamList()) {
int paramIdx=1;
for (Node param : child2.children()) {
String paramName="p" + paramIdx++;
if (param.getType() == Token.ELLIPSIS) {
restName=paramName;
if (param.getFirstChild() != null) {
restType=convertTypeNodeAST(param.getFirstChild());
}
}
 else {
parameters.put(paramName,convertTypeNodeAST(param));
}
}
}
 else if (child2.isNew()) {
}
 else if (child2.isThis()) {
}
 else {
returnType=convertTypeNodeAST(child2);
}
}
return functionType(returnType,parameters,restName,restType);
case Token.EQUALS:
TypeDeclarationNode optionalParam=convertTypeNodeAST(n.getFirstChild());
return optionalParam == null ? null : optionalParameter(optionalParam);
default :
throw new IllegalArgumentException("Unsupported node type: " + Token.name(n.getType()) + " "+ n.toStringTree());
}
}
