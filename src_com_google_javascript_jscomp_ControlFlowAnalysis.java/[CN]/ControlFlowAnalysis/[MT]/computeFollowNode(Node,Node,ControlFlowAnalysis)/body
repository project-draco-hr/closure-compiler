{
  Node parent=node.getParent();
  if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {
    return null;
  }
switch (parent.getToken()) {
case IF:
    return computeFollowNode(fromNode,parent,cfa);
case CASE:
case DEFAULT_CASE:
  if (parent.getNext() != null) {
    if (parent.getNext().isCase()) {
      return parent.getNext().getSecondChild();
    }
 else     if (parent.getNext().isDefaultCase()) {
      return parent.getNext().getFirstChild();
    }
 else {
      throw new IllegalStateException("Not reachable");
    }
  }
 else {
    return computeFollowNode(fromNode,parent,cfa);
  }
case FOR_OF:
return parent;
case FOR:
if (NodeUtil.isForIn(parent)) {
return parent;
}
 else {
return parent.getSecondChild().getNext();
}
case WHILE:
case DO:
return parent;
case TRY:
if (parent.getFirstChild() == node) {
if (NodeUtil.hasFinally(parent)) {
return computeFallThrough(parent.getLastChild());
}
 else {
return computeFollowNode(fromNode,parent,cfa);
}
}
 else if (NodeUtil.getCatchBlock(parent) == node) {
if (NodeUtil.hasFinally(parent)) {
return computeFallThrough(node.getNext());
}
 else {
return computeFollowNode(fromNode,parent,cfa);
}
}
 else if (parent.getLastChild() == node) {
if (cfa != null) {
for (Node finallyNode : cfa.finallyMap.get(parent)) {
cfa.createEdge(fromNode,Branch.ON_EX,finallyNode);
}
}
return computeFollowNode(fromNode,parent,cfa);
}
default :
break;
}
Node nextSibling=node.getNext();
while (nextSibling != null && nextSibling.isFunction()) {
nextSibling=nextSibling.getNext();
}
if (nextSibling != null) {
return computeFallThrough(nextSibling);
}
 else {
return computeFollowNode(fromNode,parent,cfa);
}
}
