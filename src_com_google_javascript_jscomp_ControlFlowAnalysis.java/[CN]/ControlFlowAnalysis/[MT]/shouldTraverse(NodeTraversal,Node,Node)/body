{
  astPosition.put(n,astPositionCounter++);
switch (n.getType()) {
case CLASS:
    return shouldTraverseFunctionsAndClasses;
case FUNCTION:
  if (shouldTraverseFunctionsAndClasses || n == cfg.getEntry().getValue()) {
    exceptionHandler.push(n);
    return true;
  }
return false;
case TRY:
exceptionHandler.push(n);
return true;
}
if (parent != null) {
switch (parent.getType()) {
case FOR:
case FOR_OF:
return n == parent.getLastChild();
case DO:
return n != parent.getSecondChild();
case IF:
case WHILE:
case WITH:
case SWITCH:
case CASE:
case CATCH:
case LABEL:
return n != parent.getFirstChild();
case FUNCTION:
return n == parent.getLastChild();
case CONTINUE:
case BREAK:
case EXPR_RESULT:
case VAR:
case LET:
case CONST:
case RETURN:
case THROW:
return false;
case TRY:
if ((!NodeUtil.hasFinally(parent) && n == NodeUtil.getCatchBlock(parent)) || NodeUtil.isTryFinallyNode(parent,n)) {
Preconditions.checkState(exceptionHandler.peek() == parent);
exceptionHandler.pop();
}
}
}
return true;
}
