{
  if (current.isFunction() || current.isExprResult()) {
    return current;
  }
  if (current.isReturn()) {
    Preconditions.checkState(NodeUtil.isStatementBlock(parent));
    Node resultNode=getReplacementReturnStatement(current,resultName);
    Node name=Node.newString(Token.LABEL_NAME,labelName);
    Node breakNode=new Node(Token.BREAK,name);
    breakNode.copyInformationFromForTree(current);
    parent.replaceChild(current,breakNode);
    if (resultNode != null) {
      resultNode.copyInformationFromForTree(current);
      parent.addChildBefore(resultNode,breakNode);
    }
    current=breakNode;
  }
 else {
    for (Node c=current.getFirstChild(); c != null; c=c.getNext()) {
      c=replaceReturnWithBreak(c,current,resultName,labelName);
    }
  }
  return current;
}
