{
  if (namesToAlias == null || namesToAlias.isEmpty()) {
    Node result=FunctionArgumentInjector.inject(compiler,fnTemplateRoot,null,argMap);
    Preconditions.checkState(result == fnTemplateRoot);
    return result;
  }
 else {
    Map<String,Node> newArgMap=Maps.newHashMap(argMap);
    List<Node> newVars=Lists.newLinkedList();
    for (    Entry<String,Node> entry : argMap.entrySet()) {
      String name=entry.getKey();
      if (namesToAlias.contains(name)) {
        if (name.equals(THIS_MARKER)) {
          boolean referencesThis=NodeUtil.referencesThis(fnTemplateRoot);
          Node value=entry.getValue();
          if (value.getType() != Token.THIS && (referencesThis || NodeUtil.mayHaveSideEffects(value,compiler))) {
            String newName=getUniqueThisName();
            Node newValue=entry.getValue().cloneTree();
            Node newNode=NodeUtil.newVarNode(newName,newValue).copyInformationFromForTree(newValue);
            newVars.add(0,newNode);
            newArgMap.put(THIS_MARKER,Node.newString(Token.NAME,newName).copyInformationFromForTree(newValue));
          }
        }
 else {
          Node newValue=entry.getValue().cloneTree();
          Node newNode=NodeUtil.newVarNode(name,newValue).copyInformationFromForTree(newValue);
          newVars.add(0,newNode);
          newArgMap.remove(name);
        }
      }
    }
    Node result=FunctionArgumentInjector.inject(compiler,fnTemplateRoot,null,newArgMap);
    Preconditions.checkState(result == fnTemplateRoot);
    for (    Node n : newVars) {
      fnTemplateRoot.addChildToFront(n);
    }
    return result;
  }
}
