{
  JSDocInfo docInfo=n.getJSDocInfo();
  if (docInfo != null && docInfo.isExport()) {
    if (parent.isAssign() && (n.isFunction() || n.isClass())) {
      JSDocInfo parentInfo=parent.getJSDocInfo();
      if (parentInfo != null && parentInfo.isExport()) {
        return;
      }
    }
    Mode mode=null;
    String export=null;
    Node context=null;
switch (n.getType()) {
case Token.FUNCTION:
case Token.CLASS:
      if (parent.isScript()) {
        export=NodeUtil.getName(n);
        context=n;
        mode=Mode.EXPORT;
      }
    break;
case Token.MEMBER_FUNCTION_DEF:
  export=n.getString();
context=n;
mode=Mode.EXPORT;
break;
case Token.ASSIGN:
Node grandparent=parent.getParent();
if (parent.isExprResult() && !n.getLastChild().isAssign()) {
if (grandparent != null && grandparent.isScript() && n.getFirstChild().isQualifiedName()) {
export=n.getFirstChild().getQualifiedName();
context=n;
mode=Mode.EXPORT;
}
 else if (allowLocalExports && n.getFirstChild().isGetProp()) {
Node target=n.getFirstChild();
export=target.getLastChild().getString();
mode=Mode.EXTERN;
}
}
break;
case Token.VAR:
case Token.LET:
case Token.CONST:
if (parent.isScript()) {
if (n.getFirstChild().hasChildren() && !n.getFirstFirstChild().isAssign()) {
export=n.getFirstChild().getString();
context=n;
mode=Mode.EXPORT;
}
}
break;
case Token.GETPROP:
if (allowLocalExports && parent.isExprResult()) {
mode=Mode.EXTERN;
export=n.getLastChild().getString();
mode=Mode.EXTERN;
}
break;
case Token.STRING_KEY:
case Token.GETTER_DEF:
case Token.SETTER_DEF:
if (allowLocalExports) {
export=n.getString();
mode=Mode.EXTERN;
}
break;
}
if (export != null) {
if (mode == Mode.EXPORT) {
Preconditions.checkNotNull(context);
exports.put(export,context);
}
 else {
Preconditions.checkState(context == null);
Preconditions.checkState(mode == Mode.EXTERN);
Preconditions.checkState(!export.isEmpty());
localExports.add(export);
}
}
 else {
if (!n.isFunction() || !NodeUtil.isObjectLitKey(parent)) {
if (allowLocalExports) {
compiler.report(t.makeError(n,EXPORT_ANNOTATION_NOT_ALLOWED));
}
 else {
compiler.report(t.makeError(n,NON_GLOBAL_ERROR));
}
}
}
}
}
