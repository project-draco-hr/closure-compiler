{
  JSDocInfo docInfo=n.getJSDocInfo();
  if (docInfo != null && docInfo.isExport()) {
    String export=null;
    GenerateNodeContext context=null;
switch (n.getType()) {
case Token.FUNCTION:
      if (parent.isScript()) {
        export=NodeUtil.getFunctionName(n);
        context=new GenerateNodeContext(n,parent,n);
      }
    break;
case Token.ASSIGN:
  Node grandparent=parent.getParent();
if (grandparent != null && grandparent.isScript() && parent.isExprResult() && n.getLastChild().getType() != Token.ASSIGN) {
  export=n.getFirstChild().getQualifiedName();
  context=new GenerateNodeContext(n,grandparent,parent);
}
break;
case Token.VAR:
if (parent.isScript()) {
if (n.getFirstChild().hasChildren() && n.getFirstChild().getFirstChild().getType() != Token.ASSIGN) {
export=n.getFirstChild().getString();
context=new GenerateNodeContext(n,parent,n);
}
}
}
if (export != null) {
exports.put(export,context);
}
 else {
compiler.report(t.makeError(n,NON_GLOBAL_ERROR));
}
}
}
