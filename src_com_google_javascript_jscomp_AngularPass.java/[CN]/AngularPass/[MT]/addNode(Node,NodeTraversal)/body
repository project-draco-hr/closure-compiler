{
  Node target=null;
  Node fn=null;
  String name=null;
switch (n.getType()) {
case ASSIGN:
    name=n.getFirstChild().getQualifiedName();
  if (name == null) {
    compiler.report(t.makeError(n,INJECTED_FUNCTION_ON_NON_QNAME));
    return;
  }
fn=n;
while (fn.isAssign()) {
fn=fn.getLastChild();
}
target=n.getParent();
break;
case FUNCTION:
name=NodeUtil.getName(n);
fn=n;
target=n;
if (n.getParent().isAssign() && n.getParent().getJSDocInfo().isNgInject()) {
return;
}
break;
case VAR:
case LET:
case CONST:
name=n.getFirstChild().getString();
fn=getDeclarationRValue(n);
target=n;
break;
case MEMBER_FUNCTION_DEF:
Node parent=n.getParent();
if (parent.isClassMembers()) {
Node classNode=parent.getParent();
String midPart=n.isStaticMember() ? "." : ".prototype.";
name=NodeUtil.getName(classNode) + midPart + n.getString();
if (n.getString().equals("constructor")) {
name=NodeUtil.getName(classNode);
}
fn=n.getFirstChild();
if (classNode.getParent().isAssign() || classNode.getParent().isName()) {
target=classNode.getGrandparent();
}
 else {
target=classNode;
}
}
break;
}
if (fn == null || !fn.isFunction()) {
compiler.report(t.makeError(n,INJECT_NON_FUNCTION_ERROR));
return;
}
if (!target.getParent().isScript() && !target.getParent().isBlock()) {
compiler.report(t.makeError(n,INJECT_IN_NON_GLOBAL_OR_BLOCK_ERROR));
return;
}
Preconditions.checkNotNull(name);
injectables.add(new NodeContext(name,n,fn,target));
}
