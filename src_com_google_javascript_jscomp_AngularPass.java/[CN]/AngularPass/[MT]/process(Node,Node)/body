{
  NodeTraversal.traverse(compiler,root,this);
  CodingConvention convention=compiler.getCodingConvention();
  boolean codeChanged=false;
  for (  NodeContext entry : injectables) {
    String name=entry.getName();
    Node fn=entry.getFunctionNode();
    List<Node> dependencies=createDependenciesList(fn);
    if (dependencies.size() == 0) {
      continue;
    }
    Node dependenciesArray=IR.arraylit(dependencies.toArray(new Node[dependencies.size()]));
    Node statement=IR.exprResult(IR.assign(IR.getelem(NodeUtil.newQualifiedNameNode(convention,name),IR.string(INJECT_PROPERTY_NAME)),dependenciesArray));
    Node target=entry.getTarget();
    target.getParent().addChildAfter(statement,target);
    codeChanged=true;
  }
  if (codeChanged) {
    compiler.reportCodeChange();
  }
}
