{
  NodeTraversal.traverseEs6(compiler,scriptRoot,this);
  boolean codeChanged=false;
  for (  NodeContext entry : injectables) {
    String name=entry.getName();
    Node fn=entry.getFunctionNode();
    List<Node> dependencies=createDependenciesList(fn);
    if (dependencies.isEmpty()) {
      continue;
    }
    Node dependenciesArray=IR.arraylit(dependencies.toArray(new Node[0]));
    Node statement=IR.exprResult(IR.assign(IR.getelem(NodeUtil.newQName(compiler,name),IR.string(INJECT_PROPERTY_NAME)),dependenciesArray));
    statement.useSourceInfoFromForTree(entry.getNode());
    statement.setOriginalName(name);
    JSDocInfoBuilder newPropertyDoc=new JSDocInfoBuilder(false);
    newPropertyDoc.recordVisibility(Visibility.PUBLIC);
    statement.getFirstChild().setJSDocInfo(newPropertyDoc.build());
    Node insertionPoint=entry.getTarget();
    Node next=insertionPoint.getNext();
    while (next != null && NodeUtil.isExprCall(next) && compiler.getCodingConvention().getClassesDefinedByCall(next.getFirstChild()) != null) {
      insertionPoint=next;
      next=insertionPoint.getNext();
    }
    insertionPoint.getParent().addChildAfter(statement,insertionPoint);
    codeChanged=true;
  }
  if (codeChanged) {
    compiler.reportCodeChange();
  }
}
