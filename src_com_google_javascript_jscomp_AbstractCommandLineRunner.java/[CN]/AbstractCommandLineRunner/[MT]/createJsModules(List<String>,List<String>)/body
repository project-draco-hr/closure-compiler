{
  if (isInTestMode()) {
    return modulesSupplierForTesting.get();
  }
  Preconditions.checkState(specs != null);
  Preconditions.checkState(!specs.isEmpty());
  Preconditions.checkState(jsFiles != null);
  List<String> moduleNames=new ArrayList<>(specs.size());
  Map<String,JSModule> modulesByName=new LinkedHashMap<>();
  Map<String,Integer> modulesFileCountMap=new LinkedHashMap<>();
  int numJsFilesExpected=0, minJsFilesRequired=0;
  boolean isFirstModule=true;
  for (  String spec : specs) {
    String[] parts=spec.split(":");
    if (parts.length < 2 || parts.length > 4) {
      throw new FlagUsageException("Expected 2-4 colon-delimited parts in " + "module spec: " + spec);
    }
    String name=parts[0];
    checkModuleName(name);
    if (modulesByName.containsKey(name)) {
      throw new FlagUsageException("Duplicate module name: " + name);
    }
    JSModule module=new JSModule(name);
    if (parts.length > 2) {
      String depList=parts[2];
      if (depList.length() > 0) {
        String[] deps=depList.split(",");
        for (        String dep : deps) {
          JSModule other=modulesByName.get(dep);
          if (other == null) {
            throw new FlagUsageException("Module '" + name + "' depends on unknown module '"+ dep+ "'. Be sure to list modules in dependency order.");
          }
          module.addDependency(other);
        }
      }
    }
    int numJsFiles=-1;
    try {
      numJsFiles=Integer.parseInt(parts[1]);
    }
 catch (    NumberFormatException ignored) {
      numJsFiles=-1;
    }
    if (numJsFiles < 0) {
      if (parts.length == 2 && "auto".equals(parts[1])) {
        if (isFirstModule) {
          numJsFilesExpected=-1;
        }
 else {
          throw new FlagUsageException("Invalid JS file count '" + parts[1] + "' for module: "+ name+ ". Only the first module may specify "+ "a size of 'auto' and it must have no dependencies.");
        }
      }
 else {
        throw new FlagUsageException("Invalid JS file count '" + parts[1] + "' for module: "+ name);
      }
    }
 else {
      minJsFilesRequired+=numJsFiles;
    }
    if (numJsFilesExpected >= 0) {
      numJsFilesExpected+=numJsFiles;
    }
    moduleNames.add(0,name);
    modulesFileCountMap.put(name,numJsFiles);
    modulesByName.put(name,module);
  }
  final int totalNumJsFiles=jsFiles.size();
  if (numJsFilesExpected >= 0 || minJsFilesRequired > totalNumJsFiles) {
    if (minJsFilesRequired > totalNumJsFiles) {
      numJsFilesExpected=minJsFilesRequired;
    }
    if (numJsFilesExpected > totalNumJsFiles) {
      throw new FlagUsageException("Not enough JS files specified. Expected " + numJsFilesExpected + " but found "+ totalNumJsFiles);
    }
 else     if (numJsFilesExpected < totalNumJsFiles) {
      throw new FlagUsageException("Too many JS files specified. Expected " + numJsFilesExpected + " but found "+ totalNumJsFiles);
    }
  }
  int numJsFilesLeft=totalNumJsFiles, moduleIndex=0;
  for (  String moduleName : moduleNames) {
    int numJsFiles=modulesFileCountMap.get(moduleName);
    JSModule module=modulesByName.get(moduleName);
    if (moduleIndex == moduleNames.size() - 1 && numJsFiles == -1) {
      numJsFiles=numJsFilesLeft;
    }
    List<String> moduleJsFiles=jsFiles.subList(numJsFilesLeft - numJsFiles,numJsFilesLeft);
    for (    SourceFile input : createInputs(moduleJsFiles,false)) {
      module.add(input);
    }
    numJsFilesLeft-=numJsFiles;
    moduleIndex++;
  }
  return new ArrayList<>(modulesByName.values());
}
