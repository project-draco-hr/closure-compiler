{
  if (config.computePhaseOrdering) {
    return 0;
  }
  if (config.printPassGraph) {
    if (compiler.getRoot() == null) {
      return 1;
    }
 else {
      out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));
      out.println();
      return 0;
    }
  }
  if (config.printAst) {
    if (compiler.getRoot() == null) {
      return 1;
    }
 else {
      ControlFlowGraph<Node> cfg=compiler.computeCFG();
      DotFormatter.appendDot(compiler.getRoot(),cfg,out);
      out.println();
      return 0;
    }
  }
  if (config.printTree) {
    if (compiler.getRoot() == null) {
      out.println("Code contains errors; no tree was generated.");
      return 1;
    }
 else {
      compiler.getRoot().appendStringTree(out);
      out.println("");
      return 0;
    }
  }
  if (result.success) {
    if (modules == null) {
      writeOutput(out,compiler,compiler.toSource(),config.outputWrapper,config.outputWrapperMarker);
      outputSourceMap(options);
    }
 else {
      String moduleFilePrefix=config.moduleOutputPathPrefix;
      maybeCreateDirsForPath(moduleFilePrefix);
      Map<String,String> moduleWrappers=parseModuleWrappers(config.moduleWrapper,modules);
      PrintStream mapOut=null;
      if (!shouldGenerateMapPerModule(options)) {
        mapOut=toPrintStream(expandSourceMapPath(options,null));
      }
      for (      JSModule m : modules) {
        if (shouldGenerateMapPerModule(options)) {
          mapOut=toPrintStream(expandSourceMapPath(options,m));
        }
        PrintStream ps=new PrintStream(new FileOutputStream(moduleFilePrefix + m.getName() + ".js"));
        if (options.sourceMapOutputPath != null) {
          compiler.getSourceMap().reset();
        }
        writeOutput(ps,compiler,compiler.toSource(m),moduleWrappers.get(m.getName()),"%s");
        if (options.sourceMapOutputPath != null) {
          compiler.getSourceMap().appendTo(mapOut,m.getName());
        }
        ps.close();
        if (shouldGenerateMapPerModule(options) && mapOut != null) {
          mapOut.close();
          mapOut=null;
        }
      }
      if (mapOut != null) {
        mapOut.close();
      }
    }
    if (options.externExportsPath != null) {
      PrintStream eeOut=openExternExportsStream(options,options.jsOutputFile);
      eeOut.append(result.externExport);
      eeOut.close();
    }
    outputNameMaps(options);
  }
  return Math.min(result.errors.length,0x7f);
}
