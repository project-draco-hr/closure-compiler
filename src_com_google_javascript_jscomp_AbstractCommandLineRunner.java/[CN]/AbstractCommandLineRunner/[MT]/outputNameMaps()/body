{
  String propertyMapOutputPath=null;
  String variableMapOutputPath=null;
  String functionInformationMapOutputPath=null;
  if (config.createNameMapFiles) {
    String basePath=getMapPath(config.jsOutputFile);
    propertyMapOutputPath=basePath + "_props_map.out";
    variableMapOutputPath=basePath + "_vars_map.out";
    functionInformationMapOutputPath=basePath + "_functions_map.out";
  }
  if (!config.variableMapOutputFile.isEmpty()) {
    if (variableMapOutputPath != null) {
      throw new FlagUsageException("The flags variable_map_output_file and " + "create_name_map_files cannot both be used simultaniously.");
    }
    variableMapOutputPath=config.variableMapOutputFile;
  }
  if (!config.propertyMapOutputFile.isEmpty()) {
    if (propertyMapOutputPath != null) {
      throw new FlagUsageException("The flags property_map_output_file and " + "create_name_map_files cannot both be used simultaniously.");
    }
    propertyMapOutputPath=config.propertyMapOutputFile;
  }
  if (variableMapOutputPath != null && compiler.getVariableMap() != null) {
    compiler.getVariableMap().save(variableMapOutputPath);
  }
  if (propertyMapOutputPath != null && compiler.getPropertyMap() != null) {
    compiler.getPropertyMap().save(propertyMapOutputPath);
  }
  if (functionInformationMapOutputPath != null && compiler.getFunctionalInformationMap() != null) {
    try (final OutputStream file=filenameToOutputStream(functionInformationMapOutputPath)){
      CodedOutputStream outputStream=CodedOutputStream.newInstance(file);
      compiler.getFunctionalInformationMap().writeTo(outputStream);
      outputStream.flush();
    }
   }
}
