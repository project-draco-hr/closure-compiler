{
  Compiler.setLoggingLevel(Level.parse(config.loggingLevel));
  List<JSSourceFile> externs=createExterns();
  compiler=createCompiler();
  B options=createOptions();
  List<JSModule> modules=null;
  Result result;
  setRunOptions(options);
  boolean writeOutputToFile=!options.jsOutputFile.isEmpty();
  if (writeOutputToFile) {
    jsOutput=fileNameToOutputWriter(options.jsOutputFile);
  }
 else   if (jsOutput instanceof OutputStream) {
    jsOutput=streamToOutputWriter((OutputStream)jsOutput);
  }
  List<String> jsFiles=config.js;
  List<String> moduleSpecs=config.module;
  if (!moduleSpecs.isEmpty()) {
    modules=createJsModules(moduleSpecs,jsFiles);
    result=compiler.compileModules(externs,modules,options);
  }
 else {
    List<JSSourceFile> inputs=createSourceInputs(jsFiles);
    result=compiler.compile(externs,inputs,options);
  }
  int errCode=processResults(result,modules,options);
  if (jsOutput instanceof Flushable) {
    ((Flushable)jsOutput).flush();
  }
  return errCode;
}
