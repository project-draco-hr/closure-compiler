{
  if (config.printPassGraph) {
    if (compiler.getRoot() == null) {
      return 1;
    }
 else {
      Appendable jsOutput=createDefaultOutput();
      jsOutput.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));
      jsOutput.append('\n');
      closeAppendable(jsOutput);
      return 0;
    }
  }
  if (config.printAst) {
    if (compiler.getRoot() == null) {
      return 1;
    }
 else {
      Appendable jsOutput=createDefaultOutput();
      ControlFlowGraph<Node> cfg=compiler.computeCFG();
      DotFormatter.appendDot(compiler.getRoot().getLastChild(),cfg,jsOutput);
      jsOutput.append('\n');
      closeAppendable(jsOutput);
      return 0;
    }
  }
  if (config.printTree) {
    if (compiler.getRoot() == null) {
      compiler.report(JSError.make(NO_TREE_GENERATED_ERROR));
      return 1;
    }
 else {
      Appendable jsOutput=createDefaultOutput();
      compiler.getRoot().appendStringTree(jsOutput);
      jsOutput.append("\n");
      closeAppendable(jsOutput);
      return 0;
    }
  }
  rootRelativePathsMap=constructRootRelativePathsMap();
  if (config.skipNormalOutputs) {
    outputManifest();
    outputBundle();
    outputModuleGraphJson();
    return 0;
  }
 else   if (result.success) {
    outputModuleGraphJson();
    if (modules == null) {
      outputSingleBinary();
      outputSourceMap(options,config.jsOutputFile);
    }
 else {
      outputModuleBinaryAndSourceMaps(modules,options);
    }
    if (options.externExportsPath != null) {
      try (Writer eeOut=openExternExportsStream(options,config.jsOutputFile)){
        eeOut.append(result.externExport);
      }
     }
    outputNameMaps();
    outputManifest();
    outputBundle();
  }
  return Math.min(result.errors.length,0x7f);
}
