{
  ImmutableList.Builder<JSError> errors=ImmutableList.builder();
  Map<String,SourceFile> sourceFilesByName=new HashMap<>();
  Iterator<SourceFile> fileIterator=sourceFiles.iterator();
  int currentFileIndex=0;
  Iterator<JsModuleSpec> moduleIterator=jsModuleSpecs.iterator();
  int cumulatedJsFileNum=0;
  JsModuleSpec currentModule=null;
  while (fileIterator.hasNext()) {
    SourceFile sourceFile=fileIterator.next();
    currentFileIndex++;
    if (moduleIterator.hasNext() && currentFileIndex > cumulatedJsFileNum) {
      currentModule=moduleIterator.next();
      cumulatedJsFileNum+=currentModule.numJsFiles;
    }
    String fullPath=sourceFile.getName();
    if (!fullPath.contains("!/")) {
      continue;
    }
    String relativePath=fullPath.split("!")[1];
    if (!sourceFilesByName.containsKey(relativePath)) {
      sourceFilesByName.put(relativePath,sourceFile);
    }
 else {
      SourceFile firstSourceFile=sourceFilesByName.get(relativePath);
      if (firstSourceFile.getCode().equals(sourceFile.getCode())) {
        errors.add(JSError.make(SourceFile.DUPLICATE_ZIP_CONTENTS,firstSourceFile.getName(),sourceFile.getName()));
        fileIterator.remove();
        if (currentModule != null) {
          currentModule.numJsFiles--;
        }
      }
 else {
        errors.add(JSError.make(CONFLICTING_DUPLICATE_ZIP_CONTENTS,firstSourceFile.getName(),sourceFile.getName()));
      }
    }
  }
  return errors.build();
}
