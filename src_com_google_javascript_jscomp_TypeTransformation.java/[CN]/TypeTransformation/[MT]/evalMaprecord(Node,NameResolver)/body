{
  ImmutableList<Node> params=getCallParams(ttlAst);
  JSType type=evalInternal(params.get(0),nameResolver);
  if (type.isEquivalentTo(getObjectType())) {
    return getObjectType();
  }
  if (!type.isRecordType()) {
    reportWarning(params.get(0),RECTYPE_INVALID,type.toString());
    return getUnknownType();
  }
  RecordType recType=((RecordType)type);
  Set<String> ownPropsNames=recType.getOwnPropertyNames();
  Node mapFunction=params.get(1);
  String paramKey=getFunctionParameter(mapFunction,0);
  String paramValue=getFunctionParameter(mapFunction,1);
  if (nameResolver.nameVars.containsKey(paramKey)) {
    reportWarning(ttlAst,DUPLICATE_VARIABLE,paramKey);
    return getUnknownType();
  }
  if (nameResolver.typeVars.containsKey(paramValue)) {
    reportWarning(ttlAst,DUPLICATE_VARIABLE,paramValue);
    return getUnknownType();
  }
  Node mapFnBody=getFunctionBody(mapFunction);
  Map<String,JSType> newProps=new LinkedHashMap<>();
  for (  String propName : ownPropsNames) {
    JSType propValue=recType.getSlot(propName).getType();
    NameResolver newNameResolver=new NameResolver(addNewEntry(nameResolver.typeVars,paramValue,propValue),addNewEntry(nameResolver.nameVars,paramKey,propName));
    JSType body=evalInternal(mapFnBody,newNameResolver);
    if (body.isUnknownType()) {
      return getUnknownType();
    }
    if (body.isNoType() || body.isEquivalentTo(getObjectType())) {
      continue;
    }
    if (!body.isRecordType()) {
      reportWarning(ttlAst,MAPRECORD_BODY_INVALID,body.toString());
      return getUnknownType();
    }
    RecordType bodyAsRecType=((RecordType)body);
    for (    String newPropName : bodyAsRecType.getOwnPropertyNames()) {
      JSType newPropValue=bodyAsRecType.getSlot(newPropName).getType();
      putNewPropInPropertyMap(newProps,newPropName,newPropValue);
    }
  }
  return createRecordType(ImmutableMap.copyOf(newProps));
}
