{
  if (typeNode.isString()) {
    String name=typeNode.getString();
    if (ModuleLoader.isRelativeIdentifier(name) || ModuleLoader.isAbsoluteIdentifier(name)) {
      int lastSlash=name.lastIndexOf('/');
      int endIndex=name.indexOf('.',lastSlash);
      String localTypeName=null;
      if (endIndex == -1) {
        endIndex=name.length();
      }
 else {
        localTypeName=name.substring(endIndex);
      }
      String moduleName=name.substring(0,endIndex);
      ModuleUri moduleUri=t.getInput().getUri().resolveCommonJsModule(moduleName);
      if (moduleUri == null) {
        t.makeError(typeNode,LOAD_ERROR,moduleName);
        return;
      }
      String globalModuleName=moduleUri.toModuleName();
      typeNode.setString(localTypeName == null ? globalModuleName : globalModuleName + localTypeName);
    }
 else     if (fullRewrite) {
      int endIndex=name.indexOf('.');
      if (endIndex == -1) {
        endIndex=name.length();
      }
      String baseName=name.substring(0,endIndex);
      Var var=t.getScope().getVar(baseName);
      if (var != null && var.isGlobal()) {
        typeNode.setString(baseName + "$$" + suffix+ name.substring(endIndex));
        typeNode.setOriginalName(name);
      }
    }
  }
  for (Node child=typeNode.getFirstChild(); child != null; child=child.getNext()) {
    fixTypeNode(t,child);
  }
}
