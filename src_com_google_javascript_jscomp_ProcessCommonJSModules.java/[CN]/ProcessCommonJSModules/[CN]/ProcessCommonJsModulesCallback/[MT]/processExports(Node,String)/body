{
  if (hasOneTopLevelModuleExportAssign()) {
    Node ref=moduleExportRefs.get(0);
    Node newName=IR.name(moduleName).srcref(ref);
    newName.putProp(Node.ORIGINALNAME_PROP,ref.getQualifiedName());
    Node rhsValue=ref.getNext();
    if (rhsValue.isObjectLit()) {
      addConstToObjLitKeys(rhsValue);
    }
    Node assign=ref.getParent();
    assign.replaceChild(ref,newName);
    JSDocInfoBuilder builder=new JSDocInfoBuilder(true);
    builder.recordConstancy();
    JSDocInfo info=builder.build();
    assign.setJSDocInfo(info);
    return;
  }
  Iterable<Node> exports;
  boolean hasLValues=hasExportLValues();
  if (hasLValues) {
    exports=moduleExportRefs;
  }
 else {
    exports=Iterables.concat(moduleExportRefs,exportRefs);
  }
  boolean declaredModuleExports=false;
  for (  Node ref : exports) {
    if (ref.getParent().isAssign() && !ref.getParent().getParent().isExprResult() && !declaredModuleExports) {
      script.addChildToFront(IR.var(IR.name(moduleName)).useSourceInfoIfMissingFromForTree(ref));
      declaredModuleExports=true;
    }
    String qName=null;
    if (ref.isQualifiedName()) {
      Node baseName=getBaseQualifiedNameNode(ref);
      if (baseName != null) {
        qName=baseName.getQualifiedName();
        if (qName.startsWith("module.exports.")) {
          qName=qName.substring("module.exports.".length());
        }
 else {
          qName=qName.substring("exports.".length());
        }
      }
    }
    Node rhsValue=ref.getNext();
    Node newName=IR.name(moduleName).srcref(ref);
    newName.putProp(Node.ORIGINALNAME_PROP,qName);
    Node parent=ref.getParent();
    parent.replaceChild(ref,newName);
    if (parent.isAssign() && qName != null && propertyExportRefCount.containsKey(qName) && propertyExportRefCount.get(qName) == 1) {
      if (rhsValue != null && rhsValue.isObjectLit()) {
        addConstToObjLitKeys(rhsValue);
      }
      JSDocInfoBuilder builder=new JSDocInfoBuilder(true);
      builder.recordConstancy();
      JSDocInfo info=builder.build();
      parent.setJSDocInfo(info);
    }
  }
  if (!hasLValues) {
    return;
  }
  if (!exportRefs.isEmpty()) {
    String aliasName="exports$$" + moduleName;
    Node aliasNode=IR.var(IR.name(aliasName),IR.name(moduleName)).useSourceInfoIfMissingFromForTree(script);
    script.addChildToFront(aliasNode);
    for (    Node ref : exportRefs) {
      ref.putProp(Node.ORIGINALNAME_PROP,ref.getString());
      ref.setString(aliasName);
    }
  }
}
