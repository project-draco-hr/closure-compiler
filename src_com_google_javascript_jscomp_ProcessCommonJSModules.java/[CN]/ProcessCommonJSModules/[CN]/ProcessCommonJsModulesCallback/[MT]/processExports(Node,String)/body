{
  if (hasOneTopLevelModuleExportAssign()) {
    Node ref=moduleExportRefs.get(0);
    Node newName=IR.name(moduleName);
    newName.putProp(Node.ORIGINALNAME_PROP,ref.getQualifiedName());
    Node rhsValue=ref.getNext().detachFromParent();
    Node newExprResult=IR.exprResult(IR.assign(newName,rhsValue).useSourceInfoIfMissingFromForTree(ref.getParent()));
    if (rhsValue.isObjectLit()) {
      Scope globalScope=SyntacticScopeCreator.makeUntyped(compiler).createScope(script,null);
      for (Node key=rhsValue.getFirstChild(); key != null; key=key.getNext()) {
        if (key.getJSDocInfo() == null && (key.getFirstChild() == null || key.getFirstChild().isName())) {
          String aliasedVarName=key.getFirstChild() == null ? key.getString() : key.getFirstChild().getString();
          Var aliasedVar=globalScope.getVar(aliasedVarName);
          JSDocInfo info=aliasedVar == null ? null : aliasedVar.getJSDocInfo();
          if (info != null && info.getVisibility() != JSDocInfo.Visibility.PRIVATE) {
            key.setJSDocInfo(info);
          }
        }
      }
    }
    Node assign=ref.getParent();
    Node exprResult=assign.getParent();
    script.replaceChild(exprResult,newExprResult);
    return;
  }
  if (!hasExportLValues()) {
    for (    Node ref : Iterables.concat(moduleExportRefs,exportRefs)) {
      Node newRef=IR.name(moduleName).useSourceInfoIfMissingFrom(ref);
      newRef.putProp(Node.ORIGINALNAME_PROP,ref.getQualifiedName());
      ref.getParent().replaceChild(ref,newRef);
    }
    return;
  }
  boolean declaredModuleExports=false;
  for (  Node ref : moduleExportRefs) {
    if (ref.getParent().isAssign() && !ref.getParent().getParent().isExprResult() && !declaredModuleExports) {
      script.addChildToFront(IR.var(IR.name(moduleName)).useSourceInfoIfMissingFromForTree(ref));
      declaredModuleExports=true;
    }
    Node newRef=IR.name(moduleName).useSourceInfoIfMissingFrom(ref);
    ref.getParent().replaceChild(ref,newRef);
  }
  if (!exportRefs.isEmpty()) {
    String aliasName="exports$$" + moduleName;
    Node aliasNode=IR.var(IR.name(aliasName),IR.name(moduleName)).useSourceInfoIfMissingFromForTree(script);
    script.addChildToFront(aliasNode);
    for (    Node ref : exportRefs) {
      ref.putProp(Node.ORIGINALNAME_PROP,ref.getString());
      ref.setString(aliasName);
    }
  }
}
