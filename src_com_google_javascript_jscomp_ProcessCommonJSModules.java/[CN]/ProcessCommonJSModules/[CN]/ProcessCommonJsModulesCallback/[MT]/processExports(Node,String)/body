{
  if (hasOneTopLevelModuleExportAssign()) {
    Node ref=moduleExportRefs.get(0);
    Node newName=IR.name(moduleName);
    newName.putProp(Node.ORIGINALNAME_PROP,ref.getQualifiedName());
    Node newVar=IR.var(newName).copyInformationFromForTree(ref.getParent());
    Node rhsValue=ref.getNext().detachFromParent();
    newVar.getFirstChild().addChildToFront(rhsValue);
    newVar.setJSDocInfo(NodeUtil.createConstantJsDoc());
    if (rhsValue.isObjectLit()) {
      Scope globalScope=SyntacticScopeCreator.makeUntyped(compiler).createScope(script,null);
      for (Node key=rhsValue.getFirstChild(); key != null; key=key.getNext()) {
        if (key.getJSDocInfo() == null && key.getFirstChild().isName()) {
          Var aliasedVar=globalScope.getVar(key.getFirstChild().getString());
          JSDocInfo info=aliasedVar == null ? null : aliasedVar.getJSDocInfo();
          if (info != null && info.getVisibility() != JSDocInfo.Visibility.PRIVATE) {
            key.setJSDocInfo(info);
          }
        }
      }
    }
    Node assign=ref.getParent();
    Node exprResult=assign.getParent();
    script.replaceChild(exprResult,newVar);
    return;
  }
  if (!hasExportLValues()) {
    Node newVar=injectExportsObject(script,moduleName);
    newVar.setJSDocInfo(NodeUtil.createConstantJsDoc());
    for (    Node ref : Iterables.concat(moduleExportRefs,exportRefs)) {
      Node newRef=IR.name(moduleName).copyInformationFrom(ref);
      newRef.putProp(Node.ORIGINALNAME_PROP,ref.getQualifiedName());
      ref.getParent().replaceChild(ref,newRef);
    }
    return;
  }
  Node exportsNode=injectExportsObject(script,moduleName);
  for (  Node ref : moduleExportRefs) {
    Node newRef=IR.name(moduleName).copyInformationFrom(ref);
    ref.getParent().replaceChild(ref,newRef);
  }
  if (!exportRefs.isEmpty()) {
    String aliasName="exports$$" + moduleName;
    Node aliasNode=IR.var(IR.name(aliasName),IR.name(moduleName)).copyInformationFromForTree(script);
    script.addChildAfter(aliasNode,exportsNode);
    for (    Node ref : exportRefs) {
      ref.putProp(Node.ORIGINALNAME_PROP,ref.getString());
      ref.setString(aliasName);
    }
  }
}
