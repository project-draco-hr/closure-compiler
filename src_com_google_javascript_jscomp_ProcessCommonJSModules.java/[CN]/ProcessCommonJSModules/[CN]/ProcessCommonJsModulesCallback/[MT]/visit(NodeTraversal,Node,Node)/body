{
  if (n.isCall() && n.getChildCount() == 2 && n.getFirstChild().matchesQualifiedName("require") && n.getSecondChild().isString()) {
    visitRequireCall(t,n,parent);
  }
  if (n.isIf()) {
    FindModuleExportStatements commonjsFinder=new FindModuleExportStatements();
    Node condition=n.getFirstChild();
    NodeTraversal.traverseEs6(compiler,condition,commonjsFinder);
    if (commonjsFinder.isFound()) {
      visitCommonJSIfStatement(n);
    }
 else {
      FindDefineAmdStatements amdFinder=new FindDefineAmdStatements();
      NodeTraversal.traverseEs6(compiler,condition,amdFinder);
      if (amdFinder.isFound()) {
        visitAMDIfStatement(n);
      }
    }
  }
  if (n.isScript()) {
    scriptNodeCount++;
    visitScript(t,n);
  }
  if (n.isGetProp() && "module.exports".equals(n.getQualifiedName())) {
    Var v=t.getScope().getVar(MODULE);
    if (v == null) {
      moduleExportRefs.add(n);
      maybeAddReferenceCount(n);
    }
  }
  if (n.isName() && EXPORTS.equals(n.getString())) {
    Var v=t.getScope().getVar(n.getString());
    if (v == null || v.isGlobal()) {
      exportRefs.add(n);
      maybeAddReferenceCount(n);
    }
  }
}
