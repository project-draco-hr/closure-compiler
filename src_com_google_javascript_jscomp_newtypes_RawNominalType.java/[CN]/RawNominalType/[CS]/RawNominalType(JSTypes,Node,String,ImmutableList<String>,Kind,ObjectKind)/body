{
  super(commonTypes,name,defSite);
  Preconditions.checkNotNull(objectKind);
  Preconditions.checkState(isValidDefsite(defSite),"Invalid defsite %s",defSite);
  if (typeParameters == null) {
    typeParameters=ImmutableList.of();
  }
  this.typeParameters=typeParameters;
  this.kind=isBuiltinHelper(name,"IObject",defSite) ? Kind.RECORD : kind;
  this.objectKind=isBuiltinHelper(name,"IObject",defSite) ? ObjectKind.UNRESTRICTED : objectKind;
  this.wrappedAsNominal=new NominalType(ImmutableMap.<String,JSType>of(),this);
  ObjectType objInstance;
  if (isBuiltinHelper(name,"Function",defSite)) {
    objInstance=ObjectType.fromFunction(this.commonTypes.TOP_FUNCTION,this.wrappedAsNominal);
  }
 else   if (isBuiltinHelper(name,"Object",defSite)) {
    objInstance=this.commonTypes.TOP_OBJECTTYPE;
  }
 else {
    objInstance=ObjectType.fromNominalType(this.wrappedAsNominal);
  }
  this.wrappedAsJSType=JSType.fromObjectType(objInstance);
  this.wrappedAsNullableJSType=JSType.join(this.commonTypes.NULL,this.wrappedAsJSType);
}
