{
  super(commonTypes,name);
  Preconditions.checkNotNull(objectKind);
  Preconditions.checkState(defSite == null || defSite.isFunction() || defSite.isCall(),"Expected function or call but found %s",defSite.getType());
  if (typeParameters == null) {
    typeParameters=ImmutableList.of();
  }
  this.defSite=defSite;
  this.typeParameters=typeParameters;
  this.kind=kind;
  this.objectKind=isBuiltinHelper(name,"IObject",defSite) ? ObjectKind.UNRESTRICTED : objectKind;
  this.wrappedAsNominal=new NominalType(ImmutableMap.<String,JSType>of(),this);
  ObjectType objInstance;
  if (isBuiltinHelper(name,"Function",defSite)) {
    objInstance=ObjectType.fromFunction(FunctionType.TOP_FUNCTION,this.wrappedAsNominal);
  }
 else   if (isBuiltinHelper(name,"Object",defSite)) {
    objInstance=ObjectType.TOP_OBJECT;
  }
 else {
    objInstance=ObjectType.fromNominalType(this.wrappedAsNominal);
  }
  this.wrappedAsJSType=JSType.fromObjectType(objInstance);
  this.wrappedAsNullableJSType=JSType.join(JSType.NULL,this.wrappedAsJSType);
}
