{
  StringBuffer result=new StringBuffer(60);
  double local=LocalTime(t);
  if (methodId != Id_toTimeString) {
    appendWeekDayName(result,WeekDay(local));
    result.append(' ');
    appendMonthName(result,MonthFromTime(local));
    result.append(' ');
    append0PaddedUint(result,DateFromTime(local),2);
    result.append(' ');
    int year=YearFromTime(local);
    if (year < 0) {
      result.append('-');
      year=-year;
    }
    append0PaddedUint(result,year,4);
    if (methodId != Id_toDateString)     result.append(' ');
  }
  if (methodId != Id_toDateString) {
    append0PaddedUint(result,HourFromTime(local),2);
    result.append(':');
    append0PaddedUint(result,MinFromTime(local),2);
    result.append(':');
    append0PaddedUint(result,SecFromTime(local),2);
    int minutes=(int)Math.floor((LocalTZA + DaylightSavingTA(t)) / msPerMinute);
    int offset=(minutes / 60) * 100 + minutes % 60;
    if (offset > 0) {
      result.append(" GMT+");
    }
 else {
      result.append(" GMT-");
      offset=-offset;
    }
    append0PaddedUint(result,offset,4);
    if (timeZoneFormatter == null)     timeZoneFormatter=new SimpleDateFormat("zzz");
    if (t < 0.0 || t > 2145916800000.0) {
      int equiv=EquivalentYear(YearFromTime(local));
      double day=MakeDay(equiv,MonthFromTime(t),DateFromTime(t));
      t=MakeDate(day,TimeWithinDay(t));
    }
    result.append(" (");
    Date date=new Date((long)t);
synchronized (timeZoneFormatter) {
      result.append(timeZoneFormatter.format(date));
    }
    result.append(')');
  }
  return result.toString();
}
