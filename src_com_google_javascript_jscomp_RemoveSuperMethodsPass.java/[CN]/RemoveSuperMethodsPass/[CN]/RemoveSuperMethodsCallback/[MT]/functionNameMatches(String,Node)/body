{
  String callName=call.getFirstChild().getQualifiedName();
  if (callName == null) {
    return false;
  }
  String[] methodNameSplitted=enclosingMethodName.split(PROTOTYPE_MARKER);
  if (methodNameSplitted.length != 2) {
    return false;
  }
  String enclosingClassName=methodNameSplitted[0];
  String shortMethodNameConcatedWithCall=methodNameSplitted[1].concat(".call");
  String[] callNameSplittedBySuperClassMarker=callName.split(SUPERCLASS_MARKER);
  if (callNameSplittedBySuperClassMarker.length == 2 && callNameSplittedBySuperClassMarker[0].equals(enclosingClassName) && callNameSplittedBySuperClassMarker[1].equals(shortMethodNameConcatedWithCall)) {
    return true;
  }
  String[] callNameSplittedByPrototypeMarker=callName.split(PROTOTYPE_MARKER);
  if (callNameSplittedByPrototypeMarker.length != 2 || !callNameSplittedByPrototypeMarker[1].equals(shortMethodNameConcatedWithCall)) {
    return false;
  }
  String calledClass=callNameSplittedByPrototypeMarker[0];
  JSType subclassType=compiler.getTypeIRegistry().getType(enclosingClassName);
  JSType calledClassType=compiler.getTypeIRegistry().getType(calledClass);
  if (subclassType == null || calledClassType == null) {
    return false;
  }
  if (subclassType.toObjectType() == null || subclassType.toObjectType().getConstructor() == null) {
    return false;
  }
  FunctionType superClassConstructor=subclassType.toObjectType().getConstructor().getSuperClassConstructor();
  if (superClassConstructor == null) {
    return false;
  }
  return superClassConstructor.getInstanceType().equals(calledClassType);
}
