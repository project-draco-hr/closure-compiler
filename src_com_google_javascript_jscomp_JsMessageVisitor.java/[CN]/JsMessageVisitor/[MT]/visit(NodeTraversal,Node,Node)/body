{
  String messageKey;
  boolean isVar;
  Node msgNode, msgNodeParent;
switch (node.getType()) {
case Token.NAME:
    if ((parent != null) && (parent.isVar())) {
      messageKey=node.getString();
      isVar=true;
    }
 else {
      return;
    }
  msgNode=node.getFirstChild();
msgNodeParent=node;
break;
case Token.ASSIGN:
isVar=false;
Node getProp=node.getFirstChild();
if (!getProp.isGetProp()) {
return;
}
Node propNode=getProp.getLastChild();
messageKey=propNode.getString();
msgNode=node.getLastChild();
msgNodeParent=node;
break;
case Token.CALL:
if (MSG_FUNCTION_NAME.equals(node.getFirstChild().getQualifiedName())) {
googMsgNodes.put(node,traversal.getSourceName());
}
return;
default :
return;
}
boolean isNewStyleMessage=msgNode != null && msgNode.isCall();
if (!isMessageName(messageKey,isNewStyleMessage)) {
return;
}
if (msgNode == null) {
compiler.report(traversal.makeError(node,MESSAGE_HAS_NO_VALUE,messageKey));
return;
}
if (isNewStyleMessage) {
googMsgNodes.remove(msgNode);
}
 else if (style != JsMessage.Style.LEGACY) {
compiler.report(traversal.makeError(node,checkLevel,MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX));
}
boolean isUnnamedMsg=isUnnamedMessageName(messageKey);
Builder builder=new Builder(isUnnamedMsg ? null : messageKey);
builder.setSourceName(traversal.getSourceName());
try {
if (isVar) {
extractMessageFromVariable(builder,node,parent,parent.getParent());
}
 else {
extractMessageFromProperty(builder,node.getFirstChild(),node);
}
}
 catch (MalformedException ex) {
compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
return;
}
JsMessage extractedMessage=builder.build(idGenerator);
if (needToCheckDuplications && !isUnnamedMsg && !extractedMessage.isExternal()) {
checkIfMessageDuplicated(traversal.getSourceName(),messageKey,msgNode);
}
if (extractedMessage.isEmpty()) {
compiler.report(traversal.makeError(node,MESSAGE_HAS_NO_TEXT,messageKey));
}
String desc=extractedMessage.getDesc();
if (isNewStyleMessage && (desc == null || desc.trim().isEmpty()) && !extractedMessage.isExternal()) {
compiler.report(traversal.makeError(node,MESSAGE_HAS_NO_DESCRIPTION,messageKey));
}
JsMessageDefinition msgDefinition=new JsMessageDefinition(node,msgNode,msgNodeParent);
processJsMessage(extractedMessage,msgDefinition);
}
