{
  String messageKey;
  String originalMessageKey;
  boolean isVar;
  Node msgNode;
switch (node.getType()) {
case NAME:
    if ((parent != null) && (NodeUtil.isNameDeclaration(parent))) {
      messageKey=node.getString();
      originalMessageKey=node.getOriginalName();
      isVar=true;
    }
 else {
      return;
    }
  msgNode=node.getFirstChild();
break;
case ASSIGN:
isVar=false;
Node getProp=node.getFirstChild();
if (!getProp.isGetProp()) {
return;
}
Node propNode=getProp.getLastChild();
messageKey=propNode.getString();
originalMessageKey=getProp.getOriginalName();
msgNode=node.getLastChild();
break;
case STRING_KEY:
if (node.isQuotedString() || node.getFirstChild() == null) {
return;
}
isVar=false;
messageKey=node.getString();
originalMessageKey=node.getOriginalName();
msgNode=node.getFirstChild();
break;
case CALL:
if (node.getFirstChild().matchesQualifiedName(MSG_FUNCTION_NAME)) {
googMsgNodes.add(node);
}
 else if (node.getFirstChild().matchesQualifiedName(MSG_FALLBACK_FUNCTION_NAME)) {
visitFallbackFunctionCall(traversal,node);
}
return;
default :
return;
}
if (originalMessageKey != null) {
messageKey=originalMessageKey;
}
boolean isNewStyleMessage=msgNode != null && msgNode.isCall();
if (!isMessageName(messageKey,isNewStyleMessage)) {
return;
}
if (msgNode == null) {
compiler.report(traversal.makeError(node,MESSAGE_HAS_NO_VALUE,messageKey));
return;
}
if (node.isAssign() && msgNode.isQualifiedName() && msgNode.getLastChild().getString().equals(messageKey)) {
return;
}
if (isNewStyleMessage) {
googMsgNodes.remove(msgNode);
}
 else if (style != JsMessage.Style.LEGACY) {
compiler.report(traversal.makeError(node,MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX));
if (style == JsMessage.Style.CLOSURE) {
return;
}
}
boolean isUnnamedMsg=isUnnamedMessageName(messageKey);
Builder builder=new Builder(isUnnamedMsg ? null : messageKey);
OriginalMapping mapping=compiler.getSourceMapping(traversal.getSourceName(),traversal.getLineNumber(),traversal.getCharno());
if (mapping != null) {
builder.setSourceName(mapping.getOriginalFile());
}
 else {
builder.setSourceName(traversal.getSourceName());
}
try {
if (isVar) {
extractMessageFromVariable(builder,node,parent,parent.getParent());
}
 else {
extractMessageFrom(builder,msgNode,node);
}
}
 catch (MalformedException ex) {
compiler.report(traversal.makeError(ex.getNode(),MESSAGE_TREE_MALFORMED,ex.getMessage()));
return;
}
JsMessage extractedMessage=builder.build(idGenerator);
if (needToCheckDuplications && !isUnnamedMsg && !extractedMessage.isExternal()) {
checkIfMessageDuplicated(messageKey,msgNode);
}
trackMessage(traversal,extractedMessage,messageKey,msgNode,isUnnamedMsg);
if (extractedMessage.isEmpty()) {
compiler.report(traversal.makeError(node,MESSAGE_HAS_NO_TEXT,messageKey));
}
String desc=extractedMessage.getDesc();
if (isNewStyleMessage && (desc == null || desc.trim().isEmpty()) && !extractedMessage.isExternal()) {
compiler.report(traversal.makeError(node,MESSAGE_HAS_NO_DESCRIPTION,messageKey));
}
JsMessageDefinition msgDefinition=new JsMessageDefinition(msgNode);
processJsMessage(extractedMessage,msgDefinition);
}
