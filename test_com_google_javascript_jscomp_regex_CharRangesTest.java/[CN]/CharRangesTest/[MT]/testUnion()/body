{
  CharRanges a=CharRanges.withRanges(0x03,0x0C,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1C,0x1D,0x1E,0x21,0x24,0x27,0x28,0x29,0x2A,0x2B);
  CharRanges b=CharRanges.withRanges(0x01,0x04,0x06,0x09,0x0B,0x0E,0x0F,0x12,0x1A,0x1B,0x1C,0x1D,0x21,0x24);
  CharRanges empty=CharRanges.withMembers();
  assertEquals(empty,empty.union(empty));
  assertEquals(a,a.union(empty));
  assertEquals(b,empty.union(b));
  CharRanges aUb=a.union(b);
  assertEquals("[0x1-0xd 0xf-0x12 0x14 0x16 0x18 0x1a 0x1c 0x1e-0x26 0x28 0x2a]",aUb.toString());
  assertEquals(aUb,b.union(a));
  assertTrue(aUb.containsAll(a));
  assertTrue(aUb.containsAll(b));
  assertFalse(a.containsAll(b));
  assertFalse(b.containsAll(a));
  assertTrue(a.containsAll(a));
  assertTrue(b.containsAll(b));
  assertTrue(aUb.containsAll(aUb));
  assertEquals("[0x3-0xb 0x12 0x14 0x16 0x18 0x1c 0x1e-0x20 0x24-0x26 0x28 0x2a]",a.toString());
  assertEquals("[0x1-0x3 0x6-0x8 0xb-0xd 0xf-0x11 0x1a 0x1c 0x21-0x23]",b.toString());
}
