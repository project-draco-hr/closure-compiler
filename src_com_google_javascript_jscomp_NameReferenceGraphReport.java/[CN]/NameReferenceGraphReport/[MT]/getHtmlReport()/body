{
  StringBuilder builder=new StringBuilder();
  List<DiGraphNode<Name,Reference>> nodes=new ArrayList<>();
  Iterables.addAll(nodes,graph.getDirectedGraphNodes());
  generateHtmlReportHeader(builder);
  builder.append("<h1>Name Reference Graph Dump</h1>\n");
  builder.append("OVERALL STATS\n");
  builder.append("<ul>\n");
  builder.append("<li>Total names: " + nodes.size());
  builder.append("</ul>\n");
  builder.append("ALL NAMES\n");
  builder.append("<UL>\n");
  Collections.sort(nodes,new DiGraphNodeComparator());
  for (  DiGraphNode<Name,Reference> n : nodes) {
    generateDeclarationReport(builder,n);
    List<DiGraphEdge<Name,Reference>> outEdges=graph.getOutEdges(n.getValue());
    List<DiGraphEdge<Name,Reference>> inEdges=graph.getInEdges(n.getValue());
    if (!outEdges.isEmpty() || !inEdges.isEmpty()) {
      builder.append("<ul>");
      if (!outEdges.isEmpty()) {
        builder.append("<li>REFERS TO:<br>\n");
        builder.append("<ul>");
        for (        DiGraphEdge<Name,Reference> edge : outEdges) {
          generateEdgeReport(builder,edge.getDestination().getValue(),edge);
        }
        builder.append("</ul>\n");
      }
      if (!inEdges.isEmpty()) {
        builder.append("<li>REFERENCED BY:<br>\n");
        builder.append("<ul>");
        for (        DiGraphEdge<Name,Reference> edge : inEdges) {
          generateEdgeReport(builder,edge.getSource().getValue(),edge);
        }
        builder.append("</ul>");
      }
      builder.append("</ul>\n");
    }
  }
  builder.append("</ul>\n");
  generateHtmlReportFooter(builder);
  return builder.toString();
}
