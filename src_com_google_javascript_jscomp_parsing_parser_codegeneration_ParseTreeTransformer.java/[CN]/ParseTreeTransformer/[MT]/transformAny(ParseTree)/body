{
  if (tree == null) {
    return null;
  }
switch (tree.type) {
case ARGUMENT_LIST:
    return transform(tree.asArgumentList());
case ARRAY_LITERAL_EXPRESSION:
  return transform(tree.asArrayLiteralExpression());
case ARRAY_PATTERN:
return transform(tree.asArrayPattern());
case BINARY_OPERATOR:
return transform(tree.asBinaryOperator());
case BLOCK:
return transform(tree.asBlock());
case BREAK_STATEMENT:
return transform(tree.asBreakStatement());
case CALL_EXPRESSION:
return transform(tree.asCallExpression());
case CASE_CLAUSE:
return transform(tree.asCaseClause());
case CATCH:
return transform(tree.asCatch());
case CLASS_DECLARATION:
return transform(tree.asClassDeclaration());
case CLASS_EXPRESSION:
return transform(tree.asClassExpression());
case COMMA_EXPRESSION:
return transform(tree.asCommaExpression());
case CONDITIONAL_EXPRESSION:
return transform(tree.asConditionalExpression());
case CONTINUE_STATEMENT:
return transform(tree.asContinueStatement());
case DEBUGGER_STATEMENT:
return transform(tree.asDebuggerStatement());
case DEFAULT_CLAUSE:
return transform(tree.asDefaultClause());
case DEFAULT_PARAMETER:
return transform(tree.asDefaultParameter());
case DO_WHILE_STATEMENT:
return transform(tree.asDoWhileStatement());
case EMPTY_STATEMENT:
return transform(tree.asEmptyStatement());
case EXPORT_DECLARATION:
return transform(tree.asExportDeclaration());
case EXPRESSION_STATEMENT:
return transform(tree.asExpressionStatement());
case FIELD_DECLARATION:
return transform(tree.asFieldDeclaration());
case FINALLY:
return transform(tree.asFinally());
case FOR_EACH_STATEMENT:
return transform(tree.asForEachStatement());
case FOR_IN_STATEMENT:
return transform(tree.asForInStatement());
case FOR_STATEMENT:
return transform(tree.asForStatement());
case FORMAL_PARAMETER_LIST:
return transform(tree.asFormalParameterList());
case FUNCTION_DECLARATION:
return transform(tree.asFunctionDeclaration());
case GET_ACCESSOR:
return transform(tree.asGetAccessor());
case IDENTIFIER_EXPRESSION:
return transform(tree.asIdentifierExpression());
case IF_STATEMENT:
return transform(tree.asIfStatement());
case IMPORT_DECLARATION:
return transform(tree.asImportDeclaration());
case IMPORT_PATH:
return transform(tree.asImportPath());
case IMPORT_SPECIFIER:
return transform(tree.asImportSpecifier());
case LABELLED_STATEMENT:
return transform(tree.asLabelledStatement());
case LITERAL_EXPRESSION:
return transform(tree.asLiteralExpression());
case MEMBER_EXPRESSION:
return transform(tree.asMemberExpression());
case MEMBER_LOOKUP_EXPRESSION:
return transform(tree.asMemberLookupExpression());
case MISSING_PRIMARY_EXPRESSION:
return transform(tree.asMissingPrimaryExpression());
case MODULE_DEFINITION:
return transform(tree.asModuleDefinition());
case NEW_EXPRESSION:
return transform(tree.asNewExpression());
case NULL:
return transform(tree.asNull());
case OBJECT_LITERAL_EXPRESSION:
return transform(tree.asObjectLiteralExpression());
case OBJECT_PATTERN:
return transform(tree.asObjectPattern());
case OBJECT_PATTERN_FIELD:
return transform(tree.asObjectPatternField());
case PAREN_EXPRESSION:
return transform(tree.asParenExpression());
case POSTFIX_EXPRESSION:
return transform(tree.asPostfixExpression());
case PROGRAM:
return transform(tree.asProgram());
case PROPERTY_NAME_ASSIGNMENT:
return transform(tree.asPropertyNameAssignment());
case REQUIRES_MEMBER:
return transform(tree.asRequiresMember());
case REST_PARAMETER:
return transform(tree.asRestParameter());
case RETURN_STATEMENT:
return transform(tree.asReturnStatement());
case SET_ACCESSOR:
return transform(tree.asSetAccessor());
case SPREAD_EXPRESSION:
return transform(tree.asSpreadExpression());
case SPREAD_PATTERN_ELEMENT:
return transform(tree.asSpreadPatternElement());
case SUPER_EXPRESSION:
return transform(tree.asSuperExpression());
case SWITCH_STATEMENT:
return transform(tree.asSwitchStatement());
case THIS_EXPRESSION:
return transform(tree.asThisExpression());
case THROW_STATEMENT:
return transform(tree.asThrowStatement());
case TRY_STATEMENT:
return transform(tree.asTryStatement());
case UNARY_EXPRESSION:
return transform(tree.asUnaryExpression());
case VARIABLE_DECLARATION:
return transform(tree.asVariableDeclaration());
case VARIABLE_DECLARATION_LIST:
return transform(tree.asVariableDeclarationList());
case VARIABLE_STATEMENT:
return transform(tree.asVariableStatement());
case WHILE_STATEMENT:
return transform(tree.asWhileStatement());
case WITH_STATEMENT:
return transform(tree.asWithStatement());
case YIELD_STATEMENT:
return transform(tree.asYieldStatement());
default :
throw new RuntimeException("Should never get here!");
}
}
