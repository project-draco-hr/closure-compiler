{
  if (isOneTimePass()) {
    return this;
  }
  final PassFactory self=this;
  return new PassFactory(name,true){
    @Override protected CompilerPass createInternal(    AbstractCompiler compiler){
      return self.createInternal(compiler);
    }
    @Override HotSwapCompilerPass getHotSwapPass(    AbstractCompiler compiler){
      return self.getHotSwapPass(compiler);
    }
  }
;
}
