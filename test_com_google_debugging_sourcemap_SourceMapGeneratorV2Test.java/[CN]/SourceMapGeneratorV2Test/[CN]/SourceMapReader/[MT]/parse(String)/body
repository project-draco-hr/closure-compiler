{
  characterMap=null;
  mappings=null;
  sources=null;
  names=null;
  try {
    JSONObject sourceMapRoot=new JSONObject(contents);
    int version=sourceMapRoot.getInt("version");
    if (version != 2) {
      throw new SourceMapParseException("unknown version");
    }
    String file=sourceMapRoot.getString("file");
    if (file.isEmpty()) {
      throw new SourceMapParseException("file entry is missing or empty");
    }
    int lineCount=sourceMapRoot.getInt("lineCount");
    JSONArray lineMaps=sourceMapRoot.getJSONArray("lineMaps");
    if (lineCount != lineMaps.length()) {
      throw new SourceMapParseException("lineMaps lenght does not match lineCount");
    }
    characterMap=Lists.newArrayListWithCapacity(lineCount);
    for (int i=0; i < lineMaps.length(); i++) {
      String lineEntry=lineMaps.getString(i);
      List<Integer> entries=SourceMapLineDecoder.decodeLine(lineEntry);
      String msg="line: " + entries;
      System.err.println(msg);
      characterMap.add(entries);
    }
    sources=jsonArrayToJavaArray(sourceMapRoot.getJSONArray("sources"));
    if (sourceMapRoot.has("names")) {
      names=jsonArrayToJavaArray(sourceMapRoot.getJSONArray("names"));
    }
 else {
      names=Collections.emptyList();
    }
    JSONArray jsonMappings=sourceMapRoot.getJSONArray("mappings");
    mappings=Lists.newArrayListWithCapacity(lineCount);
    for (int i=0; i < jsonMappings.length(); i++) {
      JSONArray entry=jsonMappings.getJSONArray(i);
      String name;
      try {
        int nameIndex=entry.getInt(3);
        name=names.get(nameIndex);
      }
 catch (      JSONException e) {
        name=entry.optString(3,"");
      }
      OriginalMapping mapping=new OriginalMapping(sources.get(entry.getInt(0)),entry.getInt(1),entry.getInt(2),name);
      mappings.add(mapping);
    }
  }
 catch (  JSONException ex) {
    throw new SourceMapParseException("JSON parse exception",ex);
  }
}
