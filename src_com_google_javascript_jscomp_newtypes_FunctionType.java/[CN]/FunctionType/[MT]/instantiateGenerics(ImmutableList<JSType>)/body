{
  Preconditions.checkState(klass == null);
  ImmutableMap<String,JSType> concreteMapping=mapFromLists(typeParameters,concreteTypes);
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  for (  JSType reqFormal : requiredFormals) {
    builder.addReqFormal(reqFormal.substituteGenerics(concreteMapping));
  }
  for (  JSType optFormal : optionalFormals) {
    builder.addOptFormal(optFormal.substituteGenerics(concreteMapping));
  }
  builder.addRestFormals(restFormals.substituteGenerics(concreteMapping));
  builder.addRetType(returnType.substituteGenerics(concreteMapping));
  if (isLoose) {
    builder.addLoose();
  }
  for (  String var : outerVarPreconditions.keySet()) {
    builder.addOuterVarPrecondition(var,outerVarPreconditions.get(var));
  }
  return builder.buildFunction();
}
