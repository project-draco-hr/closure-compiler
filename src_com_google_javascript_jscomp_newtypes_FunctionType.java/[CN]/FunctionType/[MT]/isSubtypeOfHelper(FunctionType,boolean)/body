{
  if (other.isTopFunction() || other.isQmarkFunction() || this.isQmarkFunction()) {
    return true;
  }
  if (isTopFunction()) {
    return false;
  }
  Preconditions.checkState(!isLoose() && !other.isLoose());
  if (this.isGeneric()) {
    if (this.equals(other)) {
      return true;
    }
    return instantiateGenericsWithUnknown(this).isSubtypeOfHelper(other,checkThisType);
  }
  if (!other.acceptsAnyArguments()) {
    if (requiredFormals.size() > other.requiredFormals.size()) {
      return false;
    }
    int otherMaxTotalArity=other.requiredFormals.size() + other.optionalFormals.size();
    for (int i=0; i < otherMaxTotalArity; i++) {
      JSType thisFormal=getFormalType(i);
      JSType otherFormal=other.getFormalType(i);
      if (thisFormal != null && !thisFormal.isUnknown() && !otherFormal.isUnknown() && !otherFormal.isSubtypeOf(thisFormal)) {
        return false;
      }
    }
    if (other.restFormals != null) {
      int thisMaxTotalArity=this.requiredFormals.size() + this.optionalFormals.size();
      if (this.restFormals != null) {
        thisMaxTotalArity++;
      }
      for (int i=otherMaxTotalArity; i < thisMaxTotalArity; i++) {
        JSType thisFormal=getFormalType(i);
        JSType otherFormal=other.getFormalType(i);
        if (thisFormal != null && !thisFormal.isUnknown() && !otherFormal.isUnknown() && !otherFormal.isSubtypeOf(thisFormal)) {
          return false;
        }
      }
    }
  }
  if (this.nominalType == null && other.nominalType != null || this.nominalType != null && other.nominalType == null || this.nominalType != null && other.nominalType != null && !this.nominalType.isSubtypeOf(other.nominalType)) {
    return false;
  }
  if (checkThisType) {
    if (this.receiverType != null && other.receiverType == null || this.receiverType != null && other.receiverType != null && !other.receiverType.isSubtypeOf(this.receiverType) && !this.receiverType.isSubtypeOf(other.receiverType)) {
      return false;
    }
  }
  return returnType.isUnknown() || other.returnType.isUnknown() || returnType.isSubtypeOf(other.returnType);
}
