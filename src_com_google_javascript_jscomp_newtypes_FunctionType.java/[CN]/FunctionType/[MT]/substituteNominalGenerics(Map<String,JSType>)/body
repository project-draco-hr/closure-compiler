{
  if (typeMap.isEmpty()) {
    return this;
  }
  Map<String,JSType> reducedMap=typeMap;
  if (!JSType.MAP_TO_UNKNOWN.equals(typeMap)) {
    boolean foundShadowedTypeParam=false;
    for (    String typeParam : this.typeParameters) {
      if (typeMap.containsKey(typeParam)) {
        foundShadowedTypeParam=true;
        break;
      }
    }
    if (foundShadowedTypeParam) {
      ImmutableMap.Builder<String,JSType> builder=ImmutableMap.builder();
      for (      Map.Entry<String,JSType> entry : typeMap.entrySet()) {
        if (!typeParameters.contains(entry.getKey())) {
          builder.put(entry);
        }
      }
      reducedMap=builder.build();
    }
  }
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  for (  JSType reqFormal : this.requiredFormals) {
    builder.addReqFormal(reqFormal.substituteGenerics(reducedMap));
  }
  for (  JSType optFormal : this.optionalFormals) {
    builder.addOptFormal(optFormal.substituteGenerics(reducedMap));
  }
  if (this.restFormals != null) {
    builder.addRestFormals(restFormals.substituteGenerics(reducedMap));
  }
  builder.addRetType(this.returnType.substituteGenerics(reducedMap));
  if (isLoose()) {
    builder.addLoose();
  }
  builder.addNominalType(substGenericsInNomType(this.nominalType,typeMap));
  builder.addReceiverType(substGenericsInNomType(this.receiverType,typeMap));
  for (  String var : this.outerVarPreconditions.keySet()) {
    builder.addOuterVarPrecondition(var,this.outerVarPreconditions.get(var));
  }
  builder.addTypeParameters(this.typeParameters);
  return builder.buildFunction();
}
