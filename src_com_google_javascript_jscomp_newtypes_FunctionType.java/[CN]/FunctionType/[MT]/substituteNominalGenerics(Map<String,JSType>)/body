{
  if (typeMap.isEmpty()) {
    return this;
  }
  Map<String,JSType> reducedMap=typeMap;
  boolean foundShadowedTypeParam=false;
  for (  String typeParam : typeParameters) {
    if (typeMap.containsKey(typeParam)) {
      foundShadowedTypeParam=true;
      break;
    }
  }
  if (foundShadowedTypeParam) {
    ImmutableMap.Builder<String,JSType> builder=ImmutableMap.builder();
    for (    Map.Entry<String,JSType> entry : typeMap.entrySet()) {
      if (!typeParameters.contains(entry.getKey())) {
        builder.put(entry);
      }
    }
    reducedMap=builder.build();
  }
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  for (  JSType reqFormal : requiredFormals) {
    builder.addReqFormal(reqFormal.substituteGenerics(reducedMap));
  }
  for (  JSType optFormal : optionalFormals) {
    builder.addOptFormal(optFormal.substituteGenerics(reducedMap));
  }
  if (restFormals != null) {
    builder.addRestFormals(restFormals.substituteGenerics(reducedMap));
  }
  builder.addRetType(returnType.substituteGenerics(reducedMap));
  if (isLoose()) {
    builder.addLoose();
  }
  if (nominalType != null) {
    builder.addNominalType(nominalType.instantiateGenerics(typeMap));
  }
  if (receiverType != null) {
    builder.addReceiverType(receiverType.instantiateGenerics(typeMap));
  }
  for (  String var : outerVarPreconditions.keySet()) {
    builder.addOuterVarPrecondition(var,outerVarPreconditions.get(var));
  }
  builder.addTypeParameters(this.typeParameters);
  return builder.buildFunction();
}
