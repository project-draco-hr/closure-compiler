{
  if (other.isTopFunction()) {
    return true;
  }
  if (isTopFunction()) {
    return false;
  }
  if (this.isGeneric()) {
    return true;
  }
  Preconditions.checkState(!other.isGeneric());
  FunctionTypeBuilder builder=new FunctionTypeBuilder();
  int i=0;
  for (; i < other.requiredFormals.size(); i++) {
    JSType formalType=other.getFormalType(i);
    builder.addReqFormal(formalType.isUnknown() ? JSType.BOTTOM : formalType);
  }
  for (int j=0; j < other.optionalFormals.size(); j++) {
    JSType formalType=other.getFormalType(i + j);
    builder.addOptFormal(formalType.isUnknown() ? JSType.BOTTOM : formalType);
  }
  if (other.restFormals != null) {
    JSType formalType=other.restFormals;
    builder.addOptFormal(formalType.isUnknown() ? JSType.BOTTOM : formalType);
  }
  if (this.returnType.isUnknown()) {
    builder.addRetType(JSType.UNKNOWN);
  }
 else {
    builder.addRetType(other.returnType);
  }
  if (other.isLoose()) {
    builder.addLoose();
  }
  builder.addNominalType(other.nominalType);
  FunctionType newOther=builder.buildFunction();
  return newOther.equals(join(this,newOther));
}
