{
  Preconditions.checkState(isGeneric());
  if (argTypes.size() < getMinArity() || argTypes.size() > getMaxArity()) {
    return null;
  }
  Multimap<String,JSType> typeMultimap=LinkedHashMultimap.create();
  for (int i=0, size=argTypes.size(); i < size; i++) {
    if (!this.getFormalType(i).unifyWithSubtype(argTypes.get(i),typeParameters,typeMultimap)) {
      return null;
    }
  }
  ImmutableMap.Builder<String,JSType> builder=ImmutableMap.builder();
  for (  String typeParam : typeParameters) {
    Collection<JSType> types=typeMultimap.get(typeParam);
    if (types.size() != 1) {
      return null;
    }
    builder.put(typeParam,Iterables.getOnlyElement(types));
  }
  return substituteParametricGenerics(builder.build());
}
