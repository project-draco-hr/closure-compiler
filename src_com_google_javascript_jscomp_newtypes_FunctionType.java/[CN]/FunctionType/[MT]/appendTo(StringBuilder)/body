{
  if (this == LOOSE_TOP_FUNCTION) {
    return builder.append("LOOSE_TOP_FUNCTION");
  }
 else   if (this == TOP_FUNCTION) {
    return builder.append("TOP_FUNCTION");
  }
 else   if (this == QMARK_FUNCTION) {
    return builder.append("Function");
  }
  builder.append("function(");
  if (nominalType != null) {
    builder.append("new:");
    builder.append(nominalType);
    builder.append(',');
  }
 else   if (receiverType != null) {
    builder.append("this:");
    builder.append(receiverType);
    builder.append(',');
  }
  for (int i=0; i < requiredFormals.size(); ++i) {
    requiredFormals.get(i).appendTo(builder);
    builder.append(',');
  }
  for (int i=0; i < optionalFormals.size(); ++i) {
    optionalFormals.get(i).appendTo(builder);
    builder.append("=,");
  }
  if (restFormals != null) {
    builder.append("...");
    restFormals.appendTo(builder);
  }
  if (builder.charAt(builder.length() - 1) == ',') {
    builder.deleteCharAt(builder.length() - 1);
  }
  builder.append(')');
  if (returnType != null) {
    builder.append(':');
    returnType.appendTo(builder);
  }
  if (isLoose()) {
    builder.append(" (loose)");
  }
  if (DEBUGGING && !outerVarPreconditions.isEmpty()) {
    builder.append("\tFV: {");
    boolean firstIteration=true;
    for (    Map.Entry<String,JSType> entry : outerVarPreconditions.entrySet()) {
      if (!firstIteration) {
        builder.append(',');
      }
      builder.append(entry.getKey());
      builder.append('=');
      entry.getValue().appendTo(builder);
    }
    builder.append('}');
  }
  return builder;
}
