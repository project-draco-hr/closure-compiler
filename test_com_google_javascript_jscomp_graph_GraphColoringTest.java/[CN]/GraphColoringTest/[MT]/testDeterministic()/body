{
  Graph<String,String> graph=new LinkedUndirectedGraph<String,String>();
  graph.createNode("A");
  graph.createNode("B");
  graph.createNode("C");
  graph.createNode("D");
  graph.createNode("E");
  graph.connect("A","-->","B");
  graph.connect("B","-->","C");
  graph.connect("C","-->","D");
  graph.connect("D","-->","E");
  graph.connect("E","-->","A");
  Comparator<String> lexicographic=new Comparator<String>(){
    public int compare(    String o1,    String o2){
      return o1.toString().compareTo(o2.toString());
    }
  }
;
  GraphColoring<String,String> coloring=new GreedyGraphColoring<String,String>(graph,lexicographic);
  assertEquals(3,coloring.color());
  validateColoring(graph);
  assertEquals("A",coloring.getPartitionSuperNode("A"));
  assertEquals("A",coloring.getPartitionSuperNode("C"));
  Comparator<String> biasD=new Comparator<String>(){
    public int compare(    String o1,    String o2){
      if (o1.equals("D")) {
        return -1;
      }
 else       if (o2.equals("D")) {
        return 1;
      }
 else {
        return o1.toString().compareTo(o2.toString());
      }
    }
  }
;
  coloring=new GreedyGraphColoring<String,String>(graph,biasD);
  assertEquals(3,coloring.color());
  validateColoring(graph);
  assertEquals("A",coloring.getPartitionSuperNode("A"));
  assertFalse("A".equals(coloring.getPartitionSuperNode("C")));
}
