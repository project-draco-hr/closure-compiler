{
  if (n.isCall() && GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {
    int count=n.getChildCount();
    Node first=n.getFirstChild().getNext();
switch (count) {
case 2:
      if (first.isString()) {
        processStringNode(t,first);
        n.removeChild(first);
        parent.replaceChild(n,first);
        compiler.reportCodeChange();
      }
 else {
        compiler.report(t.makeError(n,STRING_LITERAL_EXPECTED_ERROR,Token.name(first.getType())));
      }
    break;
case 3:
  Node second=first.getNext();
if (second.getType() != Token.STRING) {
  compiler.report(t.makeError(n,STRING_LITERAL_EXPECTED_ERROR,Token.name(second.getType())));
}
 else if (first.isString()) {
  compiler.report(t.makeError(n,UNEXPECTED_STRING_LITERAL_ERROR,first.getString(),second.getString()));
}
 else {
  processStringNode(t,second);
  n.removeChild(first);
  Node replacement=new Node(Token.ADD,first,Node.newString("-" + second.getString()).copyInformationFrom(second)).copyInformationFrom(n);
  replacement.setJSType(nativeStringType);
  parent.replaceChild(n,replacement);
  compiler.reportCodeChange();
}
break;
default :
compiler.report(t.makeError(n,INVALID_NUM_ARGUMENTS_ERROR,String.valueOf(count)));
}
}
}
