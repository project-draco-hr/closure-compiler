{
  boolean isObjLitDefKey=node.isStringKey();
  Node parent=node.getParent();
  Node refNode=isObjLitDefKey ? node : parent.getFirstChild();
  Node newNameNode=IR.name(newMethodName).useSourceInfoIfMissingFrom(refNode);
  Node newVarNode=IR.var(newNameNode).useSourceInfoIfMissingFrom(refNode);
  Node functionNode;
  if (!isObjLitDefKey) {
    Preconditions.checkState(parent.isAssign());
    functionNode=parent.getLastChild();
    Node expr=parent.getParent();
    Node block=expr.getParent();
    parent.removeChild(functionNode);
    newNameNode.addChildToFront(functionNode);
    block.replaceChild(expr,newVarNode);
  }
 else {
    Preconditions.checkState(parent.isObjectLit());
    functionNode=node.getFirstChild();
    Node assign=parent.getParent();
    Node expr=assign.getParent();
    Node block=expr.getParent();
    node.removeChild(functionNode);
    parent.removeChild(node);
    newNameNode.addChildToFront(functionNode);
    block.addChildAfter(newVarNode,expr);
  }
  String self=newMethodName + "$self";
  Node argList=functionNode.getFirstChild().getNext();
  argList.addChildToFront(IR.name(self).useSourceInfoIfMissingFrom(functionNode));
  Node body=functionNode.getLastChild();
  replaceReferencesToThis(body,self);
  fixFunctionType(functionNode);
  compiler.reportCodeChange();
}
