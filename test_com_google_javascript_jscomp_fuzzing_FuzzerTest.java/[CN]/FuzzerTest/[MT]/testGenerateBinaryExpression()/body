{
  int budget=50;
  String[] operators={"*","/","%","+","-","<<",">>",">>>","<",">","<=",">=","instanceof","in","==","!=","===","!==","&","^","|","&&","||","=","*=","/=","%=","+=","-=","<<=",">>=",">>>=","&=","^=","|="};
  String[] types={"mul","div","mod","add","sub","lsh","rsh","ursh","lt","gt","le","ge","instanceof","in","eq","ne","sheq","shne","bitAnd","bitXor","bitOr","and","or","assign","assignMul","assignDiv","assignMod","assignAdd","assignSub","assignLsh","assignRsh","assignUrsh","assignBitAnd","assignBitXor","assignBitOr"};
  for (int i=0; i < operators.length; i++) {
    Random random=new Random(123);
    BinaryExprFuzzer fuzzer=new BinaryExprFuzzer(random,scopeManager,config,snGenerator);
    leaveOneSubtype(fuzzer.getOwnConfig(),types[i]);
    Node node=fuzzer.generate(budget);
    String code=BinaryExprFuzzer.getPrettyCode(node).trim();
    assertNotSame(-1,code.indexOf(" " + operators[i] + " "));
  }
}
