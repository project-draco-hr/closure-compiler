{
  List<PassFactory> checks=new ArrayList<>();
  checks.add(createEmptyPass("beforeStandardChecks"));
  checks.add(checkJsDoc);
  if (!options.skipNonTranspilationPasses && options.closurePass && options.enables(DiagnosticGroups.LINT_CHECKS)) {
    checks.add(checkRequiresAndProvidesSorted);
  }
  if (options.closurePass) {
    checks.add(closureRewriteModule);
  }
  if (!options.skipNonTranspilationPasses && options.declaredGlobalExternsOnWindow) {
    checks.add(declaredGlobalExternsOnWindow);
  }
  if (options.getLanguageIn() == LanguageMode.ECMASCRIPT6_TYPED && options.getLanguageOut() != LanguageMode.ECMASCRIPT6_TYPED) {
    checks.add(convertEs6TypedToEs6);
  }
  checks.add(checkVariableReferences);
  if (!options.skipNonTranspilationPasses && options.closurePass) {
    checks.add(closureGoogScopeAliases);
    checks.add(closureRewriteClass);
  }
  if (options.enables(DiagnosticGroups.MISSING_REQUIRE) || options.enables(DiagnosticGroups.EXTRA_REQUIRE)) {
    checks.add(checkRequires);
  }
  checks.add(checkSideEffects);
  if (options.enables(DiagnosticGroups.MISSING_PROVIDE)) {
    checks.add(checkProvides);
  }
  if (options.jqueryPass && !options.skipNonTranspilationPasses) {
    checks.add(jqueryAliases);
  }
  if (options.angularPass && !options.skipNonTranspilationPasses) {
    checks.add(angularPass);
  }
  if (!options.generateExportsAfterTypeChecking && options.generateExports && !options.skipNonTranspilationPasses) {
    checks.add(generateExports);
  }
  if (options.exportTestFunctions && !options.skipNonTranspilationPasses) {
    checks.add(exportTestFunctions);
  }
  if (options.closurePass && !options.skipNonTranspilationPasses) {
    checks.add(closurePrimitives);
  }
  if (options.polymerPass && !options.skipNonTranspilationPasses) {
    checks.add(polymerPass);
  }
  if ((options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS) || options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) && !options.skipNonTranspilationPasses) {
    checks.add(suspiciousCode);
  }
  if (options.closurePass && options.checkMissingGetCssNameLevel.isOn() && !options.skipNonTranspilationPasses) {
    checks.add(closureCheckGetCssName);
  }
  if (options.syntheticBlockStartMarker != null && !options.skipNonTranspilationPasses) {
    checks.add(createSyntheticBlocks);
  }
  if (!options.skipNonTranspilationPasses) {
    checks.add(checkVars);
  }
  if (options.inferConsts && !options.skipNonTranspilationPasses) {
    checks.add(inferConsts);
  }
  if (options.computeFunctionSideEffects && !options.skipNonTranspilationPasses) {
    checks.add(checkRegExp);
  }
  if (options.processObjectPropertyString && !options.skipNonTranspilationPasses) {
    checks.add(objectPropertyStringPreprocess);
  }
  if (options.getLanguageIn().isEs6OrHigher() && !options.skipTranspilationAndCrash) {
    checks.add(es6RewriteArrowFunction);
    checks.add(es6RenameVariablesInParamLists);
    checks.add(es6SplitVariableDeclarations);
    checks.add(es6RewriteDestructuring);
  }
  if (options.dartPass && !options.getLanguageOut().isEs6OrHigher()) {
    checks.add(dartSuperAccessorsPass);
  }
  if (options.getLanguageIn().isEs6OrHigher() && !options.skipTranspilationAndCrash) {
    checks.add(es6ConvertSuper);
    checks.add(convertEs6ToEs3);
    checks.add(rewriteBlockScopedDeclaration);
    checks.add(rewriteGenerators);
    if (!options.getLanguageOut().isEs6OrHigher() && options.rewritePolyfills) {
      checks.add(rewritePolyfills);
    }
    checks.add(markTranspilationDone);
  }
  if (options.raiseToEs6Typed()) {
    checks.add(convertToTypedES6);
  }
  if ((options.getLanguageIn().isEs6OrHigher() && !options.skipNonTranspilationPasses) || !options.forceLibraryInjection.isEmpty()) {
    checks.add(es6RuntimeLibrary);
  }
  if (options.skipNonTranspilationPasses) {
    return checks;
  }
  checks.add(convertStaticInheritance);
  checks.add(createEmptyPass("beforeTypeChecking"));
  if (options.getNewTypeInference()) {
    checks.add(symbolTableForNewTypeInference);
    checks.add(newTypeInference);
  }
  checks.add(inlineTypeAliases);
  if (options.checkTypes || options.inferTypes) {
    checks.add(resolveTypes);
    checks.add(inferTypes);
    if (options.checkTypes) {
      checks.add(checkTypes);
    }
 else {
      checks.add(inferJsDocInfo);
    }
    if (!options.ideMode) {
      checks.add(clearTypedScopePass);
    }
  }
  if (options.generateExportsAfterTypeChecking && options.generateExports) {
    checks.add(generateExports);
  }
  if (!options.disables(DiagnosticGroups.CHECK_USELESS_CODE) || (!options.getNewTypeInference() && !options.disables(DiagnosticGroups.MISSING_RETURN))) {
    checks.add(checkControlFlow);
  }
  if (options.checkTypes && (!options.disables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {
    checks.add(checkAccessControls);
  }
  if (options.enables(DiagnosticGroups.LINT_CHECKS)) {
    checks.add(lintChecks);
  }
  if (options.checkEventfulObjectDisposalPolicy != CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF) {
    checks.add(checkEventfulObjectDisposal);
  }
  if (options.checkGlobalNamesLevel.isOn()) {
    checks.add(checkGlobalNames);
  }
  if (options.enables(DiagnosticGroups.ES5_STRICT)) {
    checks.add(checkStrictMode);
  }
  if (!options.getConformanceConfigs().isEmpty()) {
    checks.add(checkConformance);
  }
  if (options.closurePass) {
    checks.add(closureReplaceGetCssName);
  }
  if (options.replaceMessagesWithChromeI18n) {
    checks.add(replaceMessagesForChrome);
  }
 else   if (options.messageBundle != null) {
    checks.add(replaceMessages);
  }
  if (options.getTweakProcessing().isOn()) {
    checks.add(processTweaks);
  }
  checks.add(processDefines);
  if (options.instrumentationTemplate != null || options.recordFunctionInformation) {
    checks.add(computeFunctionNames);
  }
  if (options.nameReferenceGraphPath != null && !options.nameReferenceGraphPath.isEmpty()) {
    checks.add(printNameReferenceGraph);
  }
  if (options.nameReferenceReportPath != null && !options.nameReferenceReportPath.isEmpty()) {
    checks.add(printNameReferenceReport);
  }
  checks.add(createEmptyPass("afterStandardChecks"));
  assertAllOneTimePasses(checks);
  assertValidOrder(checks);
  return checks;
}
