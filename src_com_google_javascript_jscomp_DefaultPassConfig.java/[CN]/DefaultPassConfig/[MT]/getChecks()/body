{
  List<PassFactory> checks=Lists.newArrayList();
  checks.add(createEmptyPass("beforeStandardChecks"));
  if (options.closurePass) {
    checks.add(closureGoogScopeAliases);
    checks.add(closureRewriteGoogClass);
  }
  if (options.nameAnonymousFunctionsOnly) {
    if (options.anonymousFunctionNaming == AnonymousFunctionNamingPolicy.MAPPED) {
      checks.add(nameMappedAnonymousFunctions);
    }
 else     if (options.anonymousFunctionNaming == AnonymousFunctionNamingPolicy.UNMAPPED) {
      checks.add(nameUnmappedAnonymousFunctions);
    }
    return checks;
  }
  if (options.jqueryPass) {
    checks.add(jqueryAliases);
  }
  if (options.angularPass) {
    checks.add(angularPass);
  }
  checks.add(checkSideEffects);
  if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS) || options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
    checks.add(suspiciousCode);
  }
  if (options.checkRequires.isOn()) {
    checks.add(checkRequires);
  }
  if (options.checkProvides.isOn()) {
    checks.add(checkProvides);
  }
  if (options.generateExports) {
    checks.add(generateExports);
  }
  if (options.exportTestFunctions) {
    checks.add(exportTestFunctions);
  }
  if (options.closurePass) {
    checks.add(closurePrimitives);
  }
  if (options.closurePass && options.checkMissingGetCssNameLevel.isOn()) {
    checks.add(closureCheckGetCssName);
  }
  if (options.syntheticBlockStartMarker != null) {
    checks.add(createSyntheticBlocks);
  }
  checks.add(checkVars);
  if (options.inferConsts) {
    checks.add(inferConsts);
  }
  if (options.computeFunctionSideEffects) {
    checks.add(checkRegExp);
  }
  if (options.aggressiveVarCheck.isOn()) {
    checks.add(checkVariableReferences);
  }
  if (options.processObjectPropertyString) {
    checks.add(objectPropertyStringPreprocess);
  }
  checks.add(createEmptyPass("beforeTypeChecking"));
  if (options.useNewTypeInference) {
    checks.add(symbolTableForNewTypeInference);
    checks.add(newTypeInference);
  }
  if (options.checkTypes || options.inferTypes) {
    checks.add(resolveTypes);
    checks.add(inferTypes);
    if (options.checkTypes) {
      checks.add(checkTypes);
    }
 else {
      checks.add(inferJsDocInfo);
    }
    if (!options.ideMode && !options.saveDataStructures) {
      checks.add(clearTypedScopePass);
    }
  }
  if (options.checkUnreachableCode.isOn() || (options.checkTypes && options.checkMissingReturn.isOn())) {
    checks.add(checkControlFlow);
  }
  if (options.checkTypes && (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {
    checks.add(checkAccessControls);
  }
  if (options.checkEventfulObjectDisposalPolicy != CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF) {
    checks.add(checkEventfulObjectDisposal);
  }
  if (options.checkGlobalNamesLevel.isOn()) {
    checks.add(checkGlobalNames);
  }
  if (options.enables(DiagnosticGroups.ES5_STRICT)) {
    checks.add(checkStrictMode);
  }
  if (options.closurePass) {
    checks.add(closureReplaceGetCssName);
  }
  if (options.replaceMessagesWithChromeI18n) {
    checks.add(replaceMessagesForChrome);
  }
 else   if (options.messageBundle != null) {
    checks.add(replaceMessages);
  }
  if (options.getTweakProcessing().isOn()) {
    checks.add(processTweaks);
  }
  checks.add(processDefines);
  if (options.instrumentationTemplate != null || options.recordFunctionInformation) {
    checks.add(computeFunctionNames);
  }
  if (options.nameReferenceGraphPath != null && !options.nameReferenceGraphPath.isEmpty()) {
    checks.add(printNameReferenceGraph);
  }
  if (options.nameReferenceReportPath != null && !options.nameReferenceReportPath.isEmpty()) {
    checks.add(printNameReferenceReport);
  }
  checks.add(createEmptyPass("afterStandardChecks"));
  assertAllOneTimePasses(checks);
  return checks;
}
