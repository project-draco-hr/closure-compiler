{
  List<PassFactory> checks=new ArrayList<>();
  checks.add(createEmptyPass("beforeStandardChecks"));
  checks.add(checkJsDoc);
  if (options.enables(DiagnosticGroups.LINT_CHECKS)) {
    checks.add(lintChecks);
  }
  if (options.closurePass && options.enables(DiagnosticGroups.LINT_CHECKS)) {
    checks.add(checkRequiresAndProvidesSorted);
  }
  if (options.enables(DiagnosticGroups.MISSING_REQUIRE) || options.enables(DiagnosticGroups.STRICT_MISSING_REQUIRE) || options.enables(DiagnosticGroups.EXTRA_REQUIRE)) {
    checks.add(checkRequires);
  }
  if (options.closurePass) {
    checks.add(closureCheckModule);
    checks.add(closureRewriteModule);
  }
  if (options.declaredGlobalExternsOnWindow) {
    checks.add(declaredGlobalExternsOnWindow);
  }
  if (options.getLanguageIn() == LanguageMode.ECMASCRIPT6_TYPED && options.getLanguageOut() != LanguageMode.ECMASCRIPT6_TYPED) {
    checks.add(convertEs6TypedToEs6);
  }
  checks.add(checkMissingSuper);
  checks.add(checkVariableReferences);
  if (options.closurePass) {
    checks.add(closureGoogScopeAliases);
    checks.add(closureRewriteClass);
  }
  checks.add(checkSideEffects);
  if (options.enables(DiagnosticGroups.MISSING_PROVIDE)) {
    checks.add(checkProvides);
  }
  if (options.jqueryPass) {
    checks.add(jqueryAliases);
  }
  if (options.angularPass) {
    checks.add(angularPass);
  }
  if (!options.generateExportsAfterTypeChecking && options.generateExports) {
    checks.add(generateExports);
  }
  if (options.exportTestFunctions) {
    checks.add(exportTestFunctions);
  }
  if (options.closurePass) {
    checks.add(closurePrimitives);
  }
  if (options.polymerPass) {
    checks.add(polymerPass);
  }
  if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS) || options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {
    checks.add(suspiciousCode);
  }
  if (options.closurePass && options.checkMissingGetCssNameLevel.isOn()) {
    checks.add(closureCheckGetCssName);
  }
  if (options.syntheticBlockStartMarker != null) {
    checks.add(createSyntheticBlocks);
  }
  checks.add(checkVars);
  if (options.inferConsts) {
    checks.add(inferConsts);
  }
  if (options.computeFunctionSideEffects) {
    checks.add(checkRegExp);
  }
  if (options.processObjectPropertyString) {
    checks.add(objectPropertyStringPreprocess);
  }
  if (options.dartPass && !options.getLanguageOut().isEs6OrHigher()) {
    checks.add(dartSuperAccessorsPass);
  }
  if (options.getLanguageIn().isEs6OrHigher() && !options.skipTranspilationAndCrash) {
    checks.add(es6ExternsCheck);
    TranspilationPasses.addEs6EarlyPasses(checks);
  }
  if (options.getLanguageIn().isEs6OrHigher() && !options.skipTranspilationAndCrash) {
    TranspilationPasses.addEs6LatePasses(checks);
    checks.add(markTranspilationDone);
  }
  if (options.raiseToEs6Typed()) {
    checks.add(convertToTypedES6);
  }
  if (!options.forceLibraryInjection.isEmpty()) {
    checks.add(injectRuntimeLibraries);
  }
  if (options.skipNonTranspilationPasses) {
    return checks;
  }
  checks.add(convertStaticInheritance);
  checks.add(createEmptyPass("beforeTypeChecking"));
  if (options.getNewTypeInference()) {
    checks.add(symbolTableForNewTypeInference);
    checks.add(newTypeInference);
  }
  if (options.j2clPassMode.equals(CompilerOptions.J2clPassMode.AUTO)) {
    checks.add(j2clSourceFileChecker);
  }
  if (!options.allowsHotswapReplaceScript()) {
    checks.add(inlineTypeAliases);
  }
  if (!options.getNewTypeInference()) {
    addOldTypeCheckerPasses(checks,options);
  }
  if (options.generateExportsAfterTypeChecking && options.generateExports) {
    checks.add(generateExports);
  }
  if (!options.disables(DiagnosticGroups.CHECK_USELESS_CODE) || (!options.getNewTypeInference() && !options.disables(DiagnosticGroups.MISSING_RETURN))) {
    checks.add(checkControlFlow);
  }
  if (options.checkTypes && (!options.disables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {
    checks.add(checkAccessControls);
  }
  if (!options.getNewTypeInference()) {
    checks.add(checkConsts);
  }
  if (options.enables(DiagnosticGroups.ANALYZER_CHECKS)) {
    checks.add(analyzerChecks);
  }
  if (options.checkEventfulObjectDisposalPolicy != CompilerOptions.DisposalCheckingPolicy.OFF) {
    checks.add(checkEventfulObjectDisposal);
  }
  if (options.checkGlobalNamesLevel.isOn()) {
    checks.add(checkGlobalNames);
  }
  checks.add(checkStrictMode);
  if (!options.getConformanceConfigs().isEmpty()) {
    checks.add(checkConformance);
  }
  if (options.closurePass) {
    checks.add(closureReplaceGetCssName);
  }
  if (!options.shouldGenerateTypedExterns()) {
    if (options.replaceMessagesWithChromeI18n) {
      checks.add(replaceMessagesForChrome);
    }
 else     if (options.messageBundle != null) {
      checks.add(replaceMessages);
    }
  }
  if (options.getTweakProcessing().isOn()) {
    checks.add(processTweaks);
  }
  checks.add(processDefines);
  if (options.shouldGenerateTypedExterns()) {
    checks.add(removeBodies);
  }
  if (options.instrumentationTemplate != null || options.recordFunctionInformation) {
    checks.add(computeFunctionNames);
  }
  if (options.getNewTypeInference()) {
    addOldTypeCheckerPasses(checks,options);
  }
  checks.add(createEmptyPass("afterStandardChecks"));
  assertAllOneTimePasses(checks);
  assertValidOrder(checks);
  return checks;
}
