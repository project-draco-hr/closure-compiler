{
  List<PassFactory> passes=new ArrayList<>();
  if (options.collapseObjectLiterals) {
    passes.add(collapseObjectLiterals);
  }
  if (options.inlineVariables || options.inlineLocalVariables) {
    passes.add(inlineVariables);
  }
 else   if (options.inlineConstantVars) {
    passes.add(inlineConstants);
  }
  if (options.foldConstants) {
    passes.add(peepholeOptimizations);
  }
  if (options.removeDeadCode) {
    passes.add(removeUnreachableCode);
  }
  if (options.removeUnusedPrototypeProperties) {
    passes.add(removeUnusedPrototypeProperties);
  }
  if (options.removeUnusedClassProperties) {
    passes.add(removeUnusedClassProperties);
  }
  if (options.j2clPassMode.shouldAddJ2clPasses()) {
    if (!options.limitJ2clOptimization) {
      j2clChangeTracker.setDisabled();
    }
    passes.add(j2clClinitPrunerPass);
    passes.add(j2clConstantHoisterPass);
    passes.add(j2clEqualitySameRewriterPass);
    j2clChangeTracker.reset();
  }
  assertAllLoopablePasses(passes);
  return passes;
}
