{
  assertPassOrder(checks,closureRewriteModule,checkVariableReferences,"If checkVariableReferences runs before closureRewriteModule, it will produce invalid" + " warnings because it will think of module-scoped variables as global variables.");
  assertPassOrder(checks,closureRewriteModule,processDefines,"Must rewrite goog.module before processing @define's, so that @defines in modules work.");
  assertPassOrder(checks,closurePrimitives,polymerPass,"The Polymer pass must run after goog.provide processing.");
  assertPassOrder(checks,polymerPass,suspiciousCode,"The Polymer pass must run before suspiciousCode processing.");
  assertPassOrder(checks,dartSuperAccessorsPass,TranspilationPasses.es6ConvertSuper,"The Dart super accessors pass must run before ES6->ES3 super lowering.");
  if (checks.contains(closureGoogScopeAliases)) {
    Preconditions.checkState(checks.contains(checkVariableReferences),"goog.scope processing requires variable checking");
  }
  assertPassOrder(checks,checkVariableReferences,closureGoogScopeAliases,"Variable checking must happen before goog.scope processing.");
  assertPassOrder(checks,TranspilationPasses.es6ConvertSuper,removeSuperMethodsPass,"Super-call method removal must run after Es6 super rewriting, " + "because Es6 super calls are matched on their post-processed form.");
  assertPassOrder(checks,closurePrimitives,removeSuperMethodsPass,"Super-call method removal must run after Es6 super rewriting, " + "because Closure base calls are expected to be in post-processed form.");
  assertPassOrder(checks,closureCodeRemoval,removeSuperMethodsPass,"Super-call method removal must run after closure code removal, because " + "removing assertions may make more super calls eligible to be stripped.");
}
