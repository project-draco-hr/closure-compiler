{
  boolean changed=false;
  for (  Map.Entry<String,DefineInfo> def : allDefines.entrySet()) {
    String defineName=def.getKey();
    DefineInfo info=def.getValue();
    Node inputValue=dominantReplacements.get(defineName);
    Node finalValue=inputValue != null ? inputValue : info.getLastValue();
    if (finalValue != info.initialValue) {
      info.initialValueParent.replaceChild(info.initialValue,finalValue.cloneTree());
      compiler.addToDebugLog("Overriding @define variable " + defineName);
      changed=changed || finalValue.getToken() != info.initialValue.getToken() || !finalValue.isEquivalentTo(info.initialValue);
    }
  }
  if (changed) {
    compiler.reportCodeChange();
  }
  Set<String> unusedReplacements=Sets.difference(dominantReplacements.keySet(),Sets.union(KNOWN_DEFINES,allDefines.keySet()));
  for (  String unknownDefine : unusedReplacements) {
    compiler.report(JSError.make(UNKNOWN_DEFINE_WARNING,unknownDefine));
  }
}
