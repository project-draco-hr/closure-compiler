{
switch (n.getType()) {
case Token.FUNCTION:
    nameGenerator.favors("function");
  return;
case Token.IF:
nameGenerator.favors("if");
if (n.getFirstChild().getNext().getNext() != null) {
nameGenerator.favors("else");
}
return;
case Token.FOR:
nameGenerator.favors("for");
return;
case Token.WHILE:
nameGenerator.favors("while");
return;
case Token.VAR:
nameGenerator.favors("var");
return;
case Token.STRING:
nameGenerator.favors(n.getString());
return;
case Token.STRING_KEY:
nameGenerator.favors(n.getString());
return;
case Token.TRY:
nameGenerator.favors("try");
if (NodeUtil.hasFinally(n)) {
nameGenerator.favors("finally");
}
return;
case Token.CATCH:
nameGenerator.favors("catch");
return;
case Token.SWITCH:
nameGenerator.favors("switch");
return;
case Token.CASE:
nameGenerator.favors("case");
return;
case Token.DEFAULT_CASE:
nameGenerator.favors("default");
return;
case Token.NEW:
nameGenerator.favors("new");
return;
case Token.RETURN:
nameGenerator.favors("return");
return;
case Token.DO:
nameGenerator.favors("do");
nameGenerator.favors("while");
return;
case Token.VOID:
nameGenerator.favors("void");
return;
case Token.WITH:
nameGenerator.favors("with");
return;
case Token.DELPROP:
nameGenerator.favors("delete");
return;
case Token.TYPEOF:
nameGenerator.favors("typeof");
return;
case Token.THROW:
nameGenerator.favors("throw");
return;
case Token.IN:
nameGenerator.favors("in");
return;
case Token.INSTANCEOF:
nameGenerator.favors("instanceof");
return;
case Token.BREAK:
nameGenerator.favors("break");
return;
case Token.CONTINUE:
nameGenerator.favors("continue");
return;
case Token.THIS:
nameGenerator.favors("this");
return;
case Token.NULL:
nameGenerator.favors("null");
return;
case Token.NUMBER:
return;
}
}
