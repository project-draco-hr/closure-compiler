{
  int startPosition=n.getSourceOffset();
  int length;
  if (n.getNext() != null && NodeUtil.getBestJSDocInfo(n.getNext()) == null) {
    length=n.getNext().getSourceOffset() - startPosition;
  }
 else {
    length=n.getLength();
  }
  JSDocInfo jsDoc=NodeUtil.getBestJSDocInfo(n);
  if (jsDoc != null) {
    length+=(startPosition - jsDoc.getOriginalCommentPosition());
    startPosition=jsDoc.getOriginalCommentPosition();
  }
  if (n.isName() && n.getParent().isVar()) {
    if (n.getNext() != null) {
      length=n.getNext().getSourceOffset() - startPosition;
    }
 else     if (n.hasChildren()) {
      Node child=n.getFirstChild();
      length=(child.getSourceOffset() + child.getLength()) - startPosition;
    }
    if (n.getParent().getLastChild() == n && n != n.getParent().getFirstChild()) {
      Node previousSibling=n.getParent().getChildBefore(n);
      if (previousSibling.hasChildren()) {
        Node child=previousSibling.getFirstChild();
        int startPositionDiff=startPosition - (child.getSourceOffset() + child.getLength());
        startPosition-=startPositionDiff;
        length+=startPositionDiff;
      }
 else {
        int startPositionDiff=startPosition - (previousSibling.getSourceOffset() + previousSibling.getLength());
        startPosition-=startPositionDiff;
        length+=startPositionDiff;
      }
    }
  }
  Node parent=n.getParent();
  if (deleteWhitespaceBefore && parent != null && (parent.isScript() || parent.isBlock())) {
    Node previousSibling=parent.getChildBefore(n);
    if (previousSibling != null) {
      int previousSiblingEndPosition=previousSibling.getSourceOffset() + previousSibling.getLength();
      length+=(startPosition - previousSiblingEndPosition);
      startPosition=previousSiblingEndPosition;
    }
  }
  replacements.put(n.getSourceFileName(),new CodeReplacement(startPosition,length,""));
  return this;
}
