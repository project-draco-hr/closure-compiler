{
  assertTrue(ARRAY_TYPE.isArrayType());
  assertFalse(ARRAY_TYPE.isBooleanValueType());
  assertFalse(ARRAY_TYPE.isDateType());
  assertFalse(ARRAY_TYPE.isEnumElementType());
  assertFalse(ARRAY_TYPE.isNamedType());
  assertFalse(ARRAY_TYPE.isNullType());
  assertFalse(ARRAY_TYPE.isNumber());
  assertFalse(ARRAY_TYPE.isNumberObjectType());
  assertFalse(ARRAY_TYPE.isNumberValueType());
  assertTrue(ARRAY_TYPE.isObject());
  assertFalse(ARRAY_TYPE.isFunctionPrototypeType());
  assertTrue(ARRAY_TYPE.getImplicitPrototype().isFunctionPrototypeType());
  assertFalse(ARRAY_TYPE.isRegexpType());
  assertFalse(ARRAY_TYPE.isString());
  assertFalse(ARRAY_TYPE.isStringObjectType());
  assertFalse(ARRAY_TYPE.isStringValueType());
  assertFalse(ARRAY_TYPE.isEnumType());
  assertFalse(ARRAY_TYPE.isUnionType());
  assertFalse(ARRAY_TYPE.isStruct());
  assertFalse(ARRAY_TYPE.isDict());
  assertFalse(ARRAY_TYPE.isAllType());
  assertFalse(ARRAY_TYPE.isVoidType());
  assertFalse(ARRAY_TYPE.isConstructor());
  assertTrue(ARRAY_TYPE.isInstanceType());
  assertFalse(ARRAY_TYPE.isSubtype(NO_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(ALL_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(functionType));
  assertFalse(ARRAY_TYPE.isSubtype(recordType));
  assertFalse(ARRAY_TYPE.isSubtype(NULL_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(DATE_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(unresolvedNamedType));
  assertFalse(ARRAY_TYPE.isSubtype(namedGoogBar));
  assertFalse(ARRAY_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(ARRAY_TYPE.canBeCalled());
  assertCanTestForEqualityWith(ARRAY_TYPE,NO_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,NO_OBJECT_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,functionType);
  assertCanTestForEqualityWith(ARRAY_TYPE,recordType);
  assertCannotTestForEqualityWith(ARRAY_TYPE,VOID_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(ARRAY_TYPE,REGEXP_TYPE);
  assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(recordType));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(ARRAY_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(ARRAY_TYPE.isNullable());
  assertTrue(createUnionType(ARRAY_TYPE,NULL_TYPE).isNullable());
  assertTrue(ARRAY_TYPE.isObject());
  assertTypeEquals(ALL_TYPE,ARRAY_TYPE.getLeastSupertype(ALL_TYPE));
  assertTypeEquals(createUnionType(STRING_OBJECT_TYPE,ARRAY_TYPE),ARRAY_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));
  assertTypeEquals(createUnionType(NUMBER_TYPE,ARRAY_TYPE),ARRAY_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertTypeEquals(createUnionType(ARRAY_TYPE,functionType),ARRAY_TYPE.getLeastSupertype(functionType));
  assertTypeEquals(OBJECT_TYPE,ARRAY_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertTypeEquals(createUnionType(DATE_TYPE,ARRAY_TYPE),ARRAY_TYPE.getLeastSupertype(DATE_TYPE));
  assertTypeEquals(createUnionType(REGEXP_TYPE,ARRAY_TYPE),ARRAY_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertEquals(17,ARRAY_TYPE.getImplicitPrototype().getPropertiesCount());
  assertEquals(18,ARRAY_TYPE.getPropertiesCount());
  assertReturnTypeEquals(ARRAY_TYPE,ARRAY_TYPE.getPropertyType("constructor"));
  assertReturnTypeEquals(STRING_TYPE,ARRAY_TYPE.getPropertyType("toString"));
  assertReturnTypeEquals(STRING_TYPE,ARRAY_TYPE.getPropertyType("toLocaleString"));
  assertReturnTypeEquals(ARRAY_TYPE,ARRAY_TYPE.getPropertyType("concat"));
  assertReturnTypeEquals(STRING_TYPE,ARRAY_TYPE.getPropertyType("join"));
  assertReturnTypeEquals(UNKNOWN_TYPE,ARRAY_TYPE.getPropertyType("pop"));
  assertReturnTypeEquals(NUMBER_TYPE,ARRAY_TYPE.getPropertyType("push"));
  assertReturnTypeEquals(ARRAY_TYPE,ARRAY_TYPE.getPropertyType("reverse"));
  assertReturnTypeEquals(UNKNOWN_TYPE,ARRAY_TYPE.getPropertyType("shift"));
  assertReturnTypeEquals(ARRAY_TYPE,ARRAY_TYPE.getPropertyType("slice"));
  assertReturnTypeEquals(ARRAY_TYPE,ARRAY_TYPE.getPropertyType("sort"));
  assertReturnTypeEquals(ARRAY_TYPE,ARRAY_TYPE.getPropertyType("splice"));
  assertReturnTypeEquals(NUMBER_TYPE,ARRAY_TYPE.getPropertyType("unshift"));
  assertTypeEquals(NUMBER_TYPE,ARRAY_TYPE.getPropertyType("length"));
  assertPropertyTypeDeclared(ARRAY_TYPE,"pop");
  assertFalse(ARRAY_TYPE.matchesInt32Context());
  assertFalse(ARRAY_TYPE.matchesNumberContext());
  assertTrue(ARRAY_TYPE.matchesObjectContext());
  assertTrue(ARRAY_TYPE.matchesStringContext());
  assertFalse(ARRAY_TYPE.matchesUint32Context());
  assertEquals("Array",ARRAY_TYPE.toString());
  assertTrue(ARRAY_TYPE.hasDisplayName());
  assertEquals("Array",ARRAY_TYPE.getDisplayName());
  assertTrue(ARRAY_TYPE.isNativeObjectType());
  Asserts.assertResolvesToSame(ARRAY_TYPE);
  assertFalse(ARRAY_TYPE.isNominalConstructor());
  assertTrue(ARRAY_TYPE.getConstructor().isNominalConstructor());
}
