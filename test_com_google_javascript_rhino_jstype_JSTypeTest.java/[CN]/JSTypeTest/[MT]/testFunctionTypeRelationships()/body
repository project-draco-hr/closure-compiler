{
  FunctionType dateMethodEmpty=new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(DATE_TYPE).build();
  FunctionType dateMethodWithParam=new FunctionBuilder(registry).withParamsNode(registry.createOptionalParameters(NUMBER_TYPE)).withTypeOfThis(DATE_TYPE).build();
  FunctionType dateMethodWithReturn=new FunctionBuilder(registry).withReturnType(NUMBER_TYPE).withTypeOfThis(DATE_TYPE).build();
  FunctionType stringMethodEmpty=new FunctionBuilder(registry).withParamsNode(registry.createParameters()).withTypeOfThis(STRING_OBJECT_TYPE).build();
  FunctionType stringMethodWithParam=new FunctionBuilder(registry).withParamsNode(registry.createOptionalParameters(NUMBER_TYPE)).withTypeOfThis(STRING_OBJECT_TYPE).build();
  FunctionType stringMethodWithReturn=new FunctionBuilder(registry).withReturnType(NUMBER_TYPE).withTypeOfThis(STRING_OBJECT_TYPE).build();
  assertFalse(stringMethodEmpty.isSubtype(dateMethodEmpty));
  List<FunctionType> allFunctions=ImmutableList.of(dateMethodEmpty,dateMethodWithParam,dateMethodWithReturn,stringMethodEmpty,stringMethodWithParam,stringMethodWithReturn);
  for (int i=0; i < allFunctions.size(); i++) {
    for (int j=0; j < allFunctions.size(); j++) {
      FunctionType typeA=allFunctions.get(i);
      FunctionType typeB=allFunctions.get(j);
      assertEquals(String.format("equals(%s, %s)",typeA,typeB),i == j,typeA.isEquivalentTo(typeB));
      assertEquals(String.format("isSubtype(%s, %s)",typeA,typeB),typeA.getTypeOfThis().isEquivalentTo(typeB.getTypeOfThis()),typeA.isSubtype(typeB));
      if (i == j) {
        assertTypeEquals(typeA,typeA.getLeastSupertype(typeB));
        assertTypeEquals(typeA,typeA.getGreatestSubtype(typeB));
      }
 else {
        assertTypeEquals(String.format("sup(%s, %s)",typeA,typeB),U2U_CONSTRUCTOR_TYPE,typeA.getLeastSupertype(typeB));
        assertTypeEquals(String.format("inf(%s, %s)",typeA,typeB),LEAST_FUNCTION_TYPE,typeA.getGreatestSubtype(typeB));
      }
    }
  }
}
