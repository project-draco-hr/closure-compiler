{
  FunctionType googBarMethod=new FunctionBuilder(registry).withTypeOfThis(googBar).build();
  FunctionType googBarParamFn=new FunctionBuilder(registry).withParamsNode(registry.createParameters(googBar)).build();
  FunctionType googBarReturnFn=new FunctionBuilder(registry).withReturnType(googBar).build();
  FunctionType googSubBarMethod=new FunctionBuilder(registry).withTypeOfThis(googSubBar).build();
  FunctionType googSubBarParamFn=new FunctionBuilder(registry).withParamsNode(registry.createParameters(googSubBar)).build();
  FunctionType googSubBarReturnFn=new FunctionBuilder(registry).withReturnType(googSubBar).build();
  assertTrue(googBarMethod.isSubtype(googSubBarMethod));
  assertTrue(googBarReturnFn.isSubtype(googSubBarReturnFn));
  List<FunctionType> allFunctions=Lists.newArrayList(googBarMethod,googBarParamFn,googBarReturnFn,googSubBarMethod,googSubBarParamFn,googSubBarReturnFn);
  for (int i=0; i < allFunctions.size(); i++) {
    for (int j=0; j < allFunctions.size(); j++) {
      FunctionType typeA=allFunctions.get(i);
      FunctionType typeB=allFunctions.get(j);
      assertEquals(String.format("equals(%s, %s)",typeA,typeB),i == j,typeA.equals(typeB));
      if (i == j) {
        assertEquals(typeA,typeA.getLeastSupertype(typeB));
        assertEquals(typeA,typeA.getGreatestSubtype(typeB));
      }
 else {
        assertEquals(String.format("sup(%s, %s)",typeA,typeB),U2U_CONSTRUCTOR_TYPE,typeA.getLeastSupertype(typeB));
        assertEquals(String.format("inf(%s, %s)",typeA,typeB),NO_OBJECT_TYPE,typeA.getGreatestSubtype(typeB));
      }
    }
  }
}
