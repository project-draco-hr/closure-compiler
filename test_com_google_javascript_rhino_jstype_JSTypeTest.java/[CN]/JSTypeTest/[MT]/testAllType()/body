{
  assertFalse(ALL_TYPE.isArrayType());
  assertFalse(ALL_TYPE.isBooleanValueType());
  assertFalse(ALL_TYPE.isDateType());
  assertFalse(ALL_TYPE.isEnumElementType());
  assertFalse(ALL_TYPE.isNamedType());
  assertFalse(ALL_TYPE.isNullType());
  assertFalse(ALL_TYPE.isNumber());
  assertFalse(ALL_TYPE.isNumberObjectType());
  assertFalse(ALL_TYPE.isNumberValueType());
  assertFalse(ALL_TYPE.isObject());
  assertFalse(ALL_TYPE.isFunctionPrototypeType());
  assertFalse(ALL_TYPE.isRegexpType());
  assertFalse(ALL_TYPE.isString());
  assertFalse(ALL_TYPE.isStringObjectType());
  assertFalse(ALL_TYPE.isStringValueType());
  assertFalse(ALL_TYPE.isEnumType());
  assertFalse(ALL_TYPE.isUnionType());
  assertFalse(ALL_TYPE.isStruct());
  assertFalse(ALL_TYPE.isDict());
  assertTrue(ALL_TYPE.isAllType());
  assertFalse(ALL_TYPE.isVoidType());
  assertFalse(ALL_TYPE.isConstructor());
  assertFalse(ALL_TYPE.isInstanceType());
  assertFalse(ALL_TYPE.isSubtype(NO_TYPE));
  assertFalse(ALL_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertTrue(ALL_TYPE.isSubtype(ALL_TYPE));
  assertFalse(ALL_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(ALL_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(ALL_TYPE.isSubtype(functionType));
  assertFalse(ALL_TYPE.isSubtype(recordType));
  assertFalse(ALL_TYPE.isSubtype(NULL_TYPE));
  assertFalse(ALL_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(ALL_TYPE.isSubtype(DATE_TYPE));
  assertTrue(ALL_TYPE.isSubtype(unresolvedNamedType));
  assertFalse(ALL_TYPE.isSubtype(namedGoogBar));
  assertFalse(ALL_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(ALL_TYPE.isSubtype(VOID_TYPE));
  assertTrue(ALL_TYPE.isSubtype(UNKNOWN_TYPE));
  assertFalse(ALL_TYPE.canBeCalled());
  assertCanTestForEqualityWith(ALL_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(ALL_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(ALL_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(ALL_TYPE,functionType);
  assertCanTestForEqualityWith(ALL_TYPE,recordType);
  assertCanTestForEqualityWith(ALL_TYPE,VOID_TYPE);
  assertCanTestForEqualityWith(ALL_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(ALL_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(ALL_TYPE,REGEXP_TYPE);
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(functionType));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(recordType));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertTrue(ALL_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(ALL_TYPE.isNullable());
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(ALL_TYPE));
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(UNKNOWN_TYPE));
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(functionType));
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(DATE_TYPE));
  assertTypeEquals(ALL_TYPE,ALL_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertFalse(ALL_TYPE.matchesInt32Context());
  assertFalse(ALL_TYPE.matchesNumberContext());
  assertTrue(ALL_TYPE.matchesObjectContext());
  assertTrue(ALL_TYPE.matchesStringContext());
  assertFalse(ALL_TYPE.matchesUint32Context());
  assertEquals("*",ALL_TYPE.toString());
  assertTrue(ALL_TYPE.hasDisplayName());
  assertEquals("<Any Type>",ALL_TYPE.getDisplayName());
  Asserts.assertResolvesToSame(ALL_TYPE);
  assertFalse(ALL_TYPE.isNominalConstructor());
}
