{
  assertTrue(recordType.isObject());
  assertFalse(recordType.isFunctionPrototypeType());
  assertTrue(recordType.isSubtype(ALL_TYPE));
  assertFalse(recordType.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(recordType.isSubtype(NUMBER_TYPE));
  assertFalse(recordType.isSubtype(DATE_TYPE));
  assertFalse(recordType.isSubtype(REGEXP_TYPE));
  assertTrue(recordType.isSubtype(UNKNOWN_TYPE));
  assertTrue(recordType.isSubtype(OBJECT_TYPE));
  assertFalse(recordType.isSubtype(U2U_CONSTRUCTOR_TYPE));
  assertNull(recordType.autoboxesTo());
  assertFalse(recordType.canBeCalled());
  assertCanTestForEqualityWith(recordType,ALL_TYPE);
  assertCanTestForEqualityWith(recordType,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(recordType,recordType);
  assertCanTestForEqualityWith(recordType,functionType);
  assertCanTestForEqualityWith(recordType,OBJECT_TYPE);
  assertCanTestForEqualityWith(recordType,NUMBER_TYPE);
  assertCanTestForEqualityWith(recordType,DATE_TYPE);
  assertCanTestForEqualityWith(recordType,REGEXP_TYPE);
  assertTrue(recordType.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(recordType.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(recordType.canTestForShallowEqualityWith(recordType));
  assertFalse(recordType.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(recordType.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(recordType.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(recordType.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(recordType.canTestForShallowEqualityWith(UNKNOWN_TYPE));
  assertFalse(recordType.matchesInt32Context());
  assertFalse(recordType.matchesNumberContext());
  assertTrue(recordType.matchesObjectContext());
  assertFalse(recordType.matchesStringContext());
  assertFalse(recordType.matchesUint32Context());
  Asserts.assertResolvesToSame(recordType);
}
