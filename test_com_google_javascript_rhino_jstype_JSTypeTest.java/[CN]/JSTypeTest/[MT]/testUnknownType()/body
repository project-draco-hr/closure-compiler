{
  assertFalse(UNKNOWN_TYPE.isArrayType());
  assertFalse(UNKNOWN_TYPE.isBooleanObjectType());
  assertFalse(UNKNOWN_TYPE.isBooleanValueType());
  assertFalse(UNKNOWN_TYPE.isDateType());
  assertFalse(UNKNOWN_TYPE.isEnumElementType());
  assertFalse(UNKNOWN_TYPE.isNamedType());
  assertFalse(UNKNOWN_TYPE.isNullType());
  assertFalse(UNKNOWN_TYPE.isNumberObjectType());
  assertFalse(UNKNOWN_TYPE.isNumberValueType());
  assertTrue(UNKNOWN_TYPE.isObject());
  assertFalse(UNKNOWN_TYPE.isFunctionPrototypeType());
  assertFalse(UNKNOWN_TYPE.isRegexpType());
  assertFalse(UNKNOWN_TYPE.isStringObjectType());
  assertFalse(UNKNOWN_TYPE.isStringValueType());
  assertFalse(UNKNOWN_TYPE.isEnumType());
  assertFalse(UNKNOWN_TYPE.isUnionType());
  assertFalse(UNKNOWN_TYPE.isStruct());
  assertFalse(UNKNOWN_TYPE.isDict());
  assertTrue(UNKNOWN_TYPE.isUnknownType());
  assertFalse(UNKNOWN_TYPE.isVoidType());
  assertFalse(UNKNOWN_TYPE.isConstructor());
  assertFalse(UNKNOWN_TYPE.isInstanceType());
  assertNull(UNKNOWN_TYPE.autoboxesTo());
  assertTrue(UNKNOWN_TYPE.isSubtype(UNKNOWN_TYPE));
  assertTrue(UNKNOWN_TYPE.isSubtype(STRING_TYPE));
  assertTrue(UNKNOWN_TYPE.isSubtype(NUMBER_TYPE));
  assertTrue(UNKNOWN_TYPE.isSubtype(functionType));
  assertTrue(UNKNOWN_TYPE.isSubtype(recordType));
  assertTrue(UNKNOWN_TYPE.isSubtype(NULL_TYPE));
  assertTrue(UNKNOWN_TYPE.isSubtype(OBJECT_TYPE));
  assertTrue(UNKNOWN_TYPE.isSubtype(DATE_TYPE));
  assertTrue(UNKNOWN_TYPE.isSubtype(namedGoogBar));
  assertTrue(UNKNOWN_TYPE.isSubtype(unresolvedNamedType));
  assertTrue(UNKNOWN_TYPE.isSubtype(REGEXP_TYPE));
  assertTrue(UNKNOWN_TYPE.isSubtype(VOID_TYPE));
  assertTrue(UNKNOWN_TYPE.canBeCalled());
  assertCanTestForEqualityWith(UNKNOWN_TYPE,UNKNOWN_TYPE);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,STRING_TYPE);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,functionType);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,recordType);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,VOID_TYPE);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,REGEXP_TYPE);
  assertCanTestForEqualityWith(UNKNOWN_TYPE,BOOLEAN_TYPE);
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(functionType));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(recordType));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertTrue(UNKNOWN_TYPE.isNullable());
  assertTypeEquals(UNKNOWN_TYPE,UNKNOWN_TYPE.getLeastSupertype(UNKNOWN_TYPE));
  assertTypeEquals(UNKNOWN_TYPE,UNKNOWN_TYPE.getLeastSupertype(STRING_TYPE));
  assertTypeEquals(UNKNOWN_TYPE,UNKNOWN_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertTypeEquals(UNKNOWN_TYPE,UNKNOWN_TYPE.getLeastSupertype(functionType));
  assertTypeEquals(UNKNOWN_TYPE,UNKNOWN_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertTypeEquals(UNKNOWN_TYPE,UNKNOWN_TYPE.getLeastSupertype(DATE_TYPE));
  assertTypeEquals(UNKNOWN_TYPE,UNKNOWN_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertTrue(UNKNOWN_TYPE.matchesInt32Context());
  assertTrue(UNKNOWN_TYPE.matchesNumberContext());
  assertTrue(UNKNOWN_TYPE.matchesObjectContext());
  assertTrue(UNKNOWN_TYPE.matchesStringContext());
  assertTrue(UNKNOWN_TYPE.matchesUint32Context());
  assertPropertyTypeUnknown(UNKNOWN_TYPE,"XXX");
  assertEquals("?",UNKNOWN_TYPE.toString());
  assertTrue(UNKNOWN_TYPE.hasDisplayName());
  assertEquals("Unknown",UNKNOWN_TYPE.getDisplayName());
  Asserts.assertResolvesToSame(UNKNOWN_TYPE);
  assertFalse(UNKNOWN_TYPE.isNominalConstructor());
}
