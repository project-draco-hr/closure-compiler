{
  assertFalse(NUMBER_OBJECT_TYPE.isArrayType());
  assertFalse(NUMBER_OBJECT_TYPE.isBooleanObjectType());
  assertFalse(NUMBER_OBJECT_TYPE.isBooleanValueType());
  assertFalse(NUMBER_OBJECT_TYPE.isDateType());
  assertFalse(NUMBER_OBJECT_TYPE.isEnumElementType());
  assertFalse(NUMBER_OBJECT_TYPE.isNamedType());
  assertFalse(NUMBER_OBJECT_TYPE.isNullType());
  assertTrue(NUMBER_OBJECT_TYPE.isNumber());
  assertTrue(NUMBER_OBJECT_TYPE.isNumberObjectType());
  assertFalse(NUMBER_OBJECT_TYPE.isNumberValueType());
  assertTrue(NUMBER_OBJECT_TYPE.isObject());
  assertFalse(NUMBER_OBJECT_TYPE.isFunctionPrototypeType());
  assertTrue(NUMBER_OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());
  assertFalse(NUMBER_OBJECT_TYPE.isRegexpType());
  assertFalse(NUMBER_OBJECT_TYPE.isString());
  assertFalse(NUMBER_OBJECT_TYPE.isStringObjectType());
  assertFalse(NUMBER_OBJECT_TYPE.isStringValueType());
  assertFalse(NUMBER_OBJECT_TYPE.isEnumType());
  assertFalse(NUMBER_OBJECT_TYPE.isUnionType());
  assertFalse(NUMBER_OBJECT_TYPE.isStruct());
  assertFalse(NUMBER_OBJECT_TYPE.isDict());
  assertFalse(NUMBER_OBJECT_TYPE.isAllType());
  assertFalse(NUMBER_OBJECT_TYPE.isVoidType());
  assertFalse(NUMBER_OBJECT_TYPE.isConstructor());
  assertTrue(NUMBER_OBJECT_TYPE.isInstanceType());
  assertTypeEquals(NUMBER_OBJECT_TYPE,NUMBER_TYPE.autoboxesTo());
  assertTypeEquals(NUMBER_TYPE,NUMBER_OBJECT_TYPE.unboxesTo());
  assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(ALL_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(functionType));
  assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(NULL_TYPE));
  assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(DATE_TYPE));
  assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(unresolvedNamedType));
  assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(namedGoogBar));
  assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(createUnionType(NUMBER_OBJECT_TYPE,NULL_TYPE)));
  assertFalse(NUMBER_OBJECT_TYPE.canAssignTo(createUnionType(NUMBER_TYPE,NULL_TYPE)));
  assertTrue(NUMBER_OBJECT_TYPE.canAssignTo(UNKNOWN_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canBeCalled());
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,NO_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,NO_OBJECT_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,functionType);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,elementsType);
  assertCannotTestForEqualityWith(NUMBER_OBJECT_TYPE,VOID_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,REGEXP_TYPE);
  assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE,ARRAY_TYPE);
  assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(NUMBER_OBJECT_TYPE.isNullable());
  assertTypeEquals(ALL_TYPE,NUMBER_OBJECT_TYPE.getLeastSupertype(ALL_TYPE));
  assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE,STRING_OBJECT_TYPE),NUMBER_OBJECT_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));
  assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE,NUMBER_TYPE),NUMBER_OBJECT_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE,functionType),NUMBER_OBJECT_TYPE.getLeastSupertype(functionType));
  assertTypeEquals(OBJECT_TYPE,NUMBER_OBJECT_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE,DATE_TYPE),NUMBER_OBJECT_TYPE.getLeastSupertype(DATE_TYPE));
  assertTypeEquals(createUnionType(NUMBER_OBJECT_TYPE,REGEXP_TYPE),NUMBER_OBJECT_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertTrue(NUMBER_OBJECT_TYPE.matchesInt32Context());
  assertTrue(NUMBER_OBJECT_TYPE.matchesNumberContext());
  assertTrue(NUMBER_OBJECT_TYPE.matchesObjectContext());
  assertTrue(NUMBER_OBJECT_TYPE.matchesStringContext());
  assertTrue(NUMBER_OBJECT_TYPE.matchesUint32Context());
  assertEquals("Number",NUMBER_OBJECT_TYPE.toString());
  assertTrue(NUMBER_OBJECT_TYPE.hasDisplayName());
  assertEquals("Number",NUMBER_OBJECT_TYPE.getDisplayName());
  assertTrue(NUMBER_OBJECT_TYPE.isNativeObjectType());
  Asserts.assertResolvesToSame(NUMBER_OBJECT_TYPE);
}
