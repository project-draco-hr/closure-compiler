{
  assertTrue(NO_TYPE.isSubtype(NO_TYPE));
  assertTrue(NO_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(ARRAY_TYPE));
  assertTrue(NO_TYPE.isSubtype(BOOLEAN_TYPE));
  assertTrue(NO_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(DATE_TYPE));
  assertTrue(NO_TYPE.isSubtype(ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(functionType));
  assertTrue(NO_TYPE.isSubtype(NULL_TYPE));
  assertTrue(NO_TYPE.isSubtype(NUMBER_TYPE));
  assertTrue(NO_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(URI_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(REGEXP_TYPE));
  assertTrue(NO_TYPE.isSubtype(STRING_TYPE));
  assertTrue(NO_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(ALL_TYPE));
  assertTrue(NO_TYPE.isSubtype(VOID_TYPE));
  assertFalse(NO_OBJECT_TYPE.isSubtype(NO_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(NO_OBJECT_TYPE.isSubtype(BOOLEAN_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(DATE_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(functionType));
  assertFalse(NO_OBJECT_TYPE.isSubtype(NULL_TYPE));
  assertFalse(NO_OBJECT_TYPE.isSubtype(NUMBER_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(URI_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(NO_OBJECT_TYPE.isSubtype(STRING_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(ALL_TYPE));
  assertFalse(NO_OBJECT_TYPE.isSubtype(VOID_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(NO_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(BOOLEAN_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(DATE_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(functionType));
  assertFalse(ARRAY_TYPE.isSubtype(NULL_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(STRING_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(ALL_TYPE));
  assertFalse(ARRAY_TYPE.isSubtype(VOID_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(NO_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(ARRAY_TYPE));
  assertTrue(BOOLEAN_TYPE.isSubtype(BOOLEAN_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(DATE_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(functionType));
  assertFalse(BOOLEAN_TYPE.isSubtype(NULL_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(STRING_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(BOOLEAN_TYPE.isSubtype(ALL_TYPE));
  assertFalse(BOOLEAN_TYPE.isSubtype(VOID_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NO_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(BOOLEAN_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(DATE_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(functionType));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NULL_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(STRING_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(ALL_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(VOID_TYPE));
  assertFalse(DATE_TYPE.isSubtype(NO_TYPE));
  assertFalse(DATE_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertFalse(DATE_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(DATE_TYPE.isSubtype(BOOLEAN_TYPE));
  assertFalse(DATE_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertTrue(DATE_TYPE.isSubtype(DATE_TYPE));
  assertFalse(DATE_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(DATE_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(DATE_TYPE.isSubtype(functionType));
  assertFalse(DATE_TYPE.isSubtype(NULL_TYPE));
  assertFalse(DATE_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(DATE_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(DATE_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(DATE_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(DATE_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(DATE_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertFalse(DATE_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(DATE_TYPE.isSubtype(STRING_TYPE));
  assertFalse(DATE_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(DATE_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(DATE_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(DATE_TYPE.isSubtype(ALL_TYPE));
  assertFalse(DATE_TYPE.isSubtype(VOID_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(NO_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(BOOLEAN_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(DATE_TYPE));
  assertTrue(ERROR_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(functionType));
  assertFalse(ERROR_TYPE.isSubtype(NULL_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(ERROR_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(STRING_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(ERROR_TYPE.isSubtype(ALL_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(VOID_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(NO_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(BOOLEAN_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(DATE_TYPE));
  assertTrue(EVAL_ERROR_TYPE.isSubtype(ERROR_TYPE));
  assertTrue(EVAL_ERROR_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(functionType));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(NULL_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(EVAL_ERROR_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(STRING_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(EVAL_ERROR_TYPE.isSubtype(ALL_TYPE));
  assertFalse(EVAL_ERROR_TYPE.isSubtype(VOID_TYPE));
  assertTrue(RANGE_ERROR_TYPE.isSubtype(ERROR_TYPE));
  assertTrue(REFERENCE_ERROR_TYPE.isSubtype(ERROR_TYPE));
  assertTrue(TYPE_ERROR_TYPE.isSubtype(ERROR_TYPE));
  assertTrue(URI_ERROR_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(ALL_TYPE.isSubtype(NO_TYPE));
  assertFalse(ALL_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertFalse(ALL_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(ALL_TYPE.isSubtype(BOOLEAN_TYPE));
  assertFalse(ALL_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertFalse(ERROR_TYPE.isSubtype(DATE_TYPE));
  assertFalse(ALL_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(ALL_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(ALL_TYPE.isSubtype(functionType));
  assertFalse(ALL_TYPE.isSubtype(NULL_TYPE));
  assertFalse(ALL_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(ALL_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertFalse(ALL_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(ALL_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(ALL_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(ALL_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertFalse(ALL_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(ALL_TYPE.isSubtype(STRING_TYPE));
  assertFalse(ALL_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(ALL_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(ALL_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(ALL_TYPE.isSubtype(ALL_TYPE));
  assertFalse(ALL_TYPE.isSubtype(VOID_TYPE));
}
