{
  assertFalse(STRING_TYPE.isArrayType());
  assertFalse(STRING_TYPE.isBooleanObjectType());
  assertFalse(STRING_TYPE.isBooleanValueType());
  assertFalse(STRING_TYPE.isDateType());
  assertFalse(STRING_TYPE.isEnumElementType());
  assertFalse(STRING_TYPE.isNamedType());
  assertFalse(STRING_TYPE.isNullType());
  assertFalse(STRING_TYPE.isNumber());
  assertFalse(STRING_TYPE.isNumberObjectType());
  assertFalse(STRING_TYPE.isNumberValueType());
  assertFalse(STRING_TYPE.isFunctionPrototypeType());
  assertFalse(STRING_TYPE.isRegexpType());
  assertTrue(STRING_TYPE.isString());
  assertFalse(STRING_TYPE.isStringObjectType());
  assertTrue(STRING_TYPE.isStringValueType());
  assertFalse(STRING_TYPE.isEnumType());
  assertFalse(STRING_TYPE.isUnionType());
  assertFalse(STRING_TYPE.isStruct());
  assertFalse(STRING_TYPE.isDict());
  assertFalse(STRING_TYPE.isAllType());
  assertFalse(STRING_TYPE.isVoidType());
  assertFalse(STRING_TYPE.isConstructor());
  assertFalse(STRING_TYPE.isInstanceType());
  assertTypeEquals(STRING_OBJECT_TYPE,STRING_TYPE.autoboxesTo());
  assertTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.unboxesTo());
  assertTrue(STRING_TYPE.canAssignTo(ALL_TYPE));
  assertFalse(STRING_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(STRING_TYPE.canAssignTo(NUMBER_TYPE));
  assertFalse(STRING_TYPE.canAssignTo(OBJECT_TYPE));
  assertFalse(STRING_TYPE.canAssignTo(NUMBER_TYPE));
  assertFalse(STRING_TYPE.canAssignTo(DATE_TYPE));
  assertFalse(STRING_TYPE.canAssignTo(REGEXP_TYPE));
  assertFalse(STRING_TYPE.canAssignTo(ARRAY_TYPE));
  assertTrue(STRING_TYPE.canAssignTo(STRING_TYPE));
  assertTrue(STRING_TYPE.canAssignTo(UNKNOWN_TYPE));
  assertFalse(STRING_TYPE.canBeCalled());
  assertCanTestForEqualityWith(STRING_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,STRING_OBJECT_TYPE);
  assertCannotTestForEqualityWith(STRING_TYPE,functionType);
  assertCanTestForEqualityWith(STRING_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,BOOLEAN_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,BOOLEAN_OBJECT_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,REGEXP_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,ARRAY_TYPE);
  assertCanTestForEqualityWith(STRING_TYPE,UNKNOWN_TYPE);
  assertTrue(STRING_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertTrue(STRING_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(STRING_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(STRING_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(STRING_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));
  assertTrue(STRING_TYPE.matchesInt32Context());
  assertTrue(STRING_TYPE.matchesNumberContext());
  assertTrue(STRING_TYPE.matchesObjectContext());
  assertTrue(STRING_TYPE.matchesStringContext());
  assertTrue(STRING_TYPE.matchesUint32Context());
  assertFalse(STRING_TYPE.isNullable());
  assertTrue(createNullableType(STRING_TYPE).isNullable());
  assertEquals("string",STRING_TYPE.toString());
  assertTrue(STRING_TYPE.hasDisplayName());
  assertEquals("string",STRING_TYPE.getDisplayName());
  assertTypeEquals(NUMBER_TYPE,STRING_TYPE.findPropertyType("length"));
  assertEquals(null,STRING_TYPE.findPropertyType("unknownProperty"));
  Asserts.assertResolvesToSame(STRING_TYPE);
  assertFalse(STRING_TYPE.isNominalConstructor());
}
