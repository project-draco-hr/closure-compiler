{
  EnumType enumType=new EnumType(registry,"Enum",NUMBER_TYPE);
  assertFalse(enumType.isArrayType());
  assertFalse(enumType.isBooleanObjectType());
  assertFalse(enumType.isBooleanValueType());
  assertFalse(enumType.isDateType());
  assertFalse(enumType.isEnumElementType());
  assertFalse(enumType.isNamedType());
  assertFalse(enumType.isNullType());
  assertFalse(enumType.isNumberObjectType());
  assertFalse(enumType.isNumberValueType());
  assertFalse(enumType.isFunctionPrototypeType());
  assertFalse(enumType.isRegexpType());
  assertFalse(enumType.isStringObjectType());
  assertFalse(enumType.isStringValueType());
  assertTrue(enumType.isEnumType());
  assertFalse(enumType.isUnionType());
  assertFalse(enumType.isAllType());
  assertFalse(enumType.isVoidType());
  assertFalse(enumType.isConstructor());
  assertFalse(enumType.isInstanceType());
  assertTrue(enumType.canAssignTo(ALL_TYPE));
  assertFalse(enumType.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(enumType.canAssignTo(NUMBER_TYPE));
  assertFalse(enumType.canAssignTo(functionType));
  assertFalse(enumType.canAssignTo(NULL_TYPE));
  assertTrue(enumType.canAssignTo(OBJECT_TYPE));
  assertFalse(enumType.canAssignTo(DATE_TYPE));
  assertTrue(enumType.canAssignTo(unresolvedNamedType));
  assertFalse(enumType.canAssignTo(namedGoogBar));
  assertFalse(enumType.canAssignTo(REGEXP_TYPE));
  assertFalse(enumType.canBeCalled());
  assertTrue(enumType.canTestForEqualityWith(ALL_TYPE));
  assertTrue(enumType.canTestForEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(enumType.canTestForEqualityWith(NUMBER_TYPE));
  assertTrue(enumType.canTestForEqualityWith(functionType));
  assertFalse(enumType.canTestForEqualityWith(VOID_TYPE));
  assertTrue(enumType.canTestForEqualityWith(OBJECT_TYPE));
  assertTrue(enumType.canTestForEqualityWith(DATE_TYPE));
  assertTrue(enumType.canTestForEqualityWith(REGEXP_TYPE));
  assertTrue(enumType.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(enumType.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertTrue(enumType.canTestForShallowEqualityWith(enumType));
  assertFalse(enumType.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(functionType));
  assertFalse(enumType.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(enumType.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(enumType.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(enumType.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(enumType.isNullable());
  assertFalse(enumType.matchesInt32Context());
  assertFalse(enumType.matchesNumberContext());
  assertTrue(enumType.matchesObjectContext());
  assertTrue(enumType.matchesStringContext());
  assertFalse(enumType.matchesUint32Context());
  assertEquals("enum{Enum}",enumType.toString());
}
