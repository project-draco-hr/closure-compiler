{
  assertFalse(BOOLEAN_OBJECT_TYPE.isArrayType());
  assertTrue(BOOLEAN_OBJECT_TYPE.isBooleanObjectType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isBooleanValueType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isDateType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isEnumElementType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isNamedType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isNullType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isNumberObjectType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isNumberValueType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isFunctionPrototypeType());
  assertTrue(BOOLEAN_OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isRegexpType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isStringObjectType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isStringValueType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isEnumType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isUnionType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isStruct());
  assertFalse(BOOLEAN_OBJECT_TYPE.isDict());
  assertFalse(BOOLEAN_OBJECT_TYPE.isAllType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isVoidType());
  assertFalse(BOOLEAN_OBJECT_TYPE.isConstructor());
  assertTrue(BOOLEAN_OBJECT_TYPE.isInstanceType());
  assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(ALL_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(functionType));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(NULL_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(DATE_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.isSubtype(unresolvedNamedType));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(namedGoogBar));
  assertFalse(BOOLEAN_OBJECT_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canBeCalled());
  assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE,functionType);
  assertCannotTestForEqualityWith(BOOLEAN_OBJECT_TYPE,VOID_TYPE);
  assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE,REGEXP_TYPE);
  assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(BOOLEAN_OBJECT_TYPE.isNullable());
  assertFalse(BOOLEAN_OBJECT_TYPE.isVoidable());
  assertTrue(BOOLEAN_OBJECT_TYPE.matchesInt32Context());
  assertTrue(BOOLEAN_OBJECT_TYPE.matchesNumberContext());
  assertTrue(BOOLEAN_OBJECT_TYPE.matchesObjectContext());
  assertTrue(BOOLEAN_OBJECT_TYPE.matchesStringContext());
  assertTrue(BOOLEAN_OBJECT_TYPE.matchesUint32Context());
  assertEquals("Boolean",BOOLEAN_OBJECT_TYPE.toString());
  assertTrue(BOOLEAN_OBJECT_TYPE.hasDisplayName());
  assertEquals("Boolean",BOOLEAN_OBJECT_TYPE.getDisplayName());
  assertTrue(BOOLEAN_OBJECT_TYPE.isNativeObjectType());
  Asserts.assertResolvesToSame(BOOLEAN_OBJECT_TYPE);
}
