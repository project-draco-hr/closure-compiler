{
  assertFalse(DATE_TYPE.isArrayType());
  assertFalse(DATE_TYPE.isBooleanValueType());
  assertTrue(DATE_TYPE.isDateType());
  assertFalse(DATE_TYPE.isEnumElementType());
  assertFalse(DATE_TYPE.isNamedType());
  assertFalse(DATE_TYPE.isNullType());
  assertFalse(DATE_TYPE.isNumberValueType());
  assertFalse(DATE_TYPE.isFunctionPrototypeType());
  assertTrue(DATE_TYPE.getImplicitPrototype().isFunctionPrototypeType());
  assertFalse(DATE_TYPE.isRegexpType());
  assertFalse(DATE_TYPE.isStringValueType());
  assertFalse(DATE_TYPE.isEnumType());
  assertFalse(DATE_TYPE.isUnionType());
  assertFalse(DATE_TYPE.isAllType());
  assertFalse(DATE_TYPE.isVoidType());
  assertFalse(DATE_TYPE.isConstructor());
  assertTrue(DATE_TYPE.isInstanceType());
  assertNull(DATE_TYPE.autoboxesTo());
  assertFalse(DATE_TYPE.canAssignTo(NO_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(NO_OBJECT_TYPE));
  assertFalse(DATE_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(BOOLEAN_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));
  assertTrue(DATE_TYPE.canAssignTo(DATE_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(ERROR_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(EVAL_ERROR_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(functionType));
  assertFalse(DATE_TYPE.canAssignTo(NULL_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(NUMBER_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));
  assertTrue(DATE_TYPE.canAssignTo(OBJECT_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(URI_ERROR_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(RANGE_ERROR_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(REGEXP_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(STRING_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(TYPE_ERROR_TYPE));
  assertTrue(DATE_TYPE.canAssignTo(ALL_TYPE));
  assertFalse(DATE_TYPE.canAssignTo(VOID_TYPE));
  assertFalse(DATE_TYPE.canBeCalled());
  assertCanTestForEqualityWith(DATE_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(DATE_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(DATE_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(DATE_TYPE,functionType);
  assertCannotTestForEqualityWith(DATE_TYPE,VOID_TYPE);
  assertCanTestForEqualityWith(DATE_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(DATE_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(DATE_TYPE,REGEXP_TYPE);
  assertCanTestForEqualityWith(DATE_TYPE,ARRAY_TYPE);
  assertTrue(DATE_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(DATE_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertTrue(DATE_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(DATE_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(DATE_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(DATE_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(DATE_TYPE.isNullable());
  assertTrue(createNullableType(DATE_TYPE).isNullable());
  assertTypeEquals(ALL_TYPE,DATE_TYPE.getLeastSupertype(ALL_TYPE));
  assertTypeEquals(createUnionType(DATE_TYPE,STRING_OBJECT_TYPE),DATE_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));
  assertTypeEquals(createUnionType(DATE_TYPE,NUMBER_TYPE),DATE_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertTypeEquals(createUnionType(DATE_TYPE,functionType),DATE_TYPE.getLeastSupertype(functionType));
  assertTypeEquals(OBJECT_TYPE,DATE_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertTypeEquals(DATE_TYPE,DATE_TYPE.getLeastSupertype(DATE_TYPE));
  assertTypeEquals(createUnionType(DATE_TYPE,REGEXP_TYPE),DATE_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertEquals(46,DATE_TYPE.getImplicitPrototype().getPropertiesCount());
  assertEquals(46,DATE_TYPE.getPropertiesCount());
  assertReturnTypeEquals(DATE_TYPE,DATE_TYPE.getPropertyType("constructor"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toString"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toDateString"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toTimeString"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toLocaleString"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toLocaleDateString"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toLocaleTimeString"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("valueOf"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getTime"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getFullYear"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCFullYear"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getMonth"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCMonth"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getDate"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCDate"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getDay"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCDay"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getHours"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCHours"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getMinutes"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCMinutes"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getSeconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCSeconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getMilliseconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getUTCMilliseconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("getTimezoneOffset"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setTime"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setMilliseconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCMilliseconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setSeconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCSeconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCSeconds"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setMinutes"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCMinutes"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setHours"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCHours"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setDate"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCDate"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setMonth"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCMonth"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setFullYear"));
  assertReturnTypeEquals(NUMBER_TYPE,DATE_TYPE.getPropertyType("setUTCFullYear"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toUTCString"));
  assertReturnTypeEquals(STRING_TYPE,DATE_TYPE.getPropertyType("toGMTString"));
  assertTrue(DATE_TYPE.matchesInt32Context());
  assertTrue(DATE_TYPE.matchesNumberContext());
  assertTrue(DATE_TYPE.matchesObjectContext());
  assertTrue(DATE_TYPE.matchesStringContext());
  assertTrue(DATE_TYPE.matchesUint32Context());
  assertEquals("Date",DATE_TYPE.toString());
  assertTrue(DATE_TYPE.isNativeObjectType());
  Asserts.assertResolvesToSame(DATE_TYPE);
}
