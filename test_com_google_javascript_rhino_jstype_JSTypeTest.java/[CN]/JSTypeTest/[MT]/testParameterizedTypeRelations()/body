{
  JSType objectOfString=createParameterizedType(OBJECT_TYPE,STRING_TYPE);
  JSType arrayOfString=createParameterizedType(ARRAY_TYPE,STRING_TYPE);
  JSType arrayOfNumber=createParameterizedType(ARRAY_TYPE,NUMBER_TYPE);
  JSType arrayOfUnknown=createParameterizedType(ARRAY_TYPE,UNKNOWN_TYPE);
  assertFalse(objectOfString.isSubtype(ARRAY_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(objectOfString));
  assertFalse(objectOfString.isSubtype(ARRAY_TYPE));
  assertTrue(ARRAY_TYPE.isSubtype(objectOfString));
  assertTypeEquals(OBJECT_TYPE,JSType.getLeastSupertype(arrayOfString,OBJECT_TYPE));
  assertTypeEquals(OBJECT_TYPE,JSType.getLeastSupertype(OBJECT_TYPE,arrayOfString));
  assertTypeEquals(ARRAY_TYPE,JSType.getLeastSupertype(arrayOfString,ARRAY_TYPE));
  assertTypeEquals(ARRAY_TYPE,JSType.getLeastSupertype(ARRAY_TYPE,arrayOfString));
  assertEquals("(Array|Object.<string>)",JSType.getLeastSupertype(objectOfString,ARRAY_TYPE).toString());
  assertEquals("(Array|Object.<string>)",JSType.getLeastSupertype(ARRAY_TYPE,objectOfString).toString());
  assertEquals("Array",JSType.getLeastSupertype(arrayOfString,arrayOfNumber).toString());
  assertEquals("Array",JSType.getLeastSupertype(arrayOfNumber,arrayOfString).toString());
  assertTypeEquals(arrayOfString,JSType.getLeastSupertype(arrayOfString,arrayOfString));
  assertEquals("(Array.<string>|Object.<string>)",JSType.getLeastSupertype(objectOfString,arrayOfString).toString());
  assertEquals("(Array.<string>|Object.<string>)",JSType.getLeastSupertype(arrayOfString,objectOfString).toString());
  assertTypeEquals(objectOfString,JSType.getGreatestSubtype(OBJECT_TYPE,objectOfString));
  assertTypeEquals(objectOfString,JSType.getGreatestSubtype(objectOfString,OBJECT_TYPE));
  assertTypeEquals(ARRAY_TYPE,JSType.getGreatestSubtype(objectOfString,ARRAY_TYPE));
  assertTypeEquals(JSType.getGreatestSubtype(objectOfString,arrayOfString),NO_OBJECT_TYPE);
  assertTypeEquals(JSType.getGreatestSubtype(OBJECT_TYPE,arrayOfString),arrayOfString);
}
