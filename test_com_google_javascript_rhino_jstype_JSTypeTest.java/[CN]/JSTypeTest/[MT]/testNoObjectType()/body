{
  assertTrue(NO_OBJECT_TYPE.isNoObjectType());
  assertFalse(NO_OBJECT_TYPE.isNoType());
  assertFalse(NO_OBJECT_TYPE.isArrayType());
  assertFalse(NO_OBJECT_TYPE.isBooleanValueType());
  assertFalse(NO_OBJECT_TYPE.isDateType());
  assertFalse(NO_OBJECT_TYPE.isEnumElementType());
  assertFalse(NO_OBJECT_TYPE.isNullType());
  assertFalse(NO_OBJECT_TYPE.isNamedType());
  assertFalse(NO_OBJECT_TYPE.isNullType());
  assertTrue(NO_OBJECT_TYPE.isNumber());
  assertFalse(NO_OBJECT_TYPE.isNumberObjectType());
  assertFalse(NO_OBJECT_TYPE.isNumberValueType());
  assertTrue(NO_OBJECT_TYPE.isObject());
  assertFalse(NO_OBJECT_TYPE.isFunctionPrototypeType());
  assertFalse(NO_OBJECT_TYPE.isRegexpType());
  assertTrue(NO_OBJECT_TYPE.isString());
  assertFalse(NO_OBJECT_TYPE.isStringObjectType());
  assertFalse(NO_OBJECT_TYPE.isStringValueType());
  assertFalse(NO_OBJECT_TYPE.isEnumType());
  assertFalse(NO_OBJECT_TYPE.isUnionType());
  assertFalse(NO_OBJECT_TYPE.isAllType());
  assertFalse(NO_OBJECT_TYPE.isVoidType());
  assertTrue(NO_OBJECT_TYPE.isConstructor());
  assertFalse(NO_OBJECT_TYPE.isInstanceType());
  assertFalse(NO_OBJECT_TYPE.canAssignTo(NO_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(NO_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(NO_OBJECT_TYPE.canAssignTo(BOOLEAN_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(BOOLEAN_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(DATE_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(EVAL_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(functionType));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(recordType));
  assertFalse(NO_OBJECT_TYPE.canAssignTo(NULL_TYPE));
  assertFalse(NO_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(NUMBER_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(URI_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(RANGE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(REFERENCE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));
  assertFalse(NO_OBJECT_TYPE.canAssignTo(STRING_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(SYNTAX_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(TYPE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canAssignTo(ALL_TYPE));
  assertFalse(NO_OBJECT_TYPE.canAssignTo(VOID_TYPE));
  assertFalse(NO_OBJECT_TYPE.canTestForEqualityWith(NO_TYPE));
  assertFalse(NO_OBJECT_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(ALL_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(ARRAY_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(DATE_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(functionType));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(recordType));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(NULL_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(NUMBER_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(URI_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(RANGE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(REFERENCE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(REGEXP_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(STRING_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(SYNTAX_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(VOID_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(functionType));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(recordType));
  assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(NO_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(NO_OBJECT_TYPE.isNullable());
  assertTrue(NO_OBJECT_TYPE.isObject());
  assertTrue(NO_OBJECT_TYPE.matchesInt32Context());
  assertTrue(NO_OBJECT_TYPE.matchesNumberContext());
  assertTrue(NO_OBJECT_TYPE.matchesObjectContext());
  assertTrue(NO_OBJECT_TYPE.matchesStringContext());
  assertTrue(NO_OBJECT_TYPE.matchesUint32Context());
  assertEquals("NoObject",NO_OBJECT_TYPE.toString());
  assertEquals(NO_TYPE,NO_OBJECT_TYPE.getPropertyType("anyProperty"));
}
