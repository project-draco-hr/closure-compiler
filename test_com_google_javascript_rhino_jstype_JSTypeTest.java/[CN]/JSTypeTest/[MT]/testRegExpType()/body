{
  assertFalse(REGEXP_TYPE.isNoType());
  assertFalse(REGEXP_TYPE.isNoObjectType());
  assertFalse(REGEXP_TYPE.isArrayType());
  assertFalse(REGEXP_TYPE.isBooleanValueType());
  assertFalse(REGEXP_TYPE.isDateType());
  assertFalse(REGEXP_TYPE.isEnumElementType());
  assertFalse(REGEXP_TYPE.isNamedType());
  assertFalse(REGEXP_TYPE.isNullType());
  assertFalse(REGEXP_TYPE.isNumberValueType());
  assertFalse(REGEXP_TYPE.isFunctionPrototypeType());
  assertTrue(REGEXP_TYPE.getImplicitPrototype().isFunctionPrototypeType());
  assertTrue(REGEXP_TYPE.isRegexpType());
  assertFalse(REGEXP_TYPE.isStringValueType());
  assertFalse(REGEXP_TYPE.isEnumType());
  assertFalse(REGEXP_TYPE.isUnionType());
  assertFalse(REGEXP_TYPE.isStruct());
  assertFalse(REGEXP_TYPE.isDict());
  assertFalse(REGEXP_TYPE.isAllType());
  assertFalse(REGEXP_TYPE.isVoidType());
  assertNull(REGEXP_TYPE.autoboxesTo());
  assertFalse(REGEXP_TYPE.isSubtype(NO_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(ARRAY_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(BOOLEAN_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(DATE_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(ERROR_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(functionType));
  assertFalse(REGEXP_TYPE.isSubtype(NULL_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(NUMBER_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(REGEXP_TYPE.isSubtype(OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(URI_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertTrue(REGEXP_TYPE.isSubtype(REGEXP_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(STRING_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(REGEXP_TYPE.isSubtype(ALL_TYPE));
  assertFalse(REGEXP_TYPE.isSubtype(VOID_TYPE));
  assertTrue(REGEXP_TYPE.canBeCalled());
  assertCanTestForEqualityWith(REGEXP_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(REGEXP_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(REGEXP_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(REGEXP_TYPE,functionType);
  assertCannotTestForEqualityWith(REGEXP_TYPE,VOID_TYPE);
  assertCanTestForEqualityWith(REGEXP_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(REGEXP_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(REGEXP_TYPE,REGEXP_TYPE);
  assertCanTestForEqualityWith(REGEXP_TYPE,ARRAY_TYPE);
  assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(REGEXP_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(REGEXP_TYPE.isNullable());
  assertTrue(createNullableType(REGEXP_TYPE).isNullable());
  assertTypeEquals(ALL_TYPE,REGEXP_TYPE.getLeastSupertype(ALL_TYPE));
  assertTypeEquals(createUnionType(REGEXP_TYPE,STRING_OBJECT_TYPE),REGEXP_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));
  assertTypeEquals(createUnionType(REGEXP_TYPE,NUMBER_TYPE),REGEXP_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertTypeEquals(createUnionType(REGEXP_TYPE,functionType),REGEXP_TYPE.getLeastSupertype(functionType));
  assertTypeEquals(OBJECT_TYPE,REGEXP_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertTypeEquals(createUnionType(DATE_TYPE,REGEXP_TYPE),REGEXP_TYPE.getLeastSupertype(DATE_TYPE));
  assertTypeEquals(REGEXP_TYPE,REGEXP_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertEquals(9,REGEXP_TYPE.getImplicitPrototype().getPropertiesCount());
  assertEquals(14,REGEXP_TYPE.getPropertiesCount());
  assertReturnTypeEquals(REGEXP_TYPE,REGEXP_TYPE.getPropertyType("constructor"));
  assertReturnTypeEquals(createNullableType(ARRAY_TYPE),REGEXP_TYPE.getPropertyType("exec"));
  assertReturnTypeEquals(BOOLEAN_TYPE,REGEXP_TYPE.getPropertyType("test"));
  assertReturnTypeEquals(STRING_TYPE,REGEXP_TYPE.getPropertyType("toString"));
  assertTypeEquals(STRING_TYPE,REGEXP_TYPE.getPropertyType("source"));
  assertTypeEquals(BOOLEAN_TYPE,REGEXP_TYPE.getPropertyType("global"));
  assertTypeEquals(BOOLEAN_TYPE,REGEXP_TYPE.getPropertyType("ignoreCase"));
  assertTypeEquals(BOOLEAN_TYPE,REGEXP_TYPE.getPropertyType("multiline"));
  assertTypeEquals(NUMBER_TYPE,REGEXP_TYPE.getPropertyType("lastIndex"));
  assertFalse(REGEXP_TYPE.matchesInt32Context());
  assertFalse(REGEXP_TYPE.matchesNumberContext());
  assertTrue(REGEXP_TYPE.matchesObjectContext());
  assertTrue(REGEXP_TYPE.matchesStringContext());
  assertFalse(REGEXP_TYPE.matchesUint32Context());
  assertEquals("RegExp",REGEXP_TYPE.toString());
  assertTrue(REGEXP_TYPE.hasDisplayName());
  assertEquals("RegExp",REGEXP_TYPE.getDisplayName());
  assertTrue(REGEXP_TYPE.isNativeObjectType());
  Asserts.assertResolvesToSame(REGEXP_TYPE);
  assertFalse(REGEXP_TYPE.isNominalConstructor());
  assertTrue(REGEXP_TYPE.getConstructor().isNominalConstructor());
}
