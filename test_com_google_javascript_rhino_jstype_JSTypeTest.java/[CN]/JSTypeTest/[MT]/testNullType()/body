{
  assertFalse(NULL_TYPE.isArrayType());
  assertFalse(NULL_TYPE.isBooleanValueType());
  assertFalse(NULL_TYPE.isDateType());
  assertFalse(NULL_TYPE.isEnumElementType());
  assertFalse(NULL_TYPE.isNamedType());
  assertTrue(NULL_TYPE.isNullType());
  assertFalse(NULL_TYPE.isNumber());
  assertFalse(NULL_TYPE.isNumberObjectType());
  assertFalse(NULL_TYPE.isNumberValueType());
  assertFalse(NULL_TYPE.isFunctionPrototypeType());
  assertFalse(NULL_TYPE.isRegexpType());
  assertFalse(NULL_TYPE.isString());
  assertFalse(NULL_TYPE.isStringObjectType());
  assertFalse(NULL_TYPE.isStringValueType());
  assertFalse(NULL_TYPE.isEnumType());
  assertFalse(NULL_TYPE.isUnionType());
  assertFalse(NULL_TYPE.isAllType());
  assertFalse(NULL_TYPE.isVoidType());
  assertFalse(NULL_TYPE.isConstructor());
  assertFalse(NULL_TYPE.isInstanceType());
  assertNull(NULL_TYPE.autoboxesTo());
  assertFalse(NULL_TYPE.canAssignTo(NO_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canAssignTo(NO_TYPE));
  assertTrue(NULL_TYPE.canAssignTo(NULL_TYPE));
  assertTrue(NULL_TYPE.canAssignTo(ALL_TYPE));
  assertFalse(NULL_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canAssignTo(NUMBER_TYPE));
  assertFalse(NULL_TYPE.canAssignTo(functionType));
  assertFalse(NULL_TYPE.canAssignTo(OBJECT_TYPE));
  assertFalse(NULL_TYPE.canAssignTo(DATE_TYPE));
  assertFalse(NULL_TYPE.canAssignTo(REGEXP_TYPE));
  assertFalse(NULL_TYPE.canAssignTo(ARRAY_TYPE));
  assertTrue(NULL_TYPE.canAssignTo(UNKNOWN_TYPE));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(NO_OBJECT_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(NO_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(NULL_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(ALL_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(STRING_OBJECT_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(NUMBER_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(functionType)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(OBJECT_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(DATE_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(REGEXP_TYPE)));
  assertTrue(NULL_TYPE.canAssignTo(createNullableType(ARRAY_TYPE)));
  assertFalse(NULL_TYPE.canBeCalled());
  assertTrue(NULL_TYPE.canTestForEqualityWith(NO_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));
  assertTrue(NULL_TYPE.canTestForEqualityWith(ALL_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(ARRAY_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(DATE_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(functionType));
  assertFalse(NULL_TYPE.canTestForEqualityWith(NULL_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(NUMBER_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(NUMBER_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(URI_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(REGEXP_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(STRING_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(TYPE_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForEqualityWith(VOID_TYPE));
  assertTrue(NULL_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(functionType));
  assertTrue(NULL_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(NULL_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(NULL_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(NULL_TYPE.canTestForShallowEqualityWith(createNullableType(STRING_OBJECT_TYPE)));
  assertTypeEquals(NULL_TYPE,NULL_TYPE.getLeastSupertype(NULL_TYPE));
  assertTypeEquals(ALL_TYPE,NULL_TYPE.getLeastSupertype(ALL_TYPE));
  assertTypeEquals(createNullableType(STRING_OBJECT_TYPE),NULL_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));
  assertTypeEquals(createNullableType(NUMBER_TYPE),NULL_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertTypeEquals(createNullableType(functionType),NULL_TYPE.getLeastSupertype(functionType));
  assertTypeEquals(createNullableType(OBJECT_TYPE),NULL_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertTypeEquals(createNullableType(DATE_TYPE),NULL_TYPE.getLeastSupertype(DATE_TYPE));
  assertTypeEquals(createNullableType(REGEXP_TYPE),NULL_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertTrue(NULL_TYPE.matchesInt32Context());
  assertTrue(NULL_TYPE.matchesNumberContext());
  assertFalse(NULL_TYPE.matchesObjectContext());
  assertTrue(NULL_TYPE.matchesStringContext());
  assertTrue(NULL_TYPE.matchesUint32Context());
  assertFalse(NULL_TYPE.matchesObjectContext());
  assertEquals("null",NULL_TYPE.toString());
  Asserts.assertResolvesToSame(NULL_TYPE);
}
