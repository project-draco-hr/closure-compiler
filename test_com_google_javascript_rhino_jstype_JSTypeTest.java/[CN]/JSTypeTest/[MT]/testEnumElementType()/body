{
  assertFalse(elementsType.isArrayType());
  assertFalse(elementsType.isBooleanObjectType());
  assertFalse(elementsType.isBooleanValueType());
  assertFalse(elementsType.isDateType());
  assertTrue(elementsType.isEnumElementType());
  assertFalse(elementsType.isNamedType());
  assertFalse(elementsType.isNullType());
  assertFalse(elementsType.isNumberObjectType());
  assertFalse(elementsType.isNumberValueType());
  assertFalse(elementsType.isFunctionPrototypeType());
  assertFalse(elementsType.isRegexpType());
  assertFalse(elementsType.isStringObjectType());
  assertFalse(elementsType.isStringValueType());
  assertFalse(elementsType.isEnumType());
  assertFalse(elementsType.isUnionType());
  assertFalse(elementsType.isAllType());
  assertFalse(elementsType.isVoidType());
  assertFalse(elementsType.isConstructor());
  assertFalse(elementsType.isInstanceType());
  assertTrue(elementsType.canAssignTo(ALL_TYPE));
  assertFalse(elementsType.canAssignTo(STRING_OBJECT_TYPE));
  assertTrue(elementsType.canAssignTo(NUMBER_TYPE));
  assertFalse(elementsType.canAssignTo(functionType));
  assertFalse(elementsType.canAssignTo(NULL_TYPE));
  assertFalse(elementsType.canAssignTo(OBJECT_TYPE));
  assertFalse(elementsType.canAssignTo(DATE_TYPE));
  assertTrue(elementsType.canAssignTo(unresolvedNamedType));
  assertFalse(elementsType.canAssignTo(namedGoogBar));
  assertFalse(elementsType.canAssignTo(REGEXP_TYPE));
  assertFalse(elementsType.canBeCalled());
  assertTrue(elementsType.canTestForEqualityWith(ALL_TYPE));
  assertTrue(elementsType.canTestForEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(elementsType.canTestForEqualityWith(NUMBER_TYPE));
  assertTrue(elementsType.canTestForEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(elementsType.canTestForEqualityWith(elementsType));
  assertTrue(elementsType.canTestForEqualityWith(functionType));
  assertFalse(elementsType.canTestForEqualityWith(VOID_TYPE));
  assertTrue(elementsType.canTestForEqualityWith(OBJECT_TYPE));
  assertTrue(elementsType.canTestForEqualityWith(DATE_TYPE));
  assertTrue(elementsType.canTestForEqualityWith(REGEXP_TYPE));
  assertTrue(elementsType.canTestForShallowEqualityWith(NO_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertTrue(elementsType.canTestForShallowEqualityWith(elementsType));
  assertFalse(elementsType.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(functionType));
  assertFalse(elementsType.canTestForShallowEqualityWith(NULL_TYPE));
  assertTrue(elementsType.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(elementsType.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(elementsType.canTestForShallowEqualityWith(VOID_TYPE));
  assertFalse(elementsType.isNullable());
  assertTrue(elementsType.matchesInt32Context());
  assertTrue(elementsType.matchesNumberContext());
  assertTrue(elementsType.matchesObjectContext());
  assertTrue(elementsType.matchesStringContext());
  assertTrue(elementsType.matchesUint32Context());
  assertEquals("Enum.<number>",elementsType.toString());
  Asserts.assertResolvesToSame(elementsType);
}
