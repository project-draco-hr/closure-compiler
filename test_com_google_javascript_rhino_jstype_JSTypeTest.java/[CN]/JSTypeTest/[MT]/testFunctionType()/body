{
  assertTrue(functionType.isObject());
  assertFalse(functionType.isFunctionPrototypeType());
  assertTrue(functionType.getImplicitPrototype().getImplicitPrototype().isFunctionPrototypeType());
  assertTrue(functionType.canAssignTo(ALL_TYPE));
  assertFalse(functionType.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(functionType.canAssignTo(NUMBER_TYPE));
  assertFalse(functionType.canAssignTo(DATE_TYPE));
  assertFalse(functionType.canAssignTo(REGEXP_TYPE));
  assertTrue(functionType.canAssignTo(UNKNOWN_TYPE));
  assertTrue(functionType.canAssignTo(U2U_CONSTRUCTOR_TYPE));
  assertNull(functionType.autoboxesTo());
  assertTrue(functionType.canBeCalled());
  assertTrue(functionType.canTestForEqualityWith(ALL_TYPE));
  assertTrue(functionType.canTestForEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(functionType.canTestForEqualityWith(functionType));
  assertTrue(functionType.canTestForEqualityWith(OBJECT_TYPE));
  assertTrue(functionType.canTestForEqualityWith(NUMBER_TYPE));
  assertTrue(functionType.canTestForEqualityWith(DATE_TYPE));
  assertTrue(functionType.canTestForEqualityWith(REGEXP_TYPE));
  assertTrue(functionType.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(functionType.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(functionType.canTestForShallowEqualityWith(functionType));
  assertFalse(functionType.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(functionType.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(functionType.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(functionType.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(functionType.canTestForShallowEqualityWith(UNKNOWN_TYPE));
  assertFalse(functionType.matchesInt32Context());
  assertFalse(functionType.matchesNumberContext());
  assertTrue(functionType.matchesObjectContext());
  assertFalse(functionType.matchesStringContext());
  assertFalse(functionType.matchesUint32Context());
  assertTrue(functionType.hasProperty("prototype"));
  assertPropertyTypeInferred(functionType,"prototype");
}
