{
  FunctionType functionInst=FUNCTION_INSTANCE_TYPE;
  assertTrue(functionInst.isObject());
  assertFalse(functionInst.isFunctionPrototypeType());
  assertTrue(functionInst.getImplicitPrototype().isFunctionPrototypeType());
  assertTrue(functionInst.canAssignTo(ALL_TYPE));
  assertFalse(functionInst.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(functionInst.canAssignTo(NUMBER_TYPE));
  assertFalse(functionInst.canAssignTo(DATE_TYPE));
  assertFalse(functionInst.canAssignTo(REGEXP_TYPE));
  assertTrue(functionInst.canAssignTo(UNKNOWN_TYPE));
  assertTrue(functionInst.canAssignTo(U2U_CONSTRUCTOR_TYPE));
  assertNull(functionInst.autoboxesTo());
  assertTrue(functionInst.canBeCalled());
  assertTrue(functionInst.canTestForEqualityWith(ALL_TYPE));
  assertTrue(functionInst.canTestForEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(functionInst.canTestForEqualityWith(functionInst));
  assertTrue(functionInst.canTestForEqualityWith(OBJECT_TYPE));
  assertTrue(functionInst.canTestForEqualityWith(NUMBER_TYPE));
  assertTrue(functionInst.canTestForEqualityWith(DATE_TYPE));
  assertTrue(functionInst.canTestForEqualityWith(REGEXP_TYPE));
  assertTrue(functionInst.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(functionInst.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(functionInst.canTestForShallowEqualityWith(functionInst));
  assertFalse(functionInst.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(functionInst.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(functionInst.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(functionInst.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(functionInst.canTestForShallowEqualityWith(UNKNOWN_TYPE));
  assertFalse(functionInst.matchesInt32Context());
  assertFalse(functionInst.matchesNumberContext());
  assertTrue(functionInst.matchesObjectContext());
  assertFalse(functionInst.matchesStringContext());
  assertFalse(functionInst.matchesUint32Context());
  assertTrue(functionInst.hasProperty("prototype"));
  assertPropertyTypeInferred(functionInst,"prototype");
  assertEquals(FUNCTION_FUNCTION_TYPE,functionInst.getConstructor());
  assertEquals(FUNCTION_PROTOTYPE,functionInst.getImplicitPrototype());
  assertEquals(functionInst,FUNCTION_FUNCTION_TYPE.getInstanceType());
  Asserts.assertResolvesToSame(functionInst);
}
