{
  assertFalse(NO_TYPE.isNoObjectType());
  assertTrue(NO_TYPE.isNoType());
  assertFalse(NO_TYPE.isArrayType());
  assertFalse(NO_TYPE.isBooleanValueType());
  assertFalse(NO_TYPE.isDateType());
  assertFalse(NO_TYPE.isEnumElementType());
  assertFalse(NO_TYPE.isNullType());
  assertFalse(NO_TYPE.isNamedType());
  assertFalse(NO_TYPE.isNullType());
  assertTrue(NO_TYPE.isNumber());
  assertFalse(NO_TYPE.isNumberObjectType());
  assertFalse(NO_TYPE.isNumberValueType());
  assertTrue(NO_TYPE.isObject());
  assertFalse(NO_TYPE.isFunctionPrototypeType());
  assertFalse(NO_TYPE.isRegexpType());
  assertTrue(NO_TYPE.isString());
  assertFalse(NO_TYPE.isStringObjectType());
  assertFalse(NO_TYPE.isStringValueType());
  assertFalse(NO_TYPE.isEnumType());
  assertFalse(NO_TYPE.isUnionType());
  assertFalse(NO_TYPE.isStruct());
  assertFalse(NO_TYPE.isDict());
  assertFalse(NO_TYPE.isAllType());
  assertFalse(NO_TYPE.isVoidType());
  assertTrue(NO_TYPE.isConstructor());
  assertFalse(NO_TYPE.isInstanceType());
  assertTrue(NO_TYPE.isSubtype(NO_TYPE));
  assertTrue(NO_TYPE.isSubtype(NO_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(ARRAY_TYPE));
  assertTrue(NO_TYPE.isSubtype(BOOLEAN_TYPE));
  assertTrue(NO_TYPE.isSubtype(BOOLEAN_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(DATE_TYPE));
  assertTrue(NO_TYPE.isSubtype(ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(EVAL_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(functionType));
  assertTrue(NO_TYPE.isSubtype(NULL_TYPE));
  assertTrue(NO_TYPE.isSubtype(NUMBER_TYPE));
  assertTrue(NO_TYPE.isSubtype(NUMBER_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(URI_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(RANGE_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(REFERENCE_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(REGEXP_TYPE));
  assertTrue(NO_TYPE.isSubtype(STRING_TYPE));
  assertTrue(NO_TYPE.isSubtype(STRING_OBJECT_TYPE));
  assertTrue(NO_TYPE.isSubtype(SYNTAX_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(TYPE_ERROR_TYPE));
  assertTrue(NO_TYPE.isSubtype(ALL_TYPE));
  assertTrue(NO_TYPE.isSubtype(VOID_TYPE));
  assertCannotTestForEqualityWith(NO_TYPE,NO_TYPE);
  assertCannotTestForEqualityWith(NO_TYPE,NO_OBJECT_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,ARRAY_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,BOOLEAN_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,BOOLEAN_OBJECT_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,ERROR_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,EVAL_ERROR_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,functionType);
  assertCanTestForEqualityWith(NO_TYPE,NULL_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,NUMBER_OBJECT_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,URI_ERROR_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,RANGE_ERROR_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,REFERENCE_ERROR_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,REGEXP_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,STRING_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,SYNTAX_ERROR_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,TYPE_ERROR_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(NO_TYPE,VOID_TYPE);
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(functionType));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertTrue(NO_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(NO_TYPE.isNullable());
  assertTrue(NO_TYPE.isVoidable());
  assertTrue(NO_TYPE.isObject());
  assertTrue(NO_TYPE.matchesInt32Context());
  assertTrue(NO_TYPE.matchesNumberContext());
  assertTrue(NO_TYPE.matchesObjectContext());
  assertTrue(NO_TYPE.matchesStringContext());
  assertTrue(NO_TYPE.matchesUint32Context());
  assertEquals("None",NO_TYPE.toString());
  assertEquals(null,NO_TYPE.getDisplayName());
  assertFalse(NO_TYPE.hasDisplayName());
  assertTypeEquals(NO_TYPE,NO_TYPE.getPropertyType("anyProperty"));
  Asserts.assertResolvesToSame(NO_TYPE);
  assertFalse(NO_TYPE.isNominalConstructor());
}
