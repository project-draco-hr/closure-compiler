{
  assertFalse(STRING_OBJECT_TYPE.isArrayType());
  assertFalse(STRING_OBJECT_TYPE.isBooleanObjectType());
  assertFalse(STRING_OBJECT_TYPE.isBooleanValueType());
  assertFalse(STRING_OBJECT_TYPE.isDateType());
  assertFalse(STRING_OBJECT_TYPE.isEnumElementType());
  assertFalse(STRING_OBJECT_TYPE.isNamedType());
  assertFalse(STRING_OBJECT_TYPE.isNullType());
  assertFalse(STRING_OBJECT_TYPE.isNumber());
  assertFalse(STRING_OBJECT_TYPE.isNumberObjectType());
  assertFalse(STRING_OBJECT_TYPE.isNumberValueType());
  assertFalse(STRING_OBJECT_TYPE.isFunctionPrototypeType());
  assertTrue(STRING_OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());
  assertFalse(STRING_OBJECT_TYPE.isRegexpType());
  assertTrue(STRING_OBJECT_TYPE.isString());
  assertTrue(STRING_OBJECT_TYPE.isStringObjectType());
  assertFalse(STRING_OBJECT_TYPE.isStringValueType());
  assertFalse(STRING_OBJECT_TYPE.isEnumType());
  assertFalse(STRING_OBJECT_TYPE.isUnionType());
  assertFalse(STRING_OBJECT_TYPE.isStruct());
  assertFalse(STRING_OBJECT_TYPE.isDict());
  assertFalse(STRING_OBJECT_TYPE.isAllType());
  assertFalse(STRING_OBJECT_TYPE.isVoidType());
  assertFalse(STRING_OBJECT_TYPE.isConstructor());
  assertTrue(STRING_OBJECT_TYPE.isInstanceType());
  assertTypeEquals(STRING_OBJECT_TYPE,STRING_TYPE.autoboxesTo());
  assertTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.unboxesTo());
  assertTrue(STRING_OBJECT_TYPE.canAssignTo(ALL_TYPE));
  assertTrue(STRING_OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canAssignTo(STRING_TYPE));
  assertTrue(STRING_OBJECT_TYPE.canAssignTo(OBJECT_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canAssignTo(NUMBER_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canAssignTo(DATE_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canAssignTo(REGEXP_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canAssignTo(ARRAY_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canAssignTo(STRING_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canBeCalled());
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,ALL_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,STRING_OBJECT_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,STRING_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,functionType);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,OBJECT_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,NUMBER_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,BOOLEAN_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,BOOLEAN_OBJECT_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,DATE_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,REGEXP_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,ARRAY_TYPE);
  assertCanTestForEqualityWith(STRING_OBJECT_TYPE,UNKNOWN_TYPE);
  assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));
  assertEquals(23,STRING_OBJECT_TYPE.getImplicitPrototype().getPropertiesCount());
  assertEquals(24,STRING_OBJECT_TYPE.getPropertiesCount());
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("toString"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("valueOf"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("charAt"));
  assertReturnTypeEquals(NUMBER_TYPE,STRING_OBJECT_TYPE.getPropertyType("charCodeAt"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("concat"));
  assertReturnTypeEquals(NUMBER_TYPE,STRING_OBJECT_TYPE.getPropertyType("indexOf"));
  assertReturnTypeEquals(NUMBER_TYPE,STRING_OBJECT_TYPE.getPropertyType("lastIndexOf"));
  assertReturnTypeEquals(NUMBER_TYPE,STRING_OBJECT_TYPE.getPropertyType("localeCompare"));
  assertReturnTypeEquals(createNullableType(ARRAY_TYPE),STRING_OBJECT_TYPE.getPropertyType("match"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("replace"));
  assertReturnTypeEquals(NUMBER_TYPE,STRING_OBJECT_TYPE.getPropertyType("search"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("slice"));
  assertReturnTypeEquals(ARRAY_TYPE,STRING_OBJECT_TYPE.getPropertyType("split"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("substring"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("toLowerCase"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("toLocaleLowerCase"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("toUpperCase"));
  assertReturnTypeEquals(STRING_TYPE,STRING_OBJECT_TYPE.getPropertyType("toLocaleUpperCase"));
  assertTypeEquals(NUMBER_TYPE,STRING_OBJECT_TYPE.getPropertyType("length"));
  assertTrue(STRING_OBJECT_TYPE.matchesInt32Context());
  assertTrue(STRING_OBJECT_TYPE.matchesNumberContext());
  assertTrue(STRING_OBJECT_TYPE.matchesObjectContext());
  assertTrue(STRING_OBJECT_TYPE.matchesStringContext());
  assertTrue(STRING_OBJECT_TYPE.matchesUint32Context());
  assertFalse(STRING_OBJECT_TYPE.isNullable());
  assertTrue(createNullableType(STRING_OBJECT_TYPE).isNullable());
  assertTrue(STRING_OBJECT_TYPE.isNativeObjectType());
  Asserts.assertResolvesToSame(STRING_OBJECT_TYPE);
  assertTrue(STRING_OBJECT_TYPE.hasDisplayName());
  assertEquals("String",STRING_OBJECT_TYPE.getDisplayName());
  assertFalse(STRING_OBJECT_TYPE.isNominalConstructor());
  assertTrue(STRING_OBJECT_TYPE.getConstructor().isNominalConstructor());
}
