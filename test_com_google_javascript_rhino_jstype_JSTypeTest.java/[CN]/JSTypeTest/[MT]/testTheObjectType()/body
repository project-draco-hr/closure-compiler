{
  assertEquals(OBJECT_PROTOTYPE,OBJECT_TYPE.getImplicitPrototype());
  assertFalse(OBJECT_TYPE.isNoObjectType());
  assertFalse(OBJECT_TYPE.isNoType());
  assertFalse(OBJECT_TYPE.isArrayType());
  assertFalse(OBJECT_TYPE.isBooleanValueType());
  assertFalse(OBJECT_TYPE.isDateType());
  assertFalse(OBJECT_TYPE.isEnumElementType());
  assertFalse(OBJECT_TYPE.isNullType());
  assertFalse(OBJECT_TYPE.isNamedType());
  assertFalse(OBJECT_TYPE.isNullType());
  assertFalse(OBJECT_TYPE.isNumber());
  assertFalse(OBJECT_TYPE.isNumberObjectType());
  assertFalse(OBJECT_TYPE.isNumberValueType());
  assertTrue(OBJECT_TYPE.isObject());
  assertFalse(OBJECT_TYPE.isFunctionPrototypeType());
  assertTrue(OBJECT_TYPE.getImplicitPrototype().isFunctionPrototypeType());
  assertFalse(OBJECT_TYPE.isRegexpType());
  assertFalse(OBJECT_TYPE.isString());
  assertFalse(OBJECT_TYPE.isStringObjectType());
  assertFalse(OBJECT_TYPE.isStringValueType());
  assertFalse(OBJECT_TYPE.isEnumType());
  assertFalse(OBJECT_TYPE.isUnionType());
  assertFalse(OBJECT_TYPE.isAllType());
  assertFalse(OBJECT_TYPE.isVoidType());
  assertFalse(OBJECT_TYPE.isConstructor());
  assertTrue(OBJECT_TYPE.isInstanceType());
  assertFalse(OBJECT_TYPE.canAssignTo(NO_TYPE));
  assertTrue(OBJECT_TYPE.canAssignTo(ALL_TYPE));
  assertFalse(OBJECT_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(OBJECT_TYPE.canAssignTo(NUMBER_TYPE));
  assertFalse(OBJECT_TYPE.canAssignTo(functionType));
  assertFalse(OBJECT_TYPE.canAssignTo(recordType));
  assertFalse(OBJECT_TYPE.canAssignTo(NULL_TYPE));
  assertTrue(OBJECT_TYPE.canAssignTo(OBJECT_TYPE));
  assertFalse(OBJECT_TYPE.canAssignTo(DATE_TYPE));
  assertFalse(OBJECT_TYPE.canAssignTo(namedGoogBar));
  assertTrue(OBJECT_TYPE.canAssignTo(unresolvedNamedType));
  assertFalse(OBJECT_TYPE.canAssignTo(REGEXP_TYPE));
  assertFalse(OBJECT_TYPE.canAssignTo(ARRAY_TYPE));
  assertTrue(OBJECT_TYPE.canAssignTo(UNKNOWN_TYPE));
  assertFalse(OBJECT_TYPE.canBeCalled());
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(ALL_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(NUMBER_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(STRING_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(functionType));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(recordType));
  assertFalse(OBJECT_TYPE.canTestForEqualityWith(VOID_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(OBJECT_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(DATE_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(REGEXP_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(ARRAY_TYPE));
  assertTrue(OBJECT_TYPE.canTestForEqualityWith(UNKNOWN_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(functionType));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(recordType));
  assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertFalse(OBJECT_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));
  assertFalse(OBJECT_TYPE.isNullable());
  assertEquals(ALL_TYPE,OBJECT_TYPE.getLeastSupertype(ALL_TYPE));
  assertEquals(OBJECT_TYPE,OBJECT_TYPE.getLeastSupertype(STRING_OBJECT_TYPE));
  assertEquals(createUnionType(OBJECT_TYPE,NUMBER_TYPE),OBJECT_TYPE.getLeastSupertype(NUMBER_TYPE));
  assertEquals(OBJECT_TYPE,OBJECT_TYPE.getLeastSupertype(functionType));
  assertEquals(OBJECT_TYPE,OBJECT_TYPE.getLeastSupertype(OBJECT_TYPE));
  assertEquals(OBJECT_TYPE,OBJECT_TYPE.getLeastSupertype(DATE_TYPE));
  assertEquals(OBJECT_TYPE,OBJECT_TYPE.getLeastSupertype(REGEXP_TYPE));
  assertEquals(7,OBJECT_TYPE.getPropertiesCount());
  assertReturnTypeEquals(OBJECT_TYPE,OBJECT_TYPE.getPropertyType("constructor"));
  assertReturnTypeEquals(STRING_TYPE,OBJECT_TYPE.getPropertyType("toString"));
  assertReturnTypeEquals(STRING_TYPE,OBJECT_TYPE.getPropertyType("toLocaleString"));
  assertReturnTypeEquals(UNKNOWN_TYPE,OBJECT_TYPE.getPropertyType("valueOf"));
  assertReturnTypeEquals(BOOLEAN_TYPE,OBJECT_TYPE.getPropertyType("hasOwnProperty"));
  assertReturnTypeEquals(BOOLEAN_TYPE,OBJECT_TYPE.getPropertyType("isPrototypeOf"));
  assertReturnTypeEquals(BOOLEAN_TYPE,OBJECT_TYPE.getPropertyType("propertyIsEnumerable"));
  assertFalse(OBJECT_TYPE.matchesInt32Context());
  assertFalse(OBJECT_TYPE.matchesNumberContext());
  assertTrue(OBJECT_TYPE.matchesObjectContext());
  assertTrue(OBJECT_TYPE.matchesStringContext());
  assertFalse(OBJECT_TYPE.matchesUint32Context());
  assertEquals(OBJECT_PROTOTYPE,OBJECT_TYPE.getImplicitPrototype());
  assertEquals("Object",OBJECT_TYPE.toString());
  assertTrue(OBJECT_TYPE.isNativeObjectType());
  assertTrue(OBJECT_TYPE.getImplicitPrototype().isNativeObjectType());
}
