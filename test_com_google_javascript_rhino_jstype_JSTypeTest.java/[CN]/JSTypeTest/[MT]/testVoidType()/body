{
  assertTrue(VOID_TYPE.canAssignTo(ALL_TYPE));
  assertFalse(VOID_TYPE.canAssignTo(STRING_OBJECT_TYPE));
  assertFalse(VOID_TYPE.canAssignTo(REGEXP_TYPE));
  assertNull(VOID_TYPE.autoboxesTo());
  assertCanTestForEqualityWith(VOID_TYPE,ALL_TYPE);
  assertCannotTestForEqualityWith(VOID_TYPE,REGEXP_TYPE);
  assertTrue(VOID_TYPE.canTestForShallowEqualityWith(NO_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NO_OBJECT_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(ARRAY_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(BOOLEAN_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(BOOLEAN_OBJECT_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(DATE_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(ERROR_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(EVAL_ERROR_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(functionType));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NULL_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NUMBER_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(NUMBER_OBJECT_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(OBJECT_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(URI_ERROR_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(RANGE_ERROR_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(REFERENCE_ERROR_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(REGEXP_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(STRING_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(STRING_OBJECT_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(SYNTAX_ERROR_TYPE));
  assertFalse(VOID_TYPE.canTestForShallowEqualityWith(TYPE_ERROR_TYPE));
  assertTrue(VOID_TYPE.canTestForShallowEqualityWith(ALL_TYPE));
  assertTrue(VOID_TYPE.canTestForShallowEqualityWith(VOID_TYPE));
  assertTrue(VOID_TYPE.canTestForShallowEqualityWith(createUnionType(NUMBER_TYPE,VOID_TYPE)));
  assertFalse(VOID_TYPE.matchesInt32Context());
  assertFalse(VOID_TYPE.matchesNumberContext());
  assertFalse(VOID_TYPE.matchesObjectContext());
  assertTrue(VOID_TYPE.matchesStringContext());
  assertFalse(VOID_TYPE.matchesUint32Context());
  Asserts.assertResolvesToSame(VOID_TYPE);
}
