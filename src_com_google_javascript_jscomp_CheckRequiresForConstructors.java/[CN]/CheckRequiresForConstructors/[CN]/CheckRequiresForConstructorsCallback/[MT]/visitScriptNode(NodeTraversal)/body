{
  Set<String> classNames=new HashSet<>();
  for (  Map.Entry<String,Node> entry : usages.entrySet()) {
    String className=entry.getKey();
    Node node=entry.getValue();
    String outermostClassName=getOutermostClassName(className);
    String nonNullClassName=outermostClassName != null ? outermostClassName : className;
    String parentNamespace=null;
    int separatorIndex=nonNullClassName.lastIndexOf('.');
    if (separatorIndex > 0) {
      parentNamespace=nonNullClassName.substring(0,separatorIndex);
    }
    boolean notProvidedByConstructors=(constructors == null || (!constructors.contains(className) && !constructors.contains(outermostClassName)));
    boolean notProvidedByRequires=(requires == null || (!requires.contains(className) && !requires.contains(outermostClassName) && !requires.contains(parentNamespace)));
    if (notProvidedByConstructors && notProvidedByRequires && !classNames.contains(className)) {
      compiler.report(t.makeError(node,MISSING_REQUIRE_WARNING,className));
      classNames.add(className);
    }
  }
  this.usages.clear();
  this.requires.clear();
  this.constructors.clear();
}
