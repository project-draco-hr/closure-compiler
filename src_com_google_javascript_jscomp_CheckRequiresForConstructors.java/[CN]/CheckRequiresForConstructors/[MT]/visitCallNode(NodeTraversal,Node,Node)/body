{
  String required=extractNamespaceIfRequire(call);
  if (required != null) {
    maybeAddClosurizedNamespace(required);
    if (parent.isName()) {
      visitRequire(parent.getString(),call);
    }
 else     if (parent.isDestructuringLhs() && parent.getFirstChild().isObjectPattern()) {
      for (      Node stringKey : parent.getFirstChild().children()) {
        if (stringKey.hasChildren()) {
          visitRequire(stringKey.getFirstChild().getString(),call);
        }
 else {
          visitRequire(stringKey.getString(),call);
        }
      }
    }
 else {
      visitRequire(required,call);
    }
    return;
  }
  String provided=extractNamespaceIfProvide(call);
  if (provided != null) {
    providedNames.add(provided);
    return;
  }
  Node callee=call.getFirstChild();
  if (callee.matchesQualifiedName("goog.module.get") && call.getSecondChild().isString()) {
    weakUsages.add(call.getSecondChild().getString());
  }
  if (codingConvention.isClassFactoryCall(call)) {
    if (parent.isName()) {
      providedNames.add(parent.getString());
    }
 else     if (parent.isAssign()) {
      providedNames.add(parent.getFirstChild().getQualifiedName());
    }
  }
  if (callee.isName()) {
    weakUsages.add(callee.getString());
  }
 else   if (callee.isQualifiedName()) {
    Node root=NodeUtil.getRootOfQualifiedName(callee);
    if (root.isName()) {
      Var var=t.getScope().getVar(root.getString());
      if (var == null || (!var.isExtern() && !var.isLocal())) {
        usages.put(callee.getQualifiedName(),call);
      }
    }
  }
}
