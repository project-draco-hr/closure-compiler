{
  if (mode == Mode.SINGLE_FILE && requires.isEmpty()) {
    return;
  }
  Set<String> namespaces=new HashSet<>();
  for (  Map.Entry<String,Node> entry : usages.entrySet()) {
    String namespace=entry.getKey();
    if (namespace.endsWith(".call") || namespace.endsWith(".apply")) {
      namespace=namespace.substring(0,namespace.lastIndexOf('.'));
    }
    if (namespace.startsWith("goog.global.") || namespace.equals("goog.module.get")) {
      continue;
    }
    Node node=entry.getValue();
    JSDocInfo info=NodeUtil.getBestJSDocInfo(NodeUtil.getEnclosingStatement(node));
    if (info != null && info.getSuppressions().contains("missingRequire")) {
      continue;
    }
    String outermostClassName=getOutermostClassName(namespace);
    String nonNullClassName=outermostClassName != null ? outermostClassName : namespace;
    String parentNamespace=null;
    int separatorIndex=nonNullClassName.lastIndexOf('.');
    if (separatorIndex > 0) {
      parentNamespace=nonNullClassName.substring(0,separatorIndex);
    }
    if ("goog".equals(parentNamespace) && !isClassName(nonNullClassName.substring(separatorIndex + 1))) {
      continue;
    }
    boolean notProvidedByConstructors=!providedNames.contains(namespace) && !providedNames.contains(outermostClassName) && !providedNames.contains(parentNamespace);
    boolean notProvidedByRequires=!requires.containsKey(namespace) && !requires.containsKey(outermostClassName) && !requires.containsKey(parentNamespace);
    if (notProvidedByConstructors && notProvidedByRequires && !namespaces.contains(namespace)) {
      String rootName=Splitter.on('.').split(namespace).iterator().next();
      if (mode != Mode.SINGLE_FILE || closurizedNamespaces.contains(rootName)) {
        if (node.isCall()) {
          compiler.report(t.makeError(node,MISSING_REQUIRE_CALL_WARNING,namespace));
        }
 else {
          compiler.report(t.makeError(node,MISSING_REQUIRE_WARNING,namespace));
        }
        namespaces.add(namespace);
      }
    }
  }
  for (  Map.Entry<String,Node> entry : requires.entrySet()) {
    String require=entry.getKey();
    Node call=entry.getValue();
    Node parent=call.getParent();
    if (parent.isAssign()) {
      continue;
    }
    if (!usages.containsKey(require) && !weakUsages.containsKey(require)) {
      reportExtraRequireWarning(call,require);
    }
  }
}
