{
  String qualifiedPath=cls.target.getQualifiedName() + ".prototype.";
  for (  MemberDefinition prop : cls.props) {
    Node propertyNode=IR.exprResult(NodeUtil.newQName(compiler,qualifiedPath + prop.name.getString()));
    JSDocInfoBuilder info=JSDocInfoBuilder.maybeCopyFrom(prop.info);
    prop.name.removeProp(Node.JSDOC_INFO_PROP);
    JSTypeExpression propType=getTypeFromProperty(prop);
    if (propType == null) {
      return;
    }
    info.recordType(propType);
    Preconditions.checkState(info.recordExport());
    info.recordVisibility(Visibility.PUBLIC);
    propertyNode.getFirstChild().setJSDocInfo(info.build());
    block.addChildToBack(propertyNode);
    if (prop.value.isObjectLit()) {
      Node readOnlyValue=NodeUtil.getFirstPropMatchingKey(prop.value,"readOnly");
      if (readOnlyValue != null && readOnlyValue.isTrue()) {
        block.addChildToBack(makeReadOnlySetter(prop.name.getString(),propType,qualifiedPath));
      }
    }
  }
}
