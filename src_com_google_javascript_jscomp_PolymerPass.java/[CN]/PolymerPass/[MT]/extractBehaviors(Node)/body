{
  if (behaviorArray == null) {
    return ImmutableList.of();
  }
  if (!behaviorArray.isArrayLit()) {
    compiler.report(JSError.make(behaviorArray,POLYMER_INVALID_BEHAVIOR_ARRAY));
    return ImmutableList.of();
  }
  ImmutableList.Builder<BehaviorDefinition> behaviors=ImmutableList.builder();
  for (  Node behaviorName : behaviorArray.children()) {
    if (behaviorName.isObjectLit()) {
      behaviors.add(new BehaviorDefinition(extractProperties(behaviorName),getBehaviorFunctionsToCopy(behaviorName),getNonPropertyMembersToCopy(behaviorName)));
      continue;
    }
    Name behaviorGlobalName=globalNames.getSlot(behaviorName.getQualifiedName());
    if (behaviorGlobalName == null || behaviorGlobalName.getDeclaration() == null) {
      compiler.report(JSError.make(behaviorName,POLYMER_UNQUALIFIED_BEHAVIOR));
      continue;
    }
    Node behaviorDeclaration=behaviorGlobalName.getDeclaration().getNode();
    JSDocInfo behaviorInfo=NodeUtil.getBestJSDocInfo(behaviorDeclaration);
    if (behaviorInfo == null || !behaviorInfo.isPolymerBehavior()) {
      compiler.report(JSError.make(behaviorDeclaration,POLYMER_UNANNOTATED_BEHAVIOR));
    }
    Node behaviorValue=NodeUtil.getRValueOfLValue(behaviorDeclaration);
    if (behaviorValue == null) {
      compiler.report(JSError.make(behaviorName,POLYMER_UNQUALIFIED_BEHAVIOR));
    }
 else     if (behaviorValue.isArrayLit()) {
      behaviors.addAll(extractBehaviors(behaviorValue));
    }
 else     if (behaviorValue.isObjectLit()) {
      behaviors.add(new BehaviorDefinition(extractProperties(behaviorValue),getBehaviorFunctionsToCopy(behaviorValue),getNonPropertyMembersToCopy(behaviorValue)));
    }
 else {
      compiler.report(JSError.make(behaviorName,POLYMER_UNQUALIFIED_BEHAVIOR));
    }
  }
  return behaviors.build();
}
