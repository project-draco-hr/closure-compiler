{
  Node call=exprRoot.getFirstChild();
  if (call.isAssign()) {
    call=call.getChildAtIndex(1);
  }
 else   if (call.isName()) {
    call=call.getFirstChild();
  }
  Node objLit=NodeUtil.getArgumentForCallOrNew(call,0);
  JSDocInfoBuilder objLitDoc=new JSDocInfoBuilder(true);
  objLitDoc.recordLends(cls.target.getQualifiedName() + ".prototype");
  objLit.setJSDocInfo(objLitDoc.build());
  this.addThisTypeToFunctions(objLit,cls.target.getQualifiedName());
  Node block=IR.block();
  if (cls.nativeBaseElement != null) {
    this.appendPolymerElementExterns(cls);
  }
  JSDocInfoBuilder constructorDoc=this.getConstructorDoc(cls);
  Node ctorKey=cls.constructor.value.getParent();
  if (ctorKey != null) {
    ctorKey.removeProp(Node.JSDOC_INFO_PROP);
    JSDocInfoBuilder suppressInfo=new JSDocInfoBuilder(true);
    suppressInfo.recordSuppressions(ImmutableSet.of("hiddenProperty"));
    ctorKey.setJSDocInfo(suppressInfo.build());
  }
  if (cls.target.isGetProp()) {
    Node assign=IR.assign(cls.target.cloneTree(),cls.constructor.value.cloneTree());
    assign.setJSDocInfo(constructorDoc.build());
    Node exprResult=IR.exprResult(assign);
    block.addChildToBack(exprResult);
  }
 else {
    Node var=IR.var(cls.target.cloneTree(),cls.constructor.value.cloneTree());
    var.setJSDocInfo(constructorDoc.build());
    block.addChildToBack(var);
  }
  appendPropertiesToBlock(cls,block);
  List<MemberDefinition> readOnlyProps=parseReadOnlyProperties(cls,block);
  addInterfaceExterns(cls,readOnlyProps);
  block.useSourceInfoFromForTree(exprRoot);
  Node stmts=block.removeChildren();
  Node parent=exprRoot.getParent();
  if (!t.getScope().isGlobal() && !cls.target.isGetProp()) {
    Node scriptNode=NodeUtil.getEnclosingScript(exprRoot);
    scriptNode.addChildrenToFront(stmts);
  }
 else {
    Node beforeRoot=parent.getChildBefore(exprRoot);
    if (beforeRoot == null) {
      parent.addChildrenToFront(stmts);
    }
 else {
      parent.addChildrenAfter(stmts,beforeRoot);
    }
  }
  if (exprRoot.isVar()) {
    Node assignExpr=varToAssign(exprRoot);
    parent.replaceChild(exprRoot,assignExpr);
  }
  compiler.reportCodeChange();
}
