{
  Node grandparent=parent.getParent();
  if (grandparent.isConst()) {
    compiler.report(JSError.make(node,PolymerPassErrors.POLYMER_INVALID_DECLARATION));
    return;
  }
  PolymerClassDefinition def=PolymerClassDefinition.extractFromCallNode(node,compiler,globalNames);
  if (def != null) {
    if (def.nativeBaseElement != null) {
      appendPolymerElementExterns(def);
    }
    PolymerClassRewriter rewriter=new PolymerClassRewriter(compiler,polymerElementExterns);
    if (NodeUtil.isNameDeclaration(grandparent) || parent.isAssign()) {
      rewriter.rewritePolymerClass(grandparent,def,traversal.getScope().isGlobal());
    }
 else {
      rewriter.rewritePolymerClass(parent,def,traversal.getScope().isGlobal());
    }
  }
}
