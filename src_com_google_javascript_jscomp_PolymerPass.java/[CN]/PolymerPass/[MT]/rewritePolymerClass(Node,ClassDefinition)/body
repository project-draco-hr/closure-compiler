{
  Node call=exprRoot.getFirstChild();
  if (call.isAssign()) {
    call=call.getChildAtIndex(1);
  }
 else   if (call.isName()) {
    call=call.getFirstChild();
  }
  Node objLit=NodeUtil.getArgumentForCallOrNew(call,0);
  JSDocInfoBuilder objLitDoc=new JSDocInfoBuilder(true);
  objLitDoc.recordLends(cls.target.getQualifiedName() + ".prototype");
  objLit.setJSDocInfo(objLitDoc.build(objLit));
  Node block=IR.block();
  this.appendPolymerElementExterns(cls);
  JSDocInfoBuilder constructorDoc=this.getConstructorDoc(cls);
  Node ctorKey=cls.constructor.value.getParent();
  if (ctorKey != null) {
    ctorKey.removeProp(Node.JSDOC_INFO_PROP);
  }
  if (cls.target.isGetProp()) {
    Node assign=IR.assign(cls.target.cloneTree(),cls.constructor.value.cloneTree());
    assign.setJSDocInfo(constructorDoc.build(assign));
    Node exprResult=IR.exprResult(assign);
    block.addChildToBack(exprResult);
  }
 else {
    Node var=IR.var(cls.target.cloneTree(),cls.constructor.value.cloneTree());
    var.setJSDocInfo(constructorDoc.build(var));
    block.addChildToBack(var);
  }
  appendPropertiesToBlock(cls,block);
  block.useSourceInfoFromForTree(exprRoot);
  Node parent=exprRoot.getParent();
  Node stmts=block.removeChildren();
  Node beforeRoot=parent.getChildBefore(exprRoot);
  if (beforeRoot == null) {
    parent.addChildrenToFront(stmts);
  }
 else {
    parent.addChildrenAfter(stmts,beforeRoot);
  }
  if (exprRoot.isVar()) {
    Node assignExpr=varToAssign(exprRoot);
    parent.replaceChild(exprRoot,assignExpr);
  }
  compiler.reportCodeChange();
}
