{
  Node description=NodeUtil.getArgumentForCallOrNew(callNode,0);
  if (description == null || !description.isObjectLit()) {
    compiler.report(JSError.make(callNode,POLYMER_DESCRIPTOR_NOT_VALID));
    return null;
  }
  int paramCount=callNode.getChildCount() - 1;
  if (paramCount != 1) {
    compiler.report(JSError.make(callNode,POLYMER_UNEXPECTED_PARAMS));
    return null;
  }
  Node elName=extractProperty(description,"is");
  if (elName == null) {
    compiler.report(JSError.make(callNode,POLYMER_MISSING_IS));
    return null;
  }
  String elNameString=CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL,elName.getString());
  elNameString+="Element";
  Node target;
  if (NodeUtil.isNameDeclaration(callNode.getParent().getParent())) {
    target=IR.name(callNode.getParent().getString());
  }
 else   if (callNode.getParent().isAssign()) {
    target=callNode.getParent().getFirstChild().cloneTree();
  }
 else {
    target=IR.name(elNameString);
  }
  target.useSourceInfoIfMissingFrom(callNode);
  JSDocInfo classInfo=NodeUtil.getBestJSDocInfo(target);
  Node constructor=extractProperty(description,"constructor");
  if (constructor == null) {
    constructor=IR.function(IR.name(""),IR.paramList(),IR.block());
    constructor.useSourceInfoFromForTree(callNode);
  }
  JSDocInfo info=NodeUtil.getBestJSDocInfo(constructor);
  ClassDefinition def=new ClassDefinition(target,classInfo,new MemberDefinition(info,null,constructor),objectLitToList(description));
  return def;
}
