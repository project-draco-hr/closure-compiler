{
  Preconditions.checkArgument(parent == null || parent instanceof TypedScope);
  TypedScope typedParent=(TypedScope)parent;
  TypedScope newScope=null;
  AbstractScopeBuilder scopeBuilder=null;
  if (typedParent == null) {
    JSType globalThis=typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);
    root.setJSType(globalThis);
    root.getFirstChild().setJSType(globalThis);
    root.getLastChild().setJSType(globalThis);
    (new FirstOrderFunctionAnalyzer(compiler,functionAnalysisResults)).process(root.getFirstChild(),root.getLastChild());
    newScope=createInitialScope(root);
    GlobalScopeBuilder globalScopeBuilder=new GlobalScopeBuilder(newScope);
    scopeBuilder=globalScopeBuilder;
    NodeTraversal.traverseTyped(compiler,root,scopeBuilder);
  }
 else {
    newScope=new TypedScope(typedParent,root);
    LocalScopeBuilder localScopeBuilder=new LocalScopeBuilder(newScope);
    scopeBuilder=localScopeBuilder;
    localScopeBuilder.build();
  }
  scopeBuilder.resolveStubDeclarations();
  if (typedParent == null) {
    codingConvention.defineDelegateProxyPrototypeProperties(typeRegistry,newScope,delegateProxyPrototypes,delegateCallingConventions);
  }
  newScope.setTypeResolver(scopeBuilder);
  return newScope;
}
