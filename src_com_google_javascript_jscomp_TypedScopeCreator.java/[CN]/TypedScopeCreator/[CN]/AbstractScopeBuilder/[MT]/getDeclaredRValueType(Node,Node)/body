{
  JSDocInfo rValueInfo=rValue.getJSDocInfo();
  if (rValue.isCast() && rValueInfo != null && rValueInfo.hasType()) {
    return rValueInfo.getType().evaluate(scope,typeRegistry);
  }
  JSType type=rValue.getJSType();
  if (type != null && !type.isUnknownType()) {
    return type;
  }
  if (rValue.isQualifiedName()) {
    return lookupQualifiedName(rValue);
  }
  if (NodeUtil.isBooleanResult(rValue)) {
    return getNativeType(BOOLEAN_TYPE);
  }
  if (NodeUtil.isNumericResult(rValue)) {
    return getNativeType(NUMBER_TYPE);
  }
  if (NodeUtil.isStringResult(rValue)) {
    return getNativeType(STRING_TYPE);
  }
  if (rValue.isNew() && rValue.getFirstChild().isQualifiedName()) {
    JSType targetType=lookupQualifiedName(rValue.getFirstChild());
    if (targetType != null) {
      FunctionType fnType=targetType.restrictByNotNullOrUndefined().toMaybeFunctionType();
      if (fnType != null && fnType.hasInstanceType()) {
        return fnType.getInstanceType();
      }
    }
  }
  if (rValue.isOr()) {
    Node firstClause=rValue.getFirstChild();
    Node secondClause=firstClause.getNext();
    boolean namesMatch=firstClause.isName() && lValue.isName() && firstClause.getString().equals(lValue.getString());
    if (namesMatch) {
      type=secondClause.getJSType();
      if (type != null && !type.isUnknownType()) {
        return type;
      }
    }
  }
  return null;
}
