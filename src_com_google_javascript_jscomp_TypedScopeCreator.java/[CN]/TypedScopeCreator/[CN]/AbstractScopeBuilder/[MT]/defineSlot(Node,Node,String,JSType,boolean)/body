{
  Preconditions.checkArgument(!variableName.isEmpty());
  boolean isGlobalVar=n.isName() && scope.isGlobal();
  boolean shouldDeclareOnGlobalThis=isGlobalVar && (parent.isVar() || parent.isFunction());
  TypedScope scopeToDeclareIn=scope;
  if (n.isGetProp() && !scope.isGlobal() && isQnameRootedInGlobalScope(n)) {
    TypedScope globalScope=scope.getGlobalScope();
    if (!globalScope.isDeclared(variableName,false)) {
      scopeToDeclareIn=scope.getGlobalScope();
    }
  }
  TypedVar newVar=null;
  CompilerInput input=compiler.getInput(inputId);
  if (scopeToDeclareIn.isDeclared(variableName,false)) {
    TypedVar oldVar=scopeToDeclareIn.getVar(variableName);
    newVar=validator.expectUndeclaredVariable(sourceName,input,n,parent,oldVar,variableName,type);
  }
 else {
    if (type != null) {
      setDeferredType(n,type);
    }
    newVar=scopeToDeclareIn.declare(variableName,n,type,input,inferred);
    if (type instanceof EnumType) {
      Node initialValue=newVar.getInitialValue();
      boolean isValidValue=initialValue != null && (initialValue.isObjectLit() || initialValue.isQualifiedName());
      if (!isValidValue) {
        report(JSError.make(n,ENUM_INITIALIZER));
      }
    }
  }
  FunctionType fnType=JSType.toMaybeFunctionType(type);
  if (fnType != null && !type.isEmptyType()) {
    if ((fnType.isConstructor() || fnType.isInterface()) && variableName.equals(fnType.getReferenceName())) {
      finishConstructorDefinition(n,variableName,fnType,scopeToDeclareIn,input,newVar);
    }
  }
  if (shouldDeclareOnGlobalThis) {
    ObjectType globalThis=typeRegistry.getNativeObjectType(GLOBAL_THIS);
    if (inferred) {
      globalThis.defineInferredProperty(variableName,type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,n);
    }
 else {
      globalThis.defineDeclaredProperty(variableName,type,n);
    }
  }
  if (isGlobalVar && "Window".equals(variableName) && type != null && type.isFunctionType() && type.isConstructor()) {
    FunctionType globalThisCtor=typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();
    globalThisCtor.getInstanceType().clearCachedValues();
    globalThisCtor.getPrototype().clearCachedValues();
    globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());
  }
}
