{
  Preconditions.checkArgument(!variableName.isEmpty());
  boolean isGlobalVar=n.getType() == Token.NAME && scope.isGlobal();
  boolean shouldDeclareOnGlobalThis=isGlobalVar && (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION);
  Scope scopeToDeclareIn=scope;
  if (n.getType() == Token.GETPROP && !scope.isGlobal() && isQnameRootedInGlobalScope(n)) {
    Scope globalScope=scope.getGlobalScope();
    if (!globalScope.isDeclared(variableName,false)) {
      scopeToDeclareIn=scope.getGlobalScope();
    }
  }
  if (scopeToDeclareIn.isDeclared(variableName,false)) {
    Var oldVar=scopeToDeclareIn.getVar(variableName);
    validator.expectUndeclaredVariable(sourceName,n,parent,oldVar,variableName,type);
  }
 else {
    if (!inferred) {
      setDeferredType(n,type);
    }
    CompilerInput input=compiler.getInput(inputId);
    boolean isExtern=n.isFromExterns();
    Var newVar=scopeToDeclareIn.declare(variableName,n,type,input,inferred);
    if (shouldDeclareOnGlobalThis) {
      ObjectType globalThis=typeRegistry.getNativeObjectType(GLOBAL_THIS);
      if (inferred) {
        globalThis.defineInferredProperty(variableName,type == null ? getNativeType(JSTypeNative.NO_TYPE) : type,n);
      }
 else {
        globalThis.defineDeclaredProperty(variableName,type,n);
      }
    }
    if (type instanceof EnumType) {
      Node initialValue=newVar.getInitialValue();
      boolean isValidValue=initialValue != null && (initialValue.getType() == Token.OBJECTLIT || initialValue.isQualifiedName());
      if (!isValidValue) {
        compiler.report(JSError.make(sourceName,n,ENUM_INITIALIZER));
      }
    }
    FunctionType fnType=JSType.toMaybeFunctionType(type);
    if (fnType != null && !type.isEmptyType()) {
      if ((fnType.isConstructor() || fnType.isInterface()) && !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {
        FunctionType superClassCtor=fnType.getSuperClassConstructor();
        scopeToDeclareIn.declare(variableName + ".prototype",n,fnType.getPrototype(),input,superClassCtor == null || superClassCtor.getInstanceType().equals(getNativeType(OBJECT_TYPE)));
        if (newVar.getInitialValue() == null && !isExtern && variableName.equals(fnType.getInstanceType().getReferenceName())) {
          compiler.report(JSError.make(sourceName,n,fnType.isConstructor() ? CTOR_INITIALIZER : IFACE_INITIALIZER,variableName));
        }
      }
    }
  }
  if (isGlobalVar && "Window".equals(variableName) && type != null && type.isFunctionType() && type.isConstructor()) {
    FunctionType globalThisCtor=typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();
    globalThisCtor.getInstanceType().clearCachedValues();
    globalThisCtor.getPrototype().clearCachedValues();
    globalThisCtor.setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());
  }
}
