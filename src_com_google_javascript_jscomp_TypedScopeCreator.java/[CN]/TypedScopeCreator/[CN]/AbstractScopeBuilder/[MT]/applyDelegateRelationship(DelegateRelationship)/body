{
  ObjectType delegatorObject=ObjectType.cast(typeRegistry.getType(delegateRelationship.delegator));
  ObjectType delegateBaseObject=ObjectType.cast(typeRegistry.getType(delegateRelationship.delegateBase));
  ObjectType delegateSuperObject=ObjectType.cast(typeRegistry.getType(codingConvention.getDelegateSuperclassName()));
  if (delegatorObject != null && delegateBaseObject != null && delegateSuperObject != null) {
    FunctionType delegatorCtor=delegatorObject.getConstructor();
    FunctionType delegateBaseCtor=delegateBaseObject.getConstructor();
    FunctionType delegateSuperCtor=delegateSuperObject.getConstructor();
    if (delegatorCtor != null && delegateBaseCtor != null && delegateSuperCtor != null) {
      FunctionParamBuilder functionParamBuilder=new FunctionParamBuilder(typeRegistry);
      functionParamBuilder.addRequiredParams(getNativeType(U2U_CONSTRUCTOR_TYPE));
      FunctionType findDelegate=typeRegistry.createFunctionType(typeRegistry.createDefaultObjectUnion(delegateBaseObject),functionParamBuilder.build());
      FunctionType delegateProxy=typeRegistry.createConstructorType(delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,null,null,null,null);
      delegateProxy.setPrototypeBasedOn(delegateBaseObject);
      codingConvention.applyDelegateRelationship(delegateSuperObject,delegateBaseObject,delegatorObject,delegateProxy,findDelegate);
      delegateProxyPrototypes.add(delegateProxy.getPrototype());
    }
  }
}
