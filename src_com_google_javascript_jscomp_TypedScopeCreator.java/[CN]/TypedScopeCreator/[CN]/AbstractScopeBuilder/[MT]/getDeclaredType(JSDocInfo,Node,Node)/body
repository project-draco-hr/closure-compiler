{
  if (info != null && info.hasType()) {
    return getDeclaredTypeInAnnotation(lValue,info);
  }
 else   if (rValue != null && rValue.isFunction() && shouldUseFunctionLiteralType(JSType.toMaybeFunctionType(rValue.getJSType()),info,lValue)) {
    return rValue.getJSType();
  }
 else   if (info != null) {
    if (info.hasEnumParameterType()) {
      if (rValue != null && rValue.isObjectLit()) {
        return rValue.getJSType();
      }
 else {
        return createEnumTypeFromNodes(rValue,lValue.getQualifiedName(),info);
      }
    }
 else     if (info.isConstructorOrInterface()) {
      return createFunctionTypeFromNodes(rValue,lValue.getQualifiedName(),info,lValue);
    }
  }
  if (NodeUtil.isConstantDeclaration(compiler.getCodingConvention(),info,lValue)) {
    if (rValue != null) {
      JSType rValueType=getDeclaredRValueType(lValue,rValue);
      if (rValueType != null) {
        return rValueType;
      }
    }
  }
  return getDeclaredTypeInAnnotation(lValue,info);
}
