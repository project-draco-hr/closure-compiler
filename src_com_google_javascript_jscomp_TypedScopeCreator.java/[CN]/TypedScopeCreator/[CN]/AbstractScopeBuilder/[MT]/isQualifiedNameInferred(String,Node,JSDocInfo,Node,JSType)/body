{
  if (valueType == null) {
    return true;
  }
  if (qName != null && qName.endsWith(".prototype")) {
    String className=qName.substring(0,qName.lastIndexOf(".prototype"));
    TypedVar slot=scope.getSlot(className);
    JSType classType=slot == null ? null : slot.getType();
    if (classType != null && (classType.isConstructor() || classType.isInterface())) {
      return false;
    }
  }
  boolean inferred=true;
  if (info != null) {
    inferred=!(info.hasType() || info.hasEnumParameterType() || (NodeUtil.isConstantDeclaration(compiler.getCodingConvention(),info,n) && valueType != null && !valueType.isUnknownType())|| FunctionTypeBuilder.isFunctionTypeDeclaration(info));
  }
  if (inferred && rhsValue != null && rhsValue.isFunction()) {
    if (info != null) {
      return false;
    }
 else     if (!scope.isDeclared(qName,false) && n.isUnscopedQualifiedName()) {
      for (Node current=n.getParent(); !(current.isScript() || current.isFunction()); current=current.getParent()) {
        if (NodeUtil.isControlStructure(current)) {
          return true;
        }
      }
      AstFunctionContents contents=getFunctionAnalysisResults(scope.getRootNode());
      if (contents == null || !contents.getEscapedQualifiedNames().contains(qName)) {
        return false;
      }
    }
  }
  return inferred;
}
