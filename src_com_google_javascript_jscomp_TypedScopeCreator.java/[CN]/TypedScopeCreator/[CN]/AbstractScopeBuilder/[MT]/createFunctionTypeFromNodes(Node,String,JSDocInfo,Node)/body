{
  FunctionType functionType=null;
  if (rValue != null && rValue.isQualifiedName() && scope.isGlobal()) {
    Var var=scope.getVar(rValue.getQualifiedName());
    if (var != null && var.getType() != null && var.getType().isFunctionType()) {
      FunctionType aliasedType=var.getType().toMaybeFunctionType();
      if ((aliasedType.isConstructor() || aliasedType.isInterface()) && !aliasedType.isNativeObjectType()) {
        functionType=aliasedType;
        if (name != null && scope.isGlobal()) {
          typeRegistry.declareType(name,functionType.getInstanceType());
        }
      }
    }
  }
  if (functionType == null) {
    Node errorRoot=rValue == null ? lvalueNode : rValue;
    boolean isFnLiteral=rValue != null && rValue.isFunction();
    Node fnRoot=isFnLiteral ? rValue : null;
    Node parametersNode=isFnLiteral ? rValue.getFirstChild().getNext() : null;
    if (info != null && info.hasType()) {
      JSType type=info.getType().evaluate(scope,typeRegistry);
      type=type.restrictByNotNullOrUndefined();
      if (type.isFunctionType()) {
        functionType=type.toMaybeFunctionType();
        functionType.setJSDocInfo(info);
      }
    }
    if (functionType == null) {
      Node ownerNode=NodeUtil.getBestLValueOwner(lvalueNode);
      String ownerName=NodeUtil.getBestLValueName(ownerNode);
      Var ownerVar=null;
      String propName=null;
      ObjectType ownerType=null;
      if (ownerName != null) {
        ownerVar=scope.getVar(ownerName);
        if (ownerVar != null) {
          ownerType=ObjectType.cast(ownerVar.getType());
        }
        if (name != null) {
          propName=name.substring(ownerName.length() + 1);
        }
      }
      FunctionType overriddenType=null;
      if (ownerType != null && propName != null) {
        overriddenType=findOverriddenFunction(ownerType,propName);
      }
      ObjectType prototypeOwner=getPrototypeOwnerType(ownerType);
      FunctionTypeBuilder builder=new FunctionTypeBuilder(name,compiler,errorRoot,sourceName,scope).setContents(getFunctionAnalysisResults(fnRoot)).inferFromOverriddenFunction(overriddenType,parametersNode).inferTemplateTypeName(info,prototypeOwner).inferReturnType(info).inferInheritance(info);
      boolean searchedForThisType=false;
      if (ownerType != null && ownerType.isFunctionPrototypeType() && ownerType.getOwnerFunction().hasInstanceType()) {
        builder.inferThisType(info,ownerType.getOwnerFunction().getInstanceType());
        searchedForThisType=true;
      }
 else       if (ownerNode != null && ownerNode.isThis()) {
        JSType injectedThisType=ownerNode.getJSType();
        builder.inferThisType(info,injectedThisType == null ? scope.getTypeOfThis() : injectedThisType);
        searchedForThisType=true;
      }
      if (!searchedForThisType) {
        builder.inferThisType(info);
      }
      functionType=builder.inferParameterTypes(parametersNode,info).buildAndRegister();
    }
  }
  return functionType;
}
