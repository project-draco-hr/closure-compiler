{
  inputId=t.getInputId();
  attachLiteralTypes(n);
switch (n.getType()) {
case CALL:
    checkForClassDefiningCalls(n);
  checkForCallingConventionDefiningCalls(n,delegateCallingConventions);
break;
case FUNCTION:
if (t.getInput() == null || !t.getInput().isExtern()) {
nonExternFunctions.add(n);
}
if (!NodeUtil.isHoistedFunctionDeclaration(n)) {
defineFunctionLiteral(n);
}
break;
case ASSIGN:
Node firstChild=n.getFirstChild();
if (firstChild.isGetProp() && firstChild.isQualifiedName()) {
maybeDeclareQualifiedName(t,n.getJSDocInfo(),firstChild,n,firstChild.getNext());
}
break;
case CATCH:
defineCatch(n);
break;
case VAR:
defineVar(n);
break;
case GETPROP:
if (parent.isExprResult() && n.isQualifiedName()) {
maybeDeclareQualifiedName(t,n.getJSDocInfo(),n,parent,null);
}
break;
}
if (n.getParent() != null && NodeUtil.isStatement(n) && lentObjectLiterals != null) {
for (Node objLit : lentObjectLiterals) {
defineObjectLiteral(objLit);
}
lentObjectLiterals.clear();
}
}
