{
  Node ownerNode=n.getFirstChild();
  String ownerName=ownerNode.getQualifiedName();
  String qName=n.getQualifiedName();
  String propName=n.getLastChild().getString();
  Preconditions.checkArgument(qName != null && ownerName != null);
  JSType valueType=getDeclaredType(info,n,rhsValue);
  if (valueType == null && rhsValue != null) {
    valueType=rhsValue.getJSType();
  }
  if ("prototype".equals(propName)) {
    Var qVar=scope.getVar(qName);
    if (qVar != null) {
      ObjectType qVarType=ObjectType.cast(qVar.getType());
      if (qVarType != null && rhsValue != null && rhsValue.isObjectLit()) {
        typeRegistry.resetImplicitPrototype(rhsValue.getJSType(),qVarType.getImplicitPrototype());
      }
 else       if (!qVar.isTypeInferred()) {
        return;
      }
      qVar.getScope().undeclare(qVar);
    }
  }
  if (valueType == null) {
    if (parent.isExprResult()) {
      stubDeclarations.add(new StubDeclaration(n,t.getInput() != null && t.getInput().isExtern(),ownerName));
    }
    return;
  }
  boolean inferred=isQualifiedNameInferred(qName,n,info,rhsValue,valueType);
  if (!inferred) {
    ObjectType ownerType=getObjectSlot(ownerName);
    if (ownerType != null) {
      boolean isExtern=t.getInput() != null && t.getInput().isExtern();
      if ((!ownerType.hasOwnProperty(propName) || ownerType.isPropertyTypeInferred(propName)) && ((isExtern && !ownerType.isNativeObjectType()) || !ownerType.isInstanceType())) {
        ownerType.defineDeclaredProperty(propName,valueType,n);
      }
    }
    defineSlot(n,parent,valueType,inferred);
  }
 else   if (rhsValue != null && rhsValue.isTrue()) {
    ObjectType ownerType=getObjectSlot(ownerName);
    FunctionType ownerFnType=JSType.toMaybeFunctionType(ownerType);
    if (ownerFnType != null) {
      JSType ownerTypeOfThis=ownerFnType.getTypeOfThis();
      String delegateName=codingConvention.getDelegateSuperclassName();
      JSType delegateType=delegateName == null ? null : typeRegistry.getType(delegateName);
      if (delegateType != null && ownerTypeOfThis.isSubtype(delegateType)) {
        defineSlot(n,parent,getNativeType(BOOLEAN_TYPE),true);
      }
    }
  }
}
