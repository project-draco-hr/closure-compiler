{
  Preconditions.checkState(sourceName != null);
  JSDocInfo info=n.getJSDocInfo();
switch (n.getType()) {
case Token.CATCH:
    Node catchName=n.getFirstChild();
  defineSlot(catchName,n,null);
break;
case Token.VAR:
if (n.getChildCount() > 1) {
if (info != null) {
  compiler.report(JSError.make(sourceName,n,MULTIPLE_VAR_DEF));
}
for (Node name : n.children()) {
  defineName(name,n,parent,name.getJSDocInfo());
}
}
 else {
Node name=n.getFirstChild();
defineName(name,n,parent,(info != null) ? info : name.getJSDocInfo());
}
break;
case Token.FUNCTION:
int parentType=parent.getType();
Preconditions.checkState((scope.isLocal() || parentType != Token.ASSIGN) && parentType != Token.NAME,"function defined as standalone function when it is being " + "assigned");
String functionName=n.getFirstChild().getString();
FunctionType functionType=getFunctionType(functionName,n,info,null);
if (NodeUtil.isFunctionDeclaration(n)) {
defineSlot(n.getFirstChild(),n,functionType);
}
break;
case Token.ASSIGN:
Node rvalue=n.getLastChild();
Node lvalue=n.getFirstChild();
info=(info != null) ? info : rvalue.getJSDocInfo();
if (rvalue.getType() == Token.FUNCTION || info != null && info.isConstructor()) {
getFunctionType(lvalue.getQualifiedName(),rvalue,info,lvalue);
}
 else if (info != null && info.hasEnumParameterType()) {
lvalue.setJSType(getEnumType(lvalue.getQualifiedName(),n,rvalue,info.getEnumParameterType().evaluate(scope,typeRegistry)));
}
break;
default :
throw new IllegalStateException(Integer.toString(n.getType()));
}
}
