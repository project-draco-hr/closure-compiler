{
  SubclassRelationship relationship=codingConvention.getClassesDefinedByCall(n);
  if (relationship != null) {
    FunctionType superCtor=getFunctionType(scope.getVar(relationship.superclassName));
    FunctionType subCtor=getFunctionType(scope.getVar(relationship.subclassName));
    if (superCtor != null && superCtor.isConstructor() && subCtor != null && subCtor.isConstructor()) {
      ObjectType superClass=superCtor.getInstanceType();
      ObjectType subClass=subCtor.getInstanceType();
      superCtor=superClass.getConstructor();
      subCtor=subClass.getConstructor();
      if (relationship.type == SubclassType.INHERITS && !superClass.isEmptyType() && !subClass.isEmptyType()) {
        validator.expectSuperType(t,n,superClass,subClass);
      }
      if (superCtor != null && subCtor != null) {
        codingConvention.applySubclassRelationship(superCtor,subCtor,relationship.type);
      }
    }
  }
  String singletonGetterClassName=codingConvention.getSingletonGetterClassName(n);
  if (singletonGetterClassName != null) {
    ObjectType objectType=ObjectType.cast(typeRegistry.getType(singletonGetterClassName));
    if (objectType != null) {
      FunctionType functionType=objectType.getConstructor();
      if (functionType != null) {
        FunctionType getterType=typeRegistry.createFunctionType(objectType);
        codingConvention.applySingletonGetter(functionType,getterType,objectType);
      }
    }
  }
  DelegateRelationship delegateRelationship=codingConvention.getDelegateRelationship(n);
  if (delegateRelationship != null) {
    applyDelegateRelationship(delegateRelationship);
  }
  ObjectLiteralCast objectLiteralCast=codingConvention.getObjectLiteralCast(t,n);
  if (objectLiteralCast != null) {
    ObjectType type=ObjectType.cast(typeRegistry.getType(objectLiteralCast.typeName));
    if (type != null && type.getConstructor() != null) {
      setDeferredType(objectLiteralCast.objectNode,type);
    }
 else {
      compiler.report(JSError.make(t.getSourceName(),n,CONSTRUCTOR_EXPECTED));
    }
  }
}
