{
switch (n.getType()) {
case Token.CALL:
    SubclassRelationship relationship=codingConvention.getClassesDefinedByCall(n);
  if (relationship != null) {
    ObjectType superClass=ObjectType.cast(typeRegistry.getType(relationship.superclassName));
    ObjectType subClass=ObjectType.cast(typeRegistry.getType(relationship.subclassName));
    if (superClass != null && subClass != null) {
      FunctionType superCtor=superClass.getConstructor();
      FunctionType subCtor=subClass.getConstructor();
      if (relationship.type == SubclassType.INHERITS) {
        validator.expectSuperType(t,n,superClass,subClass);
      }
      if (superCtor != null && subCtor != null) {
        codingConvention.applySubclassRelationship(superCtor,subCtor,relationship.type);
      }
    }
  }
String singletonGetterClassName=codingConvention.getSingletonGetterClassName(n);
if (singletonGetterClassName != null) {
ObjectType objectType=ObjectType.cast(typeRegistry.getType(singletonGetterClassName));
if (objectType != null) {
  FunctionType functionType=objectType.getConstructor();
  if (functionType != null) {
    FunctionType getterType=typeRegistry.createFunctionType(objectType);
    codingConvention.applySingletonGetter(functionType,getterType,objectType);
  }
}
}
DelegateRelationship delegateRelationship=codingConvention.getDelegateRelationship(n);
if (delegateRelationship != null) {
applyDelegateRelationship(delegateRelationship);
}
ObjectLiteralCast objectLiteralCast=codingConvention.getObjectLiteralCast(t,n);
if (objectLiteralCast != null) {
ObjectType type=ObjectType.cast(typeRegistry.getType(objectLiteralCast.typeName));
if (type != null && type.getConstructor() != null) {
setDeferredType(objectLiteralCast.objectNode,type);
}
 else {
compiler.report(JSError.make(t.getSourceName(),n,CONSTRUCTOR_EXPECTED));
}
}
break;
case Token.FUNCTION:
if (!t.getInput().isExtern()) {
nonExternFunctions.add(n);
}
if (parent.getType() == Token.ASSIGN || parent.getType() == Token.NAME) {
return;
}
define(n,parent);
break;
case Token.ASSIGN:
define(n,parent);
checkForOldStyleTypedef(t,n);
Node firstChild=n.getFirstChild();
if (firstChild.getType() == Token.GETPROP && firstChild.isQualifiedName()) {
maybeDeclareQualifiedName(t,n.getJSDocInfo(),firstChild,n,firstChild.getNext());
}
break;
case Token.CATCH:
define(n,parent);
break;
case Token.VAR:
define(n,parent);
if (n.hasOneChild()) {
checkForOldStyleTypedef(t,n);
checkForTypedef(t,n.getFirstChild(),n.getJSDocInfo());
}
break;
case Token.GETPROP:
if (parent.getType() == Token.EXPR_RESULT && n.isQualifiedName()) {
checkForTypedef(t,n,n.getJSDocInfo());
maybeDeclareQualifiedName(t,n.getJSDocInfo(),n,parent,null);
}
break;
}
}
