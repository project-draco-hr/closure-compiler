{
  String[] order=new String[eventizes.size()];
  int white=0, gray=1, black=2;
  int last=eventizes.size() - 1;
  Map<String,Integer> color=new HashMap<>();
  Stack<String> dfsStack=new Stack<>();
  for (  Map.Entry<String,Set<String>> eventizesEntry : eventizes.entrySet()) {
    color.put(eventizesEntry.getKey(),white);
    for (    String s : eventizesEntry.getValue()) {
      color.put(s,white);
    }
  }
  int indx=0;
  for (  String s : eventizes.keySet()) {
    dfsStack.push(s);
    while (!dfsStack.isEmpty()) {
      String top=dfsStack.pop();
      if (!color.containsKey(top)) {
        continue;
      }
      if (color.get(top) == white) {
        color.put(top,gray);
        dfsStack.push(top);
        if (eventizes.containsKey(top)) {
          for (          String v : eventizes.get(top)) {
            if (color.get(v) == white) {
              dfsStack.push(v);
            }
          }
        }
      }
 else       if (color.get(top) == gray && eventizes.containsKey(top)) {
        order[last - indx]=top;
        ++indx;
        color.put(top,black);
      }
    }
  }
  for (  String s : order) {
    if (eventfulTypes.contains(typeRegistry.getType(s))) {
      for (      String v : eventizes.get(s)) {
        eventfulTypes.add((JSType)typeRegistry.getType(v));
      }
    }
  }
}
