{
  Preconditions.checkArgument(checkingPolicy != DisposalCheckingPolicy.OFF);
  googDisposableInterfaceType=this.typeRegistry.getType(DISPOSABLE_INTERFACE_TYPE_NAME);
  googEventsEventHandlerType=this.typeRegistry.getType(EVENT_HANDLER_TYPE_NAME);
  if (googEventsEventHandlerType == null || googDisposableInterfaceType == null) {
    return;
  }
  eventfulTypes=new HashSet<>();
  eventfulTypes.add(googEventsEventHandlerType);
  if (checkingPolicy == DisposalCheckingPolicy.AGGRESSIVE) {
    NodeTraversal.traverseTyped(compiler,root,new ComputeEventizeTraversal());
    computeEventful();
  }
  eventfulObjectMap=new HashMap<>();
  NodeTraversal.traverseTyped(compiler,root,new Traversal());
  for (  EventfulObjectState e : eventfulObjectMap.values()) {
    Node n=e.allocationSite;
    if (e.seen == SeenType.ALLOCATED) {
      compiler.report(JSError.make(n,EVENTFUL_OBJECT_NOT_DISPOSED));
    }
 else     if (e.seen == SeenType.ALLOCATED_LOCALLY && checkingPolicy == DisposalCheckingPolicy.AGGRESSIVE) {
      compiler.report(JSError.make(n,EVENTFUL_OBJECT_PURELY_LOCAL));
    }
  }
}
