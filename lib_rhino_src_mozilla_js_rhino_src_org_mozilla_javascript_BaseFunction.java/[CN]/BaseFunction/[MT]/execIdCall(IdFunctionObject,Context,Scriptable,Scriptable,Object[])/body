{
  if (!f.hasTag(FUNCTION_TAG)) {
    return super.execIdCall(f,cx,scope,thisObj,args);
  }
  int id=f.methodId();
switch (id) {
case Id_constructor:
    return jsConstructor(cx,scope,args);
case Id_toString:
{
    BaseFunction realf=realFunction(thisObj,f);
    int indent=ScriptRuntime.toInt32(args,0);
    return realf.decompile(indent,0);
  }
case Id_toSource:
{
  BaseFunction realf=realFunction(thisObj,f);
  int indent=0;
  int flags=Decompiler.TO_SOURCE_FLAG;
  if (args.length != 0) {
    indent=ScriptRuntime.toInt32(args[0]);
    if (indent >= 0) {
      flags=0;
    }
 else {
      indent=0;
    }
  }
  return realf.decompile(indent,flags);
}
case Id_apply:
case Id_call:
return ScriptRuntime.applyOrCall(id == Id_apply,cx,scope,thisObj,args);
case Id_bind:
if (!(thisObj instanceof Callable)) {
throw ScriptRuntime.notFunctionError(thisObj);
}
Callable targetFunction=(Callable)thisObj;
int argc=args.length;
final Scriptable boundThis;
final Object[] boundArgs;
if (argc > 0) {
boundThis=ScriptRuntime.toObject(cx,scope,args[0]);
boundArgs=new Object[argc - 1];
System.arraycopy(args,1,boundArgs,0,argc - 1);
}
 else {
boundThis=ScriptRuntime.toObject(cx,scope,Undefined.instance);
boundArgs=ScriptRuntime.emptyArgs;
}
return new BoundFunction(cx,scope,targetFunction,boundThis,boundArgs);
}
throw new IllegalArgumentException(String.valueOf(id));
}
