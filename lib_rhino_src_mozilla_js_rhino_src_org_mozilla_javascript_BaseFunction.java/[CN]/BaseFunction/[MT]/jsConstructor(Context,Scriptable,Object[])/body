{
  int arglen=args.length;
  StringBuffer sourceBuf=new StringBuffer();
  sourceBuf.append("function ");
  if (cx.getLanguageVersion() != Context.VERSION_1_2) {
    sourceBuf.append("anonymous");
  }
  sourceBuf.append('(');
  for (int i=0; i < arglen - 1; i++) {
    if (i > 0) {
      sourceBuf.append(',');
    }
    sourceBuf.append(ScriptRuntime.toString(args[i]));
  }
  sourceBuf.append(") {");
  if (arglen != 0) {
    String funBody=ScriptRuntime.toString(args[arglen - 1]);
    sourceBuf.append(funBody);
  }
  sourceBuf.append('}');
  String source=sourceBuf.toString();
  int[] linep=new int[1];
  String filename=Context.getSourcePositionFromStack(linep);
  if (filename == null) {
    filename="<eval'ed string>";
    linep[0]=1;
  }
  String sourceURI=ScriptRuntime.makeUrlForGeneratedScript(false,filename,linep[0]);
  Scriptable global=ScriptableObject.getTopLevelScope(scope);
  ErrorReporter reporter;
  reporter=DefaultErrorReporter.forEval(cx.getErrorReporter());
  Evaluator evaluator=Context.createInterpreter();
  if (evaluator == null) {
    throw new JavaScriptException("Interpreter not present",filename,linep[0]);
  }
  return cx.compileFunction(global,source,evaluator,reporter,sourceURI,1,null);
}
