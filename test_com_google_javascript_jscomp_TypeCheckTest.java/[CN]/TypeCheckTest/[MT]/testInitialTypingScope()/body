{
  Scope s=new TypedScopeCreator(compiler,CodingConventions.getDefault()).createInitialScope(new Node(Token.BLOCK));
  assertEquals(ARRAY_FUNCTION_TYPE,s.getVar("Array").getType());
  assertEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,s.getVar("Boolean").getType());
  assertEquals(DATE_FUNCTION_TYPE,s.getVar("Date").getType());
  assertEquals(ERROR_FUNCTION_TYPE,s.getVar("Error").getType());
  assertEquals(EVAL_ERROR_FUNCTION_TYPE,s.getVar("EvalError").getType());
  assertEquals(NUMBER_OBJECT_FUNCTION_TYPE,s.getVar("Number").getType());
  assertEquals(OBJECT_FUNCTION_TYPE,s.getVar("Object").getType());
  assertEquals(RANGE_ERROR_FUNCTION_TYPE,s.getVar("RangeError").getType());
  assertEquals(REFERENCE_ERROR_FUNCTION_TYPE,s.getVar("ReferenceError").getType());
  assertEquals(REGEXP_FUNCTION_TYPE,s.getVar("RegExp").getType());
  assertEquals(STRING_OBJECT_FUNCTION_TYPE,s.getVar("String").getType());
  assertEquals(SYNTAX_ERROR_FUNCTION_TYPE,s.getVar("SyntaxError").getType());
  assertEquals(TYPE_ERROR_FUNCTION_TYPE,s.getVar("TypeError").getType());
  assertEquals(URI_ERROR_FUNCTION_TYPE,s.getVar("URIError").getType());
}
