{
  compiler.init(ImmutableList.of(SourceFile.fromCode("[externs]",externs)),ImmutableList.of(SourceFile.fromCode("[testcode]",js)),compiler.getOptions());
  Node n=compiler.getInput(new InputId("[testcode]")).getAstRoot(compiler);
  Node externsNode=compiler.getInput(new InputId("[externs]")).getAstRoot(compiler);
  Node externAndJsRoot=new Node(Token.BLOCK,externsNode,n);
  externAndJsRoot.setIsSyntheticBlock(true);
  assertEquals("parsing error: " + Joiner.on(", ").join(compiler.getErrors()),0,compiler.getErrorCount());
  if (compiler.getOptions().getLanguageIn().isEs6OrHigher()) {
    List<PassFactory> passes=new ArrayList<>();
    TranspilationPasses.addEs6EarlyPasses(passes);
    TranspilationPasses.addEs6LatePasses(passes);
    PhaseOptimizer phaseopt=new PhaseOptimizer(compiler,null,null);
    phaseopt.consume(passes);
    phaseopt.process(externsNode,externAndJsRoot);
  }
  TypedScope s=makeTypeCheck().processForTesting(externsNode,n);
  return new TypeCheckResult(n,s);
}
