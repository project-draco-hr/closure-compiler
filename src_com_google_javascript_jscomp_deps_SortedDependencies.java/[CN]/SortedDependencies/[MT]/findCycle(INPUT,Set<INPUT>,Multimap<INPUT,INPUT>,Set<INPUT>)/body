{
  if (covered.add(current)) {
    List<INPUT> cycle=findCycle(findRequireInSubGraphOrFail(current,subGraph),subGraph,deps,covered);
    if (current == cycle.get(0)) {
      return cycle;
    }
 else     if (cycle.size() == 1 && cycle.get(0) != current) {
      cycle.add(current);
    }
 else     if (cycle.get(0) != current && cycle.get(0) != cycle.get(cycle.size() - 1)) {
      if (cycle.get(cycle.size() - 1) != current) {
        cycle.add(current);
      }
    }
    return cycle;
  }
 else {
    List<INPUT> cycle=new ArrayList<>();
    cycle.add(current);
    return cycle;
  }
}
