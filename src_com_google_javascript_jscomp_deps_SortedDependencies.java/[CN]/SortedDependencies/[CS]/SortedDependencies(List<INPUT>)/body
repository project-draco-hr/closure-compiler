{
  this.inputs=new ArrayList<>(inputs);
  noProvides=new ArrayList<>();
  for (  INPUT input : inputs) {
    Collection<String> currentProvides=input.getProvides();
    if (currentProvides.isEmpty()) {
      noProvides.add(input);
    }
    for (    String provide : currentProvides) {
      provideMap.put(provide,input);
    }
  }
  final Multimap<INPUT,INPUT> deps=HashMultimap.create();
  for (  INPUT input : inputs) {
    for (    String req : input.getRequires()) {
      INPUT dep=provideMap.get(req);
      if (dep != null && dep != input) {
        deps.put(input,dep);
      }
    }
  }
  sortedList=topologicalStableSort(inputs,deps);
  if (sortedList.size() < inputs.size()) {
    List<INPUT> subGraph=new ArrayList<>(inputs);
    subGraph.removeAll(sortedList);
    throw new CircularDependencyException(cycleToString(findCycle(subGraph,deps)));
  }
}
