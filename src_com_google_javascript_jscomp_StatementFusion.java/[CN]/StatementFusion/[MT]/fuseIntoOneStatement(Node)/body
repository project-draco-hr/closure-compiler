{
  Node cur=block.removeFirstChild();
  Node commaTree=cur.removeFirstChild();
  while (block.hasMoreThanOneChild()) {
    Node next=block.removeFirstChild().removeFirstChild();
    commaTree=fuseExpressionIntoExpression(commaTree,next);
  }
  Preconditions.checkState(block.hasOneChild());
  Node last=block.getLastChild();
switch (last.getType()) {
case Token.IF:
case Token.RETURN:
case Token.THROW:
case Token.SWITCH:
case Token.EXPR_RESULT:
    fuseExpresssonIntoFirstChild(commaTree,last);
  return;
case Token.FOR:
if (NodeUtil.isForIn(last)) {
  fuseExpresssonIntoSecondChild(commaTree,last);
}
return;
default :
throw new IllegalStateException("Statement fusion missing.");
}
}
