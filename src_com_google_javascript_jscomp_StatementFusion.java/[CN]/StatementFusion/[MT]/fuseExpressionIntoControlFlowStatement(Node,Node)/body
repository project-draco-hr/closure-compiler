{
  Preconditions.checkArgument(before.isExprResult(),"before must be expression result");
switch (control.getToken()) {
case IF:
case RETURN:
case THROW:
case SWITCH:
case EXPR_RESULT:
    before.getParent().removeChild(before);
  fuseExpressionIntoFirstChild(before.removeFirstChild(),control);
return;
case FOR:
before.getParent().removeChild(before);
if (NodeUtil.isForIn(control)) {
fuseExpressionIntoSecondChild(before.removeFirstChild(),control);
}
 else {
fuseExpressionIntoFirstChild(before.removeFirstChild(),control);
}
return;
case LABEL:
fuseExpressionIntoControlFlowStatement(before,control.getLastChild());
return;
case BLOCK:
fuseExpressionIntoControlFlowStatement(before,control.getFirstChild());
return;
default :
throw new IllegalStateException("Statement fusion missing.");
}
}
